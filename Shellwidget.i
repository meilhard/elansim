#line 1 "h:\\c_projekte\\elansim\\shellwidget.cpp"

#line 1 "h:\\c_projekte\\elansim\\login.h"
 










#line 1 "c:\\qt\\include\\qvariant.h"









































#line 1 "c:\\qt\\include\\qstring.h"










































#line 1 "c:\\qt\\include\\qcstring.h"










































#line 1 "c:\\qt\\include\\qarray.h"









































#line 1 "c:\\qt\\include\\qgarray.h"









































#line 1 "c:\\qt\\include\\qshared.h"









































#line 1 "c:\\qt\\include\\qglobal.h"











































































#line 77 "c:\\qt\\include\\qglobal.h"

#line 79 "c:\\qt\\include\\qglobal.h"





#line 85 "c:\\qt\\include\\qglobal.h"



















































#line 137 "c:\\qt\\include\\qglobal.h"











#line 149 "c:\\qt\\include\\qglobal.h"



























#line 177 "c:\\qt\\include\\qglobal.h"

#line 179 "c:\\qt\\include\\qglobal.h"


#line 182 "c:\\qt\\include\\qglobal.h"

























































































#line 272 "c:\\qt\\include\\qglobal.h"









#line 282 "c:\\qt\\include\\qglobal.h"




#line 287 "c:\\qt\\include\\qglobal.h"
















#line 304 "c:\\qt\\include\\qglobal.h"


#line 307 "c:\\qt\\include\\qglobal.h"


#line 310 "c:\\qt\\include\\qglobal.h"












#line 323 "c:\\qt\\include\\qglobal.h"




#line 328 "c:\\qt\\include\\qglobal.h"


















#line 347 "c:\\qt\\include\\qglobal.h"

#line 349 "c:\\qt\\include\\qglobal.h"



#line 353 "c:\\qt\\include\\qglobal.h"



#line 357 "c:\\qt\\include\\qglobal.h"








#line 366 "c:\\qt\\include\\qglobal.h"

typedef unsigned char	uchar;
typedef unsigned short	ushort;
typedef unsigned	uint;
typedef unsigned long	ulong;
typedef char	       *pchar;
typedef uchar	       *puchar;
typedef const char     *pcchar;







const bool FALSE = 0;
const bool TRUE = !0;
#line 384 "c:\\qt\\include\\qglobal.h"









#line 394 "c:\\qt\\include\\qglobal.h"











inline int qRound( double d )
{
    return d > 0.0 ? int(d+0.5) : int(d-0.5);
}









typedef signed char	INT8;			
typedef unsigned char	UINT8;			
typedef short		INT16;			
typedef unsigned short	UINT16;			
typedef int		INT32;			
typedef unsigned int	UINT32;			
#line 425 "c:\\qt\\include\\qglobal.h"

typedef signed char	Q_INT8;			
typedef unsigned char	Q_UINT8;		
typedef short		Q_INT16;		
typedef unsigned short	Q_UINT16;		
typedef int		Q_INT32;		
typedef unsigned int	Q_UINT32;		
typedef long		Q_INT64;		
typedef unsigned long	Q_UINT64;		





class QDataStream;




extern bool qt_winunicode;
#line 446 "c:\\qt\\include\\qglobal.h"


#line 1 "c:\\qt\\include\\qfeatures.h"



















































#line 53 "c:\\qt\\include\\qfeatures.h"
#line 1 "c:\\qt\\include\\qconfig.h"


#line 4 "c:\\qt\\include\\qconfig.h"






#line 54 "c:\\qt\\include\\qfeatures.h"
#line 55 "c:\\qt\\include\\qfeatures.h"













#line 69 "c:\\qt\\include\\qfeatures.h"







#line 77 "c:\\qt\\include\\qfeatures.h"






























#line 108 "c:\\qt\\include\\qfeatures.h"
























#line 133 "c:\\qt\\include\\qfeatures.h"







































#line 173 "c:\\qt\\include\\qfeatures.h"
















#line 190 "c:\\qt\\include\\qfeatures.h"





#line 196 "c:\\qt\\include\\qfeatures.h"








#line 205 "c:\\qt\\include\\qfeatures.h"












#line 218 "c:\\qt\\include\\qfeatures.h"






#line 225 "c:\\qt\\include\\qfeatures.h"






#line 232 "c:\\qt\\include\\qfeatures.h"





#line 238 "c:\\qt\\include\\qfeatures.h"






#line 245 "c:\\qt\\include\\qfeatures.h"






#line 252 "c:\\qt\\include\\qfeatures.h"












#line 265 "c:\\qt\\include\\qfeatures.h"















#line 281 "c:\\qt\\include\\qfeatures.h"





#line 287 "c:\\qt\\include\\qfeatures.h"









#line 297 "c:\\qt\\include\\qfeatures.h"














#line 312 "c:\\qt\\include\\qfeatures.h"






#line 319 "c:\\qt\\include\\qfeatures.h"











#line 331 "c:\\qt\\include\\qfeatures.h"




















                                        












#line 365 "c:\\qt\\include\\qfeatures.h"





















































#line 419 "c:\\qt\\include\\qfeatures.h"























#line 443 "c:\\qt\\include\\qfeatures.h"






#line 450 "c:\\qt\\include\\qfeatures.h"






#line 457 "c:\\qt\\include\\qfeatures.h"







#line 465 "c:\\qt\\include\\qfeatures.h"



















#line 485 "c:\\qt\\include\\qfeatures.h"






#line 492 "c:\\qt\\include\\qfeatures.h"




















#line 513 "c:\\qt\\include\\qfeatures.h"






#line 520 "c:\\qt\\include\\qfeatures.h"













#line 534 "c:\\qt\\include\\qfeatures.h"















































#line 582 "c:\\qt\\include\\qfeatures.h"





#line 588 "c:\\qt\\include\\qfeatures.h"





















#line 610 "c:\\qt\\include\\qfeatures.h"





#line 616 "c:\\qt\\include\\qfeatures.h"





#line 622 "c:\\qt\\include\\qfeatures.h"





#line 628 "c:\\qt\\include\\qfeatures.h"











#line 640 "c:\\qt\\include\\qfeatures.h"





#line 646 "c:\\qt\\include\\qfeatures.h"





#line 652 "c:\\qt\\include\\qfeatures.h"





#line 658 "c:\\qt\\include\\qfeatures.h"









#line 668 "c:\\qt\\include\\qfeatures.h"





#line 674 "c:\\qt\\include\\qfeatures.h"



























#line 702 "c:\\qt\\include\\qfeatures.h"







#line 710 "c:\\qt\\include\\qfeatures.h"









#line 720 "c:\\qt\\include\\qfeatures.h"






#line 727 "c:\\qt\\include\\qfeatures.h"





#line 733 "c:\\qt\\include\\qfeatures.h"


















#line 752 "c:\\qt\\include\\qfeatures.h"





#line 758 "c:\\qt\\include\\qfeatures.h"





#line 764 "c:\\qt\\include\\qfeatures.h"









#line 774 "c:\\qt\\include\\qfeatures.h"












#line 787 "c:\\qt\\include\\qfeatures.h"






#line 794 "c:\\qt\\include\\qfeatures.h"










#line 805 "c:\\qt\\include\\qfeatures.h"










#line 816 "c:\\qt\\include\\qfeatures.h"







#line 824 "c:\\qt\\include\\qfeatures.h"








































#line 865 "c:\\qt\\include\\qfeatures.h"






#line 872 "c:\\qt\\include\\qfeatures.h"






#line 879 "c:\\qt\\include\\qfeatures.h"






#line 886 "c:\\qt\\include\\qfeatures.h"










#line 897 "c:\\qt\\include\\qfeatures.h"





#line 903 "c:\\qt\\include\\qfeatures.h"






#line 910 "c:\\qt\\include\\qfeatures.h"





#line 916 "c:\\qt\\include\\qfeatures.h"





#line 922 "c:\\qt\\include\\qfeatures.h"






#line 929 "c:\\qt\\include\\qfeatures.h"






#line 936 "c:\\qt\\include\\qfeatures.h"






#line 943 "c:\\qt\\include\\qfeatures.h"






#line 950 "c:\\qt\\include\\qfeatures.h"






#line 957 "c:\\qt\\include\\qfeatures.h"





#line 963 "c:\\qt\\include\\qfeatures.h"






#line 970 "c:\\qt\\include\\qfeatures.h"

#line 972 "c:\\qt\\include\\qfeatures.h"
#line 449 "c:\\qt\\include\\qglobal.h"
#line 450 "c:\\qt\\include\\qglobal.h"









#line 460 "c:\\qt\\include\\qglobal.h"






#line 467 "c:\\qt\\include\\qglobal.h"
#line 468 "c:\\qt\\include\\qglobal.h"




#line 473 "c:\\qt\\include\\qglobal.h"



#line 477 "c:\\qt\\include\\qglobal.h"









__declspec(dllimport) const char *qVersion();
__declspec(dllimport) bool qSysInfo( int *wordSize, bool *bigEndian );











#line 500 "c:\\qt\\include\\qglobal.h"



#line 504 "c:\\qt\\include\\qglobal.h"









#line 514 "c:\\qt\\include\\qglobal.h"


#pragma warning(disable: 4244)
#pragma warning(disable: 4275)
#pragma warning(disable: 4514)
#pragma warning(disable: 4800)
#pragma warning(disable: 4097)
#pragma warning(disable: 4706)










#line 533 "c:\\qt\\include\\qglobal.h"
#line 534 "c:\\qt\\include\\qglobal.h"







#line 542 "c:\\qt\\include\\qglobal.h"








__declspec(dllimport) void qDebug( const char *, ... )	


#line 554 "c:\\qt\\include\\qglobal.h"
;

__declspec(dllimport) void qWarning( const char *, ... )	


#line 560 "c:\\qt\\include\\qglobal.h"
;

__declspec(dllimport) void qFatal( const char *, ... )	


#line 566 "c:\\qt\\include\\qglobal.h"
;







__declspec(dllimport) void debug( const char *, ... )	


#line 578 "c:\\qt\\include\\qglobal.h"
;

__declspec(dllimport) void warning( const char *, ... )	


#line 584 "c:\\qt\\include\\qglobal.h"
;

__declspec(dllimport) void fatal( const char *, ... )	


#line 590 "c:\\qt\\include\\qglobal.h"
;


#line 594 "c:\\qt\\include\\qglobal.h"






#line 601 "c:\\qt\\include\\qglobal.h"


#line 604 "c:\\qt\\include\\qglobal.h"


#line 607 "c:\\qt\\include\\qglobal.h"
#line 608 "c:\\qt\\include\\qglobal.h"

__declspec(dllimport) bool qt_check_pointer( bool c, const char *, int );





#line 616 "c:\\qt\\include\\qglobal.h"

enum QtMsgType { QtDebugMsg, QtWarningMsg, QtFatalMsg };

typedef void (*msg_handler)(QtMsgType, const char *);
__declspec(dllimport) msg_handler qInstallMsgHandler( msg_handler );


__declspec(dllimport) void qSuppressObsoleteWarnings( bool = TRUE );



__declspec(dllimport) void qObsolete( const char *obj, const char *oldfunc,
			 const char *newfunc );
__declspec(dllimport) void qObsolete( const char *obj, const char *oldfunc );
__declspec(dllimport) void qObsolete( const char *message );
#line 632 "c:\\qt\\include\\qglobal.h"

#line 634 "c:\\qt\\include\\qglobal.h"

#line 43 "c:\\qt\\include\\qshared.h"
#line 44 "c:\\qt\\include\\qshared.h"


struct QShared
{
    QShared()		{ count = 1; }
    void ref()		{ count++; }
    bool deref()	{ return !--count; }
    uint count;
};


#line 56 "c:\\qt\\include\\qshared.h"
#line 43 "c:\\qt\\include\\qgarray.h"
#line 44 "c:\\qt\\include\\qgarray.h"


class __declspec(dllimport) QGArray					
{
friend class QBuffer;
public:
    
    struct array_data : public QShared {	
	array_data()	{ data=0; len=0; }
	char *data;				
	uint  len;
    };
    QGArray();
protected:
    QGArray( int, int );			
    QGArray( int size );			
    QGArray( const QGArray &a );		
    virtual ~QGArray();

    QGArray    &operator=( const QGArray &a ) { return assign( a ); }

    virtual void detach()	{ duplicate(*this); }

    char       *data()	 const	{ return shd->data; }
    uint	nrefs()	 const	{ return shd->count; }
    uint	size()	 const	{ return shd->len; }
    bool	isEqual( const QGArray &a ) const;

    bool	resize( uint newsize );

    bool	fill( const char *d, int len, uint sz );

    QGArray    &assign( const QGArray &a );
    QGArray    &assign( const char *d, uint len );
    QGArray    &duplicate( const QGArray &a );
    QGArray    &duplicate( const char *d, uint len );
    void	store( const char *d, uint len );

    array_data *sharedBlock()	const		{ return shd; }
    void	setSharedBlock( array_data *p ) { shd=(array_data*)p; }

    QGArray    &setRawData( const char *d, uint len );
    void	resetRawData( const char *d, uint len );

    int		find( const char *d, uint index, uint sz ) const;
    int		contains( const char *d, uint sz ) const;
    
    void	sort( uint sz );
    int		bsearch( const char *d, uint sz ) const;

    char       *at( uint index ) const;

    bool	setExpand( uint index, const char *d, uint sz );

protected:
    virtual array_data *newData();
    virtual void deleteData( array_data *p );

private:
    static void msg_index( uint );
    array_data *shd;
};


inline char *QGArray::at( uint index ) const
{

    if ( index >= size() ) {
	msg_index( index );
	index = 0;
    }
#line 116 "c:\\qt\\include\\qgarray.h"
    return &shd->data[index];
}


#line 121 "c:\\qt\\include\\qgarray.h"
#line 43 "c:\\qt\\include\\qarray.h"
#line 44 "c:\\qt\\include\\qarray.h"


template<class type> class __declspec(dllimport) QArray : public QGArray
{
public:
    typedef type* Iterator;
    typedef const type* ConstIterator;
    typedef type ValueType;

protected:
    QArray( int, int ) : QGArray( 0, 0 ) {}

public:
    QArray() {}
    QArray( int size ) : QGArray(size*sizeof(type)) {}
    QArray( const QArray<type> &a ) : QGArray(a) {}
   ~QArray() {}
    QArray<type> &operator=(const QArray<type> &a)
				{ return (QArray<type>&)QGArray::assign(a); }
    type *data()    const	{ return (type *)QGArray::data(); }
    uint  nrefs()   const	{ return QGArray::nrefs(); }
    uint  size()    const	{ return QGArray::size()/sizeof(type); }
    uint  count()   const 	{ return size(); }
    bool  isEmpty() const	{ return QGArray::size() == 0; }
    bool  isNull()  const	{ return QGArray::data() == 0; }
    bool  resize( uint size )	{ return QGArray::resize(size*sizeof(type)); }
    bool  truncate( uint pos )	{ return QGArray::resize(pos*sizeof(type)); }
    bool  fill( const type &d, int size = -1 )
	{ return QGArray::fill((char*)&d,size,sizeof(type) ); }
    void  detach()		{ QGArray::detach(); }
    QArray<type>   copy() const
	{ QArray<type> tmp; return tmp.duplicate(*this); }
    QArray<type>& assign( const QArray<type>& a )
	{ return (QArray<type>&)QGArray::assign(a); }
    QArray<type>& assign( const type *a, uint n )
	{ return (QArray<type>&)QGArray::assign((char*)a,n*sizeof(type)); }
    QArray<type>& duplicate( const QArray<type>& a )
	{ return (QArray<type>&)QGArray::duplicate(a); }
    QArray<type>& duplicate( const type *a, uint n )
	{ return (QArray<type>&)QGArray::duplicate((char*)a,n*sizeof(type)); }
    QArray<type>& setRawData( const type *a, uint n )
	{ return (QArray<type>&)QGArray::setRawData((char*)a,
						     n*sizeof(type)); }
    void resetRawData( const type *a, uint n )
	{ QGArray::resetRawData((char*)a,n*sizeof(type)); }
    int	 find( const type &d, uint i=0 ) const
	{ return QGArray::find((char*)&d,i,sizeof(type)); }
    int	 contains( const type &d ) const
	{ return QGArray::contains((char*)&d,sizeof(type)); }
    void sort() { QGArray::sort(sizeof(type)); }
    int  bsearch( const type &d ) const
	{ return QGArray::bsearch((const char*)&d,sizeof(type)); }
    type& operator[]( int i ) const
	{ return (type &)(*(type *)QGArray::at(i*sizeof(type))); }
    type& at( uint i ) const
	{ return (type &)(*(type *)QGArray::at(i*sizeof(type))); }
	 operator const type*() const { return (const type *)QGArray::data(); }
    bool operator==( const QArray<type> &a ) const { return isEqual(a); }
    bool operator!=( const QArray<type> &a ) const { return !isEqual(a); }
    Iterator begin() { return data(); }
    Iterator end() { return data() + size(); }
    ConstIterator begin() const { return data(); }
    ConstIterator end() const { return data() + size(); }
};


#line 111 "c:\\qt\\include\\qarray.h"
#line 44 "c:\\qt\\include\\qcstring.h"
#line 45 "c:\\qt\\include\\qcstring.h"



#line 49 "c:\\qt\\include\\qcstring.h"

#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\string.h"















#pragma once
#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\string.h"






#line 25 "c:\\programme\\microsoft visual studio\\vc98\\include\\string.h"



extern "C" {
#line 30 "c:\\programme\\microsoft visual studio\\vc98\\include\\string.h"










#line 41 "c:\\programme\\microsoft visual studio\\vc98\\include\\string.h"
#line 42 "c:\\programme\\microsoft visual studio\\vc98\\include\\string.h"





#line 48 "c:\\programme\\microsoft visual studio\\vc98\\include\\string.h"








#line 57 "c:\\programme\\microsoft visual studio\\vc98\\include\\string.h"
#line 58 "c:\\programme\\microsoft visual studio\\vc98\\include\\string.h"



typedef unsigned int size_t;

#line 64 "c:\\programme\\microsoft visual studio\\vc98\\include\\string.h"




typedef unsigned short wchar_t;

#line 71 "c:\\programme\\microsoft visual studio\\vc98\\include\\string.h"
#line 72 "c:\\programme\\microsoft visual studio\\vc98\\include\\string.h"




#line 77 "c:\\programme\\microsoft visual studio\\vc98\\include\\string.h"








#line 86 "c:\\programme\\microsoft visual studio\\vc98\\include\\string.h"
#line 87 "c:\\programme\\microsoft visual studio\\vc98\\include\\string.h"














        void *  __cdecl memcpy(void *, const void *, size_t);
        int     __cdecl memcmp(const void *, const void *, size_t);
        void *  __cdecl memset(void *, int, size_t);
        char *  __cdecl _strset(char *, int);
        char *  __cdecl strcpy(char *, const char *);
        char *  __cdecl strcat(char *, const char *);
        int     __cdecl strcmp(const char *, const char *);
        size_t  __cdecl strlen(const char *);
#line 110 "c:\\programme\\microsoft visual studio\\vc98\\include\\string.h"
__declspec(dllimport) void *  __cdecl _memccpy(void *, const void *, int, unsigned int);
__declspec(dllimport) void *  __cdecl memchr(const void *, int, size_t);
__declspec(dllimport) int     __cdecl _memicmp(const void *, const void *, unsigned int);





__declspec(dllimport) void *  __cdecl memmove(void *, const void *, size_t);
#line 120 "c:\\programme\\microsoft visual studio\\vc98\\include\\string.h"


__declspec(dllimport) char *  __cdecl strchr(const char *, int);
__declspec(dllimport) int     __cdecl _strcmpi(const char *, const char *);
__declspec(dllimport) int     __cdecl _stricmp(const char *, const char *);
__declspec(dllimport) int     __cdecl strcoll(const char *, const char *);
__declspec(dllimport) int     __cdecl _stricoll(const char *, const char *);
__declspec(dllimport) int     __cdecl _strncoll(const char *, const char *, size_t);
__declspec(dllimport) int     __cdecl _strnicoll(const char *, const char *, size_t);
__declspec(dllimport) size_t  __cdecl strcspn(const char *, const char *);
__declspec(dllimport) char *  __cdecl _strdup(const char *);
__declspec(dllimport) char *  __cdecl _strerror(const char *);
__declspec(dllimport) char *  __cdecl strerror(int);
__declspec(dllimport) char *  __cdecl _strlwr(char *);
__declspec(dllimport) char *  __cdecl strncat(char *, const char *, size_t);
__declspec(dllimport) int     __cdecl strncmp(const char *, const char *, size_t);
__declspec(dllimport) int     __cdecl _strnicmp(const char *, const char *, size_t);
__declspec(dllimport) char *  __cdecl strncpy(char *, const char *, size_t);
__declspec(dllimport) char *  __cdecl _strnset(char *, int, size_t);
__declspec(dllimport) char *  __cdecl strpbrk(const char *, const char *);
__declspec(dllimport) char *  __cdecl strrchr(const char *, int);
__declspec(dllimport) char *  __cdecl _strrev(char *);
__declspec(dllimport) size_t  __cdecl strspn(const char *, const char *);
__declspec(dllimport) char *  __cdecl strstr(const char *, const char *);
__declspec(dllimport) char *  __cdecl strtok(char *, const char *);
__declspec(dllimport) char *  __cdecl _strupr(char *);
__declspec(dllimport) size_t  __cdecl strxfrm (char *, const char *, size_t);














__declspec(dllimport) void * __cdecl memccpy(void *, const void *, int, unsigned int);
__declspec(dllimport) int __cdecl memicmp(const void *, const void *, unsigned int);
__declspec(dllimport) int __cdecl strcmpi(const char *, const char *);
__declspec(dllimport) int __cdecl stricmp(const char *, const char *);
__declspec(dllimport) char * __cdecl strdup(const char *);
__declspec(dllimport) char * __cdecl strlwr(char *);
__declspec(dllimport) int __cdecl strnicmp(const char *, const char *, size_t);
__declspec(dllimport) char * __cdecl strnset(char *, int, size_t);
__declspec(dllimport) char * __cdecl strrev(char *);
        char * __cdecl strset(char *, int);
__declspec(dllimport) char * __cdecl strupr(char *);

#line 174 "c:\\programme\\microsoft visual studio\\vc98\\include\\string.h"







__declspec(dllimport) wchar_t * __cdecl wcscat(wchar_t *, const wchar_t *);
__declspec(dllimport) wchar_t * __cdecl wcschr(const wchar_t *, wchar_t);
__declspec(dllimport) int __cdecl wcscmp(const wchar_t *, const wchar_t *);
__declspec(dllimport) wchar_t * __cdecl wcscpy(wchar_t *, const wchar_t *);
__declspec(dllimport) size_t __cdecl wcscspn(const wchar_t *, const wchar_t *);
__declspec(dllimport) size_t __cdecl wcslen(const wchar_t *);
__declspec(dllimport) wchar_t * __cdecl wcsncat(wchar_t *, const wchar_t *, size_t);
__declspec(dllimport) int __cdecl wcsncmp(const wchar_t *, const wchar_t *, size_t);
__declspec(dllimport) wchar_t * __cdecl wcsncpy(wchar_t *, const wchar_t *, size_t);
__declspec(dllimport) wchar_t * __cdecl wcspbrk(const wchar_t *, const wchar_t *);
__declspec(dllimport) wchar_t * __cdecl wcsrchr(const wchar_t *, wchar_t);
__declspec(dllimport) size_t __cdecl wcsspn(const wchar_t *, const wchar_t *);
__declspec(dllimport) wchar_t * __cdecl wcsstr(const wchar_t *, const wchar_t *);
__declspec(dllimport) wchar_t * __cdecl wcstok(wchar_t *, const wchar_t *);

__declspec(dllimport) wchar_t * __cdecl _wcsdup(const wchar_t *);
__declspec(dllimport) int __cdecl _wcsicmp(const wchar_t *, const wchar_t *);
__declspec(dllimport) int __cdecl _wcsnicmp(const wchar_t *, const wchar_t *, size_t);
__declspec(dllimport) wchar_t * __cdecl _wcsnset(wchar_t *, wchar_t, size_t);
__declspec(dllimport) wchar_t * __cdecl _wcsrev(wchar_t *);
__declspec(dllimport) wchar_t * __cdecl _wcsset(wchar_t *, wchar_t);

__declspec(dllimport) wchar_t * __cdecl _wcslwr(wchar_t *);
__declspec(dllimport) wchar_t * __cdecl _wcsupr(wchar_t *);
__declspec(dllimport) size_t __cdecl wcsxfrm(wchar_t *, const wchar_t *, size_t);
__declspec(dllimport) int __cdecl wcscoll(const wchar_t *, const wchar_t *);
__declspec(dllimport) int __cdecl _wcsicoll(const wchar_t *, const wchar_t *);
__declspec(dllimport) int __cdecl _wcsncoll(const wchar_t *, const wchar_t *, size_t);
__declspec(dllimport) int __cdecl _wcsnicoll(const wchar_t *, const wchar_t *, size_t);







__declspec(dllimport) wchar_t * __cdecl wcsdup(const wchar_t *);
__declspec(dllimport) int __cdecl wcsicmp(const wchar_t *, const wchar_t *);
__declspec(dllimport) int __cdecl wcsnicmp(const wchar_t *, const wchar_t *, size_t);
__declspec(dllimport) wchar_t * __cdecl wcsnset(wchar_t *, wchar_t, size_t);
__declspec(dllimport) wchar_t * __cdecl wcsrev(wchar_t *);
__declspec(dllimport) wchar_t * __cdecl wcsset(wchar_t *, wchar_t);
__declspec(dllimport) wchar_t * __cdecl wcslwr(wchar_t *);
__declspec(dllimport) wchar_t * __cdecl wcsupr(wchar_t *);
__declspec(dllimport) int __cdecl wcsicoll(const wchar_t *, const wchar_t *);

#line 228 "c:\\programme\\microsoft visual studio\\vc98\\include\\string.h"


#line 231 "c:\\programme\\microsoft visual studio\\vc98\\include\\string.h"

#line 233 "c:\\programme\\microsoft visual studio\\vc98\\include\\string.h"


}
#line 237 "c:\\programme\\microsoft visual studio\\vc98\\include\\string.h"

#line 239 "c:\\programme\\microsoft visual studio\\vc98\\include\\string.h"
#line 51 "c:\\qt\\include\\qcstring.h"




















#line 72 "c:\\qt\\include\\qcstring.h"






__declspec(dllimport) void *qmemmove( void *dst, const void *src, uint len );



#line 83 "c:\\qt\\include\\qcstring.h"

__declspec(dllimport) char *qstrdup( const char * );

__declspec(dllimport) inline uint cstrlen( const char *str )
{ return strlen(str); }

__declspec(dllimport) inline uint qstrlen( const char *str )
{ return str ? strlen(str) : 0; }

__declspec(dllimport) inline char *cstrcpy( char *dst, const char *src )
{ return strcpy(dst,src); }

__declspec(dllimport) inline char *qstrcpy( char *dst, const char *src )
{ return src ? strcpy(dst, src) : 0; }

__declspec(dllimport) char *qstrncpy( char *dst, const char *src, uint len );

__declspec(dllimport) inline int cstrcmp( const char *str1, const char *str2 )
{ return strcmp(str1,str2); }

__declspec(dllimport) inline int qstrcmp( const char *str1, const char *str2 )
{ return (str1 && str2) ? strcmp(str1,str2) : (int)((long)str2 - (long)str1); }

__declspec(dllimport) inline int cstrncmp( const char *str1, const char *str2, uint len )
{ return strncmp(str1,str2,len); }

__declspec(dllimport) inline int qstrncmp( const char *str1, const char *str2, uint len )
{ return (str1 && str2) ? strncmp(str1,str2,len) :
			  (int)((long)str2 - (long)str1); }

__declspec(dllimport) int qstricmp( const char *, const char * );

__declspec(dllimport) int qstrnicmp( const char *, const char *, uint len );


























#line 143 "c:\\qt\\include\\qcstring.h"




__declspec(dllimport) Q_UINT16 qChecksum( const char *s, uint len );






template class __declspec(dllimport) QArray<char>;
#line 156 "c:\\qt\\include\\qcstring.h"
typedef QArray<char> QByteArray;






__declspec(dllimport) QDataStream &operator<<( QDataStream &, const QByteArray & );
__declspec(dllimport) QDataStream &operator>>( QDataStream &, QByteArray & );
#line 166 "c:\\qt\\include\\qcstring.h"







class QRegExp;

class __declspec(dllimport) QCString : public QByteArray	
{
public:
    QCString() {}				
    QCString( int size );			
    QCString( const QCString &s ) : QByteArray( s ) {}
    QCString( const char *str );		
    QCString( const char *str, uint maxlen );	

    QCString    &operator=( const QCString &s );
    QCString    &operator=( const char *str );	

    bool	isNull()	const;
    bool	isEmpty()	const;
    uint	length()	const;
    bool	resize( uint newlen );
    bool	truncate( uint pos );
    bool	fill( char c, int len = -1 );

    QCString	copy()	const;

    QCString    &sprintf( const char *format, ... );

    int		find( char c, int index=0, bool cs=TRUE ) const;
    int		find( const char *str, int index=0, bool cs=TRUE ) const;
    int		find( const QRegExp &, int index=0 ) const;
    int		findRev( char c, int index=-1, bool cs=TRUE) const;
    int		findRev( const char *str, int index=-1, bool cs=TRUE) const;
    int		findRev( const QRegExp &, int index=-1 ) const;
    int		contains( char c, bool cs=TRUE ) const;
    int		contains( const char *str, bool cs=TRUE ) const;
    int		contains( const QRegExp & ) const;

    QCString	left( uint len )  const;
    QCString	right( uint len ) const;
    QCString	mid( uint index, uint len=0xffffffff) const;

    QCString	leftJustify( uint width, char fill=' ', bool trunc=FALSE)const;
    QCString	rightJustify( uint width, char fill=' ',bool trunc=FALSE)const;

    QCString	lower() const;
    QCString	upper() const;

    QCString	stripWhiteSpace()	const;
    QCString	simplifyWhiteSpace()	const;

    QCString    &insert( uint index, const char * );
    QCString    &insert( uint index, char );
    QCString    &append( const char * );
    QCString    &prepend( const char * );
    QCString    &remove( uint index, uint len );
    QCString    &replace( uint index, uint len, const char * );
    QCString    &replace( const QRegExp &, const char * );

    short	toShort( bool *ok=0 )	const;
    ushort	toUShort( bool *ok=0 )	const;
    int		toInt( bool *ok=0 )	const;
    uint	toUInt( bool *ok=0 )	const;
    long	toLong( bool *ok=0 )	const;
    ulong	toULong( bool *ok=0 )	const;
    float	toFloat( bool *ok=0 )	const;
    double	toDouble( bool *ok=0 )	const;

    QCString    &setStr( const char *s );
    QCString    &setNum( short );
    QCString    &setNum( ushort );
    QCString    &setNum( int );
    QCString    &setNum( uint );
    QCString    &setNum( long );
    QCString    &setNum( ulong );
    QCString    &setNum( float, char f='g', int prec=6 );
    QCString    &setNum( double, char f='g', int prec=6 );

    bool	setExpand( uint index, char c );

		operator const char *() const;
    QCString    &operator+=( const char *str );
    QCString    &operator+=( char c );
};






__declspec(dllimport) QDataStream &operator<<( QDataStream &, const QCString & );
__declspec(dllimport) QDataStream &operator>>( QDataStream &, QCString & );
#line 263 "c:\\qt\\include\\qcstring.h"





inline QCString &QCString::operator=( const QCString &s )
{ return (QCString&)assign( s ); }

inline QCString &QCString::operator=( const char *str )
{ return (QCString&)duplicate( str, qstrlen(str)+1 ); }

inline bool QCString::isNull() const
{ return data() == 0; }

inline bool QCString::isEmpty() const
{ return data() == 0 || *data() == '\0'; }

inline uint QCString::length() const
{ return qstrlen( data() ); }

inline bool QCString::truncate( uint pos )
{ return resize(pos+1); }

inline QCString QCString::copy() const
{ return QCString( data() ); }

inline QCString &QCString::prepend( const char *s )
{ return insert(0,s); }

inline QCString &QCString::append( const char *s )
{ return operator+=(s); }

inline QCString &QCString::setNum( short n )
{ return setNum((long)n); }

inline QCString &QCString::setNum( ushort n )
{ return setNum((ulong)n); }

inline QCString &QCString::setNum( int n )
{ return setNum((long)n); }

inline QCString &QCString::setNum( uint n )
{ return setNum((ulong)n); }

inline QCString &QCString::setNum( float n, char f, int prec )
{ return setNum((double)n,f,prec); }

inline QCString::operator const char *() const
{ return (const char *)data(); }






__declspec(dllimport) inline bool operator==( const QCString &s1, const QCString &s2 )
{ return qstrcmp(s1.data(),s2.data()) == 0; }

__declspec(dllimport) inline bool operator==( const QCString &s1, const char *s2 )
{ return qstrcmp(s1.data(),s2) == 0; }

__declspec(dllimport) inline bool operator==( const char *s1, const QCString &s2 )
{ return qstrcmp(s1,s2.data()) == 0; }

__declspec(dllimport) inline bool operator!=( const QCString &s1, const QCString &s2 )
{ return qstrcmp(s1.data(),s2.data()) != 0; }

__declspec(dllimport) inline bool operator!=( const QCString &s1, const char *s2 )
{ return qstrcmp(s1.data(),s2) != 0; }

__declspec(dllimport) inline bool operator!=( const char *s1, const QCString &s2 )
{ return qstrcmp(s1,s2.data()) != 0; }

__declspec(dllimport) inline bool operator<( const QCString &s1, const QCString& s2 )
{ return qstrcmp(s1.data(),s2.data()) < 0; }

__declspec(dllimport) inline bool operator<( const QCString &s1, const char *s2 )
{ return qstrcmp(s1.data(),s2) < 0; }

__declspec(dllimport) inline bool operator<( const char *s1, const QCString &s2 )
{ return qstrcmp(s1,s2.data()) < 0; }

__declspec(dllimport) inline bool operator<=( const QCString &s1, const char *s2 )
{ return qstrcmp(s1.data(),s2) <= 0; }

__declspec(dllimport) inline bool operator<=( const char *s1, const QCString &s2 )
{ return qstrcmp(s1,s2.data()) <= 0; }

__declspec(dllimport) inline bool operator>( const QCString &s1, const char *s2 )
{ return qstrcmp(s1.data(),s2) > 0; }

__declspec(dllimport) inline bool operator>( const char *s1, const QCString &s2 )
{ return qstrcmp(s1,s2.data()) > 0; }

__declspec(dllimport) inline bool operator>=( const QCString &s1, const char *s2 )
{ return qstrcmp(s1.data(),s2) >= 0; }

__declspec(dllimport) inline bool operator>=( const char *s1, const QCString &s2 )
{ return qstrcmp(s1,s2.data()) >= 0; }

__declspec(dllimport) inline QCString operator+( const QCString &s1, const QCString &s2 )
{
    QCString tmp( s1.data() );
    tmp += s2;
    return tmp;
}

__declspec(dllimport) inline QCString operator+( const QCString &s1, const char *s2 )
{
    QCString tmp( s1.data() );
    tmp += s2;
    return tmp;
}

__declspec(dllimport) inline QCString operator+( const char *s1, const QCString &s2 )
{
    QCString tmp( s1 );
    tmp += s2;
    return tmp;
}

__declspec(dllimport) inline QCString operator+( const QCString &s1, char c2 )
{
    QCString tmp( s1.data() );
    tmp += c2;
    return tmp;
}

__declspec(dllimport) inline QCString operator+( char c1, const QCString &s2 )
{
    QCString tmp;
    tmp += c1;
    tmp += s2;
    return tmp;
}

#line 400 "c:\\qt\\include\\qcstring.h"
#line 44 "c:\\qt\\include\\qstring.h"
#line 45 "c:\\qt\\include\\qstring.h"






class QRegExp;
class QString;
class QCharRef;

class __declspec(dllimport) QChar {
public:
    QChar();
    QChar( char c );
    QChar( uchar c );
    QChar( uchar c, uchar r );
    QChar( const QChar& c );
    QChar( ushort rc );
    QChar( short rc );
    QChar( uint rc );
    QChar( int rc );

    static QChar null;            
    static QChar replacement;     
    static QChar byteOrderMark;     
    static QChar byteOrderSwapped;     
    static QChar nbsp;            

    

    enum Category
    {
	NoCategory,

	Mark_NonSpacing,	  
	Mark_SpacingCombining,	  
	Mark_Enclosing,		  

	Number_DecimalDigit,	  
	Number_Letter,		  
	Number_Other,		  

	Separator_Space,	  
	Separator_Line,		  
	Separator_Paragraph,	  

	Other_Control,		  
	Other_Format,		  
	Other_Surrogate,	  
	Other_PrivateUse,	  
	Other_NotAssigned,	  

	Letter_Uppercase,	  
	Letter_Lowercase,	  
	Letter_Titlecase,	  
	Letter_Modifier,	  
	Letter_Other,		  

	Punctuation_Connector,	  
	Punctuation_Dask,	  
	Punctuation_Open,	  
	Punctuation_Close,	  
	Punctuation_InitialQuote, 
	Punctuation_FinalQuote,	  
	Punctuation_Other,	  

	Symbol_Math,		  
	Symbol_Currency,	  
	Symbol_Modifier,	  
	Symbol_Other		  
    };

    enum Direction
    {
	DirL, DirR, DirEN, DirES, DirET, DirAN, DirCS, DirB, DirS, DirWS, DirON,
	DirLRE, DirLRO, DirAL, DirRLE, DirRLO, DirPDF, DirNSM, DirBN
    };

    enum Decomposition
    {
        Single, Canonical, Font, NoBreak, Initial, Medial,
        Final, Isolated, Circle, Super, Sub, Vertical,
        Wide, Narrow, Small, Square, Compat, Fraction
    };

    enum Joining
    {
	OtherJoining, Dual, Right, Center
    };

    

    int digitValue() const;
    QChar lower() const;
    QChar upper() const;

    Category category() const;
    Direction direction() const;
    Joining joining() const;
    bool mirrored() const;
    QChar mirroredChar() const;
    QString decomposition() const;
    Decomposition decompositionTag() const;

    char latin1() const { return rw ? 0 : cl; }
    ushort unicode() const { return (rw << 8) | cl; }

    
    operator char() const { return latin1(); }
#line 155 "c:\\qt\\include\\qstring.h"

    bool isNull() const { return unicode()==0; }
    bool isPrint() const;
    bool isPunct() const;
    bool isSpace() const;
    bool isMark() const;
    bool isLetter() const;
    bool isNumber() const;
    bool isLetterOrNumber() const;
    bool isDigit() const;

    uchar& cell() { return cl; }
    uchar& row() { return rw; }
    uchar cell() const { return cl; }
    uchar row() const { return rw; }

    static bool networkOrdered() { return (int)net_ordered == 1; }

    friend inline int operator==( char ch, QChar c );
    friend inline int operator==( QChar c, char ch );
    friend inline int operator==( QChar c1, QChar c2 );
    friend inline int operator!=( QChar c1, QChar c2 );
    friend inline int operator!=( char ch, QChar c );
    friend inline int operator!=( QChar c, char ch );
    friend inline int operator<=( QChar c, char ch );
    friend inline int operator<=( char ch, QChar c );
    friend inline int operator<=( QChar c1, QChar c2 );

private:









#line 194 "c:\\qt\\include\\qstring.h"
    
    uchar cl;
    uchar rw;


#line 200 "c:\\qt\\include\\qstring.h"
    enum { net_ordered = 0 };
#line 202 "c:\\qt\\include\\qstring.h"
} ;

inline QChar::QChar()
{
    rw = 0; cl = 0;



}
inline QChar::QChar( char c )
{
    rw = 0; cl = (uchar)c;



}
inline QChar::QChar( uchar c )
{
    rw = 0; cl = c;



}
inline QChar::QChar( uchar c, uchar r )
{
    rw = r; cl = c;



}
inline QChar::QChar( const QChar& c )
{
    rw = c.rw; cl = c.cl;



}
inline QChar::QChar( ushort rc )
{
    rw = (uchar)((rc>>8)&0xff); cl = (uchar)(rc&0xff);



}
inline QChar::QChar( short rc )
{
    rw = (uchar)((rc>>8)&0xff); cl = (uchar)(rc&0xff);



}
inline QChar::QChar( uint rc )
{
    rw = (uchar)((rc>>8)&0xff); cl = (uchar)(rc&0xff);



}
inline QChar::QChar( int rc )
{
    rw = (uchar)((rc>>8)&0xff); cl = (uchar)(rc&0xff);



}


inline int operator==( char ch, QChar c )
{
    return ch == c.cl && !c.rw;
}

inline int operator==( QChar c, char ch )
{
    return ch == c.cl && !c.rw;
}

inline int operator==( QChar c1, QChar c2 )
{
    return c1.cl == c2.cl
	&& c1.rw == c2.rw;
}

inline int operator!=( QChar c1, QChar c2 )
{
    return c1.cl != c2.cl
	|| c1.rw != c2.rw;
}

inline int operator!=( char ch, QChar c )
{
    return ch != c.cl || c.rw;
}

inline int operator!=( QChar c, char ch )
{
    return ch != c.cl || c.rw;
}

inline int operator<=( QChar c, char ch )
{
    return !(ch < c.cl || c.rw);
}

inline int operator<=( char ch, QChar c )
{
    return ch <= c.cl || c.rw;
}

inline int operator<=( QChar c1, QChar c2 )
{
    return c1.rw > c2.rw
	? FALSE
	: c1.rw < c2.rw
	    ? TRUE
	    : c1.cl <= c2.cl;
}

inline int operator>=( QChar c, char ch ) { return ch <= c; }
inline int operator>=( char ch, QChar c ) { return c <= ch; }
inline int operator>=( QChar c1, QChar c2 ) { return c2 <= c1; }
inline int operator<( QChar c, char ch ) { return !(ch<=c); }
inline int operator<( char ch, QChar c ) { return !(c<=ch); }
inline int operator<( QChar c1, QChar c2 ) { return !(c2<=c1); }
inline int operator>( QChar c, char ch ) { return !(ch>=c); }
inline int operator>( char ch, QChar c ) { return !(c>=ch); }
inline int operator>( QChar c1, QChar c2 ) { return !(c2>=c1); }


struct __declspec(dllimport) QStringData : public QShared {
    QStringData() :
	unicode(0), ascii(0), len(0), maxl(0), dirtyascii(0) { ref(); }
    QStringData(QChar *u, uint l, uint m) :
	unicode(u), ascii(0), len(l), maxl(m), dirtyascii(0) { }

    ~QStringData() { if ( unicode ) delete[] ((char*)unicode);
                     if ( ascii ) delete[] ascii; }

    void deleteSelf();
    QChar *unicode;
    char *ascii;
    uint len;
    uint maxl:30;
    uint dirtyascii:1;
};


class __declspec(dllimport) QString
{
public:
    QString();					
    QString( QChar );				
    QString( const QString & );			
    QString( const QByteArray& );		
    QString( const QChar* unicode, uint length ); 

    QString( const char *str );			
#line 360 "c:\\qt\\include\\qstring.h"
    ~QString();

    QString    &operator=( const QString & );	

    QString    &operator=( const char * );	
#line 366 "c:\\qt\\include\\qstring.h"
    QString    &operator=( const QCString& );	
    QString    &operator=( QChar c );
    QString    &operator=( char c );

    static QString null;

    bool	isNull()	const;
    bool	isEmpty()	const;
    uint	length()	const;
    void	truncate( uint pos );



#line 380 "c:\\qt\\include\\qstring.h"
    void	fill( QChar c, int len = -1 );

    QString	copy()	const;

    QString arg(long a, int fieldwidth=0, int base=10) const;
    QString arg(ulong a, int fieldwidth=0, int base=10) const;
    QString arg(int a, int fieldwidth=0, int base=10) const;
    QString arg(uint a, int fieldwidth=0, int base=10) const;
    QString arg(short a, int fieldwidth=0, int base=10) const;
    QString arg(ushort a, int fieldwidth=0, int base=10) const;
    QString arg(char a, int fieldwidth=0) const;
    QString arg(QChar a, int fieldwidth=0) const;
    QString arg(const QString& a, int fieldwidth=0) const;
    QString arg(double a, int fieldwidth=0, char fmt='g', int prec=-1) const;

    QString    &sprintf( const char* format, ... )


#line 399 "c:\\qt\\include\\qstring.h"
	;

    int		find( QChar c, int index=0, bool cs=TRUE ) const;
    int		find( char c, int index=0, bool cs=TRUE ) const;
    int		find( const QString &str, int index=0, bool cs=TRUE ) const;
    int		find( const QRegExp &, int index=0 ) const;

    int		find( const char* str, int index=0 ) const;
#line 408 "c:\\qt\\include\\qstring.h"
    int		findRev( QChar c, int index=-1, bool cs=TRUE) const;
    int		findRev( char c, int index=-1, bool cs=TRUE) const;
    int		findRev( const QString &str, int index=-1, bool cs=TRUE) const;
    int		findRev( const QRegExp &, int index=-1 ) const;

    int		findRev( const char* str, int index=-1 ) const;
#line 415 "c:\\qt\\include\\qstring.h"
    int		contains( QChar c, bool cs=TRUE ) const;
    int		contains( char c, bool cs=TRUE ) const
		    { return contains(QChar(c), cs); }

    int		contains( const char* str, bool cs=TRUE ) const;
#line 421 "c:\\qt\\include\\qstring.h"
    int		contains( const QString &str, bool cs=TRUE ) const;
    int		contains( const QRegExp & ) const;

    QString	left( uint len )  const;
    QString	right( uint len ) const;
    QString	mid( uint index, uint len=0xffffffff) const;

    QString	leftJustify( uint width, QChar fill=' ', bool trunc=FALSE)const;
    QString	rightJustify( uint width, QChar fill=' ',bool trunc=FALSE)const;

    QString	lower() const;
    QString	upper() const;

    QString	stripWhiteSpace()	const;
    QString	simplifyWhiteSpace()	const;

    QString    &insert( uint index, const QString & );
    QString    &insert( uint index, const QChar*, uint len );
    QString    &insert( uint index, QChar );
    QString    &insert( uint index, char c ) { return insert(index,QChar(c)); }
    QString    &append( char );
    QString    &append( QChar );
    QString    &append( const QString & );
    QString    &prepend( char );
    QString    &prepend( QChar );
    QString    &prepend( const QString & );
    QString    &remove( uint index, uint len );
    QString    &replace( uint index, uint len, const QString & );
    QString    &replace( uint index, uint len, const QChar*, uint clen );
    QString    &replace( const QRegExp &, const QString & );

    short	toShort( bool *ok=0, int base=10 )	const;
    ushort	toUShort( bool *ok=0, int base=10 )	const;
    int		toInt( bool *ok=0, int base=10 )	const;
    uint	toUInt( bool *ok=0, int base=10 )	const;
    long	toLong( bool *ok=0, int base=10 )	const;
    ulong	toULong( bool *ok=0, int base=10 )	const;
    float	toFloat( bool *ok=0 )	const;
    double	toDouble( bool *ok=0 )	const;

    QString    &setNum( short, int base=10 );
    QString    &setNum( ushort, int base=10 );
    QString    &setNum( int, int base=10 );
    QString    &setNum( uint, int base=10 );
    QString    &setNum( long, int base=10 );
    QString    &setNum( ulong, int base=10 );
    QString    &setNum( float, char f='g', int prec=6 );
    QString    &setNum( double, char f='g', int prec=6 );

    static QString number( long, int base=10 );
    static QString number( ulong, int base=10);
    static QString number( int, int base=10 );
    static QString number( uint, int base=10);
    static QString number( double, char f='g', int prec=6 );

    void	setExpand( uint index, QChar c );

    QString    &operator+=( const QString &str );
    QString    &operator+=( QChar c );
    QString    &operator+=( char c );

    
    QChar at( uint i ) const
	{ return i<d->len ? d->unicode[i] : QChar::null; }
    QChar operator[]( int i ) const { return at((uint)i); }
    QCharRef at( uint i );
    QCharRef operator[]( int i );

    QChar constref(uint i) const
	{ return at(i); }
    QChar& ref(uint i)
	{ 
	    if (d->count!=1 || i>=d->len)
		subat(i);
	    d->dirtyascii=1;
	    return d->unicode[i];
	}

    const QChar* unicode() const { return d->unicode; }
    const char* ascii() const;
    const char* latin1() const;
    static QString fromLatin1(const char*, int len=-1);

    QCString utf8() const;
    static QString fromUtf8(const char*, int len=-1);
#line 507 "c:\\qt\\include\\qstring.h"
    QCString local8Bit() const;
    static QString fromLocal8Bit(const char*, int len=-1);
    bool operator!() const;

    operator const char *() const { return latin1(); }
#line 513 "c:\\qt\\include\\qstring.h"

    QString &setUnicode( const QChar* unicode, uint len );
    QString &setUnicodeCodes( const ushort* unicode_as_ushorts, uint len );
    QString &setLatin1( const char*, int len=-1 );

    int compare( const QString& s ) const;
    static int compare( const QString& s1, const QString& s2 )
	{ return s1.compare(s2); }


    friend __declspec(dllimport) QDataStream &operator>>( QDataStream &, QString & );
#line 525 "c:\\qt\\include\\qstring.h"
    
    void compose();
    QChar::Direction basicDirection();
    QString visual(int index = 0, int len = -1);


    const char* data() const { return latin1(); }
#line 533 "c:\\qt\\include\\qstring.h"

    bool startsWith( const QString& ) const;

private:
    QString( int size, bool dummy );		

    void deref();
    void real_detach();
    void setLength( uint pos );
    void subat( uint );
    bool findArg(int& pos, int& len) const;

    static QChar* asciiToUnicode( const char*, uint * len, uint maxlen=(uint)-1 );
    static QChar* asciiToUnicode( const QByteArray&, uint * len );
    static char* unicodeToAscii( const QChar*, uint len );

    QStringData *d;
    static QStringData* shared_null;
    static QStringData* makeSharedNull();

    friend class QConstString;
    QString(QStringData* dd, bool ) : d(dd) { }
};

class __declspec(dllimport) QCharRef {
    friend class QString;
    QString& s;
    uint p;
    QCharRef(QString* str, uint pos) : s(*str), p(pos) { }

public:
    

    

    ushort unicode() const { return s.constref(p).unicode(); }
    char latin1() const { return s.constref(p).latin1(); }

    
    QCharRef operator=(char c ) { s.ref(p)=c; return *this; }
    QCharRef operator=(uchar c ) { s.ref(p)=c; return *this; }
    QCharRef operator=(QChar c ) { s.ref(p)=c; return *this; }
    QCharRef operator=(const QCharRef& c ) { s.ref(p)=c.unicode(); return *this; }
    QCharRef operator=(ushort rc ) { s.ref(p)=rc; return *this; }
    QCharRef operator=(short rc ) { s.ref(p)=rc; return *this; }
    QCharRef operator=(uint rc ) { s.ref(p)=rc; return *this; }
    QCharRef operator=(int rc ) { s.ref(p)=rc; return *this; }

    operator QChar () const { return s.constref(p); }

    
    bool isNull() const { return unicode()==0; }
    bool isPrint() const { return s.constref(p).isPrint(); }
    bool isPunct() const { return s.constref(p).isPunct(); }
    bool isSpace() const { return s.constref(p).isSpace(); }
    bool isMark() const { return s.constref(p).isMark(); }
    bool isLetter() const { return s.constref(p).isLetter(); }
    bool isNumber() const { return s.constref(p).isNumber(); }
    bool isLetterOrNumber() { return s.constref(p).isLetterOrNumber(); }
    bool isDigit() const { return s.constref(p).isDigit(); }

    int digitValue() const { return s.constref(p).digitValue(); }
    QChar lower() { return s.constref(p).lower(); }
    QChar upper() { return s.constref(p).upper(); }

    QChar::Category category() const { return s.constref(p).category(); }
    QChar::Direction direction() const { return s.constref(p).direction(); }
    QChar::Joining joining() const { return s.constref(p).joining(); }
    bool mirrored() const { return s.constref(p).mirrored(); }
    QChar mirroredChar() const { return s.constref(p).mirroredChar(); }
    QString decomposition() const { return s.constref(p).decomposition(); }
    QChar::Decomposition decompositionTag() const { return s.constref(p).decompositionTag(); }

    
    uchar cell() const { return s.constref(p).cell(); }
    uchar row() const { return s.constref(p).row(); }
#line 610 "c:\\qt\\include\\qstring.h"
};

inline QCharRef QString::at( uint i ) { return QCharRef(this,i); }
inline QCharRef QString::operator[]( int i ) { return at((uint)i); }


class __declspec(dllimport) QConstString : private QString {
public:
    QConstString( QChar* unicode, uint length );
    ~QConstString();
    const QString& string() const { return *this; }
};






__declspec(dllimport) QDataStream &operator<<( QDataStream &, const QString & );
__declspec(dllimport) QDataStream &operator>>( QDataStream &, QString & );
#line 631 "c:\\qt\\include\\qstring.h"










inline QString::QString() :
    d(shared_null ? shared_null : makeSharedNull())
{
    d->ref();
}

inline QString::~QString()
{
    if ( d->deref() ) {
	if ( d == shared_null )
	    shared_null = 0;
	d->deleteSelf();
    }
}

inline QString &QString::operator=( QChar c )
{ return *this = QString(c); }

inline QString &QString::operator=( char c )
{ return *this = QString(QChar(c)); }

inline bool QString::isNull() const
{ return unicode() == 0; }

inline bool QString::operator!() const
{ return isNull(); }

inline uint QString::length() const
{ return d->len; }

inline bool QString::isEmpty() const
{ return length() == 0; }

inline QString QString::copy() const
{ return QString( *this ); }

inline QString &QString::prepend( const QString & s )
{ return insert(0,s); }

inline QString &QString::prepend( QChar c )
{ return insert(0,c); }

inline QString &QString::prepend( char c )
{ return insert(0,c); }

inline QString &QString::append( const QString & s )
{ return operator+=(s); }

inline QString &QString::append( QChar c )
{ return operator+=(c); }

inline QString &QString::append( char c )
{ return operator+=(c); }

inline QString &QString::setNum( short n, int base )
{ return setNum((long)n, base); }

inline QString &QString::setNum( ushort n, int base )
{ return setNum((ulong)n, base); }

inline QString &QString::setNum( int n, int base )
{ return setNum((long)n, base); }

inline QString &QString::setNum( uint n, int base )
{ return setNum((ulong)n, base); }

inline QString &QString::setNum( float n, char f, int prec )
{ return setNum((double)n,f,prec); }

inline QString QString::arg(int a, int fieldwidth, int base) const
{ return arg((long)a, fieldwidth, base); }

inline QString QString::arg(uint a, int fieldwidth, int base) const
{ return arg((ulong)a, fieldwidth, base); }

inline QString QString::arg(short a, int fieldwidth, int base) const
{ return arg((long)a, fieldwidth, base); }

inline QString QString::arg(ushort a, int fieldwidth, int base) const
{ return arg((ulong)a, fieldwidth, base); }

inline int QString::find( char c, int index, bool cs ) const
{ return find(QChar(c), index, cs); }

inline int QString::findRev( char c, int index, bool cs) const
{ return findRev( QChar(c), index, cs ); }



inline int QString::find( const char* str, int index ) const
{ return find(QString::fromLatin1(str), index); }

inline int QString::findRev( const char* str, int index ) const
{ return findRev(QString::fromLatin1(str), index); }
#line 736 "c:\\qt\\include\\qstring.h"






__declspec(dllimport) bool operator!=( const QString &s1, const QString &s2 );
__declspec(dllimport) bool operator<( const QString &s1, const QString &s2 );
__declspec(dllimport) bool operator<=( const QString &s1, const QString &s2 );
__declspec(dllimport) bool operator==( const QString &s1, const QString &s2 );
__declspec(dllimport) bool operator>( const QString &s1, const QString &s2 );
__declspec(dllimport) bool operator>=( const QString &s1, const QString &s2 );

__declspec(dllimport) bool operator!=( const QString &s1, const char *s2 );
__declspec(dllimport) bool operator<( const QString &s1, const char *s2 );
__declspec(dllimport) bool operator<=( const QString &s1, const char *s2 );
__declspec(dllimport) bool operator==( const QString &s1, const char *s2 );
__declspec(dllimport) bool operator>( const QString &s1, const char *s2 );
__declspec(dllimport) bool operator>=( const QString &s1, const char *s2 );
__declspec(dllimport) bool operator!=( const char *s1, const QString &s2 );
__declspec(dllimport) bool operator<( const char *s1, const QString &s2 );
__declspec(dllimport) bool operator<=( const char *s1, const QString &s2 );
__declspec(dllimport) bool operator==( const char *s1, const QString &s2 );

__declspec(dllimport) bool operator>=( const char *s1, const QString &s2 );
#line 762 "c:\\qt\\include\\qstring.h"

__declspec(dllimport) inline QString operator+( const QString &s1, const QString &s2 )
{
    QString tmp( s1 );
    tmp += s2;
    return tmp;
}


__declspec(dllimport) inline QString operator+( const QString &s1, const char *s2 )
{
    QString tmp( s1 );
    tmp += QString::fromLatin1(s2);
    return tmp;
}

__declspec(dllimport) inline QString operator+( const char *s1, const QString &s2 )
{
    QString tmp = QString::fromLatin1( s1 );
    tmp += s2;
    return tmp;
}
#line 785 "c:\\qt\\include\\qstring.h"

__declspec(dllimport) inline QString operator+( const QString &s1, QChar c2 )
{
    QString tmp( s1 );
    tmp += c2;
    return tmp;
}

__declspec(dllimport) inline QString operator+( const QString &s1, char c2 )
{
    QString tmp( s1 );
    tmp += c2;
    return tmp;
}

__declspec(dllimport) inline QString operator+( QChar c1, const QString &s2 )
{
    QString tmp;
    tmp += c1;
    tmp += s2;
    return tmp;
}

__declspec(dllimport) inline QString operator+( char c1, const QString &s2 )
{
    QString tmp;
    tmp += c1;
    tmp += s2;
    return tmp;
}


extern __declspec(dllimport) QString qt_winQString(void*);
extern __declspec(dllimport) const void* qt_winTchar(const QString& str, bool addnul);
extern __declspec(dllimport) void* qt_winTchar_new(const QString& str);
extern __declspec(dllimport) QCString qt_winQString2MB( const QString& s, int len=-1 );
extern __declspec(dllimport) QString qt_winMB2QString( const char* mb, int len=-1 );
#line 823 "c:\\qt\\include\\qstring.h"

#line 825 "c:\\qt\\include\\qstring.h"
#line 43 "c:\\qt\\include\\qvariant.h"
#line 44 "c:\\qt\\include\\qvariant.h"



class QString;
class QCString;
class QFont;
class QPixmap;
class QBrush;
class QRect;
class QPoint;
class QImage;
class QSize;
class QColor;
class QPalette;
class QColorGroup;
class QIconSet;
class QDataStream;
class QPointArray;
class QRegion;
class QBitmap;
class QCursor;
class QStringList;
class QSizePolicy;


class QVariant;
class QVariantPrivate;
template <class T> class QValueList;
template <class T> class QValueListConstIterator;
template <class T> class QValueListNode;
template <class Key, class T> class QMap;
template <class Key, class T> class QMapConstIterator;


class __declspec(dllimport) QVariant
{
public:
    enum Type {
	Invalid,
	Map,
	List,
	String,
	StringList,
	Font,
	Pixmap,
	Brush,
	Rect,
	Size,
	Color,
	Palette,
	ColorGroup,
	IconSet,
	Point,
	Image,
	Int,
	UInt,
	Bool,
	Double,
	CString,
	PointArray,
	Region,
	Bitmap,
	Cursor,
	SizePolicy
    };

    QVariant();
    ~QVariant();
    QVariant( const QVariant& );
    QVariant( QDataStream& s );

    QVariant( const QString& );
    QVariant( const QCString& );
    QVariant( const char* );
    QVariant( const QStringList& );
    QVariant( const QFont& );
    QVariant( const QPixmap& );
    QVariant( const QImage& );
    QVariant( const QBrush& );
    QVariant( const QPoint& );
    QVariant( const QRect& );
    QVariant( const QSize& );
    QVariant( const QColor& );
    QVariant( const QPalette& );
    QVariant( const QColorGroup& );
    QVariant( const QIconSet& );
    QVariant( const QPointArray& );
    QVariant( const QRegion& );
    QVariant( const QBitmap& );
    QVariant( const QCursor& );
    QVariant( const QValueList<QVariant>& );
    QVariant( const QMap<QString,QVariant>& );
    QVariant( int );
    QVariant( uint );
    
    QVariant( bool, int );
    QVariant( double );
    QVariant( QSizePolicy );

    QVariant& operator= ( const QVariant& );
    bool operator==( const QVariant& ) const;
    bool operator!=( const QVariant& ) const;

    Type type() const;
    const char* typeName() const;

    bool canCast( Type ) const;

    bool isValid() const;

    void clear();

    const QString toString() const;
    const QCString toCString() const;
    const QStringList toStringList() const;
    const QFont toFont() const;
    const QPixmap toPixmap() const;
    const QImage toImage() const;
    const QBrush toBrush() const;
    const QPoint toPoint() const;
    const QRect toRect() const;
    const QSize toSize() const;
    const QColor toColor() const;
    const QPalette toPalette() const;
    const QColorGroup toColorGroup() const;
    const QIconSet toIconSet() const;
    const QPointArray toPointArray() const;
    const QBitmap toBitmap() const;
    const QRegion toRegion() const;
    const QCursor toCursor() const;
    int toInt() const;
    uint toUInt() const;
    bool toBool() const;
    double toDouble() const;
    const QValueList<QVariant> toList() const;
    const QMap<QString,QVariant> toMap() const;
    QSizePolicy toSizePolicy() const;

    QValueListConstIterator<QVariant> listBegin() const;
    QValueListConstIterator<QVariant> listEnd() const;
    QValueListConstIterator<QString> stringListBegin() const;
    QValueListConstIterator<QString> stringListEnd() const;
    QMapConstIterator<QString,QVariant> mapBegin() const;
    QMapConstIterator<QString,QVariant> mapEnd() const;
    QMapConstIterator<QString,QVariant> mapFind( const QString& ) const;

    QString& asString();
    QCString& asCString();
    QStringList& asStringList();
    QFont& asFont();
    QPixmap& asPixmap();
    QImage& asImage();
    QBrush& asBrush();
    QPoint& asPoint();
    QRect& asRect();
    QSize& asSize();
    QColor& asColor();
    QPalette& asPalette();
    QColorGroup& asColorGroup();
    QIconSet& asIconSet();
    QPointArray& asPointArray();
    QBitmap& asBitmap();
    QRegion& asRegion();
    QCursor& asCursor();
    int& asInt();
    uint& asUInt();
    bool& asBool();
    double& asDouble();
    QValueList<QVariant>& asList();
    QMap<QString,QVariant>& asMap();
    QSizePolicy& asSizePolicy();

    void load( QDataStream& );
    void save( QDataStream& ) const;

    static const char* typeToName( Type typ );
    static Type nameToType( const char* name );

private:
    void detach();

    QVariantPrivate* d;
};

class QVariantPrivate : public QShared
{
public:
    QVariantPrivate();
    QVariantPrivate( QVariantPrivate* );
    ~QVariantPrivate();

    void clear();

    QVariant::Type typ;
    union
    {
	uint u;
	int i;
	bool b;
	double d;
	void *ptr;
    } value;
};



#line 1 "c:\\qt\\include\\qvaluelist.h"









































#line 1 "c:\\qt\\include\\qshared.h"























































#line 43 "c:\\qt\\include\\qvaluelist.h"
#line 1 "c:\\qt\\include\\qdatastream.h"









































#line 1 "c:\\qt\\include\\qiodevice.h"









































#line 1 "c:\\qt\\include\\qglobal.h"


























































































































































































































































































































































































































































































































































































































































#line 43 "c:\\qt\\include\\qiodevice.h"
#line 1 "c:\\qt\\include\\qcstring.h"















































































































































































































































































































































































































#line 44 "c:\\qt\\include\\qiodevice.h"
#line 45 "c:\\qt\\include\\qiodevice.h"











































class __declspec(dllimport) QIODevice					
{
public:
    QIODevice();
    virtual ~QIODevice();

    int		 flags()  const { return ioMode; }
    int		 mode()	  const { return ioMode & 0x00ff; }
    int		 state()  const { return ioMode & 0xf000; }

    bool	 isDirectAccess()     const { return ((ioMode & 0x0100)     == 0x0100); }
    bool	 isSequentialAccess() const { return ((ioMode & 0x0200) == 0x0200); }
    bool	 isCombinedAccess()   const { return ((ioMode & 0x0300)   == 0x0300); }
    bool	 isBuffered()	      const { return ((ioMode & 0x0040)        != 0x0040); }
    bool	 isRaw()	      const { return ((ioMode & 0x0040)        == 0x0040); }
    bool	 isSynchronous()      const { return ((ioMode & 0x0080)      != 0x0080); }
    bool	 isAsynchronous()     const { return ((ioMode & 0x0080)      == 0x0080); }
    bool	 isTranslated()	      const { return ((ioMode & 0x0010)  == 0x0010); }
    bool	 isReadable()	      const { return ((ioMode & 0x0001)   == 0x0001); }
    bool	 isWritable()	      const { return ((ioMode & 0x0002)  == 0x0002); }
    bool	 isReadWrite()	      const { return ((ioMode & 0x0003)  == 0x0003); }
    bool	 isInactive()	      const { return state() == 0; }
    bool	 isOpen()	      const { return state() == 0x1000; }

    int		 status() const { return ioSt; }
    void	 resetStatus()	{ ioSt = 0; }

    virtual bool open( int mode ) = 0;
    virtual void close() = 0;
    virtual void flush() = 0;

    virtual uint size()	  const = 0;
    virtual int	 at()	  const;
    virtual bool at( int );
    virtual bool atEnd()  const;
    bool	 reset() { return at(0); }

    virtual int	 readBlock( char *data, uint maxlen ) = 0;
    virtual int	 writeBlock( const char *data, uint len ) = 0;
    virtual int	 readLine( char *data, uint maxlen );
    int writeBlock( const QByteArray& data );
    QByteArray readAll();

    virtual int	 getch() = 0;
    virtual int	 putch( int ) = 0;
    virtual int	 ungetch( int ) = 0;

protected:
    void	 setFlags( int f ) { ioMode = f; }
    void	 setType( int );
    void	 setMode( int );
    void	 setState( int );
    void	 setStatus( int );
    int		 ioIndex;

private:
    int		 ioMode;
    int		 ioSt;

private:	



#line 152 "c:\\qt\\include\\qiodevice.h"
};


#line 156 "c:\\qt\\include\\qiodevice.h"
#line 43 "c:\\qt\\include\\qdatastream.h"
#line 1 "c:\\qt\\include\\qstring.h"
























































































































































































































































































































































































































































































































































































































































































































































































































































#line 44 "c:\\qt\\include\\qdatastream.h"
#line 45 "c:\\qt\\include\\qdatastream.h"


class __declspec(dllimport) QDataStream				
{
public:
    QDataStream();
    QDataStream( QIODevice * );
    QDataStream( QByteArray, int mode );
    virtual ~QDataStream();

    QIODevice	*device() const;
    void	 setDevice( QIODevice * );
    void	 unsetDevice();

    bool	 atEnd() const;
    bool	 eof() const;

    enum ByteOrder { BigEndian, LittleEndian };
    int		 byteOrder()	const;
    void	 setByteOrder( int );

    bool	 isPrintableData() const;
    void	 setPrintableData( bool );

    int		 version() const;
    void	 setVersion( int );

    QDataStream &operator>>( Q_INT8 &i );
    QDataStream &operator>>( Q_UINT8 &i );
    QDataStream &operator>>( Q_INT16 &i );
    QDataStream &operator>>( Q_UINT16 &i );
    QDataStream &operator>>( Q_INT32 &i );
    QDataStream &operator>>( Q_UINT32 &i );
    QDataStream &operator>>( Q_INT64 &i );
    QDataStream &operator>>( Q_UINT64 &i );

    QDataStream &operator>>( float &f );
    QDataStream &operator>>( double &f );
    QDataStream &operator>>( char *&str );

    QDataStream &operator<<( Q_INT8 i );
    QDataStream &operator<<( Q_UINT8 i );
    QDataStream &operator<<( Q_INT16 i );
    QDataStream &operator<<( Q_UINT16 i );
    QDataStream &operator<<( Q_INT32 i );
    QDataStream &operator<<( Q_UINT32 i );
    QDataStream &operator<<( Q_INT64 i );
    QDataStream &operator<<( Q_UINT64 i );
    QDataStream &operator<<( float f );
    QDataStream &operator<<( double f );
    QDataStream &operator<<( const char *str );

    QDataStream &readBytes( char *&, uint &len );
    QDataStream &readRawBytes( char *, uint len );

    QDataStream &writeBytes( const char *, uint len );
    QDataStream &writeRawBytes( const char *, uint len );

private:
    QIODevice	*dev;
    bool	 owndev;
    int		 byteorder;
    bool	 printable;
    bool	 noswap;
    int		 ver;

private:	



#line 116 "c:\\qt\\include\\qdatastream.h"
};






inline QIODevice *QDataStream::device() const
{ return dev; }

inline bool QDataStream::atEnd() const
{ return dev ? dev->atEnd() : TRUE; }

inline bool QDataStream::eof() const
{ return atEnd(); }

inline int QDataStream::byteOrder() const
{ return byteorder; }

inline bool QDataStream::isPrintableData() const
{ return printable; }

inline void QDataStream::setPrintableData( bool p )
{ printable = p; }

inline int QDataStream::version() const
{ return ver; }

inline void QDataStream::setVersion( int v )
{ ver = v; }

inline QDataStream &QDataStream::operator>>( Q_UINT8 &i )
{ return *this >> (Q_INT8&)i; }

inline QDataStream &QDataStream::operator>>( Q_UINT16 &i )
{ return *this >> (Q_INT16&)i; }

inline QDataStream &QDataStream::operator>>( Q_UINT32 &i )
{ return *this >> (Q_INT32&)i; }

inline QDataStream &QDataStream::operator>>( Q_UINT64 &i )
{ return *this >> (Q_INT64&)i; }

inline QDataStream &QDataStream::operator<<( Q_UINT8 i )
{ return *this << (Q_INT8)i; }

inline QDataStream &QDataStream::operator<<( Q_UINT16 i )
{ return *this << (Q_INT16)i; }

inline QDataStream &QDataStream::operator<<( Q_UINT32 i )
{ return *this << (Q_INT32)i; }

inline QDataStream &QDataStream::operator<<( Q_UINT64 i )
{ return *this << (Q_INT64)i; }


#line 173 "c:\\qt\\include\\qdatastream.h"
#line 174 "c:\\qt\\include\\qdatastream.h"
#line 44 "c:\\qt\\include\\qvaluelist.h"
#line 45 "c:\\qt\\include\\qvaluelist.h"


#pragma warning(disable:4284) 
#line 49 "c:\\qt\\include\\qvaluelist.h"

template <class T>
class __declspec(dllimport) QValueListNode
{
public:
    QValueListNode( const T& t ) : data( t ) { }
    QValueListNode() { }

    
    virtual ~QValueListNode() { }
#line 60 "c:\\qt\\include\\qvaluelist.h"

    QValueListNode<T>* next;
    QValueListNode<T>* prev;
    T data;
};

template<class T>
class __declspec(dllimport) QValueListIterator
{
 public:
    


    typedef QValueListNode<T>* NodePtr;

    


    NodePtr node;

    


    QValueListIterator() : node( 0 ) {}
    QValueListIterator( NodePtr p ) : node( p ) {}
    QValueListIterator( const QValueListIterator<T>& it ) : node( it.node ) {}

    bool operator==( const QValueListIterator<T>& it ) const { return node == it.node; }
    bool operator!=( const QValueListIterator<T>& it ) const { return node != it.node; }
    const T& operator*() const { return node->data; }
    T& operator*() { return node->data; }

    
    

    QValueListIterator<T>& operator++() {
	node = node->next;
	return *this;
    }

    QValueListIterator<T> operator++(int) {
	QValueListIterator<T> tmp = *this;
	node = node->next;
	return tmp;
    }

    QValueListIterator<T>& operator--() {
	node = node->prev;
	return *this;
    }

    QValueListIterator<T> operator--(int) {
	QValueListIterator<T> tmp = *this;
	node = node->prev;
	return tmp;
    }
};

template<class T>
class __declspec(dllimport) QValueListConstIterator
{
 public:
    


    typedef QValueListNode<T>* NodePtr;

    


    NodePtr node;

    


    QValueListConstIterator() : node( 0 ) {}
    QValueListConstIterator( NodePtr p ) : node( p ) {}
    QValueListConstIterator( const QValueListConstIterator<T>& it ) : node( it.node ) {}
    QValueListConstIterator( const QValueListIterator<T>& it ) : node( it.node ) {}

    bool operator==( const QValueListConstIterator<T>& it ) const { return node == it.node; }
    bool operator!=( const QValueListConstIterator<T>& it ) const { return node != it.node; }
    const T& operator*() const { return node->data; }

    
    

    QValueListConstIterator<T>& operator++() {
	node = node->next;
	return *this;
    }

    QValueListConstIterator<T> operator++(int) {
	QValueListConstIterator<T> tmp = *this;
	node = node->next;
	return tmp;
    }

    QValueListConstIterator<T>& operator--() {
	node = node->prev;
	return *this;
    }

    QValueListConstIterator<T> operator--(int) {
	QValueListConstIterator<T> tmp = *this;
	node = node->prev;
	return tmp;
    }
};

template <class T>
class __declspec(dllimport) QValueListPrivate : public QShared
{
public:
    


    typedef QValueListIterator<T> Iterator;
    typedef QValueListConstIterator<T> ConstIterator;
    typedef QValueListNode<T> Node;
    typedef QValueListNode<T>* NodePtr;

    


    QValueListPrivate() { node = new Node; node->next = node->prev = node; nodes = 0; }
    QValueListPrivate( const QValueListPrivate<T>& _p ) : QShared() {
	node = new Node; node->next = node->prev = node; nodes = 0;
	Iterator b( _p.node->next );
	Iterator e( _p.node );
	Iterator i( node );
	while( b != e )
	    insert( i, *b++ );
    }

    void derefAndDelete() 
    {
	if ( deref() )
	    delete this;
    }


    
    virtual
#line 205 "c:\\qt\\include\\qvaluelist.h"
    ~QValueListPrivate() {
	NodePtr p = node->next;
	while( p != node ) {
	    NodePtr x = p->next;
	    delete p;
	    p = x;
	}
	delete node;
    }

    Iterator insert( Iterator it, const T& x ) {
	NodePtr p = new Node( x );
	p->next = it.node;
	p->prev = it.node->prev;
	it.node->prev->next = p;
	it.node->prev = p;
	nodes++;
	return p;
    }

    Iterator remove( Iterator it ) {
	if ( !(it.node != node) ) qWarning("ASSERT: \"%s\" in %s (%d)","it.node != node","c:\\qt\\include\\qvaluelist.h",226);
	NodePtr next = it.node->next;
	NodePtr prev = it.node->prev;
	prev->next = next;
	next->prev = prev;
	delete it.node;
	nodes--;
	return Iterator( next );
    }

    NodePtr find( NodePtr start, const T& x ) const {
	ConstIterator first( start );
	ConstIterator last( node );
	while( first != last) {
	    if ( *first == x )
		return first.node;
	    ++first;
	}
	return last.node;
    }

    int findIndex( NodePtr start, const T& x ) const {
	ConstIterator first( start );
	ConstIterator last( node );
	int pos = 0;
	while( first != last) {
	    if ( *first == x )
		return pos;
	    ++first;
	    ++pos;
	}
	return -1;
    }

    uint contains( const T& x ) const {
	uint result = 0;
	Iterator first = Iterator( node->next );
	Iterator last = Iterator( node );
	while( first != last) {
	    if ( *first == x )
		++result;
	    ++first;
	}
	return result;
    }

    void remove( const T& x ) {
	Iterator first = Iterator( node->next );
	Iterator last = Iterator( node );
	while( first != last) {
	    if ( *first == x )
		first = remove( first );
	    else
		++first;
	}
    }

    NodePtr at( uint i ) const {
	if ( !(i <= nodes) ) qWarning("ASSERT: \"%s\" in %s (%d)","i <= nodes","c:\\qt\\include\\qvaluelist.h",284);
	NodePtr p = node->next;
	for( uint x = 0; x < i; ++x )
	    p = p->next;
	return p;
    }

    void clear() {
	nodes = 0;
	NodePtr p = node->next;
	while( p != node ) {
	    NodePtr next = p->next;
	    delete p;
	    p = next;
	}
	node->next = node->prev = node;
    }

    NodePtr node;
    uint nodes;
};

template <class T>
class __declspec(dllimport) QValueList
{
public:
    


    typedef QValueListIterator<T> Iterator;
    typedef QValueListConstIterator<T> ConstIterator;
    typedef T ValueType;

    


    QValueList() { sh = new QValueListPrivate<T>; }
    QValueList( const QValueList<T>& l ) { sh = l.sh; sh->ref(); }
    ~QValueList() { sh->derefAndDelete(); }

    QValueList<T>& operator= ( const QValueList<T>& l )
    {
	l.sh->ref();
	sh->derefAndDelete();
	sh = l.sh;
	return *this;
    }

    QValueList<T> operator+ ( const QValueList<T>& l ) const
    {
	QValueList<T> l2( *this );
	for( ConstIterator it = l.begin(); it != l.end(); ++it )
	    l2.append( *it );
	return l2;
    }

    QValueList<T>& operator+= ( const QValueList<T>& l )
    {
	for( ConstIterator it = l.begin(); it != l.end(); ++it )
	    append( *it );
	return *this;
    }

    bool operator== ( const QValueList<T>& l ) const
    {
	if ( count() != l.count() )
	    return FALSE;
	ConstIterator it2 = begin();
	ConstIterator it = l.begin();
	for( ; it != l.end(); ++it, ++it2 )
	    if ( !( *it == *it2 ) )
		return FALSE;
	return TRUE;
    }

    bool operator!= ( const QValueList<T>& l ) const { return !( *this == l ); }

    Iterator begin() { detach(); return Iterator( sh->node->next ); }
    ConstIterator begin() const { return ConstIterator( sh->node->next ); }
    Iterator end() { detach(); return Iterator( sh->node ); }
    ConstIterator end() const { return ConstIterator( sh->node ); }
    Iterator fromLast() { detach(); return Iterator( sh->node->prev ); }
    ConstIterator fromLast() const { return ConstIterator( sh->node->prev ); }

    bool isEmpty() const { return ( sh->nodes == 0 ); }

    Iterator insert( Iterator it, const T& x ) { detach(); return sh->insert( it, x ); }

    Iterator append( const T& x ) { detach(); return sh->insert( end(), x ); }
    Iterator prepend( const T& x ) { detach(); return sh->insert( begin(), x ); }

    Iterator remove( Iterator it ) { detach(); return sh->remove( it ); }
    void remove( const T& x ) { detach(); sh->remove( x ); }

    T& first() { detach(); return sh->node->next->data; }
    const T& first() const { return sh->node->next->data; }
    T& last() { detach(); return sh->node->prev->data; }
    const T& last() const { return sh->node->prev->data; }

    T& operator[] ( uint i ) { detach(); return sh->at(i)->data; }
    const T& operator[] ( uint i ) const { return sh->at(i)->data; }
    Iterator at( uint i ) { detach(); return Iterator( sh->at(i) ); }
    ConstIterator at( uint i ) const { return ConstIterator( sh->at(i) ); }
    Iterator find ( const T& x ) { detach(); return Iterator( sh->find( sh->node->next, x) ); }
    ConstIterator find ( const T& x ) const { return ConstIterator( sh->find( sh->node->next, x) ); }
    Iterator find ( Iterator it, const T& x ) { detach(); return Iterator( sh->find( it.node, x ) ); }
    ConstIterator find ( ConstIterator it, const T& x ) const { return ConstIterator( sh->find( it.node, x ) ); }
    int findIndex( const T& x ) const { return sh->findIndex( sh->node->next, x) ; }
    uint contains( const T& x ) const { return sh->contains( x ); }

    uint count() const { return sh->nodes; }

    void clear() { if ( sh->count == 1 ) sh->clear(); else { sh->deref(); sh = new QValueListPrivate<T>; } }


    QValueList<T>& operator+= ( const T& x )
    {
	append( x );
	return *this;
    }
    QValueList<T>& operator<< ( const T& x )
    {
	append( x );
	return *this;
    }


protected:
    


    void detach() { if ( sh->count > 1 ) { sh->deref(); sh = new QValueListPrivate<T>( *sh ); } }

    


    QValueListPrivate<T>* sh;
};


template<class T>
inline QDataStream& operator>>( QDataStream& s, QValueList<T>& l )
{
    l.clear();
    Q_UINT32 c;
    s >> c;
    for( Q_UINT32 i = 0; i < c; ++i )
    {
	T t;
	s >> t;
	l.append( t );
    }
    return s;
}

template<class T>
inline QDataStream& operator<<( QDataStream& s, const QValueList<T>& l )
{
    s << (Q_UINT32)l.count();
    QValueListConstIterator<T> it = l.begin();
    for( ; it != l.end(); ++it )
	s << *it;
    return s;
}
#line 449 "c:\\qt\\include\\qvaluelist.h"
#line 450 "c:\\qt\\include\\qvaluelist.h"
#line 251 "c:\\qt\\include\\qvariant.h"
#line 1 "c:\\qt\\include\\qstringlist.h"









































#line 1 "c:\\qt\\include\\qvaluelist.h"

































































































































































































































































































































































































































































#line 43 "c:\\qt\\include\\qstringlist.h"
#line 1 "c:\\qt\\include\\qstring.h"
























































































































































































































































































































































































































































































































































































































































































































































































































































#line 44 "c:\\qt\\include\\qstringlist.h"
#line 1 "c:\\qt\\include\\qregexp.h"









































#line 1 "c:\\qt\\include\\qstring.h"
























































































































































































































































































































































































































































































































































































































































































































































































































































#line 43 "c:\\qt\\include\\qregexp.h"
#line 44 "c:\\qt\\include\\qregexp.h"


class __declspec(dllimport) QRegExp
{
public:
    QRegExp();
    QRegExp( const QString &, bool caseSensitive=TRUE, bool wildcard=FALSE );
    QRegExp( const QRegExp & );
   ~QRegExp();
    QRegExp    &operator=( const QRegExp & );
    QRegExp    &operator=( const QString &pattern );

    bool	operator==( const QRegExp & )  const;
    bool	operator!=( const QRegExp &r ) const
					{ return !(this->operator==(r)); }

    bool	isEmpty()	const	{ return rxdata == 0; }
    bool	isValid()	const	{ return error == 0; }

    bool	caseSensitive() const	{ return cs; }
    void	setCaseSensitive( bool );

    bool	wildcard()	const	{ return wc; }
    void	setWildcard( bool );

    QString	pattern()	const	{ return rxstring; }
    
    void	setPattern( const QString& pattern )
					{ operator=( pattern ); }

    int		match( const QString &str, int index=0, int *len=0,
		       bool indexIsStart = TRUE ) const;
    int		find( const QString& str, int index )
					{ return match( str, index ); }

protected:
    void	compile();
    const QChar *matchstr( uint *, const QChar *, uint, const QChar * ) const;

private:
    QString	rxstring;			
    uint	*rxdata;			
    int		error;				
    bool	cs;				
    bool	wc;				
};


#line 93 "c:\\qt\\include\\qregexp.h"
#line 45 "c:\\qt\\include\\qstringlist.h"
#line 46 "c:\\qt\\include\\qstringlist.h"



class QStrList;

class __declspec(dllimport) QStringList : public QValueList<QString>
{
public:
    QStringList() { }
    QStringList( const QStringList& l ) : QValueList<QString>(l) { }
    QStringList( const QValueList<QString>& l ) : QValueList<QString>(l) { }
    QStringList( const QString& i ) { append(i); }

    QStringList( const char* i ) { append(i); }
#line 61 "c:\\qt\\include\\qstringlist.h"

    static QStringList fromStrList(const QStrList&);

    void sort();

    static QStringList split( const QString &sep, const QString &str, bool allowEmptyEntries = FALSE );
    static QStringList split(  const QChar &sep, const QString &str, bool allowEmptyEntries = FALSE );
    static QStringList split(  const QRegExp &sep, const QString &str, bool allowEmptyEntries = FALSE );
    QString join( const QString &sep ) const;

    QStringList grep( const QString &str, bool cs = TRUE ) const;
    QStringList grep( const QRegExp &expr ) const;
};


class QDataStream;
extern __declspec(dllimport) QDataStream &operator>>( QDataStream &, QStringList& );
extern __declspec(dllimport) QDataStream &operator<<( QDataStream &, const QStringList& );
#line 80 "c:\\qt\\include\\qstringlist.h"
#line 81 "c:\\qt\\include\\qstringlist.h"
#line 82 "c:\\qt\\include\\qstringlist.h"
#line 252 "c:\\qt\\include\\qvariant.h"
#line 1 "c:\\qt\\include\\qmap.h"









































#line 1 "c:\\qt\\include\\qshared.h"























































#line 43 "c:\\qt\\include\\qmap.h"
#line 1 "c:\\qt\\include\\qdatastream.h"













































































































































































#line 44 "c:\\qt\\include\\qmap.h"
#line 45 "c:\\qt\\include\\qmap.h"


struct QMapNodeBase
{
    enum Color { Red, Black };

    QMapNodeBase* left;
    QMapNodeBase* right;
    QMapNodeBase* parent;

    Color color;

    QMapNodeBase* minimum() {
	QMapNodeBase* x = this;
	while ( x->left )
	    x = x->left;
	return x;
    }

    QMapNodeBase* maximum() {
	QMapNodeBase* x = this;
	while ( x->right )
	    x = x->right;
	return x;
    }
};


template <class K, class T>
struct QMapNode : public QMapNodeBase
{
    QMapNode( const K& _key, const T& _data ) { data = _data; key = _key; }
    QMapNode( const K& _key )	   { key = _key; }
    QMapNode( const QMapNode<K,T>& _n ) { key = _n.key; data = _n.data; }
    QMapNode() { }
    T data;
    K key;
};


template<class K, class T>
class __declspec(dllimport) QMapIterator
{
 public:
    


    typedef QMapNode< K, T >* NodePtr;

    


    QMapNode<K,T>* node;

    


    QMapIterator() : node( 0 ) {}
    QMapIterator( QMapNode<K,T>* p ) : node( p ) {}
    QMapIterator( const QMapIterator<K,T>& it ) : node( it.node ) {}

    bool operator==( const QMapIterator<K,T>& it ) const { return node == it.node; }
    bool operator!=( const QMapIterator<K,T>& it ) const { return node != it.node; }
    T& operator*() { return node->data; }
    const T& operator*() const { return node->data; }

    
    

    const K& key() const { return node->key; }
    T& data() { return node->data; }
    const T& data() const { return node->data; }

private:
    int inc() {
	QMapNodeBase* tmp = node;
	if ( tmp->right ) {
	    tmp = tmp->right;
	    while ( tmp->left )
		tmp = tmp->left;
	} else {
	    QMapNodeBase* y = tmp->parent;
	    while (tmp == y->right) {
		tmp = y;
		y = y->parent;
	    }
	    if (tmp->right != y)
		tmp = y;
	}
	node = (NodePtr)tmp;
	return 0;
    }

    int dec() {
	QMapNodeBase* tmp = node;
	if (tmp->color == QMapNodeBase::Red &&
	    tmp->parent->parent == tmp ) {
	    tmp = tmp->right;
	} else if (tmp->left != 0) {
	    QMapNodeBase* y = tmp->left;
	    while ( y->right )
		y = y->right;
	    tmp = y;
	} else {
	    QMapNodeBase* y = tmp->parent;
	    while (tmp == y->left) {
		tmp = y;
		y = y->parent;
	    }
	    tmp = y;
	}
	node = (NodePtr)tmp;
	return 0;
    }

public:
    QMapIterator<K,T>& operator++() {
	inc();
	return *this;
    }

    QMapIterator<K,T> operator++(int) {
	QMapIterator<K,T> tmp = *this;
	inc();
	return tmp;
    }

    QMapIterator<K,T>& operator--() {
	dec();
	return *this;
    }

    QMapIterator<K,T> operator--(int) {
	QMapIterator<K,T> tmp = *this;
	dec();
	return tmp;
    }
};

template<class K, class T>
class __declspec(dllimport) QMapConstIterator
{
 public:
    


    typedef QMapNode< K, T >* NodePtr;

    


    QMapNode<K,T>* node;

    


    QMapConstIterator() : node( 0 ) {}
    QMapConstIterator( QMapNode<K,T>* p ) : node( p ) {}
    QMapConstIterator( const QMapConstIterator<K,T>& it ) : node( it.node ) {}
    QMapConstIterator( const QMapIterator<K,T>& it ) : node( it.node ) {}

    bool operator==( const QMapConstIterator<K,T>& it ) const { return node == it.node; }
    bool operator!=( const QMapConstIterator<K,T>& it ) const { return node != it.node; }
    const T& operator*()  const { return node->data; }

    
    

    const K& key() const { return node->key; }
    const T& data() const { return node->data; }

private:
    int inc() {
        QMapNodeBase* tmp = node;
	if ( tmp->right ) {
	    tmp = tmp->right;
	    while ( tmp->left )
		tmp = tmp->left;
	} else {
	    QMapNodeBase* y = tmp->parent;
	    while (tmp == y->right) {
		tmp = y;
		y = y->parent;
	    }
	    if (tmp->right != y)
		tmp = y;
	}
	node = (NodePtr)tmp;
	return 0;
    }

    int dec() {
	QMapNodeBase* tmp = node;
	if (tmp->color == QMapNodeBase::Red &&
	    tmp->parent->parent == tmp ) {
	    tmp = tmp->right;
	} else if (tmp->left != 0) {
	    QMapNodeBase* y = tmp->left;
	    while ( y->right )
		y = y->right;
	    tmp = y;
	} else {
	    QMapNodeBase* y = tmp->parent;
	    while (tmp == y->left) {
		tmp = y;
		y = y->parent;
	    }
	    tmp = y;
	}
	node = (NodePtr)tmp;
	return 0;
    }

public:
    QMapConstIterator<K,T>& operator++() {
	inc();
	return *this;
    }

    QMapConstIterator<K,T> operator++(int) {
	QMapConstIterator<K,T> tmp = *this;
	inc();
	return tmp;
    }

    QMapConstIterator<K,T>& operator--() {
	dec();
	return *this;
    }

    QMapConstIterator<K,T> operator--(int) {
	QMapConstIterator<K,T> tmp = *this;
	dec();
	return tmp;
    }
};


class __declspec(dllimport) QMapPrivateBase : public QShared
{
public:
    QMapPrivateBase() {
	node_count = 0;
    }
    QMapPrivateBase( const QMapPrivateBase* _map) {
	node_count = _map->node_count;
    }

    


    void rotateLeft( QMapNodeBase* x, QMapNodeBase*& root);
    void rotateRight( QMapNodeBase* x, QMapNodeBase*& root );
    void rebalance( QMapNodeBase* x, QMapNodeBase*& root );
    QMapNodeBase* removeAndRebalance( QMapNodeBase* z, QMapNodeBase*& root,
				      QMapNodeBase*& leftmost,
				      QMapNodeBase*& rightmost );

    


    int node_count;
};


template <class Key, class T>
class QMapPrivate : public QMapPrivateBase
{
public:
    


    typedef QMapIterator< Key, T > Iterator;
    typedef QMapConstIterator< Key, T > ConstIterator;
    typedef QMapNode< Key, T > Node;
    typedef QMapNode< Key, T >* NodePtr;

    


    QMapPrivate() {
	header = new Node;
	header->color = QMapNodeBase::Red; 
	header->parent = 0;
	header->left = header->right = header;
    }
    QMapPrivate( const QMapPrivate< Key, T >* _map ) : QMapPrivateBase( _map ) {
	header = new Node;
	header->color = QMapNodeBase::Red; 
	if ( _map->header->parent == 0 ) {
	    header->parent = 0;
	    header->left = header->right = header;
	} else {
	    header->parent = copy( (NodePtr)(_map->header->parent) );
	    header->parent->parent = header;
	    header->left = header->parent->minimum();
	    header->right = header->parent->maximum();
	}
    }
    ~QMapPrivate() { clear(); delete header; }

    NodePtr copy( NodePtr p ) {
	if ( !p )
	    return 0;
	NodePtr n = new Node( *p );
	n->color = p->color;
	if ( p->left ) {
	    n->left = copy( (NodePtr)(p->left) );
	    n->left->parent = n;
	} else {
	    n->left = 0;
	}
	if ( p->right ) {
	    n->right = copy( (NodePtr)(p->right) );
	    n->right->parent = n;
	} else {
	    n->right = 0;
	}
	return n;
    }

    void clear() {
	clear( (NodePtr)(header->parent) );
	header->color = QMapNodeBase::Red;
	header->parent = 0;
	header->left = header->right = header;
	node_count = 0;
    }

    void clear( NodePtr p ) {
	while ( p != 0 ) {
	    clear( (NodePtr)p->right );
	    NodePtr y = (NodePtr)p->left;
	    delete p;
	    p = y;
	}
    }

    Iterator begin()	{ return Iterator( (NodePtr)(header->left ) ); }
    Iterator end()	{ return Iterator( header ); }
    ConstIterator begin() const { return ConstIterator( (NodePtr)(header->left ) ); }
    ConstIterator end() const { return ConstIterator( header ); }

    ConstIterator find(const Key& k) const {
	QMapNodeBase* y = header;        
	QMapNodeBase* x = header->parent; 

	while ( x != 0 ) {
	    
	    if ( !( key(x) < k ) ) {
		y = x;
		x = x->left;
	    } else {
		x = x->right;
	    }
	}

	
	
	if ( y == header || k < key(y) )
	    return ConstIterator( header );
	return ConstIterator( (NodePtr)y );
    }

    void remove( Iterator it ) {
	NodePtr del = (NodePtr) removeAndRebalance( it.node, header->parent, header->left, header->right );
	delete del;
	--node_count;
    }













    Iterator insertMulti(const Key& v){
	QMapNodeBase* y = header;
	QMapNodeBase* x = header->parent;
	while (x != 0){
	    y = x;
	    x = ( v < key(x) ) ? x->left : x->right;
	}
	return insert(x, y, v);
    }

    Iterator insertSingle( const Key& k ) {
	
	QMapNodeBase* y = header;
	QMapNodeBase* x = header->parent;
	bool result = TRUE;
	while ( x != 0 ) {
	    result = ( k < key(x) );
	    y = x;
	    x = result ? x->left : x->right;
	}
	
	Iterator j( (NodePtr)y );
	if ( result ) {
	    
	    if ( j == begin() ) {
		return insert(x, y, k );
	    } else {
		
		--j;
	    }
	}
	
	if ( (j.node->key) < k )
	    return insert(x, y, k );
	
	return j;
    }

    Iterator insert( QMapNodeBase* x, QMapNodeBase* y, const Key& k ) {
	NodePtr z = new Node( k );
	if (y == header || x != 0 || k < key(y) ) {
	    y->left = z;                
	    if ( y == header ) {
		header->parent = z;
		header->right = z;
	    } else if ( y == header->left )
		header->left = z;           
	} else {
	    y->right = z;
	    if ( y == header->right )
		header->right = z;          
	}
	z->parent = y;
	z->left = 0;
	z->right = 0;
	rebalance( z, header->parent );
	++node_count;
	return Iterator(z);
    }

protected:
    


    const Key& key( QMapNodeBase* b ) const { return ((NodePtr)b)->key; }

    


    NodePtr header;
};


template<class Key, class T>
class __declspec(dllimport) QMap
{
public:
    


    typedef QMapIterator< Key, T > Iterator;
    typedef QMapConstIterator< Key, T > ConstIterator;
    typedef T ValueType;
    typedef QMapPrivate< Key, T > Priv;

    


    QMap() { sh = new QMapPrivate< Key, T >; }
    QMap( const QMap<Key,T>& m ) { sh = m.sh; sh->ref(); }
    ~QMap() { if ( sh->deref() ) delete sh; }

    QMap<Key,T>& operator= ( const QMap<Key,T>& m )
      { m.sh->ref(); if ( sh->deref() ) delete sh; sh = m.sh; return *this; }

    Iterator begin() { detach(); return sh->begin(); }
    Iterator end() { detach(); return sh->end(); }
    ConstIterator begin() const { return ((const Priv*)sh)->begin(); }
    ConstIterator end() const { return ((const Priv*)sh)->end(); }

    Iterator find ( const Key& k )
	{ detach(); return Iterator( sh->find( k ).node ); }
    ConstIterator find ( const Key& k ) const
	{ return sh->find( k ); }
    T& operator[] ( const Key& k ) {
	detach(); QMapNode<Key,T>* p = sh->find( k ).node;
	if ( p != sh->end().node ) return p->data;
	return insert( k, T() ).data(); }
    const T& operator[] ( const Key& k ) const
	{ return sh->find( k ).data(); }
    bool contains ( const Key& k ) const
	{ return find( k ) != end(); }
	

    uint count() const { return sh->node_count; }

    bool isEmpty() const { return sh->node_count == 0; }

    Iterator insert( const Key& key, const T& value ) {
        detach();
        Iterator it = sh->insertSingle( key );
        it.data() = value;
        return it;
    }

    void remove( Iterator it ) { detach(); sh->remove( it ); }
    void remove( const Key& k ) {
        detach();
        Iterator it( sh->find( k ).node );
        if ( it != end() )
            sh->remove( it );
    }

    Iterator replace( const Key& k, const T& v ) {
	remove( k );
	return insert( k, v );
    }

    void clear() { if ( sh->count == 1 ) sh->clear(); else { sh->deref(); sh = new QMapPrivate<Key,T>; } }



#line 570 "c:\\qt\\include\\qmap.h"

protected:
    


    void detach() { if ( sh->count > 1 ) { sh->deref(); sh = new QMapPrivate<Key,T>( sh ); } }

    Priv* sh;
};



template<class Key, class T>
inline QDataStream& operator>>( QDataStream& s, QMap<Key,T>& m ) {
    m.clear();
    Q_UINT32 c;
    s >> c;
    for( Q_UINT32 i = 0; i < c; ++i ) {
	Key k; T t;
	s >> k >> t;
	m.insert( k, t );
    }
    return s;
}


template<class Key, class T>
inline QDataStream& operator<<( QDataStream& s, const QMap<Key,T>& m ) {
    s << (Q_UINT32)m.count();
    QMapConstIterator<Key,T> it = m.begin();
    for( ; it != m.end(); ++it )
	s << it.key() << it.data();
    return s;
}
#line 605 "c:\\qt\\include\\qmap.h"

#line 607 "c:\\qt\\include\\qmap.h"
#line 253 "c:\\qt\\include\\qvariant.h"
#line 254 "c:\\qt\\include\\qvariant.h"

inline QVariant::Type QVariant::type() const
{
    return d->typ;
}

inline bool QVariant::isValid() const
{
    return (d->typ != Invalid);
}

inline QValueListConstIterator<QString> QVariant::stringListBegin() const
{
    if ( d->typ != StringList )
	return QValueListConstIterator<QString>();
    return ((const QStringList*)d->value.ptr)->begin();
}

inline QValueListConstIterator<QString> QVariant::stringListEnd() const
{
    if ( d->typ != StringList )
	return QValueListConstIterator<QString>();
    return ((const QStringList*)d->value.ptr)->end();
}

inline QValueListConstIterator<QVariant> QVariant::listBegin() const
{
    if ( d->typ != List )
	return QValueListConstIterator<QVariant>();
    return ((const QValueList<QVariant>*)d->value.ptr)->begin();
}

inline QValueListConstIterator<QVariant> QVariant::listEnd() const
{
    if ( d->typ != List )
	return QValueListConstIterator<QVariant>();
    return ((const QValueList<QVariant>*)d->value.ptr)->end();
}

inline QMapConstIterator<QString,QVariant> QVariant::mapBegin() const
{
    if ( d->typ != Map )
	return QMapConstIterator<QString,QVariant>();
    return ((const QMap<QString,QVariant>*)d->value.ptr)->begin();
}

inline QMapConstIterator<QString,QVariant> QVariant::mapEnd() const
{
    if ( d->typ != Map )
	return QMapConstIterator<QString,QVariant>();
    return ((const QMap<QString,QVariant>*)d->value.ptr)->end();
}

inline QMapConstIterator<QString,QVariant> QVariant::mapFind( const QString& key ) const
{
    if ( d->typ != Map )
	return QMapConstIterator<QString,QVariant>();
    return ((const QMap<QString,QVariant>*)d->value.ptr)->find( key );
}

__declspec(dllimport) QDataStream& operator>> ( QDataStream& s, QVariant& p );
__declspec(dllimport) QDataStream& operator<< ( QDataStream& s, const QVariant& p );
__declspec(dllimport) QDataStream& operator>> ( QDataStream& s, QVariant::Type& p );
__declspec(dllimport) QDataStream& operator<< ( QDataStream& s, const QVariant::Type p );

#line 320 "c:\\qt\\include\\qvariant.h"

#line 322 "c:\\qt\\include\\qvariant.h"
#line 13 "h:\\c_projekte\\elansim\\login.h"
#line 1 "c:\\qt\\include\\qdialog.h"









































#line 1 "c:\\qt\\include\\qwidget.h"









































#line 1 "c:\\qt\\include\\qwindowdefs.h"










































#line 1 "c:\\qt\\include\\qobjectdefs.h"









































#line 1 "c:\\qt\\include\\qglobal.h"


























































































































































































































































































































































































































































































































































































































































#line 43 "c:\\qt\\include\\qobjectdefs.h"
#line 44 "c:\\qt\\include\\qobjectdefs.h"











#line 56 "c:\\qt\\include\\qobjectdefs.h"















 
 
 
 
 
 
 
 


 















#line 98 "c:\\qt\\include\\qobjectdefs.h"






#line 105 "c:\\qt\\include\\qobjectdefs.h"



#line 109 "c:\\qt\\include\\qobjectdefs.h"








class QObject;
class QMetaObject;
class QSignal;
class QConnection;
class QEvent;
struct QMetaData;
class QConnectionList;
class QConnectionListIt;
class QSignalDict;
class QSignalDictIt;
class QObjectList;
class QObjectListIt;
class QMemberDict;


#line 133 "c:\\qt\\include\\qobjectdefs.h"
#line 44 "c:\\qt\\include\\qwindowdefs.h"
#line 1 "c:\\qt\\include\\qstring.h"
























































































































































































































































































































































































































































































































































































































































































































































































































































#line 45 "c:\\qt\\include\\qwindowdefs.h"
#line 1 "c:\\qt\\include\\qnamespace.h"









































#line 1 "c:\\qt\\include\\qglobal.h"


























































































































































































































































































































































































































































































































































































































































#line 43 "c:\\qt\\include\\qnamespace.h"
#line 44 "c:\\qt\\include\\qnamespace.h"


class QColor;
class QCursor;


class __declspec(dllimport) Qt {
public:
    static QColor & color0;
    static QColor & color1;
    static QColor & black;
    static QColor & white;
    static QColor & darkGray;
    static QColor & gray;
    static QColor & lightGray;
    static QColor & red;
    static QColor & green;
    static QColor & blue;
    static QColor & cyan;
    static QColor & magenta;
    static QColor & yellow;
    static QColor & darkRed;
    static QColor & darkGreen;
    static QColor & darkBlue;
    static QColor & darkCyan;
    static QColor & darkMagenta;
    static QColor & darkYellow;

    
    enum ButtonState {				
	NoButton	= 0x0000,
	LeftButton	= 0x0001,
	RightButton	= 0x0002,
	MidButton	= 0x0004,
	MouseButtonMask = 0x0007,
	ShiftButton	= 0x0008,
	ControlButton   = 0x0010,
	AltButton	= 0x0020,
	KeyButtonMask	= 0x0038,
	Keypad		= 0x4000
    };

    
    enum Orientation {
        Horizontal,
	Vertical
    };

    

    
    enum AlignmentFlags {
	AlignLeft	= 0x0001,		
	AlignRight	= 0x0002,
	AlignHCenter	= 0x0004,
	AlignTop	= 0x0008,
	AlignBottom	= 0x0010,
	AlignVCenter	= 0x0020,
	AlignCenter	= AlignVCenter | AlignHCenter,

	SingleLine	= 0x0040,		
	DontClip	= 0x0080,
	ExpandTabs	= 0x0100,
	ShowPrefix	= 0x0200,
	WordBreak	= 0x0400,
	DontPrint	= 0x1000		
    };

    
    enum WidgetState {
	WState_Created		= 0x00000001,
	WState_Disabled		= 0x00000002,
	WState_Visible		= 0x00000004,
	WState_ForceHide	= 0x00000008,
	WState_OwnCursor	= 0x00000010,
	WState_MouseTracking	= 0x00000020,
	WState_CompressKeys	= 0x00000040,
	WState_BlockUpdates	= 0x00000080,
	WState_InPaintEvent	= 0x00000100,
	WState_Reparented	= 0x00000200,
	WState_ConfigPending	= 0x00000400,
	WState_Resized		= 0x00000800,
	WState_AutoMask		= 0x00001000,
	WState_Polished		= 0x00002000,
	WState_DND		= 0x00004000,
	WState_Modal		= 0x00008000,
	WState_Reserved1	= 0x00010000,
	WState_Reserved2	= 0x00020000,
	WState_Reserved3	= 0x00040000,
	WState_Maximized	= 0x00080000,
	WState_TranslateBackground = 0x00100000,
	WState_ForceDisabled	= 0x00200000,
	WState_Exposed		= 0x00400000
    };

    
    typedef uint WFlags;

    
    enum WidgetFlags {
	WType_TopLevel		= 0x00000001,	
	WType_Modal		= 0x00000002,
	WType_Popup		= 0x00000004,
	WType_Desktop		= 0x00000008,
	WType_Mask		= 0x0000000f,

	WStyle_Customize	= 0x00000010,	
	WStyle_NormalBorder	= 0x00000020,
	WStyle_DialogBorder	= 0x00000040,
	WStyle_NoBorder		= 0x00000000,
	WStyle_Title		= 0x00000080,
	WStyle_SysMenu		= 0x00000100,
	WStyle_Minimize		= 0x00000200,
	WStyle_Maximize		= 0x00000400,
	WStyle_MinMax		= WStyle_Minimize | WStyle_Maximize,
	WStyle_Tool		= 0x00000800,
	WStyle_StaysOnTop	= 0x00001000,
	WStyle_Dialog 		= 0x00002000,
	WStyle_ContextHelp	= 0x00004000,
	WStyle_NoBorderEx	= 0x00008000, 
	WStyle_Mask		= 0x0000fff0,

	WDestructiveClose	= 0x00010000,	
	WPaintDesktop		= 0x00020000,
	WPaintUnclipped		= 0x00040000,
	WPaintClever		= 0x00080000,
	WResizeNoErase		= 0x00100000,
	WMouseNoMask		= 0x00200000,
	WNorthWestGravity	= 0x00400000,
	WRepaintNoErase		= 0x00800000,
	WX11BypassWM		= 0x01000000,
	WGroupLeader 		= 0x02000000
    };

    
    

    enum ImageConversionFlags {
	ColorMode_Mask		= 0x00000003,
	AutoColor		= 0x00000000,
	ColorOnly		= 0x00000003,
	MonoOnly		= 0x00000002,
	

	AlphaDither_Mask	= 0x0000000c,
	ThresholdAlphaDither	= 0x00000000,
	OrderedAlphaDither	= 0x00000004,
	DiffuseAlphaDither	= 0x00000008,
	NoAlpha			= 0x0000000c, 

	Dither_Mask		= 0x00000030,
	DiffuseDither		= 0x00000000,
	OrderedDither		= 0x00000010,
	ThresholdDither		= 0x00000020,
	

	DitherMode_Mask		= 0x000000c0,
	AutoDither		= 0x00000000,
	PreferDither		= 0x00000040,
	AvoidDither		= 0x00000080
    };

    enum BGMode	{				
	TransparentMode,
	OpaqueMode
    };

    enum PaintUnit {				
	PixelUnit,
	LoMetricUnit, 
	HiMetricUnit, 
	LoEnglishUnit, 
	HiEnglishUnit, 
	TwipsUnit 
    };

    enum GUIStyle {
	MacStyle, 
	WindowsStyle,
	Win3Style, 
	PMStyle, 
	MotifStyle
    };

    enum Modifier {		
	SHIFT         = 0x00200000,
	CTRL          = 0x00400000,
	ALT           = 0x00800000,
	MODIFIER_MASK = 0x00e00000,
	UNICODE_ACCEL = 0x10000000,

	ASCII_ACCEL = UNICODE_ACCEL 
    };

    enum Key {
	Key_Escape = 0x1000,		
	Key_Tab = 0x1001,
	Key_Backtab = 0x1002, Key_BackTab = Key_Backtab,
	Key_Backspace = 0x1003, Key_BackSpace = Key_Backspace,
	Key_Return = 0x1004,
	Key_Enter = 0x1005,
	Key_Insert = 0x1006,
	Key_Delete = 0x1007,
	Key_Pause = 0x1008,
	Key_Print = 0x1009,
	Key_SysReq = 0x100a,
	Key_Home = 0x1010,		
	Key_End = 0x1011,
	Key_Left = 0x1012,
	Key_Up = 0x1013,
	Key_Right = 0x1014,
	Key_Down = 0x1015,
	Key_Prior = 0x1016, Key_PageUp = Key_Prior,
	Key_Next = 0x1017, Key_PageDown = Key_Next,
	Key_Shift = 0x1020,		
	Key_Control = 0x1021,
	Key_Meta = 0x1022,
	Key_Alt = 0x1023,
	Key_CapsLock = 0x1024,
	Key_NumLock = 0x1025,
	Key_ScrollLock = 0x1026,
	Key_F1 = 0x1030,		
	Key_F2 = 0x1031,
	Key_F3 = 0x1032,
	Key_F4 = 0x1033,
	Key_F5 = 0x1034,
	Key_F6 = 0x1035,
	Key_F7 = 0x1036,
	Key_F8 = 0x1037,
	Key_F9 = 0x1038,
	Key_F10 = 0x1039,
	Key_F11 = 0x103a,
	Key_F12 = 0x103b,
	Key_F13 = 0x103c,
	Key_F14 = 0x103d,
	Key_F15 = 0x103e,
	Key_F16 = 0x103f,
	Key_F17 = 0x1040,
	Key_F18 = 0x1041,
	Key_F19 = 0x1042,
	Key_F20 = 0x1043,
	Key_F21 = 0x1044,
	Key_F22 = 0x1045,
	Key_F23 = 0x1046,
	Key_F24 = 0x1047,
	Key_F25 = 0x1048,		
	Key_F26 = 0x1049,
	Key_F27 = 0x104a,
	Key_F28 = 0x104b,
	Key_F29 = 0x104c,
	Key_F30 = 0x104d,
	Key_F31 = 0x104e,
	Key_F32 = 0x104f,
	Key_F33 = 0x1050,
	Key_F34 = 0x1051,
	Key_F35 = 0x1052,
	Key_Super_L = 0x1053, 		
	Key_Super_R = 0x1054,
	Key_Menu = 0x1055,
	Key_Hyper_L = 0x1056,
	Key_Hyper_R = 0x1057,
	Key_Help = 0x1058,
	Key_Space = 0x20,		
	Key_Any = Key_Space,
	Key_Exclam = 0x21,
	Key_QuoteDbl = 0x22,
	Key_NumberSign = 0x23,
	Key_Dollar = 0x24,
	Key_Percent = 0x25,
	Key_Ampersand = 0x26,
	Key_Apostrophe = 0x27,
	Key_ParenLeft = 0x28,
	Key_ParenRight = 0x29,
	Key_Asterisk = 0x2a,
	Key_Plus = 0x2b,
	Key_Comma = 0x2c,
	Key_Minus = 0x2d,
	Key_Period = 0x2e,
	Key_Slash = 0x2f,
	Key_0 = 0x30,
	Key_1 = 0x31,
	Key_2 = 0x32,
	Key_3 = 0x33,
	Key_4 = 0x34,
	Key_5 = 0x35,
	Key_6 = 0x36,
	Key_7 = 0x37,
	Key_8 = 0x38,
	Key_9 = 0x39,
	Key_Colon = 0x3a,
	Key_Semicolon = 0x3b,
	Key_Less = 0x3c,
	Key_Equal = 0x3d,
	Key_Greater = 0x3e,
	Key_Question = 0x3f,
	Key_At = 0x40,
	Key_A = 0x41,
	Key_B = 0x42,
	Key_C = 0x43,
	Key_D = 0x44,
	Key_E = 0x45,
	Key_F = 0x46,
	Key_G = 0x47,
	Key_H = 0x48,
	Key_I = 0x49,
	Key_J = 0x4a,
	Key_K = 0x4b,
	Key_L = 0x4c,
	Key_M = 0x4d,
	Key_N = 0x4e,
	Key_O = 0x4f,
	Key_P = 0x50,
	Key_Q = 0x51,
	Key_R = 0x52,
	Key_S = 0x53,
	Key_T = 0x54,
	Key_U = 0x55,
	Key_V = 0x56,
	Key_W = 0x57,
	Key_X = 0x58,
	Key_Y = 0x59,
	Key_Z = 0x5a,
	Key_BracketLeft = 0x5b,
	Key_Backslash = 0x5c,
	Key_BracketRight = 0x5d,
	Key_AsciiCircum = 0x5e,
	Key_Underscore = 0x5f,
	Key_QuoteLeft = 0x60,
	Key_BraceLeft = 0x7b,
	Key_Bar = 0x7c,
	Key_BraceRight = 0x7d,
	Key_AsciiTilde = 0x7e,

	

	Key_nobreakspace = 0x0a0,
	Key_exclamdown = 0x0a1,
	Key_cent = 0x0a2,
	Key_sterling = 0x0a3,
	Key_currency = 0x0a4,
	Key_yen = 0x0a5,
	Key_brokenbar = 0x0a6,
	Key_section = 0x0a7,
	Key_diaeresis = 0x0a8,
	Key_copyright = 0x0a9,
	Key_ordfeminine = 0x0aa,
	Key_guillemotleft = 0x0ab,	
	Key_notsign = 0x0ac,
	Key_hyphen = 0x0ad,
	Key_registered = 0x0ae,
	Key_macron = 0x0af,
	Key_degree = 0x0b0,
	Key_plusminus = 0x0b1,
	Key_twosuperior = 0x0b2,
	Key_threesuperior = 0x0b3,
	Key_acute = 0x0b4,
	Key_mu = 0x0b5,
	Key_paragraph = 0x0b6,
	Key_periodcentered = 0x0b7,
	Key_cedilla = 0x0b8,
	Key_onesuperior = 0x0b9,
	Key_masculine = 0x0ba,
	Key_guillemotright = 0x0bb,	
	Key_onequarter = 0x0bc,
	Key_onehalf = 0x0bd,
	Key_threequarters = 0x0be,
	Key_questiondown = 0x0bf,
	Key_Agrave = 0x0c0,
	Key_Aacute = 0x0c1,
	Key_Acircumflex = 0x0c2,
	Key_Atilde = 0x0c3,
	Key_Adiaeresis = 0x0c4,
	Key_Aring = 0x0c5,
	Key_AE = 0x0c6,
	Key_Ccedilla = 0x0c7,
	Key_Egrave = 0x0c8,
	Key_Eacute = 0x0c9,
	Key_Ecircumflex = 0x0ca,
	Key_Ediaeresis = 0x0cb,
	Key_Igrave = 0x0cc,
	Key_Iacute = 0x0cd,
	Key_Icircumflex = 0x0ce,
	Key_Idiaeresis = 0x0cf,
	Key_ETH = 0x0d0,
	Key_Ntilde = 0x0d1,
	Key_Ograve = 0x0d2,
	Key_Oacute = 0x0d3,
	Key_Ocircumflex = 0x0d4,
	Key_Otilde = 0x0d5,
	Key_Odiaeresis = 0x0d6,
	Key_multiply = 0x0d7,
	Key_Ooblique = 0x0d8,
	Key_Ugrave = 0x0d9,
	Key_Uacute = 0x0da,
	Key_Ucircumflex = 0x0db,
	Key_Udiaeresis = 0x0dc,
	Key_Yacute = 0x0dd,
	Key_THORN = 0x0de,
	Key_ssharp = 0x0df,
	Key_agrave = 0x0e0,
	Key_aacute = 0x0e1,
	Key_acircumflex = 0x0e2,
	Key_atilde = 0x0e3,
	Key_adiaeresis = 0x0e4,
	Key_aring = 0x0e5,
	Key_ae = 0x0e6,
	Key_ccedilla = 0x0e7,
	Key_egrave = 0x0e8,
	Key_eacute = 0x0e9,
	Key_ecircumflex = 0x0ea,
	Key_ediaeresis = 0x0eb,
	Key_igrave = 0x0ec,
	Key_iacute = 0x0ed,
	Key_icircumflex = 0x0ee,
	Key_idiaeresis = 0x0ef,
	Key_eth = 0x0f0,
	Key_ntilde = 0x0f1,
	Key_ograve = 0x0f2,
	Key_oacute = 0x0f3,
	Key_ocircumflex = 0x0f4,
	Key_otilde = 0x0f5,
	Key_odiaeresis = 0x0f6,
	Key_division = 0x0f7,
	Key_oslash = 0x0f8,
	Key_ugrave = 0x0f9,
	Key_uacute = 0x0fa,
	Key_ucircumflex = 0x0fb,
	Key_udiaeresis = 0x0fc,
	Key_yacute = 0x0fd,
	Key_thorn = 0x0fe,
	Key_ydiaeresis = 0x0ff,

	Key_unknown = 0xffff
    };

    enum ArrowType {
	UpArrow,
	DownArrow,
	LeftArrow,
	RightArrow
    };

    
    enum RasterOp { 
	CopyROP,
	OrROP,
	XorROP,
	NotAndROP,
	EraseROP=NotAndROP,
	NotCopyROP,
	NotOrROP,
	NotXorROP,
	AndROP,	NotEraseROP=AndROP,
	NotROP,
	ClearROP,
	SetROP,
	NopROP,
	AndNotROP,
	OrNotROP,
	NandROP,
	NorROP,	LastROP=NorROP
    };

    
    enum PenStyle { 
	NoPen,
	SolidLine,
	DashLine,
	DotLine,
	DashDotLine,
	DashDotDotLine,
	MPenStyle = 0x0f
    };

    enum PenCapStyle { 
	FlatCap = 0x00,
	SquareCap = 0x10,
	RoundCap = 0x20,
	MPenCapStyle = 0x30
    };

    enum PenJoinStyle { 
	MiterJoin = 0x00,
	BevelJoin = 0x40,
	RoundJoin = 0x80,
	MPenJoinStyle = 0xc0
    };

    enum BrushStyle { 
	NoBrush,
	SolidPattern,
	Dense1Pattern,
	Dense2Pattern,
	Dense3Pattern,
	Dense4Pattern,
	Dense5Pattern,
	Dense6Pattern,
	Dense7Pattern,
	HorPattern,
	VerPattern,
	CrossPattern,
	BDiagPattern,
	FDiagPattern,
	DiagCrossPattern,
	CustomPattern=24
    };

    enum WindowsVersion {
	WV_32s 		= 0x0001,
	WV_95 		= 0x0002,
	WV_98		= 0x0003,
	WV_DOS_based	= 0x000f,

	WV_NT 		= 0x0010,
	WV_2000 	= 0x0020,
	WV_NT_based	= 0x00f0
    };

    enum UIEffect {
	UI_General,
	UI_AnimateMenu,
	UI_FadeMenu,
	UI_AnimateCombo,
	UI_AnimateTooltip,
	UI_FadeTooltip
    };


    

    static QCursor & arrowCursor;	
    static QCursor & upArrowCursor;	
    static QCursor & crossCursor;	
    static QCursor & waitCursor;	
    static QCursor & ibeamCursor;	
    static QCursor & sizeVerCursor;	
    static QCursor & sizeHorCursor;	
    static QCursor & sizeBDiagCursor;	
    static QCursor & sizeFDiagCursor;	
    static QCursor & sizeAllCursor;	
    static QCursor & blankCursor;	
    static QCursor & splitVCursor;	
						
    static QCursor & splitHCursor;	
						
    static QCursor & pointingHandCursor;	
    static QCursor & forbiddenCursor;	


    enum TextFormat {
	PlainText,
	RichText,
	AutoText
    };
};


class __declspec(dllimport) QInternal {
public:
    enum PaintDeviceFlags {
	UndefinedDevice = 0x00,
	Widget = 0x01,
	Pixmap = 0x02,
	Printer = 0x03,
	Picture = 0x04,
	System = 0x05,
	DeviceTypeMask = 0x0f,
	ExternalDevice = 0x10
    };
};

#line 616 "c:\\qt\\include\\qnamespace.h"
#line 46 "c:\\qt\\include\\qwindowdefs.h"
#line 47 "c:\\qt\\include\\qwindowdefs.h"

#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\limits.h"















#pragma once
#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\limits.h"






#line 25 "c:\\programme\\microsoft visual studio\\vc98\\include\\limits.h"













#line 39 "c:\\programme\\microsoft visual studio\\vc98\\include\\limits.h"
















#line 56 "c:\\programme\\microsoft visual studio\\vc98\\include\\limits.h"





#line 62 "c:\\programme\\microsoft visual studio\\vc98\\include\\limits.h"





#line 68 "c:\\programme\\microsoft visual studio\\vc98\\include\\limits.h"








#line 77 "c:\\programme\\microsoft visual studio\\vc98\\include\\limits.h"








#line 86 "c:\\programme\\microsoft visual studio\\vc98\\include\\limits.h"
































#line 119 "c:\\programme\\microsoft visual studio\\vc98\\include\\limits.h"
#line 49 "c:\\qt\\include\\qwindowdefs.h"



class QPaintDevice;
class QPaintDeviceMetrics;
class QWidget;
class QWidgetMapper;
class QDialog;
class QColor;
class QColorGroup;
class QPalette;
class QCursor;
class QPoint;
class QSize;
class QRect;
class QPointArray;
class QPainter;
class QRegion;
class QFont;
class QFontMetrics;
class QFontInfo;
class QPen;
class QBrush;
class QWMatrix;
class QPixmap;
class QBitmap;
class QMovie;
class QImage;
class QImageIO;
class QPicture;
class QPrinter;
class QAccel;
class QTimer;
class QTime;
class QClipboard;




class QWidgetList;
class QWidgetListIt;










#line 101 "c:\\qt\\include\\qwindowdefs.h"



#line 1 "c:\\qt\\include\\qwindowdefs_win.h"


#line 4 "c:\\qt\\include\\qwindowdefs_win.h"




#line 9 "c:\\qt\\include\\qwindowdefs_win.h"



#line 13 "c:\\qt\\include\\qwindowdefs_win.h"

typedef void *HANDLE;





#line 21 "c:\\qt\\include\\qwindowdefs_win.h"











#line 33 "c:\\qt\\include\\qwindowdefs_win.h"

struct HINSTANCE__; typedef struct HINSTANCE__ *HINSTANCE;
struct HDC__; typedef struct HDC__ *HDC;
struct HWND__; typedef struct HWND__ *HWND;
struct HFONT__; typedef struct HFONT__ *HFONT;
struct HPEN__; typedef struct HPEN__ *HPEN;
struct HBRUSH__; typedef struct HBRUSH__ *HBRUSH;
struct HBITMAP__; typedef struct HBITMAP__ *HBITMAP;
struct HICON__; typedef struct HICON__ *HICON;
typedef HICON HCURSOR;
struct HPALETTE__; typedef struct HPALETTE__ *HPALETTE;
struct HRGN__; typedef struct HRGN__ *HRGN;

typedef struct tagMSG MSG;
typedef HWND  WId;


__declspec(dllimport) HINSTANCE qWinAppInst();
__declspec(dllimport) HINSTANCE qWinAppPrevInst();
__declspec(dllimport) int	   qWinAppCmdShow();
__declspec(dllimport) HDC	   qt_display_dc();















#line 70 "c:\\qt\\include\\qwindowdefs_win.h"
#line 105 "c:\\qt\\include\\qwindowdefs.h"
#line 106 "c:\\qt\\include\\qwindowdefs.h"



























#line 134 "c:\\qt\\include\\qwindowdefs.h"








#line 143 "c:\\qt\\include\\qwindowdefs.h"

class QApplication;



#line 149 "c:\\qt\\include\\qwindowdefs.h"




typedef Q_INT32 QCOORD;				
const QCOORD QCOORD_MAX =  2147483647;
const QCOORD QCOORD_MIN = -QCOORD_MAX - 1;

typedef unsigned int QRgb;			

__declspec(dllimport) char *qAppName();			




typedef void (*Q_CleanUpFunction)();
__declspec(dllimport) void qAddPostRoutine( Q_CleanUpFunction );
__declspec(dllimport) void qRemovePostRoutine( Q_CleanUpFunction );


__declspec(dllimport) void *qt_find_obj_child( QObject *, const char *, const char * );




#line 175 "c:\\qt\\include\\qwindowdefs.h"
#line 43 "c:\\qt\\include\\qwidget.h"
#line 1 "c:\\qt\\include\\qobject.h"









































#line 1 "c:\\qt\\include\\qobjectdefs.h"




































































































































#line 43 "c:\\qt\\include\\qobject.h"
#line 1 "c:\\qt\\include\\qwindowdefs.h"














































































































































































#line 44 "c:\\qt\\include\\qobject.h"
#line 1 "c:\\qt\\include\\qstring.h"
























































































































































































































































































































































































































































































































































































































































































































































































































































#line 45 "c:\\qt\\include\\qobject.h"
#line 1 "c:\\qt\\include\\qevent.h"









































#line 1 "c:\\qt\\include\\qwindowdefs.h"














































































































































































#line 43 "c:\\qt\\include\\qevent.h"
#line 1 "c:\\qt\\include\\qregion.h"









































#line 1 "c:\\qt\\include\\qshared.h"























































#line 43 "c:\\qt\\include\\qregion.h"
#line 1 "c:\\qt\\include\\qrect.h"









































#line 1 "c:\\qt\\include\\qsize.h"









































#line 1 "c:\\qt\\include\\qpoint.h"









































#line 1 "c:\\qt\\include\\qwindowdefs.h"














































































































































































#line 43 "c:\\qt\\include\\qpoint.h"
#line 44 "c:\\qt\\include\\qpoint.h"


class __declspec(dllimport) QPoint
{
public:
    QPoint();
    QPoint( int xpos, int ypos );

    bool   isNull()	const;

    int	   x()		const;
    int	   y()		const;
    void   setX( int x );
    void   setY( int y );

    int manhattanLength() const;

    QCOORD &rx();
    QCOORD &ry();

    QPoint &operator+=( const QPoint &p );
    QPoint &operator-=( const QPoint &p );
    QPoint &operator*=( int c );
    QPoint &operator*=( double c );
    QPoint &operator/=( int c );
    QPoint &operator/=( double c );

    friend inline bool	 operator==( const QPoint &, const QPoint & );
    friend inline bool	 operator!=( const QPoint &, const QPoint & );
    friend inline QPoint operator+( const QPoint &, const QPoint & );
    friend inline QPoint operator-( const QPoint &, const QPoint & );
    friend inline QPoint operator*( const QPoint &, int );
    friend inline QPoint operator*( int, const QPoint & );
    friend inline QPoint operator*( const QPoint &, double );
    friend inline QPoint operator*( double, const QPoint & );
    friend inline QPoint operator-( const QPoint & );
    friend inline QPoint operator/( const QPoint &, int );
    friend inline QPoint operator/( const QPoint &, double );

private:
    static void warningDivByZero();




#line 90 "c:\\qt\\include\\qpoint.h"
    QCOORD xp;
    QCOORD yp;
#line 93 "c:\\qt\\include\\qpoint.h"
};






__declspec(dllimport) QDataStream &operator<<( QDataStream &, const QPoint & );
__declspec(dllimport) QDataStream &operator>>( QDataStream &, QPoint & );
#line 103 "c:\\qt\\include\\qpoint.h"





inline QPoint::QPoint()
{ xp=0; yp=0; }

inline QPoint::QPoint( int xpos, int ypos )
{ xp=(QCOORD)xpos; yp=(QCOORD)ypos; }

inline bool QPoint::isNull() const
{ return xp == 0 && yp == 0; }

inline int QPoint::x() const
{ return xp; }

inline int QPoint::y() const
{ return yp; }

inline void QPoint::setX( int x )
{ xp = (QCOORD)x; }

inline void QPoint::setY( int y )
{ yp = (QCOORD)y; }

inline QCOORD &QPoint::rx()
{ return xp; }

inline QCOORD &QPoint::ry()
{ return yp; }

inline QPoint &QPoint::operator+=( const QPoint &p )
{ xp+=p.xp; yp+=p.yp; return *this; }

inline QPoint &QPoint::operator-=( const QPoint &p )
{ xp-=p.xp; yp-=p.yp; return *this; }

inline QPoint &QPoint::operator*=( int c )
{ xp*=(QCOORD)c; yp*=(QCOORD)c; return *this; }

inline QPoint &QPoint::operator*=( double c )
{ xp=(QCOORD)(xp*c); yp=(QCOORD)(yp*c); return *this; }

inline bool operator==( const QPoint &p1, const QPoint &p2 )
{ return p1.xp == p2.xp && p1.yp == p2.yp; }

inline bool operator!=( const QPoint &p1, const QPoint &p2 )
{ return p1.xp != p2.xp || p1.yp != p2.yp; }

inline QPoint operator+( const QPoint &p1, const QPoint &p2 )
{ return QPoint(p1.xp+p2.xp, p1.yp+p2.yp); }

inline QPoint operator-( const QPoint &p1, const QPoint &p2 )
{ return QPoint(p1.xp-p2.xp, p1.yp-p2.yp); }

inline QPoint operator*( const QPoint &p, int c )
{ return QPoint(p.xp*c, p.yp*c); }

inline QPoint operator*( int c, const QPoint &p )
{ return QPoint(p.xp*c, p.yp*c); }

inline QPoint operator*( const QPoint &p, double c )
{ return QPoint((QCOORD)(p.xp*c), (QCOORD)(p.yp*c)); }

inline QPoint operator*( double c, const QPoint &p )
{ return QPoint((QCOORD)(p.xp*c), (QCOORD)(p.yp*c)); }

inline QPoint operator-( const QPoint &p )
{ return QPoint(-p.xp, -p.yp); }

inline QPoint &QPoint::operator/=( int c )
{

    if ( c == 0 )
	warningDivByZero();
#line 180 "c:\\qt\\include\\qpoint.h"
    xp/=(QCOORD)c;
    yp/=(QCOORD)c;
    return *this;
}

inline QPoint &QPoint::operator/=( double c )
{

    if ( c == 0.0 )
	warningDivByZero();
#line 191 "c:\\qt\\include\\qpoint.h"
    xp=(QCOORD)(xp/c);
    yp=(QCOORD)(yp/c);
    return *this;
}

inline QPoint operator/( const QPoint &p, int c )
{

    if ( c == 0 )
	QPoint::warningDivByZero();
#line 202 "c:\\qt\\include\\qpoint.h"
    return QPoint(p.xp/c, p.yp/c);
}

inline QPoint operator/( const QPoint &p, double c )
{

    if ( c == 0.0 )
	QPoint::warningDivByZero();
#line 211 "c:\\qt\\include\\qpoint.h"
    return QPoint((QCOORD)(p.xp/c), (QCOORD)(p.yp/c));
}


#line 216 "c:\\qt\\include\\qpoint.h"
#line 43 "c:\\qt\\include\\qsize.h"
#line 44 "c:\\qt\\include\\qsize.h"


class __declspec(dllimport) QSize
{
public:
    QSize();
    QSize( int w, int h );

    bool   isNull()	const;
    bool   isEmpty()	const;
    bool   isValid()	const;

    int	   width()	const;
    int	   height()	const;
    void   setWidth( int w );
    void   setHeight( int h );
    void   transpose();

    QSize expandedTo( const QSize & ) const;
    QSize boundedTo( const QSize & ) const;

    QCOORD &rwidth();
    QCOORD &rheight();

    QSize &operator+=( const QSize & );
    QSize &operator-=( const QSize & );
    QSize &operator*=( int c );
    QSize &operator*=( double c );
    QSize &operator/=( int c );
    QSize &operator/=( double c );

    friend inline bool	operator==( const QSize &, const QSize & );
    friend inline bool	operator!=( const QSize &, const QSize & );
    friend inline QSize operator+( const QSize &, const QSize & );
    friend inline QSize operator-( const QSize &, const QSize & );
    friend inline QSize operator*( const QSize &, int );
    friend inline QSize operator*( int, const QSize & );
    friend inline QSize operator*( const QSize &, double );
    friend inline QSize operator*( double, const QSize & );
    friend inline QSize operator/( const QSize &, int );
    friend inline QSize operator/( const QSize &, double );

private:
    static void warningDivByZero();

    QCOORD wd;
    QCOORD ht;
};






__declspec(dllimport) QDataStream &operator<<( QDataStream &, const QSize & );
__declspec(dllimport) QDataStream &operator>>( QDataStream &, QSize & );






inline QSize::QSize()
{ wd = ht = -1; }

inline QSize::QSize( int w, int h )
{ wd=(QCOORD)w; ht=(QCOORD)h; }

inline bool QSize::isNull() const
{ return wd==0 && ht==0; }

inline bool QSize::isEmpty() const
{ return wd<1 || ht<1; }

inline bool QSize::isValid() const
{ return wd>=0 && ht>=0; }

inline int QSize::width() const
{ return wd; }

inline int QSize::height() const
{ return ht; }

inline void QSize::setWidth( int w )
{ wd=(QCOORD)w; }

inline void QSize::setHeight( int h )
{ ht=(QCOORD)h; }

inline QCOORD &QSize::rwidth()
{ return wd; }

inline QCOORD &QSize::rheight()
{ return ht; }

inline QSize &QSize::operator+=( const QSize &s )
{ wd+=s.wd; ht+=s.ht; return *this; }

inline QSize &QSize::operator-=( const QSize &s )
{ wd-=s.wd; ht-=s.ht; return *this; }

inline QSize &QSize::operator*=( int c )
{ wd*=(QCOORD)c; ht*=(QCOORD)c; return *this; }

inline QSize &QSize::operator*=( double c )
{ wd=(QCOORD)(wd*c); ht=(QCOORD)(ht*c); return *this; }

inline bool operator==( const QSize &s1, const QSize &s2 )
{ return s1.wd == s2.wd && s1.ht == s2.ht; }

inline bool operator!=( const QSize &s1, const QSize &s2 )
{ return s1.wd != s2.wd || s1.ht != s2.ht; }

inline QSize operator+( const QSize & s1, const QSize & s2 )
{ return QSize(s1.wd+s2.wd, s1.ht+s2.ht); }

inline QSize operator-( const QSize &s1, const QSize &s2 )
{ return QSize(s1.wd-s2.wd, s1.ht-s2.ht); }

inline QSize operator*( const QSize &s, int c )
{ return QSize(s.wd*c, s.ht*c); }

inline QSize operator*( int c, const QSize &s )
{  return QSize(s.wd*c, s.ht*c); }

inline QSize operator*( const QSize &s, double c )
{ return QSize((QCOORD)(s.wd*c), (QCOORD)(s.ht*c)); }

inline QSize operator*( double c, const QSize &s )
{ return QSize((QCOORD)(s.wd*c), (QCOORD)(s.ht*c)); }

inline QSize &QSize::operator/=( int c )
{

    if ( c == 0 )
	warningDivByZero();
#line 181 "c:\\qt\\include\\qsize.h"
    wd/=(QCOORD)c; ht/=(QCOORD)c;
    return *this;
}

inline QSize &QSize::operator/=( double c )
{

    if ( c == 0.0 )
	warningDivByZero();
#line 191 "c:\\qt\\include\\qsize.h"
    wd=(QCOORD)(wd/c); ht=(QCOORD)(ht/c);
    return *this;
}

inline QSize operator/( const QSize &s, int c )
{

    if ( c == 0 )
	QSize::warningDivByZero();
#line 201 "c:\\qt\\include\\qsize.h"
    return QSize(s.wd/c, s.ht/c);
}

inline QSize operator/( const QSize &s, double c )
{

    if ( c == 0.0 )
	QSize::warningDivByZero();
#line 210 "c:\\qt\\include\\qsize.h"
    return QSize((QCOORD)(s.wd/c), (QCOORD)(s.ht/c));
}

inline QSize QSize::expandedTo( const QSize & otherSize ) const
{
    return QSize( ((wd) > (otherSize.wd) ? (wd) : (otherSize.wd)), ((ht) > (otherSize.ht) ? (ht) : (otherSize.ht)) );
}

inline QSize QSize::boundedTo( const QSize & otherSize ) const
{
    return QSize( ((wd) < (otherSize.wd) ? (wd) : (otherSize.wd)), ((ht) < (otherSize.ht) ? (ht) : (otherSize.ht)) );
}


#line 225 "c:\\qt\\include\\qsize.h"
#line 43 "c:\\qt\\include\\qrect.h"
#line 44 "c:\\qt\\include\\qrect.h"




#line 49 "c:\\qt\\include\\qrect.h"

class __declspec(dllimport) QRect					
{
public:
    QRect()	{ x1 = y1 = 0; x2 = y2 = -1; }
    QRect( const QPoint &topleft, const QPoint &bottomright );
    QRect( const QPoint &topleft, const QSize &size );
    QRect( int left, int top, int width, int height );

    bool   isNull()	const;
    bool   isEmpty()	const;
    bool   isValid()	const;
    QRect  normalize()	const;

    int	   left()	const;
    int	   top()	const;
    int	   right()	const;
    int	   bottom()	const;

    QCOORD &rLeft();
    QCOORD &rTop();
    QCOORD &rRight();
    QCOORD &rBottom();
	
    int	   x()		const;
    int	   y()		const;
    void   setLeft( int pos );
    void   setTop( int pos );
    void   setRight( int pos );
    void   setBottom( int pos );
    void   setX( int x );
    void   setY( int y );

    QPoint topLeft()	 const;
    QPoint bottomRight() const;
    QPoint topRight()	 const;
    QPoint bottomLeft()	 const;
    QPoint center()	 const;

    void   rect( int *x, int *y, int *w, int *h ) const;
    void   coords( int *x1, int *y1, int *x2, int *y2 ) const;

    void   moveTopLeft( const QPoint &p );
    void   moveBottomRight( const QPoint &p );
    void   moveTopRight( const QPoint &p );
    void   moveBottomLeft( const QPoint &p );
    void   moveCenter( const QPoint &p );
    void   moveBy( int dx, int dy );

    void   setRect( int x, int y, int w, int h );
    void   setCoords( int x1, int y1, int x2, int y2 );

    QSize  size()	const;
    int	   width()	const;
    int	   height()	const;
    void   setWidth( int w );
    void   setHeight( int h );
    void   setSize( const QSize &s );

    QRect  operator|(const QRect &r) const;
    QRect  operator&(const QRect &r) const;
    QRect&  operator|=(const QRect &r);
    QRect&  operator&=(const QRect &r);

    bool   contains( const QPoint &p, bool proper=FALSE ) const;
    bool   contains( int x, int y, bool proper=FALSE ) const;
    bool   contains( const QRect &r, bool proper=FALSE ) const;
    QRect  unite( const QRect &r ) const;
    QRect  intersect( const QRect &r ) const;
    bool   intersects( const QRect &r ) const;

    friend __declspec(dllimport) bool operator==( const QRect &, const QRect & );
    friend __declspec(dllimport) bool operator!=( const QRect &, const QRect & );

private:





#line 130 "c:\\qt\\include\\qrect.h"
    QCOORD x1;
    QCOORD y1;
    QCOORD x2;
    QCOORD y2;
#line 135 "c:\\qt\\include\\qrect.h"
};

__declspec(dllimport) bool operator==( const QRect &, const QRect & );
__declspec(dllimport) bool operator!=( const QRect &, const QRect & );






__declspec(dllimport) QDataStream &operator<<( QDataStream &, const QRect & );
__declspec(dllimport) QDataStream &operator>>( QDataStream &, QRect & );
#line 148 "c:\\qt\\include\\qrect.h"





inline QRect::QRect( int left, int top, int width, int height )
{
    x1 = (QCOORD)left;
    y1 = (QCOORD)top;
    x2 = (QCOORD)(left+width-1);
    y2 = (QCOORD)(top+height-1);
}

inline bool QRect::isNull() const
{ return x2 == x1-1 && y2 == y1-1; }

inline bool QRect::isEmpty() const
{ return x1 > x2 || y1 > y2; }

inline bool QRect::isValid() const
{ return x1 <= x2 && y1 <= y2; }

inline int QRect::left() const
{ return x1; }

inline int QRect::top() const
{ return y1; }

inline int QRect::right() const
{ return x2; }

inline int QRect::bottom() const
{ return y2; }

inline QCOORD &QRect::rLeft()
{ return x1; }

inline QCOORD & QRect::rTop()
{ return y1; }

inline QCOORD & QRect::rRight()
{ return x2; }

inline QCOORD & QRect::rBottom()
{ return y2; }

inline int QRect::x() const
{ return x1; }

inline int QRect::y() const
{ return y1; }

inline void QRect::setLeft( int pos )
{ x1 = (QCOORD)pos; }

inline void QRect::setTop( int pos )
{ y1 = (QCOORD)pos; }

inline void QRect::setRight( int pos )
{ x2 = (QCOORD)pos; }

inline void QRect::setBottom( int pos )
{ y2 = (QCOORD)pos; }

inline void QRect::setX( int x )
{ x1 = (QCOORD)x; }

inline void QRect::setY( int y )
{ y1 = (QCOORD)y; }

inline QPoint QRect::topLeft() const
{ return QPoint(x1, y1); }

inline QPoint QRect::bottomRight() const
{ return QPoint(x2, y2); }

inline QPoint QRect::topRight() const
{ return QPoint(x2, y1); }

inline QPoint QRect::bottomLeft() const
{ return QPoint(x1, y2); }

inline QPoint QRect::center() const
{ return QPoint((x1+x2)/2, (y1+y2)/2); }

inline int QRect::width() const
{ return  x2 - x1 + 1; }

inline int QRect::height() const
{ return  y2 - y1 + 1; }

inline QSize QRect::size() const
{ return QSize(x2-x1+1, y2-y1+1); }

inline bool QRect::contains( int x, int y, bool proper ) const
{
    if ( proper )
        return x > x1 && x < x2 &&
               y > y1 && y < y2;
    else
        return x >= x1 && x <= x2 &&
               y >= y1 && y <= y2;
}

#line 253 "c:\\qt\\include\\qrect.h"
#line 44 "c:\\qt\\include\\qregion.h"
#line 1 "c:\\qt\\include\\qstring.h"
























































































































































































































































































































































































































































































































































































































































































































































































































































#line 45 "c:\\qt\\include\\qregion.h"
#line 46 "c:\\qt\\include\\qregion.h"


class __declspec(dllimport) QRegion
{
public:
    enum RegionType { Rectangle, Ellipse };

    QRegion();
    QRegion( int x, int y, int w, int h, RegionType = Rectangle );
    QRegion( const QRect &, RegionType = Rectangle );
    QRegion( const QPointArray &, bool winding=FALSE );
    QRegion( const QRegion & );
    QRegion( const QBitmap & );
   ~QRegion();
    QRegion &operator=( const QRegion & );

    bool    isNull()   const;
    bool    isEmpty()  const;

    bool    contains( const QPoint &p ) const;
    bool    contains( const QRect &r )	const;

    void    translate( int dx, int dy );

    QRegion unite( const QRegion & )	const;
    QRegion intersect( const QRegion &) const;
    QRegion subtract( const QRegion & ) const;
    QRegion eor( const QRegion & )	const;

    QRect   boundingRect() const;
    QArray<QRect> rects() const;
    void setRects( const QRect *, int );

    QRegion operator|( const QRegion & ) const;
    QRegion operator+( const QRegion & ) const;
    QRegion operator&( const QRegion & ) const;
    QRegion operator-( const QRegion & ) const;
    QRegion operator^( const QRegion & ) const;
    QRegion& operator|=( const QRegion & );
    QRegion& operator+=( const QRegion & );
    QRegion& operator&=( const QRegion & );
    QRegion& operator-=( const QRegion & );
    QRegion& operator^=( const QRegion & );

    bool    operator==( const QRegion & )  const;
    bool    operator!=( const QRegion &r ) const
			{ return !(operator==(r)); }


    HRGN    handle() const { return data->rgn; }







#line 104 "c:\\qt\\include\\qregion.h"


    friend __declspec(dllimport) QDataStream &operator<<( QDataStream &, const QRegion & );
    friend __declspec(dllimport) QDataStream &operator>>( QDataStream &, QRegion & );
#line 109 "c:\\qt\\include\\qregion.h"
private:
    QRegion( bool );
    QRegion copy() const;
    void    detach();

    QRegion winCombine( const QRegion &, int ) const;
#line 116 "c:\\qt\\include\\qregion.h"
    void    exec( const QByteArray &, int ver = 0 );
    struct QRegionData : public QShared {

	HRGN   rgn;






#line 127 "c:\\qt\\include\\qregion.h"
	bool   is_null;
    } *data;
};



















__declspec(dllimport) QDataStream &operator<<( QDataStream &, const QRegion & );
__declspec(dllimport) QDataStream &operator>>( QDataStream &, QRegion & );
#line 152 "c:\\qt\\include\\qregion.h"


#line 155 "c:\\qt\\include\\qregion.h"
#line 44 "c:\\qt\\include\\qevent.h"
#line 1 "c:\\qt\\include\\qnamespace.h"







































































































































































































































































































































































































































































































































































































































#line 45 "c:\\qt\\include\\qevent.h"
#line 1 "c:\\qt\\include\\qmime.h"









































#line 1 "c:\\qt\\include\\qwindowdefs.h"














































































































































































#line 43 "c:\\qt\\include\\qmime.h"
#line 44 "c:\\qt\\include\\qmime.h"



class __declspec(dllimport) QMimeSource {
public:
    virtual ~QMimeSource();
    virtual const char* format( int n = 0 ) const = 0;
    virtual bool provides( const char* ) const;
    virtual QByteArray encodedData( const char* ) const = 0;
};

class QMimeSourceFactoryData;
class QStringList;

class __declspec(dllimport) QMimeSourceFactory {
public:
    QMimeSourceFactory();
    virtual ~QMimeSourceFactory();

    static QMimeSourceFactory* defaultFactory();
    static void setDefaultFactory( QMimeSourceFactory* );

    virtual const QMimeSource* data(const QString& abs_name) const;
    virtual QString makeAbsolute(const QString& abs_or_rel_name, const QString& context) const;
    const QMimeSource* data(const QString& abs_or_rel_name, const QString& context) const;

    virtual void setText( const QString& abs_name, const QString& text );
    virtual void setImage( const QString& abs_name, const QImage& im );
    virtual void setPixmap( const QString& abs_name, const QPixmap& pm );
    virtual void setData( const QString& abs_name, QMimeSource* data );
    virtual void setFilePath( const QStringList& );
    virtual QStringList filePath() const;
    void addFilePath( const QString& );
    virtual void setExtensionType( const QString& ext, const char* mimetype );

private:
    QMimeSourceFactoryData* d;
};





#line 1 "c:\\qt\\include\\qlist.h"









































#line 1 "c:\\qt\\include\\qglist.h"









































#line 1 "c:\\qt\\include\\qcollection.h"









































#line 1 "c:\\qt\\include\\qglobal.h"


























































































































































































































































































































































































































































































































































































































































#line 43 "c:\\qt\\include\\qcollection.h"
#line 44 "c:\\qt\\include\\qcollection.h"


class QGVector;
class QGList;
class QGDict;


class __declspec(dllimport) QCollection			
{
public:
    bool autoDelete()	const	       { return del_item; }
    void setAutoDelete( bool enable )  { del_item = enable; }

    virtual uint  count() const = 0;
    virtual void  clear() = 0;			

    typedef void *Item;				

protected:
    QCollection() { del_item = FALSE; }		
    QCollection(const QCollection &) { del_item = FALSE; }
    virtual ~QCollection() {}

    bool del_item;				

    virtual Item     newItem( Item );		
    virtual void     deleteItem( Item );	
};


#line 75 "c:\\qt\\include\\qcollection.h"
#line 43 "c:\\qt\\include\\qglist.h"
#line 44 "c:\\qt\\include\\qglist.h"






class __declspec(dllimport) QLNode
{
friend class QGList;
friend class QGListIterator;
public:
    QCollection::Item getData()	{ return data; }
private:
    QCollection::Item data;
    QLNode *prev;
    QLNode *next;
    QLNode( QCollection::Item d ) { data = d; }
};






class __declspec(dllimport) QGList : public QCollection	
{
friend class QGListIterator;
friend class QGVector;				
public:
    uint  count() const;			


    QDataStream &read( QDataStream & );		
    QDataStream &write( QDataStream & ) const;	
#line 79 "c:\\qt\\include\\qglist.h"
protected:
    QGList();					
    QGList( const QGList & );			
    virtual ~QGList();

    QGList &operator=( const QGList & );	
    bool operator==( const QGList& ) const;

    void inSort( QCollection::Item );		
    void append( QCollection::Item );		
    bool insertAt( uint index, QCollection::Item ); 
    void relinkNode( QLNode * );		
    bool removeNode( QLNode * );		
    bool remove( QCollection::Item = 0 );	
    bool removeRef( QCollection::Item = 0 );	
    bool removeFirst();				
    bool removeLast();				
    bool removeAt( uint index );		
    QCollection::Item takeNode( QLNode * );	
    QCollection::Item take();			
    QCollection::Item takeAt( uint index );	
    QCollection::Item takeFirst();		
    QCollection::Item takeLast();		

    void sort();                        
    void clear();			

    int	 findRef( QCollection::Item, bool = TRUE ); 
    int	 find( QCollection::Item, bool = TRUE ); 

    uint containsRef( QCollection::Item ) const; 
    uint contains( QCollection::Item )	const;	

    QCollection::Item at( uint index );		
    int	  at() const;				
    QLNode *currentNode() const;		

    QCollection::Item get() const;		

    QCollection::Item cfirst() const;	
    QCollection::Item clast()  const;	
    QCollection::Item first();		
    QCollection::Item last();		
    QCollection::Item next();		
    QCollection::Item prev();		

    void  toVector( QGVector * ) const;		

    virtual int compareItems( QCollection::Item, QCollection::Item );


    virtual QDataStream &read( QDataStream &, QCollection::Item & );
    virtual QDataStream &write( QDataStream &, QCollection::Item ) const;
#line 133 "c:\\qt\\include\\qglist.h"
private:
    void  prepend( QCollection::Item ); 

    void heapSortPushDown( QCollection::Item* heap, int first, int last );

    QLNode *firstNode;				
    QLNode *lastNode;				
    QLNode *curNode;				
    int	    curIndex;				
    uint    numNodes;				
    QGList *iterators;				

    QLNode *locate( uint );			
    QLNode *unlink();				
};


inline uint QGList::count() const
{
    return numNodes;
}

inline bool QGList::removeFirst()
{
    first();
    return remove();
}

inline bool QGList::removeLast()
{
    last();
    return remove();
}

inline int QGList::at() const
{
    return curIndex;
}

inline QCollection::Item QGList::at( uint index )
{
    QLNode *n = locate( index );
    return n ? n->data : 0;
}

inline QLNode *QGList::currentNode() const
{
    return curNode;
}

inline QCollection::Item QGList::get() const
{
    return curNode ? curNode->data : 0;
}

inline QCollection::Item QGList::cfirst() const
{
    return firstNode ? firstNode->data : 0;
}

inline QCollection::Item QGList::clast() const
{
    return lastNode ? lastNode->data : 0;
}







__declspec(dllimport) QDataStream &operator>>( QDataStream &, QGList & );
__declspec(dllimport) QDataStream &operator<<( QDataStream &, const QGList & );
#line 207 "c:\\qt\\include\\qglist.h"





class __declspec(dllimport) QGListIterator			
{
friend class QGList;
protected:
    QGListIterator( const QGList & );
    QGListIterator( const QGListIterator & );
    QGListIterator &operator=( const QGListIterator & );
   ~QGListIterator();

    bool  atFirst() const;			
    bool  atLast()  const;			
    QCollection::Item	  toFirst();				
    QCollection::Item	  toLast();				

    QCollection::Item	  get() const;				
    QCollection::Item	  operator()();				
    QCollection::Item	  operator++();				
    QCollection::Item	  operator+=(uint);			
    QCollection::Item	  operator--();				
    QCollection::Item	  operator-=(uint);			

protected:
    QGList *list;				

private:
    QLNode  *curNode;				
};


inline bool QGListIterator::atFirst() const
{
    return curNode == list->firstNode;
}

inline bool QGListIterator::atLast() const
{
    return curNode == list->lastNode;
}

inline QCollection::Item QGListIterator::get() const
{
    return curNode ? curNode->data : 0;
}


#line 258 "c:\\qt\\include\\qglist.h"
#line 43 "c:\\qt\\include\\qlist.h"
#line 44 "c:\\qt\\include\\qlist.h"


template<class type> class __declspec(dllimport) QList : public QGList
{
public:
    QList()				{}
    QList( const QList<type> &l ) : QGList(l) {}
   ~QList()				{ clear(); }
    QList<type> &operator=(const QList<type> &l)
			{ return (QList<type>&)QGList::operator=(l); }
    bool operator==( const QList<type> &list ) const
    { return QGList::operator==( list ); }
    uint  count()   const		{ return QGList::count(); }
    bool  isEmpty() const		{ return QGList::count() == 0; }
    bool  insert( uint i, const type *d){ return QGList::insertAt(i,(QCollection::Item)d); }
    void  inSort( const type *d )	{ QGList::inSort((QCollection::Item)d); }
    void  prepend( const type *d )	{ QGList::insertAt(0,(QCollection::Item)d); }
    void  append( const type *d )	{ QGList::append((QCollection::Item)d); }
    bool  remove( uint i )		{ return QGList::removeAt(i); }
    bool  remove()			{ return QGList::remove((QCollection::Item)0); }
    bool  remove( const type *d )	{ return QGList::remove((QCollection::Item)d); }
    bool  removeRef( const type *d )	{ return QGList::removeRef((QCollection::Item)d); }
    void  removeNode( QLNode *n )	{ QGList::removeNode(n); }
    bool  removeFirst()			{ return QGList::removeFirst(); }
    bool  removeLast()			{ return QGList::removeLast(); }
    type *take( uint i )		{ return (type *)QGList::takeAt(i); }
    type *take()			{ return (type *)QGList::take(); }
    type *takeNode( QLNode *n )		{ return (type *)QGList::takeNode(n); }
    void  clear()			{ QGList::clear(); }
    void  sort()			{ QGList::sort(); }
    int	  find( const type *d )		{ return QGList::find((QCollection::Item)d); }
    int	  findNext( const type *d )	{ return QGList::find((QCollection::Item)d,FALSE); }
    int	  findRef( const type *d )	{ return QGList::findRef((QCollection::Item)d); }
    int	  findNextRef( const type *d ){ return QGList::findRef((QCollection::Item)d,FALSE);}
    uint  contains( const type *d ) const { return QGList::contains((QCollection::Item)d); }
    uint  containsRef( const type *d ) const
					{ return QGList::containsRef((QCollection::Item)d); }
    type *at( uint i )			{ return (type *)QGList::at(i); }
    int	  at() const			{ return QGList::at(); }
    type *current()  const		{ return (type *)QGList::get(); }
    QLNode *currentNode()  const	{ return QGList::currentNode(); }
    type *getFirst() const		{ return (type *)QGList::cfirst(); }
    type *getLast()  const		{ return (type *)QGList::clast(); }
    type *first()			{ return (type *)QGList::first(); }
    type *last()			{ return (type *)QGList::last(); }
    type *next()			{ return (type *)QGList::next(); }
    type *prev()			{ return (type *)QGList::prev(); }
    void  toVector( QGVector *vec )const{ QGList::toVector(vec); }
private:
    void  deleteItem( QCollection::Item d );
};





#line 101 "c:\\qt\\include\\qlist.h"

template<class type> inline void QList<type>::deleteItem( QCollection::Item d )
{
    if ( del_item ) delete (type *)d;
}


template<class type> class __declspec(dllimport) QListIterator : public QGListIterator
{
public:
    QListIterator(const QList<type> &l) :QGListIterator((QGList &)l) {}
   ~QListIterator()	      {}
    uint  count()   const     { return list->count(); }
    bool  isEmpty() const     { return list->count() == 0; }
    bool  atFirst() const     { return QGListIterator::atFirst(); }
    bool  atLast()  const     { return QGListIterator::atLast(); }
    type *toFirst()	      { return (type *)QGListIterator::toFirst(); }
    type *toLast()	      { return (type *)QGListIterator::toLast(); }
    operator type *() const   { return (type *)QGListIterator::get(); }
    type *operator*()         { return (type *)QGListIterator::get(); }

    
    
    
    
    

    type *current()   const   { return (type *)QGListIterator::get(); }
    type *operator()()	      { return (type *)QGListIterator::operator()();}
    type *operator++()	      { return (type *)QGListIterator::operator++(); }
    type *operator+=(uint j)  { return (type *)QGListIterator::operator+=(j);}
    type *operator--()	      { return (type *)QGListIterator::operator--(); }
    type *operator-=(uint j)  { return (type *)QGListIterator::operator-=(j);}
    QListIterator<type>& operator=(const QListIterator<type>&it)
			      { QGListIterator::operator=(it); return *this; }
};


#line 140 "c:\\qt\\include\\qlist.h"
#line 88 "c:\\qt\\include\\qmime.h"
#line 89 "c:\\qt\\include\\qmime.h"







class __declspec(dllimport) QWindowsMime {
public:
    QWindowsMime();
    virtual ~QWindowsMime();

    static void initialize();

    static QList<QWindowsMime> all();
    static QWindowsMime* convertor( const char* mime, int cf );
    static const char* cfToMime(int cf);

    static int registerMimeType(const char *mime);

    virtual const char* convertorName()=0;
    virtual int countCf()=0;
    virtual int cf(int index)=0;
    virtual bool canConvert( const char* mime, int cf )=0;
    virtual const char* mimeFor(int cf)=0;
    virtual int cfFor(const char* )=0;
    virtual QByteArray convertToMime( QByteArray data, const char* mime, int cf )=0;
    virtual QByteArray convertFromMime( QByteArray data, const char* mime, int cf )=0;
};

#line 120 "c:\\qt\\include\\qmime.h"

#line 122 "c:\\qt\\include\\qmime.h"

#line 124 "c:\\qt\\include\\qmime.h"
#line 46 "c:\\qt\\include\\qevent.h"
#line 47 "c:\\qt\\include\\qevent.h"


class __declspec(dllimport) QEvent: public Qt		
{
public:
    enum Type {

	
	
	
	

	None = 0,				


	Timer = 1,				
	MouseButtonPress = 2,			
	MouseButtonRelease = 3,			
	MouseButtonDblClick= 4,			
	MouseMove = 5,				
	KeyPress = 6,				
	KeyRelease = 7,				
	FocusIn = 8,				
	FocusOut = 9,				
	Enter = 10,				
	Leave = 11,				
	Paint = 12,				
	Move = 13,				
	Resize = 14,				
	Create = 15,				
	Destroy = 16,				
	Show = 17,				
	Hide = 18,				
	Close = 19,				
	Quit = 20,				
	Reparent = 21,				
	ShowMinimized = 22,		       	
	ShowNormal = 23,	       		
	WindowActivate = 24,	       		
	WindowDeactivate = 25,	       		
	ShowToParent = 26,	       		
	HideToParent = 27,	       		
	ShowMaximized = 28,		       	
	Accel = 30,				
	Wheel = 31,				
	AccelAvailable = 32,			
	CaptionChange = 33,			
	IconChange = 34,			
	ParentFontChange = 35,			
	ApplicationFontChange = 36,		
	ParentPaletteChange = 37,		
	ApplicationPaletteChange = 38,		
	Clipboard = 40,				
	Speech = 42,				
	SockAct = 50,				
	AccelOverride = 51,			
	DragEnter = 60,				
	DragMove = 61,				
	DragLeave = 62,				
	Drop = 63,				
	DragResponse = 64,			
	ChildInserted = 70,			
	ChildRemoved = 71,			
	LayoutHint = 72,			
	ShowWindowRequest = 73,			
	ActivateControl = 80,			
	DeactivateControl = 81,			
	User = 1000				
    };

    QEvent( Type type ) : t(type), posted(FALSE) {}
    virtual ~QEvent();
    Type  type() const	{ return t; }
protected:
    Type  t;
private:
    bool  posted;

    friend class QEvent;
#line 127 "c:\\qt\\include\\qevent.h"

    friend class QApplication;
    friend class QBaseApplication;
};


class __declspec(dllimport) QTimerEvent : public QEvent
{
public:
    QTimerEvent( int timerId )
	: QEvent(Timer), id(timerId) {}
    int	  timerId()	const	{ return id; }
protected:
    int	  id;
};


class __declspec(dllimport) QMouseEvent : public QEvent
{
public:
    QMouseEvent( Type type, const QPoint &pos, int button, int state );

    QMouseEvent( Type type, const QPoint &pos, const QPoint&globalPos,
		 int button, int state )
	: QEvent(type), p(pos), g(globalPos), b(button),s((ushort)state) {};

    const QPoint &pos() const	{ return p; }
    const QPoint &globalPos() const { return g; }
    int	   x()		const	{ return p.x(); }
    int	   y()		const	{ return p.y(); }
    int	   globalX()	const	{ return g.x(); }
    int	   globalY()	const	{ return g.y(); }
    ButtonState button() const	{ return (ButtonState) b; }
    ButtonState state()	const	{ return (ButtonState) s; }
    ButtonState stateAfter() const;
protected:
    QPoint p;
    QPoint g;
    int	   b; 
    ushort s; 
};



class __declspec(dllimport) QWheelEvent : public QEvent
{
public:
    QWheelEvent( const QPoint &pos, int delta, int state );
    QWheelEvent( const QPoint &pos, const QPoint& globalPos, int delta, int state )
	: QEvent(Wheel), p(pos), g(globalPos), d(delta), s((ushort)state),
	  accpt(TRUE) {}
    int	   delta()	const	{ return d; }
    const QPoint &pos() const	{ return p; }
    const QPoint &globalPos() const	{ return g; }
    int	   x()		const	{ return p.x(); }
    int	   y()		const	{ return p.y(); }
    int	   globalX()	const	{ return g.x(); }
    int	   globalY()	const	{ return g.y(); }
    ButtonState state()	const	{ return ButtonState(s); }
    bool   isAccepted() const	{ return accpt; }
    void   accept()		{ accpt = TRUE; }
    void   ignore()		{ accpt = FALSE; }
protected:
    QPoint p;
    QPoint g;
    int d;
    ushort s;
    bool   accpt;
};


class __declspec(dllimport) QKeyEvent : public QEvent
{
public:
    QKeyEvent( Type type, int key, int ascii, int state,
		const QString& text=QString::null, bool autorep=FALSE, ushort count=1 )
	: QEvent(type), txt(text), k((ushort)key), s((ushort)state),
	    a((uchar)ascii), accpt(TRUE), autor(autorep), c(count) {}
    int	   key()	const	{ return k; }
    int	   ascii()	const	{ return a; }
    ButtonState state()	const	{ return ButtonState(s); }
    ButtonState stateAfter() const;
    bool   isAccepted() const	{ return accpt; }
    QString text()      const   { return txt; }
    bool   isAutoRepeat() const	{ return autor; }
    int   count() const	{ return int(c); }
    void   accept()		{ accpt = TRUE; }
    void   ignore()		{ accpt = FALSE; }

protected:
    QString txt;
    ushort k, s;
    uchar  a;
    uint   accpt:1;
    uint   autor:1;
    ushort c;
};


class __declspec(dllimport) QFocusEvent : public QEvent
{
public:

    QFocusEvent( Type type )
	: QEvent(type) {}

    bool   gotFocus()	const { return type() == FocusIn; }
    bool   lostFocus()	const { return type() == FocusOut; }

    enum Reason { Mouse, Tab, ActiveWindow, Popup, Shortcut, Other };
    static Reason reason();
    static void setReason( Reason reason );
    static void resetReason();

private:
    static Reason m_reason;
    static Reason prev_reason;
};


class __declspec(dllimport) QPaintEvent : public QEvent
{
public:
    QPaintEvent( const QRegion& paintRegion, bool erased = TRUE)
	: QEvent(Paint),
	  rec(paintRegion.boundingRect()),
	  reg(paintRegion),
	  erase(erased){}
    QPaintEvent( const QRect &paintRect, bool erased = TRUE )
	: QEvent(Paint),
	  rec(paintRect),
	  reg(paintRect),
	  erase(erased){}
    const QRect &rect() const	  { return rec; }
    const QRegion &region() const { return reg; }
    bool erased() const { return erase; }
protected:
    friend class QApplication;
    friend class QBaseApplication;
    QRect rec;
    QRegion reg;
    bool erase;
};


class __declspec(dllimport) QMoveEvent : public QEvent
{
public:
    QMoveEvent( const QPoint &pos, const QPoint &oldPos )
	: QEvent(Move), p(pos), oldp(oldPos) {}
    const QPoint &pos()	  const { return p; }
    const QPoint &oldPos()const { return oldp;}
protected:
    QPoint p, oldp;
    friend class QApplication;
    friend class QBaseApplication;
};


class __declspec(dllimport) QResizeEvent : public QEvent
{
public:
    QResizeEvent( const QSize &size, const QSize &oldSize )
	: QEvent(Resize), s(size), olds(oldSize) {}
    const QSize &size()	  const { return s; }
    const QSize &oldSize()const { return olds;}
protected:
    QSize s, olds;
    friend class QApplication;
    friend class QBaseApplication;
};


class __declspec(dllimport) QCloseEvent : public QEvent
{
public:
    QCloseEvent()
	: QEvent(Close), accpt(FALSE) {}
    bool   isAccepted() const	{ return accpt; }
    void   accept()		{ accpt = TRUE; }
    void   ignore()		{ accpt = FALSE; }
protected:
    bool   accpt;
};


class __declspec(dllimport) QShowEvent : public QEvent
{
public:
    QShowEvent(bool spontaneous)
	: QEvent(Show), spont(spontaneous) {}
    bool spontaneous() const { return spont; }
protected:
    bool spont;
};


class __declspec(dllimport) QHideEvent : public QEvent
{
public:
    QHideEvent(bool spontaneous)
	: QEvent(Hide), spont(spontaneous) {}
    bool spontaneous() const { return spont; }
protected:
    bool spont;
};







class __declspec(dllimport) QDropEvent : public QEvent, public QMimeSource
{
public:
    QDropEvent( const QPoint& pos, Type typ=Drop )
	: QEvent(typ), p(pos),
	  act(0), accpt(0), accptact(0), resv(0),
	  d(0)
	{}
    const QPoint &pos() const	{ return p; }
    bool isAccepted() const	{ return accpt || accptact; }
    void accept(bool y=TRUE)	{ accpt = y; }
    void ignore()		{ accpt = FALSE; }

    bool isActionAccepted() const { return accptact; }
    void acceptAction(bool y=TRUE) { accptact = y; }
    enum Action { Copy, Link, Move, Private, UserAction=100 };
    void setAction( Action a ) { act = (uint)a; }
    Action action() const { return Action(act); }

    QWidget* source() const;
    const char* format( int n = 0 ) const;
    QByteArray encodedData( const char* ) const;
    bool provides( const char* ) const;

    QByteArray data(const char* f) const { return encodedData(f); }

    void setPoint( const QPoint& np ) { p = np; }

protected:
    QPoint p;
    uint act:8;
    uint accpt:1;
    uint accptact:1;
    uint resv:5;
    void * d;
};



class __declspec(dllimport) QDragMoveEvent : public QDropEvent
{
public:
    QDragMoveEvent( const QPoint& pos, Type typ=DragMove )
	: QDropEvent(pos,typ),
	  rect( pos, QSize( 1, 1 ) ) {}
    QRect answerRect() const { return rect; }
    void accept( bool y=TRUE ) { QDropEvent::accept(y); }
    void accept( const QRect & r) { accpt = TRUE; rect = r; }
    void ignore( const QRect & r) { accpt =FALSE; rect = r; }
    void ignore()		{ QDropEvent::ignore(); }

protected:
    QRect rect;
};


class __declspec(dllimport) QDragEnterEvent : public QDragMoveEvent
{
public:
    QDragEnterEvent( const QPoint& pos ) :
	QDragMoveEvent(pos, DragEnter) { }
};



class __declspec(dllimport) QDragResponseEvent : public QEvent
{
public:
    QDragResponseEvent( bool accepted )
	: QEvent(DragResponse), a(accepted) {}
    bool   dragAccepted() const	{ return a; }
protected:
    bool a;
};


class __declspec(dllimport) QDragLeaveEvent : public QEvent
{
public:
    QDragLeaveEvent()
	: QEvent(DragLeave) {}
};

#line 424 "c:\\qt\\include\\qevent.h"

class __declspec(dllimport) QChildEvent : public QEvent
{
public:
    QChildEvent( Type type, QObject *child )
	: QEvent(type), c(child) {}
    QObject *child() const	{ return c; }
    bool inserted() const { return t == ChildInserted; }
    bool removed() const { return t == ChildRemoved; }
protected:
    QObject *c;
};


class __declspec(dllimport) QCustomEvent : public QEvent
{
public:
    QCustomEvent( int type );
    QCustomEvent( Type type, void *data )
	: QEvent(type), d(data) {};
    void       *data()	const	{ return d; }
    void	setData( void* data )	{ d = data; }
private:
    void       *d;
};

#line 451 "c:\\qt\\include\\qevent.h"
#line 46 "c:\\qt\\include\\qobject.h"
#line 1 "c:\\qt\\include\\qnamespace.h"







































































































































































































































































































































































































































































































































































































































#line 47 "c:\\qt\\include\\qobject.h"
#line 1 "c:\\qt\\include\\qstringlist.h"

















































































#line 48 "c:\\qt\\include\\qobject.h"
#line 49 "c:\\qt\\include\\qobject.h"




class QMetaObject;
class QVariant;



class __declspec(dllimport) QObject: public Qt
{
    

public:
    QObject( QObject *parent=0, const char *name=0 );
    virtual ~QObject();

    static QString tr( const char * );
    static QString tr( const char *, const char * );

    virtual bool event( QEvent * );
    virtual bool eventFilter( QObject *, QEvent * );

    virtual QMetaObject *metaObject() const { return staticMetaObject(); }
    virtual const char	*className()  const;

    bool	 isA( const char * )	 const;
    bool	 inherits( const char * ) const;

    const char  *name() const;
    const char  *name( const char * defaultName ) const;

    virtual void setName( const char *name );
    bool	 isWidgetType()	  const { return isWidget; }
    bool	 highPriority()	  const { return FALSE; }

    bool	 signalsBlocked()  const { return blockSig; }
    void	 blockSignals( bool b );

    int		 startTimer( int interval );
    void	 killTimer( int id );
    void	 killTimers();

    QObject           *child( const char *name, const char *type = 0 );
    const QObjectList *children() const { return childObjects; }

    static const QObjectList *objectTrees();

    
    QObjectList	      *queryList( const char *inheritsClass = 0,
				  const char *objName = 0,
				  bool regexpMatch = TRUE,
				  bool recursiveSearch = TRUE );

    virtual void insertChild( QObject * );
    virtual void removeChild( QObject * );

    void	 installEventFilter( const QObject * );
    void	 removeEventFilter( const QObject * );

    static bool  connect( const QObject *sender, const char *signal,
			  const QObject *receiver, const char *member );
    bool	 connect( const QObject *sender, const char *signal,
			  const char *member ) const;
    static bool  disconnect( const QObject *sender, const char *signal,
			     const QObject *receiver, const char *member );
    bool	 disconnect( const char *signal=0,
			     const QObject *receiver=0, const char *member=0 );
    bool	 disconnect( const QObject *receiver, const char *member=0 );

    void	 dumpObjectTree();
    void	 dumpObjectInfo();


    bool setProperty( const char *name, const QVariant& value ); 
    QVariant property( const char *name ) const;    
#line 126 "c:\\qt\\include\\qobject.h"

protected:
    void	 destroyed();

public:
    QObject	*parent() const { return parentObj; }

private :
    void	 cleanupEventFilter();

protected:
    bool	 activate_filters( QEvent * );
    QConnectionList *receivers( const char *signal ) const;
    void	 activate_signal( const char *signal );
    void	 activate_signal( const char *signal, short );
    void	 activate_signal( const char *signal, int );
    void	 activate_signal( const char *signal, long );
    void	 activate_signal( const char *signal, const char * );
    void	 activate_signal_bool( const char *signal, bool );
    void	 activate_signal_string( const char *signal, QString );
    void	 activate_signal_strref( const char *signal, const QString & );

    const QObject *sender();


    virtual void initMetaObject();
    static QMetaObject* staticMetaObject();

    virtual void timerEvent( QTimerEvent * );
    virtual void childEvent( QChildEvent * );

    virtual void connectNotify( const char *signal );
    virtual void disconnectNotify( const char *signal );
    virtual bool checkConnectArgs( const char *signal, const QObject *receiver,
				   const char *member );
    static QCString normalizeSignalSlot( const char *signalSlot );

    static  void badSuperclassWarning( const char *className,
				       const char *superclassName );

private:
    uint	isSignal   : 1;
    uint	isWidget   : 1;
    uint	pendTimer  : 1;
    uint	pendEvent  : 1;
    uint	blockSig   : 1;
    uint	wasDeleted : 1;
    uint	isTree : 1;

    QMetaObject *queryMetaObject() const;
    static QMetaObject *metaObj;
    const char	*objname;
    QObject	*parentObj;
    QObjectList *childObjects;
    QSignalDict *connections;
    QObjectList *senderObjects;
    QObjectList *eventFilters;
    

    QObject	*sigSender;

    friend class QApplication;
    friend class QBaseApplication;
    friend class QWidget;
    friend class QSignal;
    friend class QSenderObject;

private:	



#line 198 "c:\\qt\\include\\qobject.h"

public:
    

    QStringList  superClasses( bool includeThis = FALSE ) const; 
#line 204 "c:\\qt\\include\\qobject.h"
};

#line 207 "c:\\qt\\include\\qobject.h"

inline bool QObject::connect( const QObject *sender, const char *signal,
			      const char *member ) const
{
    return connect( sender, signal, this, member );
}

inline bool QObject::disconnect( const char *signal,
				 const QObject *receiver, const char *member )
{
    return disconnect( this, signal, receiver, member );
}

inline bool QObject::disconnect( const QObject *receiver, const char *member )
{
    return disconnect( this, 0, receiver, member );
}

inline const QObject *QObject::sender()
{
    return sigSender;
}


class __declspec(dllimport) QSenderObject : public QObject		
{
public:
    void setSender( QObject *s ) { sigSender=s; }
};











#line 248 "c:\\qt\\include\\qobject.h"
#line 44 "c:\\qt\\include\\qwidget.h"
#line 1 "c:\\qt\\include\\qpaintdevice.h"









































#line 1 "c:\\qt\\include\\qwindowdefs.h"














































































































































































#line 43 "c:\\qt\\include\\qpaintdevice.h"
#line 1 "c:\\qt\\include\\qrect.h"




























































































































































































































































#line 44 "c:\\qt\\include\\qpaintdevice.h"
#line 45 "c:\\qt\\include\\qpaintdevice.h"




#line 50 "c:\\qt\\include\\qpaintdevice.h"

class QIODevice;
class QString;




#line 58 "c:\\qt\\include\\qpaintdevice.h"

union QPDevCmdParam {
    int			 ival;
    int			*ivec;
    QString	        *str;
    const QPoint	*point;
    const QRect		*rect;
    const QPointArray	*ptarr;
    const QPixmap	*pixmap;
    const QImage	*image;
    const QColor	*color;
    const QFont		*font;
    const QPen		*pen;
    const QBrush	*brush;
    const QRegion	*rgn;
    const QWMatrix	*matrix;
    QIODevice		*device;
};



class __declspec(dllimport) QPaintDevice				
{
public:
    virtual ~QPaintDevice();

    int		devType() const;
    bool	isExtDev() const;
    bool	paintingActive() const;

    
    

    HDC		handle() const;






#line 99 "c:\\qt\\include\\qpaintdevice.h"























#line 123 "c:\\qt\\include\\qpaintdevice.h"






#line 130 "c:\\qt\\include\\qpaintdevice.h"

    enum PDevCmd {
	PdcNOP = 0, 
	PdcDrawPoint = 1, 
	PdcDrawFirst = PdcDrawPoint,
	PdcMoveTo = 2, 
	PdcLineTo = 3, 
	PdcDrawLine = 4, 
	PdcDrawRect = 5, 
	PdcDrawRoundRect = 6, 
	PdcDrawEllipse = 7, 
	PdcDrawArc = 8, 
	PdcDrawPie = 9, 
	PdcDrawChord = 10, 
	PdcDrawLineSegments = 11, 
	PdcDrawPolyline = 12, 
	PdcDrawPolygon = 13, 
	PdcDrawQuadBezier = 14, 
	PdcDrawText = 15, 
	PdcDrawTextFormatted = 16, 
	PdcDrawPixmap = 17, 
	PdcDrawImage = 18, 
	PdcDrawText2 = 19, 
	PdcDrawText2Formatted = 20, 
	PdcDrawLast = PdcDrawText2Formatted,

	

	PdcBegin = 30, 
	PdcEnd = 31, 
	PdcSave = 32, 
	PdcRestore = 33, 
	PdcSetdev = 34, 
	PdcSetBkColor = 40, 
	PdcSetBkMode = 41, 
	PdcSetROP = 42, 
	PdcSetBrushOrigin = 43, 
	PdcSetFont = 45, 
	PdcSetPen = 46, 
	PdcSetBrush = 47, 
	PdcSetTabStops = 48, 
	PdcSetTabArray = 49, 
	PdcSetUnit = 50, 
	PdcSetVXform = 51, 
	PdcSetWindow = 52, 
	PdcSetViewport = 53, 
	PdcSetWXform = 54, 
	PdcSetWMatrix = 55, 
	PdcSaveWMatrix = 56,
	PdcRestoreWMatrix = 57,
	PdcSetClip = 60, 
	PdcSetClipRegion = 61, 

	PdcReservedStart = 0, 
	PdcReservedStop = 199 
    };

protected:
    QPaintDevice( uint devflags );


    HDC		hdc;				










#line 203 "c:\\qt\\include\\qpaintdevice.h"

    virtual bool cmd( int, QPainter *, QPDevCmdParam * );
    virtual int	 metric( int ) const;
    virtual int	 fontMet( QFont *, int, const char * = 0, int = 0 ) const;
    virtual int	 fontInf( QFont *, int ) const;

    ushort	devFlags;			
    ushort	painters;			

    friend class QPainter;
    friend class QPaintDeviceMetrics;
    friend __declspec(dllimport) void bitBlt( QPaintDevice *, int, int,
				 const QPaintDevice *,
				 int, int, int, int, Qt::RasterOp, bool );


#line 220 "c:\\qt\\include\\qpaintdevice.h"

private:











#line 234 "c:\\qt\\include\\qpaintdevice.h"

private:	



#line 240 "c:\\qt\\include\\qpaintdevice.h"
};


__declspec(dllimport)
void bitBlt( QPaintDevice *dst, int dx, int dy,
	     const QPaintDevice *src, int sx=0, int sy=0, int sw=-1, int sh=-1,
	     Qt::RasterOp = Qt::CopyROP, bool ignoreMask=FALSE );

__declspec(dllimport)
void bitBlt( QPaintDevice *dst, int dx, int dy,
	     const QImage *src, int sx=0, int sy=0, int sw=-1, int sh=-1,
	     int conversion_flags=0 );















#line 268 "c:\\qt\\include\\qpaintdevice.h"





inline int QPaintDevice::devType() const
{ return devFlags & QInternal::DeviceTypeMask; }

inline bool QPaintDevice::isExtDev() const
{ return (devFlags & QInternal::ExternalDevice) != 0; }

inline bool QPaintDevice::paintingActive() const
{ return painters != 0; }


inline HDC    QPaintDevice::handle() const { return hdc; }


#line 287 "c:\\qt\\include\\qpaintdevice.h"

















































#line 337 "c:\\qt\\include\\qpaintdevice.h"


__declspec(dllimport)
inline void bitBlt( QPaintDevice *dst, const QPoint &dp,
		    const QPaintDevice *src, const QRect &sr =QRect(0,0,-1,-1),
		    Qt::RasterOp rop=Qt::CopyROP, bool ignoreMask=FALSE )
{
    bitBlt( dst, dp.x(), dp.y(), src, sr.x(), sr.y(), sr.width(), sr.height(),
	    rop, ignoreMask );
}




#line 352 "c:\\qt\\include\\qpaintdevice.h"
#line 45 "c:\\qt\\include\\qwidget.h"
#line 1 "c:\\qt\\include\\qpalette.h"









































#line 1 "c:\\qt\\include\\qwindowdefs.h"














































































































































































#line 43 "c:\\qt\\include\\qpalette.h"
#line 1 "c:\\qt\\include\\qcolor.h"









































#line 1 "c:\\qt\\include\\qwindowdefs.h"














































































































































































#line 43 "c:\\qt\\include\\qcolor.h"
#line 44 "c:\\qt\\include\\qcolor.h"

const QRgb  RGB_DIRTY	= 0x80000000;		
const QRgb  RGB_INVALID = 0x40000000;		
const QRgb  RGB_DIRECT	= 0x20000000;		
const QRgb  RGB_MASK	= 0x00ffffff;		


__declspec(dllimport) inline int qRed( QRgb rgb )		
{ return (int)((rgb >> 16) & 0xff); }

__declspec(dllimport) inline int qGreen( QRgb rgb )		
{ return (int)((rgb >> 8) & 0xff); }

__declspec(dllimport) inline int qBlue( QRgb rgb )		
{ return (int)(rgb & 0xff); }

__declspec(dllimport) inline int qAlpha( QRgb rgb )		
{ return (int)((rgb >> 24) & 0xff); }

__declspec(dllimport) inline QRgb qRgb( int r, int g, int b )
{ return (0xff << 24) | ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff); }

__declspec(dllimport) inline QRgb qRgba( int r, int g, int b, int a )
{ return ((a & 0xff) << 24) | ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff); }

__declspec(dllimport) inline int qGray( int r, int g, int b )
{ return (r*11+g*16+b*5)/32; }

__declspec(dllimport) inline int qGray( QRgb rgb )		
{ return qGray( qRed(rgb), qGreen(rgb), qBlue(rgb) ); }


class __declspec(dllimport) QColor
{
public:
    enum Spec { Rgb, Hsv };

    QColor();
    QColor( int r, int g, int b );
    QColor( int x, int y, int z, Spec );
    QColor( QRgb rgb, uint pixel=0xffffffff);
    QColor( const QString& name );
    QColor( const char *name );
    QColor( const QColor & );
    QColor &operator=( const QColor & );

    bool   isValid() const;
    bool   isDirty() const;

    QString name() const;
    void   setNamedColor( const QString& name );

    void   rgb( int *r, int *g, int *b ) const;
    QRgb   rgb()    const;
    void   setRgb( int r, int g, int b );
    void   setRgb( QRgb rgb );

    int	   red()    const;
    int	   green()  const;
    int	   blue()   const;

    void   hsv( int *h, int *s, int *v ) const;
    void   getHsv( int &h, int &s, int &v ) const;
    void   setHsv( int h, int s, int v );

    QColor light( int f = 150 ) const;
    QColor dark( int f = 200 )	const;

    bool   operator==( const QColor &c ) const;
    bool   operator!=( const QColor &c ) const;

    static bool lazyAlloc();
    static void setLazyAlloc( bool );
    uint   alloc();
    uint   pixel()  const;

    static int  maxColors();
    static int  numBitPlanes();

    static int  enterAllocContext();
    static void leaveAllocContext();
    static int  currentAllocContext();
    static void destroyAllocContext( int );


    static HPALETTE hPal()  { return hpal; }
    static uint	realizePal( QWidget * );
#line 132 "c:\\qt\\include\\qcolor.h"

    static void initialize();
    static void cleanup();

private:
    void   setSystemNamedColor( const QString& name );
    static void initGlobalColors();
    static QColor* globalColors();
    static bool color_init;
    static bool globals_init;
    static bool lazy_alloc;

    static HPALETTE hpal;
#line 146 "c:\\qt\\include\\qcolor.h"
    uint   pix;
    QRgb   rgbVal;
};


inline QColor::QColor()
{ rgbVal = RGB_INVALID; pix = 0; }

inline QColor::QColor( int r, int g, int b )
{ setRgb( r, g, b ); }

inline bool QColor::isValid() const
{ return (rgbVal & RGB_INVALID) == 0; }

inline bool QColor::isDirty() const
{ return (rgbVal & RGB_DIRTY) != 0; }

inline QRgb QColor::rgb() const
{ return rgbVal | ~RGB_MASK; }

inline int QColor::red() const
{ return qRed(rgbVal); }

inline int QColor::green() const
{ return qGreen(rgbVal); }

inline int QColor::blue() const
{ return qBlue(rgbVal); }

inline uint QColor::pixel() const
{ return (rgbVal & RGB_DIRTY) == 0 ? pix : ((QColor*)this)->alloc(); }

inline bool QColor::lazyAlloc()
{ return lazy_alloc; }


inline bool QColor::operator==( const QColor &c ) const
{
    return isValid()==c.isValid() &&
	((((rgbVal | c.rgbVal) & RGB_DIRECT) == 0 &&
	    (rgbVal & RGB_MASK) == (c.rgbVal & RGB_MASK)) ||
	   ((rgbVal & c.rgbVal & RGB_DIRECT) != 0 &&
	    (rgbVal & RGB_MASK) == (c.rgbVal & RGB_MASK) && pix == c.pix));
}

inline bool QColor::operator!=( const QColor &c ) const
{
    return !operator==(c);
}







__declspec(dllimport) QDataStream &operator<<( QDataStream &, const QColor & );
__declspec(dllimport) QDataStream &operator>>( QDataStream &, QColor & );
#line 205 "c:\\qt\\include\\qcolor.h"

#line 207 "c:\\qt\\include\\qcolor.h"
#line 44 "c:\\qt\\include\\qpalette.h"
#line 1 "c:\\qt\\include\\qshared.h"























































#line 45 "c:\\qt\\include\\qpalette.h"
#line 1 "c:\\qt\\include\\qbrush.h"









































#line 1 "c:\\qt\\include\\qcolor.h"














































































































































































































#line 43 "c:\\qt\\include\\qbrush.h"
#line 1 "c:\\qt\\include\\qshared.h"























































#line 44 "c:\\qt\\include\\qbrush.h"
#line 45 "c:\\qt\\include\\qbrush.h"


class __declspec(dllimport) QBrush: public Qt
{
friend class QPainter;
public:
    QBrush();
    QBrush( BrushStyle );
    QBrush( const QColor &, BrushStyle=SolidPattern );
    QBrush( const QColor &, const QPixmap & );
    QBrush( const QBrush & );
   ~QBrush();
    QBrush &operator=( const QBrush & );

    BrushStyle	style()	 const		{ return data->style; }
    void	setStyle( BrushStyle );
    const QColor &color()const		{ return data->color; }
    void	setColor( const QColor & );
    QPixmap    *pixmap() const		{ return data->pixmap; }
    void	setPixmap( const QPixmap & );

    bool	operator==( const QBrush &p ) const;
    bool	operator!=( const QBrush &b ) const
					{ return !(operator==(b)); }

private:
    QBrush	copy()	const;
    void	detach();
    void	init( const QColor &, BrushStyle );
    struct QBrushData : public QShared {	
	BrushStyle style;
	QColor	  color;
	QPixmap	 *pixmap;
    } *data;
};







__declspec(dllimport) QDataStream &operator<<( QDataStream &, const QBrush & );
__declspec(dllimport) QDataStream &operator>>( QDataStream &, QBrush & );
#line 90 "c:\\qt\\include\\qbrush.h"

#line 92 "c:\\qt\\include\\qbrush.h"
#line 46 "c:\\qt\\include\\qpalette.h"
#line 47 "c:\\qt\\include\\qpalette.h"


class QColorGroupPrivate;


class __declspec(dllimport) QColorGroup
{
public:
    QColorGroup();
    QColorGroup( const QColor &foreground, const QColor &button,
		 const QColor &light, const QColor &dark, const QColor &mid,
		 const QColor &text, const QColor &base );
    QColorGroup( const QBrush &foreground, const QBrush &button,
		 const QBrush &light, const QBrush &dark, const QBrush &mid,
		 const QBrush &text, const QBrush &bright_text,
		 const QBrush &base, const QBrush &background);
    QColorGroup( const QColorGroup & );

   ~QColorGroup();

    QColorGroup& operator =(const QColorGroup&);

    
    enum ColorRole { Foreground, Button, Light, Midlight, Dark, Mid,
                     Text, BrightText, ButtonText, Base, Background, Shadow,
                     Highlight, HighlightedText,
		     NColorRoles };

    const QColor &color( ColorRole ) const;
    const QBrush &brush( ColorRole ) const;
    void setColor( ColorRole, const QColor & );
    void setBrush( ColorRole, const QBrush & );

    const QColor &foreground()	const	{ return br[Foreground].color(); }
    const QColor &button()	const	{ return br[Button].color(); }
    const QColor &light()	const	{ return br[Light].color(); }
    const QColor &dark()	const	{ return br[Dark].color(); }
    const QColor &mid()		const	{ return br[Mid].color(); }
    const QColor &text()	const	{ return br[Text].color(); }
    const QColor &base()	const	{ return br[Base].color(); }
    const QColor &background()	const	{ return br[Background].color(); }

    const QColor &midlight()	const	{ return br[Midlight].color(); }
    const QColor &brightText()	const	{ return br[BrightText].color(); }
    const QColor &buttonText()	const	{ return br[ButtonText].color(); }
    const QColor &shadow()	const	{ return br[Shadow].color(); }
    const QColor &highlight()	const	{ return br[Highlight].color(); }
    const QColor &highlightedText() const{return br[HighlightedText].color(); }

    bool	operator==( const QColorGroup &g ) const;
    bool	operator!=( const QColorGroup &g ) const
	{ return !(operator==(g)); }

private:
    QBrush *br;
    QColorGroupPrivate * d;

    friend class QPalette;
};


class __declspec(dllimport) QPalette
{
public:
    QPalette();
    QPalette( const QColor &button );
    QPalette( const QColor &button, const QColor &background );
    QPalette( const QColorGroup &active, const QColorGroup &disabled,
	      const QColorGroup &inactive );
    QPalette( const QPalette & );
   ~QPalette();
    QPalette &operator=( const QPalette & );

    enum ColorGroup { Normal, Disabled, Active, Inactive, NColorGroups };

    const QColor &color( ColorGroup, QColorGroup::ColorRole ) const;
    const QBrush &brush( ColorGroup, QColorGroup::ColorRole ) const;
    void setColor( ColorGroup, QColorGroup::ColorRole, const QColor & );
    void setBrush( ColorGroup, QColorGroup::ColorRole, const QBrush & );

    void setColor( QColorGroup::ColorRole, const QColor & );
    void setBrush( QColorGroup::ColorRole, const QBrush & );

    QPalette	copy() const;

    const QColorGroup &active() const { return data->active; }
    const QColorGroup &disabled() const { return data->disabled; }
    const QColorGroup &inactive() const { return data->inactive; }
    const QColorGroup &normal() const { return data->normal; } 

    void	setActive( const QColorGroup & );
    void	setDisabled( const QColorGroup & );
    void	setInactive( const QColorGroup & );
    void	setNormal( const QColorGroup & ); 

    bool	operator==( const QPalette &p ) const;
    bool	operator!=( const QPalette &p ) const
					{ return !(operator==(p)); }
    bool	isCopyOf( const QPalette & );

    int		serialNumber() const	{ return data->ser_no; }

private:
    void	detach();
    QBrush 	&directBrush( ColorGroup, QColorGroup::ColorRole ) const;

    struct QPalData : public QShared {
	QColorGroup normal; 
	QColorGroup disabled;
	QColorGroup active;
	int	    ser_no;
	QColorGroup inactive;
    } *data;
};







__declspec(dllimport) QDataStream &operator<<( QDataStream &, const QColorGroup & );
__declspec(dllimport) QDataStream &operator>>( QDataStream &, QColorGroup & );

__declspec(dllimport) QDataStream &operator<<( QDataStream &, const QPalette & );
__declspec(dllimport) QDataStream &operator>>( QDataStream &, QPalette & );
#line 174 "c:\\qt\\include\\qpalette.h"

#line 176 "c:\\qt\\include\\qpalette.h"
#line 177 "c:\\qt\\include\\qpalette.h"
#line 46 "c:\\qt\\include\\qwidget.h"
#line 1 "c:\\qt\\include\\qcursor.h"









































#line 1 "c:\\qt\\include\\qpoint.h"























































































































































































































#line 43 "c:\\qt\\include\\qcursor.h"
#line 1 "c:\\qt\\include\\qshared.h"























































#line 44 "c:\\qt\\include\\qcursor.h"
#line 1 "c:\\qt\\include\\qnamespace.h"







































































































































































































































































































































































































































































































































































































































#line 45 "c:\\qt\\include\\qcursor.h"
#line 46 "c:\\qt\\include\\qcursor.h"




















struct QCursorData;


class __declspec(dllimport) QCursor
{
public:
    QCursor();					
    QCursor( int shape );
    QCursor( const QBitmap &bitmap, const QBitmap &mask,
	     int hotX=-1, int hotY=-1 );
    QCursor( const QPixmap &pixmap,
	     int hotX=-1, int hotY=-1 );
    QCursor( const QCursor & );
   ~QCursor();
    QCursor &operator=( const QCursor & );

    int		  shape()   const;
    void	  setShape( int );

    const QBitmap *bitmap() const;
    const QBitmap *mask()   const;
    QPoint	  hotSpot() const;


    HCURSOR	  handle()  const;






#line 98 "c:\\qt\\include\\qcursor.h"

    static QPoint pos();
    static void	  setPos( int x, int y );
    static void	  setPos( const QPoint & );

    static void	  initialize();
    static void	  cleanup();

private:
    void	  setBitmap( const QBitmap &bitmap, const QBitmap &mask,
				 int hotX, int hotY );
    void	  update() const;
    QCursorData	 *data;
    QCursor	 *find_cur(int);
};








enum QCursorShape {
    ArrowCursor, UpArrowCursor, CrossCursor, WaitCursor, IbeamCursor,
    SizeVerCursor, SizeHorCursor, SizeBDiagCursor, SizeFDiagCursor,
    SizeAllCursor, BlankCursor, SplitVCursor, SplitHCursor, PointingHandCursor,
    ForbiddenCursor, LastCursor = ForbiddenCursor, BitmapCursor=24 };






__declspec(dllimport) QDataStream &operator<<( QDataStream &, const QCursor & );
__declspec(dllimport) QDataStream &operator>>( QDataStream &, QCursor & );
#line 135 "c:\\qt\\include\\qcursor.h"
#line 136 "c:\\qt\\include\\qcursor.h"


inline void QCursor::setPos( const QPoint &p )
{
    setPos( p.x(), p.y() );
}

#line 144 "c:\\qt\\include\\qcursor.h"
#line 47 "c:\\qt\\include\\qwidget.h"
#line 1 "c:\\qt\\include\\qfont.h"









































#line 1 "c:\\qt\\include\\qwindowdefs.h"














































































































































































#line 43 "c:\\qt\\include\\qfont.h"
#line 1 "c:\\qt\\include\\qstring.h"
























































































































































































































































































































































































































































































































































































































































































































































































































































#line 44 "c:\\qt\\include\\qfont.h"
#line 45 "c:\\qt\\include\\qfont.h"


class QStringList;
struct QFontDef;
struct QFontData;
class QFontInternal;
class QRenderedFont;

class __declspec(dllimport) QFont					
{
public:
    enum CharSet   { ISO_8859_1,  Latin1 = ISO_8859_1, AnyCharSet,
		     ISO_8859_2,  Latin2 = ISO_8859_2,
		     ISO_8859_3,  Latin3 = ISO_8859_3,
		     ISO_8859_4,  Latin4 = ISO_8859_4,
		     ISO_8859_5,
		     ISO_8859_6,
		     ISO_8859_7,
		     ISO_8859_8,
		     ISO_8859_9,  Latin5 = ISO_8859_9,
		     ISO_8859_10, Latin6 = ISO_8859_10,
		     ISO_8859_11, TIS620 = ISO_8859_11,
		     ISO_8859_12,
		     ISO_8859_13, Latin7 = ISO_8859_13,
		     ISO_8859_14, Latin8 = ISO_8859_14,
		     ISO_8859_15, Latin9 = ISO_8859_15,
		     KOI8R,
		     Set_Ja, Set_1 = Set_Ja,
		     Set_Ko,
		     Set_Th_TH,
		     Set_Zh,
		     Set_Zh_TW,
		     Set_N = Set_Zh_TW,
		     Unicode,
		     





		     Set_GBK,
		     Set_Big5,

		     TSCII,
		     KOI8U,
		     CP1251,
		     PT154,
		     


		     
		     JIS_X_0201 = 0xa0,
		     
		     JIS_X_0208 = 0xc0, Enc16 = JIS_X_0208,
		     KSC_5601,
		     GB_2312,
		     Big5
    };
    enum StyleHint { Helvetica, Times, Courier, OldEnglish,  System, AnyStyle,
		     SansSerif	= Helvetica,
		     Serif	= Times,
		     TypeWriter = Courier,
		     Decorative = OldEnglish};
    enum StyleStrategy { PreferDefault = 0x0001,
			  PreferBitmap = 0x0002,
			  PreferDevice = 0x0004,
			  PreferOutline = 0x0008,
			  ForceOutline = 0x0010,
			  PreferMatch = 0x0020,
			  PreferQuality = 0x0040 };
    enum Weight	   { Light = 25, Normal = 50, DemiBold = 63,
		     Bold  = 75, Black	= 87 };
    QFont();					
    QFont( const QString &family, int pointSize = 12,
	   int weight = Normal, bool italic = FALSE );
    QFont( const QString &family, int pointSize,
	   int weight, bool italic, CharSet charSet );
    QFont( const QFont & );
    ~QFont();
    QFont      &operator=( const QFont & );

    QString	family()	const;
    void	setFamily( const QString &);
    int		pointSize()	const;
    float	pointSizeFloat()	const;
    void	setPointSize( int );
    void	setPointSizeFloat( float );
    int		pixelSize() const;
    void	setPixelSize( int );
    void	setPixelSizeFloat( float );
    int		weight()	const;
    void	setWeight( int );
    bool	bold()		const;
    void	setBold( bool );
    bool	italic()	const;
    void	setItalic( bool );
    bool	underline()	const;
    void	setUnderline( bool );
    bool	strikeOut()	const;
    void	setStrikeOut( bool );
    bool	fixedPitch()	const;
    void	setFixedPitch( bool );
    StyleHint	styleHint()	const;
    void	setStyleHint( StyleHint );
    StyleStrategy styleStrategy() const;
    void	setStyleHint( StyleHint, StyleStrategy );
    CharSet	charSet()	const;
    void	setCharSet( CharSet );

    static CharSet charSetForLocale();

    bool	rawMode()      const;
    void	setRawMode( bool );

    bool	exactMatch()	const;

    bool	operator==( const QFont & ) const;
    bool	operator!=( const QFont & ) const;
    bool	isCopyOf( const QFont & ) const;


    HFONT	handle() const;






#line 174 "c:\\qt\\include\\qfont.h"

    void	setRawName( const QString & );
    QString	rawName() const;

    QString	key() const;

    static QString encodingName( CharSet );

    static QFont defaultFont();
    static void setDefaultFont( const QFont & );

    static QString substitute( const QString &familyName );
    static void insertSubstitution( const QString&, const QString &);
    static void removeSubstitution( const QString &);
    static QStringList substitutions();

    static void initialize();
    static void locale_init();
    static void cleanup();
    static void cacheStatistics();



#line 198 "c:\\qt\\include\\qfont.h"

protected:
    bool	dirty()			const;

    QString	defaultFamily()		const;
    QString	lastResortFamily()	const;
    QString	lastResortFont()	const;
    int		deciPointSize()		const;

private:
    QFont( QFontData * );
    void	init();
    void	detach();
    void	initFontInfo() const;
    void	load() const;


#line 216 "c:\\qt\\include\\qfont.h"

    HFONT	create( bool *, HDC=0, bool=FALSE ) const;
    void       *textMetric() const;
#line 220 "c:\\qt\\include\\qfont.h"

    friend class QFontInternal;
    friend class QFontMetrics;
    friend class QFontInfo;
    friend class QPainter;


#line 228 "c:\\qt\\include\\qfont.h"


    friend __declspec(dllimport) QDataStream &operator<<( QDataStream &, const QFont & );
    friend __declspec(dllimport) QDataStream &operator>>( QDataStream &, QFont & );
#line 233 "c:\\qt\\include\\qfont.h"
    QFontData	 *d;				
    static CharSet defaultCharSet;
};

inline bool QFont::bold() const
{ return weight() > Normal; }

inline void QFont::setBold( bool enable )
{ setWeight( enable ? Bold : Normal ); }







__declspec(dllimport) QDataStream &operator<<( QDataStream &, const QFont & );
__declspec(dllimport) QDataStream &operator>>( QDataStream &, QFont & );
#line 252 "c:\\qt\\include\\qfont.h"

#line 254 "c:\\qt\\include\\qfont.h"
#line 48 "c:\\qt\\include\\qwidget.h"
#line 1 "c:\\qt\\include\\qfontmetrics.h"









































#line 1 "c:\\qt\\include\\qfont.h"





























































































































































































































































#line 43 "c:\\qt\\include\\qfontmetrics.h"
#line 1 "c:\\qt\\include\\qrect.h"




























































































































































































































































#line 44 "c:\\qt\\include\\qfontmetrics.h"
#line 45 "c:\\qt\\include\\qfontmetrics.h"

class QTextCodec;


class __declspec(dllimport) QFontMetrics
{
public:
    QFontMetrics( const QFont & );
    QFontMetrics( const QFontMetrics & );
   ~QFontMetrics();

    QFontMetrics &operator=( const QFontMetrics & );

    int		ascent()	const;
    int		descent()	const;
    int		height()	const;
    int		leading()	const;
    int		lineSpacing()	const;
    int		minLeftBearing() const;
    int		minRightBearing() const;
    int		maxWidth()	const;

    bool	inFont(QChar)	const;

    int		leftBearing(QChar) const;
    int		rightBearing(QChar) const;
    int		width( const QString &, int len = -1 ) const;
    int		width( QChar ) const;
    int		width( char c ) const { return width( (QChar) c ); }
    QRect	boundingRect( const QString &, int len = -1 ) const;
    QRect	boundingRect( QChar ) const;
    QRect	boundingRect( int x, int y, int w, int h, int flags,
			      const QString& str, int len=-1, int tabstops=0,
			      int *tabarray=0, char **intern=0 ) const;
    QSize	size( int flags,
		      const QString& str, int len=-1, int tabstops=0,
		      int *tabarray=0, char **intern=0 ) const;

    int		underlinePos()	const;
    int		strikeOutPos()	const;
    int		lineWidth()	const;

private:
    QFontMetrics( const QPainter * );
    static void reset( const QPainter * );
    const QFontDef *spec() const;


    void   *textMetric() const;
    HDC	    hdc() const;







#line 103 "c:\\qt\\include\\qfontmetrics.h"

    friend class QWidget;
    friend class QPainter;

    QFontInternal *fin;
    QPainter      *painter;
    int		   flags;

    bool    underlineFlag()  const { return (flags & 0x1) != 0; }
    bool    strikeOutFlag()  const { return (flags & 0x2) != 0; }
    void    setUnderlineFlag()	   { flags |= 0x1; }
    void    setStrikeOutFlag()	   { flags |= 0x2; }
};


#line 119 "c:\\qt\\include\\qfontmetrics.h"
#line 49 "c:\\qt\\include\\qwidget.h"
#line 1 "c:\\qt\\include\\qfontinfo.h"









































#line 1 "c:\\qt\\include\\qfont.h"





























































































































































































































































#line 43 "c:\\qt\\include\\qfontinfo.h"
#line 44 "c:\\qt\\include\\qfontinfo.h"


class __declspec(dllimport) QFontInfo
{
public:
    QFontInfo( const QFont & );
    QFontInfo( const QFontInfo & );
   ~QFontInfo();

    QFontInfo	       &operator=( const QFontInfo & );

    QString   	        family()	const;
    int			pointSize()	const;
    bool		italic()	const;
    int			weight()	const;
    bool		bold()		const;
    bool		underline()	const;
    bool		strikeOut()	const;
    bool		fixedPitch()	const;
    QFont::StyleHint	styleHint()	const;
    QFont::CharSet	charSet()	const;
    bool		rawMode()	const;

    bool		exactMatch()	const;


    const QFont &font() const;
#line 72 "c:\\qt\\include\\qfontinfo.h"

private:
    QFontInfo( const QPainter * );
    static void reset( const QPainter * );
    const QFontDef *spec() const;

    QFontInternal *fin;
    QPainter      *painter;
    int		   flags;

    bool    underlineFlag()  const { return (flags & 0x1) != 0; }
    bool    strikeOutFlag()  const { return (flags & 0x2) != 0; }
    bool    exactMatchFlag() const { return (flags & 0x4) != 0; }
    void    setUnderlineFlag()	   { flags |= 0x1; }
    void    setStrikeOutFlag()	   { flags |= 0x2; }
    void    setExactMatchFlag()	   { flags |= 0x4; }

    friend class QWidget;
    friend class QPainter;
};


inline bool QFontInfo::bold() const
{ return weight() > QFont::Normal; }


#line 99 "c:\\qt\\include\\qfontinfo.h"
#line 50 "c:\\qt\\include\\qwidget.h"
#line 1 "c:\\qt\\include\\qstyle.h"








































#line 1 "c:\\qt\\include\\qwindowdefs.h"














































































































































































#line 42 "c:\\qt\\include\\qstyle.h"
#line 1 "c:\\qt\\include\\qobject.h"























































































































































































































































#line 43 "c:\\qt\\include\\qstyle.h"
#line 44 "c:\\qt\\include\\qstyle.h"


class QButton;
class QPushButton;
class QScrollBar;
class QTabBar;
class QTab;
class QPopupMenu;
class QMenuItem;
class QToolButton;

class __declspec(dllimport) QStyle: public QObject
{
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
    GUIStyle gs;

private:
    QStyle(GUIStyle);
    QStyle();
    friend class QCommonStyle;

public:
    virtual ~QStyle();


    operator GUIStyle() const { return gs; }
    int operator==(GUIStyle s) const { return gs==s; }
    int operator!=(GUIStyle s) const { return gs!=s; }
#line 73 "c:\\qt\\include\\qstyle.h"

    GUIStyle guiStyle() const { return gs; }

    

    virtual void polish( QWidget* );
    virtual void unPolish( QWidget* );

    virtual void polish( QApplication*);
    virtual void unPolish( QApplication*);

    virtual void polish( QPalette&);

    virtual QRect itemRect( QPainter *p, int x, int y, int w, int h,
		    int flags, bool enabled,
		    const QPixmap *pixmap,
		    const QString& text, int len=-1 ); 

    virtual void drawItem( QPainter *p, int x, int y, int w, int h,
		    int flags, const QColorGroup &g, bool enabled,
		    const QPixmap *pixmap, const QString& text,
			   int len=-1, const QColor* penColor = 0 );


    virtual void drawSeparator( QPainter *p, int x1, int y1, int x2, int y2,
		     const QColorGroup &g, bool sunken = TRUE,
		     int lineWidth = 1, int midLineWidth = 0 );

    virtual void drawRect( QPainter *p, int x, int y, int w, int h,
		    const QColor &, int lineWidth = 1,
		    const QBrush *fill = 0 );

    virtual void drawRectStrong( QPainter *p, int x, int y, int w, int h,
		     const QColorGroup &, bool sunken=FALSE,
		     int lineWidth = 1, int midLineWidth = 0,
		     const QBrush *fill = 0 );

    virtual void drawButton( QPainter *p, int x, int y, int w, int h,
		     const QColorGroup &g, bool sunken = FALSE,
		     const QBrush *fill = 0 ) = 0;

    virtual QRect buttonRect( int x, int y, int w, int h); 

    virtual void drawButtonMask( QPainter *p, int x, int y, int w, int h);

    virtual void drawBevelButton( QPainter *p, int x, int y, int w, int h,
		     const QColorGroup &g, bool sunken = FALSE,
		     const QBrush *fill = 0 ) = 0;

    QRect bevelButtonRect( int x, int y, int w, int h); 

    virtual void drawToolButton( QPainter *p, int x, int y, int w, int h,
		     const QColorGroup &g, bool sunken = FALSE,
		     const QBrush *fill = 0 );
    void drawToolButton( QToolButton* btn, QPainter *p); 

    QRect toolButtonRect(  int x, int y, int w, int h); 

    virtual void drawPanel( QPainter *p, int x, int y, int w, int h,
		    const QColorGroup &, bool sunken=FALSE,
		    int lineWidth = 1, const QBrush *fill = 0 );

    virtual void drawPopupPanel( QPainter *p, int x, int y, int w, int h,
				 const QColorGroup &,  int lineWidth = 2,
				 const QBrush *fill = 0 );

    virtual void drawArrow( QPainter *p, Qt::ArrowType type, bool down,
		     int x, int y, int w, int h,
		     const QColorGroup &g, bool enabled, const QBrush *fill = 0 ) = 0;

    
    virtual QSize exclusiveIndicatorSize() const = 0;
    virtual void drawExclusiveIndicator( QPainter* p, int x, int y, int w, int h,
		    const QColorGroup &g, bool on, bool down = FALSE, bool enabled = TRUE ) = 0;
    virtual void drawExclusiveIndicatorMask( QPainter *p, int x, int y, int w, int h, bool on);

    
    virtual QSize indicatorSize() const = 0;
    virtual void drawIndicator( QPainter* p, int x, int y, int w, int h, const QColorGroup &g,
				int state, bool down = FALSE, bool enabled = TRUE ) = 0;
    virtual void drawIndicatorMask( QPainter *p, int x, int y, int w, int h, int state);


    
    virtual void drawFocusRect( QPainter*, const QRect &,
				const QColorGroup &, const QColor* bg = 0,
				bool = FALSE ) = 0;


    

    
    virtual void drawComboButton( QPainter *p, int x, int y, int w, int h,
				  const QColorGroup &g, bool sunken = FALSE,
				  bool editable = FALSE,
				  bool enabled = TRUE,
				  const QBrush *fill = 0 ) = 0;
    virtual QRect comboButtonRect( int x, int y,
		    int w, int h) = 0; 
    virtual QRect comboButtonFocusRect( int x, int y,
		    int w, int h) = 0; 

    virtual void drawComboButtonMask( QPainter *p, int x, int y, int w, int h) = 0;

    
    virtual void drawPushButton( QPushButton* btn, QPainter *p) = 0;
    
    virtual void drawPushButtonLabel( QPushButton* btn, QPainter *p) = 0;
    QRect pushButtonContentsRect( QPushButton* btn ); 
    int menuButtonIndicatorWidth( int h ); 
    virtual void getButtonShift( int &x, int &y) = 0; 

    
    virtual int defaultFrameWidth() const = 0;

    
    virtual void tabbarMetrics( const QTabBar*,
		    int&, int&, int& ) = 0; 
    virtual void drawTab( QPainter*, const QTabBar*, QTab*, bool selected ) = 0;
    virtual void drawTabMask( QPainter*, const QTabBar*, QTab*, bool selected ) = 0;

    
    enum ScrollControl { AddLine = 0x1 , SubLine  = 0x2 , AddPage = 0x4,
			 SubPage = 0x8 , First = 0x10, Last = 0x20,
			 Slider  = 0x40, NoScroll = 0x80 };

    virtual void scrollBarMetrics( const QScrollBar*,
		    int&, int&, int&, int&) = 0; 
    virtual void drawScrollBarControls( QPainter*,  const QScrollBar*,
					int sliderStart, uint controls,
					uint activeControl ) = 0;
    virtual ScrollControl scrollBarPointOver( const QScrollBar*,
					int sliderStart, const QPoint& ) = 0;

    
    virtual int sliderLength() const = 0;
    virtual void drawSlider( QPainter *p,
			     int x, int y, int w, int h,
			     const QColorGroup &g,
			     Orientation, bool tickAbove, bool tickBelow) = 0;

    virtual void drawSliderMask( QPainter *p,
				 int x, int y, int w, int h,
				 Orientation, bool tickAbove, bool tickBelow) = 0;
    virtual void drawSliderGroove( QPainter *p,
				   int x, int y, int w, int h,
				   const QColorGroup& g, QCOORD c,
				   Orientation ) = 0;
    virtual void drawSliderGrooveMask( QPainter *p,
				       int x, int y, int w, int h,
				       QCOORD c,
				       Orientation ) = 0;
    virtual int maximumSliderDragDistance() const = 0;

    virtual int splitterWidth() const = 0;
    virtual void drawSplitter( QPainter *p,
			     int x, int y, int w, int h,
			     const QColorGroup &g,
			     Orientation) = 0;

    virtual void drawCheckMark( QPainter *p, int x, int y, int w, int h,
				const QColorGroup &g,
				bool act, bool dis ) = 0;
    virtual void polishPopupMenu( QPopupMenu* ) = 0;

    virtual int extraPopupMenuItemWidth( bool checkable, int maxpmw,
				QMenuItem* mi,
				const QFontMetrics& fm  ) = 0; 
    virtual int popupSubmenuIndicatorWidth(
				const QFontMetrics& fm  ) = 0; 
    virtual int popupMenuItemHeight( bool checkable,
				QMenuItem* mi,
				const QFontMetrics& fm  ) = 0; 
    virtual void drawPopupMenuItem( QPainter* p, bool checkable,
				    int maxpmw, int tab, QMenuItem* mi,
				    const QPalette& pal,
				    bool act, bool enabled,
				    int x, int y, int w, int h) = 0;
    void drawMenuBarItem( QPainter* p, int x, int y, int w, int h, 
				    QMenuItem* mi, QColorGroup& g,
				    bool enabled, bool active );

    
    QSize scrollBarExtent(); 
    int buttonDefaultIndicatorWidth() const;
    int buttonMargin() const; 
    int toolBarHandleExtent() const; 
    int toolBarHandleExtend() const; 
    int sliderThickness() const ; 
    void drawToolBarHandle( QPainter *p, const QRect &r,
			    Qt::Orientation orientation,
			    bool highlight, const QColorGroup &cg,
			    bool drawBorder = FALSE ); 

protected:
    void setScrollBarExtent( int w, int h=-1 ); 
    void setButtonDefaultIndicatorWidth( int w ); 
    void setButtonMargin( int w ); 
    void setSliderThickness(int t); 


private:	



#line 279 "c:\\qt\\include\\qstyle.h"
};

#line 282 "c:\\qt\\include\\qstyle.h"
#line 283 "c:\\qt\\include\\qstyle.h"
#line 51 "c:\\qt\\include\\qwidget.h"
#line 1 "c:\\qt\\include\\qsizepolicy.h"









































#line 1 "c:\\qt\\include\\qglobal.h"


























































































































































































































































































































































































































































































































































































































































#line 43 "c:\\qt\\include\\qsizepolicy.h"
#line 44 "c:\\qt\\include\\qsizepolicy.h"

class __declspec(dllimport) QSizePolicy
{
private:
    enum { HSize = 6, HMask = 0x3f, VMask = HMask << HSize,
	   MayGrow = 1, ExpMask = 2, MayShrink = 4 };
public:
    enum SizeType { Fixed = 0,
		    Minimum = MayGrow,
		    Maximum = MayShrink,
		    Preferred = MayGrow|MayShrink ,
		    MinimumExpanding = Minimum|ExpMask,
		    Expanding = MinimumExpanding|MayShrink };

    enum ExpandData { NoDirection = 0,
		      Horizontal = 1,
		      Vertical = 2,
		      BothDirections = Horizontal | Vertical };

    QSizePolicy() { data = 0; }

    QSizePolicy( SizeType hor, SizeType ver, bool hfw = FALSE );

    SizeType horData() const { return (SizeType)( data & HMask ); }
    SizeType verData() const { return (SizeType)(( data & VMask ) >> HSize); }

    bool mayShrinkHorizontally() const { return horData() & MayShrink; }
    bool mayShrinkVertically() const { return verData() & MayShrink; }
    bool mayGrowHorizontally() const { return horData() & MayGrow; }
    bool mayGrowVertically() const { return verData() & MayGrow; }

    ExpandData expanding() const
    {
	return (ExpandData)( (int)(verData()&ExpMask ? Vertical : 0)+
			     (int)(horData()&ExpMask ? Horizontal : 0) );
    }

    void setHorData( SizeType d ) { data = (data & ~HMask) | d; }
    void setVerData( SizeType d ) { data = (data & ~(HMask<<HSize)) |
					   (d<<HSize); }
		
    void setHeightForWidth( bool b ) { data = b ? ( data | ( 1 << 2*HSize ) )
					      : ( data & ~( 1 << 2*HSize ) );  }
    bool hasHeightForWidth() const { return data & ( 1 << 2*HSize ); }

    bool operator==( const QSizePolicy& s ) const { return data == s.data; }
    bool operator!=( const QSizePolicy& s ) const { return data != s.data; }

private:
    QSizePolicy( int i ): data( i ) {}

    Q_UINT16 data;
};


inline QSizePolicy::QSizePolicy( SizeType hor, SizeType ver, bool hfw )
	: data( hor | (ver<<HSize) | (hfw ? (1<<2*HSize) : 0) ) {}
#line 102 "c:\\qt\\include\\qsizepolicy.h"

#line 104 "c:\\qt\\include\\qsizepolicy.h"
#line 52 "c:\\qt\\include\\qwidget.h"
#line 53 "c:\\qt\\include\\qwidget.h"

class QLayout;
struct QWExtra;
struct QTLWExtra;
class QFocusData;
class QStyle;
class QWSRegionManager;

class __declspec(dllimport) QWidget : public QObject, public QPaintDevice
{
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
#line 104 "c:\\qt\\include\\qwidget.h"
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

public:
    QWidget( QWidget *parent=0, const char *name=0, WFlags f=0 );
    ~QWidget();

    WId		 winId() const;
    void	 setName( const char *name );

    

    QStyle     &style() const;
    void        setStyle( QStyle * );
#line 137 "c:\\qt\\include\\qwidget.h"
    

    bool	 isTopLevel()	const;
    bool	 isModal()	const;
    bool	 isPopup()	const;
    bool	 isDesktop()	const;

    bool	 isEnabled()	const;
    bool	 isEnabledTo(QWidget*) const;
    bool	 isEnabledToTLW() const;

public :
    virtual void setEnabled( bool );
    void setDisabled( bool );

    

public:
    QRect	 frameGeometry() const;
    const QRect &geometry()	const;
    int		 x()		const;
    int		 y()		const;
    QPoint	 pos()		const;
    QSize	 frameSize()    const;
    QSize	 size()		const;
    int		 width()	const;
    int		 height()	const;
    QRect	 rect()		const;
    QRect	 childrenRect() const;
    QRegion	 childrenRegion() const;

    QSize	 minimumSize()	 const;
    QSize	 maximumSize()	 const;
    int		 minimumWidth()	 const;
    int		 minimumHeight() const;
    int		 maximumWidth()	 const;
    int		 maximumHeight() const;
    void	 setMinimumSize( const QSize & );
    virtual void setMinimumSize( int minw, int minh );
    void	 setMaximumSize( const QSize & );
    virtual void setMaximumSize( int maxw, int maxh );
    void	 setMinimumWidth( int minw );
    void	 setMinimumHeight( int minh );
    void	 setMaximumWidth( int maxw );
    void	 setMaximumHeight( int maxh );

    QSize	 sizeIncrement() const;
    void	 setSizeIncrement( const QSize & );
    virtual void setSizeIncrement( int w, int h );
    QSize	 baseSize() const;
    void	 setBaseSize( const QSize & );
    void	 setBaseSize( int basew, int baseh );

    void	setFixedSize( const QSize & );
    void	setFixedSize( int w, int h );
    void	setFixedWidth( int w );
    void	setFixedHeight( int h );

    

    QPoint	 mapToGlobal( const QPoint & )	 const;
    QPoint	 mapFromGlobal( const QPoint & ) const;
    QPoint	 mapToParent( const QPoint & )	 const;
    QPoint	 mapFromParent( const QPoint & ) const;
    QPoint	 mapTo( QWidget *, const QPoint & ) const;
    QPoint	 mapFrom( QWidget *, const QPoint & ) const;

    QWidget	*topLevelWidget()   const;

    

    enum BackgroundMode { FixedColor, FixedPixmap, NoBackground,
			  PaletteForeground, PaletteButton, PaletteLight,
			  PaletteMidlight, PaletteDark, PaletteMid,
			  PaletteText, PaletteBrightText, PaletteBase,
			  PaletteBackground, PaletteShadow, PaletteHighlight,
			  PaletteHighlightedText, PaletteButtonText,
			  X11ParentRelative };

    BackgroundMode	backgroundMode() const;
    virtual void	setBackgroundMode( BackgroundMode );

    const QColor &	backgroundColor() const;
    const QColor &	foregroundColor() const;
    virtual void	setBackgroundColor( const QColor & );

    const QPixmap *	backgroundPixmap() const;
    virtual void	setBackgroundPixmap( const QPixmap & );


    const QColorGroup & colorGroup() const;
    const QPalette &	palette()    const;
    bool		ownPalette() const;
    virtual void	setPalette( const QPalette & );
    void		unsetPalette();
#line 233 "c:\\qt\\include\\qwidget.h"
    QFont		font() const;
    bool		ownFont() const;
    virtual void	setFont( const QFont & );
    void		unsetFont();
    QFontMetrics	fontMetrics() const;
    QFontInfo	 	fontInfo() const;

    enum PropagationMode { NoChildren, AllChildren,
			   SameFont, SamePalette = SameFont };

    PropagationMode	fontPropagation() const; 
    virtual void	setFontPropagation( PropagationMode ); 

    PropagationMode	palettePropagation() const; 
    virtual void	setPalettePropagation( PropagationMode ); 

    const QCursor      &cursor() const;
    bool		ownCursor() const;
    virtual void	setCursor( const QCursor & );
    virtual void	unsetCursor();
#line 254 "c:\\qt\\include\\qwidget.h"
    QString		caption() const;
    const QPixmap      *icon() const;
    QString		iconText() const;
    bool		hasMouseTracking() const;

    virtual void	setMask( const QBitmap & );
    virtual void	setMask( const QRegion & );
    void		clearMask();

public :
    virtual void	setCaption( const QString &);
    virtual void	setIcon( const QPixmap & );
    virtual void	setIconText( const QString &);
    virtual void	setMouseTracking( bool enable );

    

    virtual void	setFocus();
    void		clearFocus();

public:
    enum FocusPolicy {
	NoFocus = 0,
	TabFocus = 0x1,
	ClickFocus = 0x2,
	StrongFocus = 0x3,
	WheelFocus = 0x7
    };

    bool		isActiveWindow() const;
    virtual void	setActiveWindow();
    bool		isFocusEnabled() const;

    FocusPolicy		focusPolicy() const;
    virtual void	setFocusPolicy( FocusPolicy );
    bool		hasFocus() const;
    static void		setTabOrder( QWidget *, QWidget * );
    virtual void	setFocusProxy( QWidget * );
    QWidget *		focusProxy() const;

    

    void		grabMouse();

    void		grabMouse( const QCursor & );
#line 300 "c:\\qt\\include\\qwidget.h"
    void		releaseMouse();
    void		grabKeyboard();
    void		releaseKeyboard();
    static QWidget *	mouseGrabber();
    static QWidget *	keyboardGrabber();

    

    bool	 	isUpdatesEnabled() const;



#line 313 "c:\\qt\\include\\qwidget.h"
public :
    virtual void	setUpdatesEnabled( bool enable );
    void		update();
    void		update( int x, int y, int w, int h );
    void		update( const QRect& );
    void		repaint();
    void		repaint( bool erase );
    void		repaint( int x, int y, int w, int h, bool erase=TRUE );
    void		repaint( const QRect &, bool erase=TRUE );
    void		repaint( const QRegion &, bool erase=TRUE );

    

    virtual void	show();
    virtual void	hide();

    void		iconify()	{ showMinimized(); }
#line 331 "c:\\qt\\include\\qwidget.h"
    virtual void	showMinimized();
    virtual void	showMaximized();
    void		showFullScreen(); 
    virtual void	showNormal();
    virtual void	polish();
    void 		constPolish() const;
    bool		close();

    void		raise();
    void		lower();
    void		stackUnder( QWidget* );
    virtual void	move( int x, int y );
    void		move( const QPoint & );
    virtual void	resize( int w, int h );
    void		resize( const QSize & );
    virtual void	setGeometry( int x, int y, int w, int h );
    virtual void	setGeometry( const QRect & );

public:
    virtual bool	close( bool alsoDelete );
    bool		isVisible()	const;
    bool		isVisibleTo(QWidget*) const;
    bool		isVisibleToTLW() const; 
    QRect		visibleRect() const;
    bool 		isHidden() const;
    bool		isMinimized() const;
    bool		isMaximized() const;

    virtual QSize	sizeHint() const;
    virtual QSize	minimumSizeHint() const;
    virtual QSizePolicy	sizePolicy() const;
    void 		setSizePolicy( QSizePolicy );
    virtual int heightForWidth(int) const;

    virtual void  	adjustSize();

    QLayout *		layout() const { return lay_out; }
#line 369 "c:\\qt\\include\\qwidget.h"
    void		updateGeometry();
    virtual void 	reparent( QWidget *parent, WFlags, const QPoint &,
				  bool showIt=FALSE );
    void		reparent( QWidget *parent, const QPoint &,
				  bool showIt=FALSE );

    void		recreate( QWidget *parent, WFlags f, const QPoint & p,
				  bool showIt=FALSE )
    { reparent(parent,f,p,showIt); }
#line 379 "c:\\qt\\include\\qwidget.h"

    void		erase();
    void		erase( int x, int y, int w, int h );
    void		erase( const QRect & );
    void		erase( const QRegion & );
    void		scroll( int dx, int dy );
    void		scroll( int dx, int dy, const QRect& );

    void		drawText( int x, int y, const QString &);
    void		drawText( const QPoint &, const QString &);

    

    QWidget *		focusWidget() const;
    QRect               microFocusHint() const;

    

    bool		acceptDrops() const;
    virtual void	setAcceptDrops( bool on );

    

    virtual void	setAutoMask(bool);
    bool		autoMask() const;

    enum BackgroundOrigin { WidgetOrigin, ParentOrigin };

    void setBackgroundOrigin( BackgroundOrigin );
    BackgroundOrigin backgroundOrigin() const;


    
    virtual bool customWhatsThis() const;

    QWidget *		parentWidget() const;
    bool		testWState( uint n ) const;
    bool		testWFlags( WFlags f ) const;
    static QWidget *	find( WId );
    static QWidgetMapper *wmapper();



#line 423 "c:\\qt\\include\\qwidget.h"

protected:
    
    bool	 event( QEvent * );
    virtual void mousePressEvent( QMouseEvent * );
    virtual void mouseReleaseEvent( QMouseEvent * );
    virtual void mouseDoubleClickEvent( QMouseEvent * );
    virtual void mouseMoveEvent( QMouseEvent * );
    virtual void wheelEvent( QWheelEvent * );
    virtual void keyPressEvent( QKeyEvent * );
    virtual void keyReleaseEvent( QKeyEvent * );
    virtual void focusInEvent( QFocusEvent * );
    virtual void focusOutEvent( QFocusEvent * );
    virtual void enterEvent( QEvent * );
    virtual void leaveEvent( QEvent * );
    virtual void paintEvent( QPaintEvent * );
    virtual void moveEvent( QMoveEvent * );
    virtual void resizeEvent( QResizeEvent * );
    virtual void closeEvent( QCloseEvent * );


    virtual void dragEnterEvent( QDragEnterEvent * );
    virtual void dragMoveEvent( QDragMoveEvent * );
    virtual void dragLeaveEvent( QDragLeaveEvent * );
    virtual void dropEvent( QDropEvent * );
#line 449 "c:\\qt\\include\\qwidget.h"

    virtual void showEvent( QShowEvent * );
    virtual void hideEvent( QHideEvent * );
    virtual void customEvent( QCustomEvent * );








#line 462 "c:\\qt\\include\\qwidget.h"
    virtual bool winEvent( MSG * );		






#line 470 "c:\\qt\\include\\qwidget.h"

    virtual void updateMask();

    

protected:

    virtual void styleChange( QStyle& );
#line 479 "c:\\qt\\include\\qwidget.h"
    virtual void enabledChange( bool );
    virtual void backgroundColorChange( const QColor & );
    virtual void backgroundPixmapChange( const QPixmap & );

    virtual void paletteChange( const QPalette & );
#line 485 "c:\\qt\\include\\qwidget.h"
    virtual void fontChange( const QFont & );

    int		 metric( int )	const;

    virtual void create( WId = 0, bool initializeWindow = TRUE,
			 bool destroyOldWindow = TRUE );
    virtual void destroy( bool destroyWindow = TRUE,
			  bool destroySubWindows = TRUE );
    uint	 getWState() const;
    virtual void setWState( uint );
    void	 clearWState( uint n );
    WFlags	 getWFlags() const;
    virtual void setWFlags( WFlags );
    void	 clearWFlags( WFlags n );

    virtual void setFRect( const QRect & );
    virtual void setCRect( const QRect & );

    virtual bool focusNextPrevChild( bool next );

    QWExtra	*extraData();
    QTLWExtra	*topData();
    QFocusData	*focusData();

    virtual void setKeyCompression(bool);
    virtual void setMicroFocusHint(int x, int y, int w, int h, bool text=TRUE);

private :
    void	 focusProxyDestroyed();

private:
    void	 setFontSys();

    void 	 setLayout( QLayout *l );
#line 520 "c:\\qt\\include\\qwidget.h"
    void	 setWinId( WId );
    void	 showWindow();
    void	 hideWindow();
    void	 sendShowEventsToChildren( bool spontaneous );
    void	 sendHideEventsToChildren( bool spontaneous );
    void	 createTLExtra();
    void	 createExtra();
    void	 deleteExtra();
    void	 createSysExtra();
    void	 deleteSysExtra();
    void	 createTLSysExtra();
    void	 deleteTLSysExtra();
    void	 deactivateWidgetCleanup();
    void	 internalSetGeometry( int, int, int, int, bool );
    void	 reparentFocusWidgets( QWidget * );
    QFocusData	*focusData( bool create );
    void         setBackgroundFromMode();
    void         setBackgroundColorDirect( const QColor & );
    void   	 setBackgroundPixmapDirect( const QPixmap & );
    void         setBackgroundModeDirect( BackgroundMode );
    void         setBackgroundEmpty();


#line 544 "c:\\qt\\include\\qwidget.h"

    WId		 winid;
    uint	 widget_state;
    uint	 widget_flags;
    uint	 propagate_font : 2; 
    uint	 propagate_palette : 2; 
    uint	 focus_policy : 4;
    uint 	 own_font :1;
    uint 	 own_palette :1;
    uint 	 sizehint_forced :1;
    uint 	 is_closing :1;
    uint 	 in_show : 1;
    QPoint	 fpos;
    QRect	 crect;
    QColor	 bg_col;

    QPalette	 pal;
#line 562 "c:\\qt\\include\\qwidget.h"
    QFont	 fnt;

    QLayout 	*lay_out;
#line 566 "c:\\qt\\include\\qwidget.h"
    QWExtra	*extra;






















#line 590 "c:\\qt\\include\\qwidget.h"

    static void	 createMapper();
    static void	 destroyMapper();
    static QWidgetList	 *wList();
    static QWidgetList	 *tlwList();
    static QWidgetMapper *mapper;
    friend class QApplication;
    friend class QBaseApplication;
    friend class QPainter;
    friend class QFontMetrics;
    friend class QFontInfo;
    friend class QETWidget;

    friend class QLayout;


#line 607 "c:\\qt\\include\\qwidget.h"
private:	



#line 612 "c:\\qt\\include\\qwidget.h"

public: 

    void setPalette( const QPalette &, bool iReallyMeanIt );
#line 617 "c:\\qt\\include\\qwidget.h"
    void setFont( const QFont &, bool iReallyMeanIt );
};


inline bool QWidget::testWState( uint f ) const
{ return (widget_state & f) != 0; }

inline bool QWidget::testWFlags( WFlags f ) const
{ return (widget_flags & f) != 0; }


inline WId QWidget::winId() const
{ return winid; }

inline bool QWidget::isTopLevel() const
{ return testWFlags(WType_TopLevel); }

inline bool QWidget::isModal() const
{ return testWFlags(WType_Modal); }

inline bool QWidget::isPopup() const
{ return testWFlags(WType_Popup); }

inline bool QWidget::isDesktop() const
{ return testWFlags(WType_Desktop); }

inline bool QWidget::isEnabled() const
{ return !testWState(WState_Disabled); }

inline const QRect &QWidget::geometry() const
{ return crect; }

inline int QWidget::x() const
{ return fpos.x(); }

inline int QWidget::y() const
{ return fpos.y(); }

inline QPoint QWidget::pos() const
{ return fpos; }

inline QSize QWidget::size() const
{ return crect.size(); }

inline int QWidget::width() const
{ return crect.width(); }

inline int QWidget::height() const
{ return crect.height(); }

inline QRect QWidget::rect() const
{ return QRect(0,0,crect.width(),crect.height()); }

inline int QWidget::minimumWidth() const
{ return minimumSize().width(); }

inline int QWidget::minimumHeight() const
{ return minimumSize().height(); }

inline int QWidget::maximumWidth() const
{ return maximumSize().width(); }

inline int QWidget::maximumHeight() const
{ return maximumSize().height(); }

inline void QWidget::setMinimumSize( const QSize &s )
{ setMinimumSize(s.width(),s.height()); }

inline void QWidget::setMaximumSize( const QSize &s )
{ setMaximumSize(s.width(),s.height()); }

inline void QWidget::setSizeIncrement( const QSize &s )
{ setSizeIncrement(s.width(),s.height()); }

inline void QWidget::setBaseSize( const QSize &s )
{ setBaseSize(s.width(),s.height()); }

inline const QColor &QWidget::backgroundColor() const
{ return bg_col; }


inline const QPalette &QWidget::palette() const
{ return pal; }
#line 701 "c:\\qt\\include\\qwidget.h"

inline QFont QWidget::font() const
{ return fnt; }

inline QFontMetrics QWidget::fontMetrics() const
{ return QFontMetrics(font()); }

inline QFontInfo QWidget::fontInfo() const
{ return QFontInfo(font()); }

inline bool QWidget::hasMouseTracking() const
{ return testWState(WState_MouseTracking); }

inline bool  QWidget::isFocusEnabled() const
{ return (FocusPolicy)focus_policy != NoFocus; }

inline QWidget::FocusPolicy QWidget::focusPolicy() const
{ return (FocusPolicy)focus_policy; }

inline bool QWidget::isUpdatesEnabled() const
{ return !testWState(WState_BlockUpdates); }

inline void QWidget::update( const QRect &r )
{ update( r.x(), r.y(), r.width(), r.height() ); }

inline void QWidget::repaint()
{ repaint( 0, 0, crect.width(), crect.height(), TRUE ); }

inline void QWidget::repaint( bool erase )
{ repaint( 0, 0, crect.width(), crect.height(), erase ); }

inline void QWidget::repaint( const QRect &r, bool erase )
{ repaint( r.x(), r.y(), r.width(), r.height(), erase ); }

inline void QWidget::erase()
{ erase( 0, 0, crect.width(), crect.height() ); }

inline void QWidget::erase( const QRect &r )
{ erase( r.x(), r.y(), r.width(), r.height() ); }

inline bool QWidget::close()
{ return close( FALSE ); }

inline bool QWidget::isVisible() const
{ return testWState(WState_Visible); }

inline bool QWidget::isHidden() const
{ return testWState(WState_ForceHide); }

inline void QWidget::move( const QPoint &p )
{ move( p.x(), p.y() ); }

inline void QWidget::resize( const QSize &s )
{ resize( s.width(), s.height()); }

inline void QWidget::setGeometry( const QRect &r )
{ setGeometry( r.left(), r.top(), r.width(), r.height() ); }

inline void QWidget::drawText( const QPoint &p, const QString &s )
{ drawText( p.x(), p.y(), s ); }

inline QWidget *QWidget::parentWidget() const
{ return (QWidget *)QObject::parent(); }

inline QWidgetMapper *QWidget::wmapper()
{ return mapper; }

inline uint QWidget::getWState() const
{ return widget_state; }

inline void QWidget::setWState( uint f )
{ widget_state |= f; }

inline void QWidget::clearWState( uint f )
{ widget_state &= ~f; }

inline Qt::WFlags QWidget::getWFlags() const
{ return widget_flags; }

inline void QWidget::setWFlags( WFlags f )
{ widget_flags |= f; }

inline void QWidget::clearWFlags( WFlags f )
{ widget_flags &= ~f; }

inline void QWidget::constPolish() const
{
    if ( !testWState(WState_Polished) ) {
	QWidget* that = (QWidget*) this;
	that->polish();
        that->setWState(WState_Polished); 
    }
}

inline bool QWidget::ownCursor() const
{
    return testWState( WState_OwnCursor );
}
#line 800 "c:\\qt\\include\\qwidget.h"
inline bool QWidget::ownFont() const
{
    return own_font;
}

inline bool QWidget::ownPalette() const
{
    return own_palette;
}
#line 810 "c:\\qt\\include\\qwidget.h"





class QFocusData;
class QWSManager;

class QOleDropTarget;
#line 820 "c:\\qt\\include\\qwidget.h"

struct QTLWExtra {
    QString  caption;				
    QString  iconText;				
    QPixmap *icon;				
    QFocusData *focusData;			
    QSize    fsize;				
    short    incw, inch;			
    uint     iconic: 1;				
    uint     fullscreen : 1;			
    uint     showMode: 2;			
    short    basew, baseh;			








#line 841 "c:\\qt\\include\\qwidget.h"



#line 845 "c:\\qt\\include\\qwidget.h"

    HICON    winIcon;				
#line 848 "c:\\qt\\include\\qwidget.h"
    QRect    normalGeometry;			
};






struct QWExtra {
    Q_INT16  minw, minh;			
    Q_INT16  maxw, maxh;			
    QPixmap *bg_pix;				
    QWidget *focus_proxy;

    QCursor *curs;
#line 864 "c:\\qt\\include\\qwidget.h"
    QTLWExtra *topextra;			

    QOleDropTarget *dropTarget;			
#line 868 "c:\\qt\\include\\qwidget.h"


#line 871 "c:\\qt\\include\\qwidget.h"


#line 874 "c:\\qt\\include\\qwidget.h"
    char     bg_mode;				

    QStyle* style;
#line 878 "c:\\qt\\include\\qwidget.h"
    QRect micro_focus_hint;                     
    QSizePolicy size_policy;
    void * posted_events;			
};


#line 885 "c:\\qt\\include\\qwidget.h"
#line 43 "c:\\qt\\include\\qdialog.h"
#line 44 "c:\\qt\\include\\qdialog.h"



#line 48 "c:\\qt\\include\\qdialog.h"

class QDialogPrivate;
class QPushButton;

class __declspec(dllimport) QDialog : public QWidget			
{
friend class QPushButton;
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
    

public:
    QDialog( QWidget *parent=0, const char *name=0, bool modal=FALSE,
	     WFlags f=0 );
   ~QDialog();

    enum DialogCode { Rejected, Accepted };

    int		exec();
    int		result()  const { return rescode; }

    void	show();
    void	hide();
    void	move( int x, int y );
    void	move( const QPoint &p );
    void	resize( int w, int h );
    void	resize( const QSize & );
    void	setGeometry( int x, int y, int w, int h );
    void	setGeometry( const QRect & );

    void	setOrientation( Orientation orientation );
    Orientation	orientation() const;

    void	setExtension( QWidget* extension );
    QWidget* extension() const;

    QSize	sizeHint() const;
    QSize	minimumSizeHint() const;

    void setSizeGripEnabled(bool);
    bool isSizeGripEnabled() const;

protected :
    virtual void done( int );
    virtual void accept();
    virtual void reject();

    void	showExtension( bool );

protected:
    void	setResult( int r )	{ rescode = r; }
    void	keyPressEvent( QKeyEvent * );
    void	closeEvent( QCloseEvent * );
    void 	resizeEvent( QResizeEvent * );
private:
    virtual void	setDefault( QPushButton * ); 
    void		hideDefault();
    int		rescode;
    uint	did_move   : 1;
    uint	did_resize : 1;
    uint 	in_loop: 1;
    QDialogPrivate* d;

private:	



#line 115 "c:\\qt\\include\\qdialog.h"
};

#line 118 "c:\\qt\\include\\qdialog.h"
#line 119 "c:\\qt\\include\\qdialog.h"
#line 14 "h:\\c_projekte\\elansim\\login.h"
#line 1 "c:\\qt\\include\\qmultilinedit.h"
























#line 1 "c:\\qt\\include\\qmultilineedit.h"









































#line 1 "c:\\qt\\include\\qtableview.h"









































#line 1 "c:\\qt\\include\\qframe.h"









































#line 1 "c:\\qt\\include\\qwidget.h"




















































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 43 "c:\\qt\\include\\qframe.h"
#line 44 "c:\\qt\\include\\qframe.h"



class __declspec(dllimport) QFrame : public QWidget			
{
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
    
    
    
    
    
    
    
    
    

public:
    QFrame( QWidget *parent=0, const char *name=0, WFlags f=0,
	    bool = TRUE );

    int		frameStyle()	const;
    virtual void setFrameStyle( int );

    int		frameWidth()	const;
    QRect	contentsRect()	const;


    bool	lineShapesOk()	const { return TRUE; }
#line 73 "c:\\qt\\include\\qframe.h"

    QSize	sizeHint() const;
    QSizePolicy sizePolicy() const;

    enum Shape { NoFrame  = 0,				
		 Box	  = 0x0001,			
		 Panel    = 0x0002,			
		 WinPanel = 0x0003,			
		 HLine    = 0x0004,			
		 VLine    = 0x0005,			
		 StyledPanel = 0x0006,			
		 PopupPanel = 0x0007,			
		 MShape   = 0x000f			
    };
    enum Shadow { Plain    = 0x0010,			
		  Raised   = 0x0020,			
		  Sunken   = 0x0030,			
		  MShadow  = 0x00f0 };			

    Shape	frameShape()	const;
    void	setFrameShape( Shape );
    Shadow	frameShadow()	const;
    void	setFrameShadow( Shadow );

    int		lineWidth()	const;
    virtual void setLineWidth( int );

    int		margin()	const;
    virtual void setMargin( int );

    int		midLineWidth()	const;
    virtual void setMidLineWidth( int );

    QRect	frameRect()	const;
    virtual void setFrameRect( const QRect & );

protected:
    void	paintEvent( QPaintEvent * );
    void	resizeEvent( QResizeEvent * );
    virtual void drawFrame( QPainter * );
    virtual void drawContents( QPainter * );
    virtual void frameChanged();
    void	updateMask();
    virtual void drawFrameMask( QPainter * );
    virtual void drawContentsMask( QPainter * );

private:
    void	updateFrameWidth();
    QRect	frect;
    int		fstyle;
    short	lwidth;
    short	mwidth;
    short	mlwidth;
    short	fwidth;

    void * d;
private:	



#line 134 "c:\\qt\\include\\qframe.h"
};


inline int QFrame::frameStyle() const
{ return fstyle; }

inline QFrame::Shape QFrame::frameShape() const
{ return (Shape) ( fstyle & MShape ); }

inline QFrame::Shadow QFrame::frameShadow() const
{ return (Shadow) ( fstyle & MShadow ); }

inline void QFrame::setFrameShape( QFrame::Shape s )
{ setFrameStyle( ( fstyle & MShadow ) | s ); }

inline void QFrame::setFrameShadow( QFrame::Shadow s )
{ setFrameStyle( ( fstyle & MShape ) | s ); }

inline int QFrame::lineWidth() const
{ return lwidth; }

inline int QFrame::midLineWidth() const
{ return mlwidth; }

inline int QFrame::margin() const
{ return mwidth; }

inline int QFrame::frameWidth() const
{ return fwidth; }


#line 166 "c:\\qt\\include\\qframe.h"

#line 168 "c:\\qt\\include\\qframe.h"
#line 43 "c:\\qt\\include\\qtableview.h"
#line 44 "c:\\qt\\include\\qtableview.h"



class QScrollBar;
class QCornerSquare;


class __declspec(dllimport) QTableView : public QFrame
{
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
public:
    virtual void setBackgroundColor( const QColor & );
    virtual void setPalette( const QPalette & );
    void	show();

    void	repaint( bool erase=TRUE );
    void	repaint( int x, int y, int w, int h, bool erase=TRUE );
    void	repaint( const QRect &, bool erase=TRUE );

protected:
    QTableView( QWidget *parent=0, const char *name=0, WFlags f=0 );
   ~QTableView();

    int		numRows()	const;
    virtual void setNumRows( int );
    int		numCols()	const;
    virtual void setNumCols( int );

    int		topCell()	const;
    virtual void setTopCell( int row );
    int		leftCell()	const;
    virtual void setLeftCell( int col );
    virtual void setTopLeftCell( int row, int col );

    int		xOffset()	const;
    virtual void setXOffset( int );
    int		yOffset()	const;
    virtual void setYOffset( int );
    virtual void setOffset( int x, int y, bool updateScrBars = TRUE );

    virtual int cellWidth( int col );
    virtual int cellHeight( int row );
    int		cellWidth()	const;
    int		cellHeight()	const;
    virtual void setCellWidth( int );
    virtual void setCellHeight( int );

    virtual int totalWidth();
    virtual int totalHeight();

    uint	tableFlags()	const;
    bool	testTableFlags( uint f ) const;
    virtual void setTableFlags( uint f );
    void	clearTableFlags( uint f = ~0 );

    bool	autoUpdate()	 const;
    virtual void setAutoUpdate( bool );

    void	updateCell( int row, int column, bool erase=TRUE );

    QRect	cellUpdateRect() const;
    QRect	viewRect()	 const;

    int		lastRowVisible() const;
    int		lastColVisible() const;

    bool	rowIsVisible( int row ) const;
    bool	colIsVisible( int col ) const;

    QScrollBar *verticalScrollBar() const;
    QScrollBar *horizontalScrollBar() const;

private :
    void	horSbValue( int );
    void	horSbSliding( int );
    void	horSbSlidingDone();
    void	verSbValue( int );
    void	verSbSliding( int );
    void	verSbSlidingDone();

protected:
    virtual void paintCell( QPainter *, int row, int col ) = 0;
    virtual void setupPainter( QPainter * );

    void	paintEvent( QPaintEvent * );
    void	resizeEvent( QResizeEvent * );

    int		findRow( int yPos ) const;
    int		findCol( int xPos ) const;

    bool	rowYPos( int row, int *yPos ) const;
    bool	colXPos( int col, int *xPos ) const;

    int		maxXOffset();
    int		maxYOffset();
    int		maxColOffset();
    int		maxRowOffset();

    int		minViewX()	const;
    int		minViewY()	const;
    int		maxViewX()	const;
    int		maxViewY()	const;
    int		viewWidth()	const;
    int		viewHeight()	const;

    void	scroll( int xPixels, int yPixels );
    void	updateScrollBars();
    void	updateTableSize();

private:
    void	coverCornerSquare( bool );
    void	snapToGrid( bool horizontal, bool vertical );
    virtual void	setHorScrollBar( bool on, bool update = TRUE );
    virtual void	setVerScrollBar( bool on, bool update = TRUE );
    void	updateView();
    int		findRawRow( int yPos, int *cellMaxY, int *cellMinY = 0,
			    bool goOutsideView = FALSE ) const;
    int		findRawCol( int xPos, int *cellMaxX, int *cellMinX = 0,
			    bool goOutsideView = FALSE ) const;
    int		maxColsVisible() const;

    void	updateScrollBars( uint );
    void	updateFrameSize();

    void	doAutoScrollBars();
    void	showOrHideScrollBars();

    int		nRows;
    int		nCols;
    int		xOffs, yOffs;
    int		xCellOffs, yCellOffs;
    short	xCellDelta, yCellDelta;
    short	cellH, cellW;

    uint	eraseInPaint		: 1;
    uint	verSliding		: 1;
    uint	verSnappingOff		: 1;
    uint	horSliding		: 1;
    uint	horSnappingOff		: 1;
    uint	coveringCornerSquare	: 1;
    uint	sbDirty			: 8;
    uint	inSbUpdate		: 1;

    uint	tFlags;
    QRect	cellUpdateR;

    QScrollBar *vScrollBar;
    QScrollBar *hScrollBar;
    QCornerSquare *cornerSquare;

private:	



#line 199 "c:\\qt\\include\\qtableview.h"
};


const uint Tbl_vScrollBar	= 0x00000001;
const uint Tbl_hScrollBar	= 0x00000002;
const uint Tbl_autoVScrollBar	= 0x00000004;
const uint Tbl_autoHScrollBar	= 0x00000008;
const uint Tbl_autoScrollBars	= 0x0000000C;

const uint Tbl_clipCellPainting = 0x00000100;
const uint Tbl_cutCellsV	= 0x00000200;
const uint Tbl_cutCellsH	= 0x00000400;
const uint Tbl_cutCells		= 0x00000600;

const uint Tbl_scrollLastHCell	= 0x00000800;
const uint Tbl_scrollLastVCell	= 0x00001000;
const uint Tbl_scrollLastCell	= 0x00001800;

const uint Tbl_smoothHScrolling = 0x00002000;
const uint Tbl_smoothVScrolling = 0x00004000;
const uint Tbl_smoothScrolling	= 0x00006000;

const uint Tbl_snapToHGrid	= 0x00008000;
const uint Tbl_snapToVGrid	= 0x00010000;
const uint Tbl_snapToGrid	= 0x00018000;


inline int QTableView::numRows() const
{ return nRows; }

inline int QTableView::numCols() const
{ return nCols; }

inline int QTableView::topCell() const
{ return yCellOffs; }

inline int QTableView::leftCell() const
{ return xCellOffs; }

inline int QTableView::xOffset() const
{ return xOffs; }

inline int QTableView::yOffset() const
{ return yOffs; }

inline int QTableView::cellHeight() const
{ return cellH; }

inline int QTableView::cellWidth() const
{ return cellW; }

inline uint QTableView::tableFlags() const
{ return tFlags; }

inline bool QTableView::testTableFlags( uint f ) const
{ return (tFlags & f) != 0; }

inline QRect QTableView::cellUpdateRect() const
{ return cellUpdateR; }

inline bool QTableView::autoUpdate() const
{ return isUpdatesEnabled(); }

inline void QTableView::repaint( bool erase )
{ repaint( 0, 0, width(), height(), erase ); }

inline void QTableView::repaint( const QRect &r, bool erase )
{ repaint( r.x(), r.y(), r.width(), r.height(), erase ); }

inline void QTableView::updateScrollBars()
{ updateScrollBars( 0 ); }


#line 273 "c:\\qt\\include\\qtableview.h"

#line 275 "c:\\qt\\include\\qtableview.h"
#line 43 "c:\\qt\\include\\qmultilineedit.h"
#line 1 "c:\\qt\\include\\qstring.h"
























































































































































































































































































































































































































































































































































































































































































































































































































































#line 44 "c:\\qt\\include\\qmultilineedit.h"
#line 1 "c:\\qt\\include\\qlist.h"











































































































































#line 45 "c:\\qt\\include\\qmultilineedit.h"
#line 46 "c:\\qt\\include\\qmultilineedit.h"



struct QMultiLineData;
class QMultiLineEditCommand;
class QValidator;

class __declspec(dllimport) QMultiLineEdit : public QTableView
{
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

public:
    QMultiLineEdit( QWidget *parent=0, const char *name=0 );
   ~QMultiLineEdit();

    QString textLine( int line ) const;
    int numLines() const;

    QSize sizeHint() const;
    QSize minimumSizeHint() const;
    QSizePolicy sizePolicy() const;

    virtual void setFont( const QFont &font );

    virtual void insertLine( const QString &s, int line = -1 );
    virtual void insertAt( const QString &s, int line, int col, bool mark = FALSE );
    virtual void removeLine( int line );

    void cursorPosition( int *line, int *col ) const;
    virtual void setCursorPosition( int line, int col, bool mark = FALSE );
    void getCursorPosition( int *line, int *col ) const;
    bool atBeginning() const;
    bool atEnd() const;

    virtual void setFixedVisibleLines( int lines );

    int maxLineWidth() const;

    void setAlignment( int flags );
    int alignment() const;

    virtual void setValidator( const QValidator * );
    const QValidator * validator() const;

    void setEdited( bool );
    bool edited() const;

    void cursorWordForward( bool mark );
    void cursorWordBackward( bool mark );

    enum EchoMode { Normal, NoEcho, Password };
    virtual void setEchoMode( EchoMode );
    EchoMode echoMode() const;

    void setMaxLength(int);
    int maxLength() const;
    virtual void setMaxLineLength(int);
    int maxLineLength() const;
    virtual void setMaxLines(int);
    int maxLines() const;
    virtual void setHMargin(int);
    int hMargin() const;

    virtual void setSelection( int row_from, int col_from, int row_to, int col_t );

    enum WordWrap {
	NoWrap,
	WidgetWidth,
	FixedPixelWidth,
	FixedColumnWidth
    };
    void setWordWrap( WordWrap mode );
    WordWrap wordWrap() const;
    void setWrapColumnOrWidth( int );
    int wrapColumnOrWidth() const;

    enum WrapPolicy {
	AtWhiteSpace,
	Anywhere
    };
    void setWrapPolicy( WrapPolicy policy );
    WrapPolicy wrapPolicy() const;

    bool autoUpdate()	const;
    virtual void setAutoUpdate( bool );

    void setUndoEnabled( bool );
    bool isUndoEnabled() const;
    void setUndoDepth( int );
    int undoDepth() const;

    bool isReadOnly() const;
    bool isOverwriteMode() const;

    QString text() const;

    int length() const;

    static void setDefaultTabStop( int ex );
    static int defaultTabStop();
public :
    virtual void       setText( const QString &);
    virtual void       setReadOnly( bool );
    virtual void       setOverwriteMode( bool );

    void       clear();
    void       append( const QString &);
    void       deselect();
    void       selectAll();

    void       paste();
    void       pasteSubType(const QCString& subtype);
    void       copyText() const;
    void       copy() const;
    void       cut();
#line 183 "c:\\qt\\include\\qmultilineedit.h"
    void       insert( const QString& );
    void       undo();
    void       redo();

protected:
    void	textChanged();
    void	returnPressed();
    void	undoAvailable( bool );
    void	redoAvailable( bool );
    void	copyAvailable( bool );

protected:
    void	paintCell( QPainter *, int row, int col );
    bool	event( QEvent * );

    void	mousePressEvent( QMouseEvent * );
    void	mouseMoveEvent( QMouseEvent * );
    void	mouseReleaseEvent( QMouseEvent * );
    void	mouseDoubleClickEvent( QMouseEvent * );
    void 	wheelEvent( QWheelEvent * );
    void	keyPressEvent( QKeyEvent * );
    void	focusInEvent( QFocusEvent * );
    void	focusOutEvent( QFocusEvent * );
    void	timerEvent( QTimerEvent * );
    void	leaveEvent( QEvent * );
    void	resizeEvent( QResizeEvent * );

    bool	focusNextPrevChild( bool );


    void	dragMoveEvent( QDragMoveEvent* );
    void	dragEnterEvent( QDragEnterEvent * );
    void	dropEvent( QDropEvent* );
    void	dragLeaveEvent( QDragLeaveEvent* );
#line 218 "c:\\qt\\include\\qmultilineedit.h"

    bool	hasMarkedText() const;
    QString	markedText() const;
    int		textWidth( int );
    int		textWidth( const QString &);

    QPoint	cursorPoint() const;

protected:
    virtual void insert( const QString&, bool mark );
    virtual void newLine();
    virtual void killLine();
    virtual void pageUp( bool mark=FALSE );
    virtual void pageDown( bool mark=FALSE );
    virtual void cursorLeft( bool mark=FALSE, bool wrap = TRUE );
    virtual void cursorRight( bool mark=FALSE, bool wrap = TRUE );
    virtual void cursorUp( bool mark=FALSE );
    virtual void cursorDown( bool mark=FALSE );
    virtual void backspace();
    virtual void del();
    virtual void home( bool mark=FALSE );
    virtual void end( bool mark=FALSE );

    bool getMarkedRegion( int *line1, int *col1,
			  int *line2, int *col2 ) const;
    int lineLength( int row ) const;
    QString *getString( int row ) const;
    bool isEndOfParagraph( int row ) const;
    QString stringShown( int row ) const;

protected:
    bool	cursorOn;
    void	insertChar( QChar );

private :
    void	clipboardChanged();
    void	blinkTimerTimeout();
    void	scrollTimerTimeout();
    void	dndTimeout();

private:

    QCString pickSpecial(QMimeSource* ms, bool always_ask, const QPoint&);
#line 262 "c:\\qt\\include\\qmultilineedit.h"

    void       pasteSpecial(const QPoint&);
#line 265 "c:\\qt\\include\\qmultilineedit.h"
    struct QMultiLineEditRow {
	QMultiLineEditRow( QString string, int width, bool nl = TRUE )
	    :s(string), w(width), newline( nl )
	{
	};
	QString s;
	int w;
	bool newline;
    };
    QList<QMultiLineEditRow> *contents;
    QMultiLineData *d;

    bool	readOnly;
    bool	dummy;
    bool	markIsOn;
    bool	dragScrolling ;
    bool	dragMarking;
    bool	textDirty;
    bool	wordMark;
    bool	overWrite;

    int		cursorX;
    int		cursorY;
    int		markAnchorX;
    int		markAnchorY;
    int		markDragX;
    int		markDragY;
    int		curXPos;	
    int		blinkTimer; 
    int		scrollTimer; 

    int		mapFromView( int xPos, int row );
    int		mapToView( int xIndex, int row );

    void	pixelPosToCursorPos(QPoint p, int* x, int* y) const;
    void	setCursorPixelPosition(QPoint p, bool clear_mark=TRUE);

    void	setWidth( int );
    void	updateCellWidth();
    bool 	partiallyInvisible( int row );
    void	makeVisible();
    void	setBottomCell( int row );

    void 	newMark( int posx, int posy, bool copy=TRUE );
    void 	markWord( int posx, int posy );
    void	extendSelectionWord( int &newX, int&newY);
    int 	charClass( QChar );
    void	turnMark( bool on );
    bool	inMark( int posx, int posy ) const;
    bool	beforeMark( int posx, int posy ) const;
    bool	afterMark( int posx, int posy ) const;
    int		setNumRowsAndTruncate();


    void	doDrag();
#line 321 "c:\\qt\\include\\qmultilineedit.h"
    void	startAutoScroll();
    void	stopAutoScroll();

    void	cursorLeft( bool mark, bool clear_mark, bool wrap );
    void	cursorRight( bool mark, bool clear_mark, bool wrap );
    void	cursorUp( bool mark, bool clear_mark );
    void	cursorDown( bool mark, bool clear_mark );

    void	wrapLine( int line, int removed = 0);
    void	rebreakParagraph( int line, int removed = 0 );
    void	rebreakAll();
    void	insertAtAux( const QString &s, int line, int col, bool mark = FALSE );
    void	killLineAux();
    void	delAux();
    int	positionToOffsetInternal( int row, int col ) const;
    void	offsetToPositionInternal( int position, int *row, int *col ) const;
    void	deleteNextChar( int offset, int row, int col );

    void addUndoCmd( QMultiLineEditCommand* );
    void addRedoCmd( QMultiLineEditCommand* );
    void processCmd( QMultiLineEditCommand*, bool );

private:	



#line 348 "c:\\qt\\include\\qmultilineedit.h"
};

inline bool QMultiLineEdit::isReadOnly() const { return readOnly; }

inline bool QMultiLineEdit::isOverwriteMode() const { return overWrite; }

inline void QMultiLineEdit::setOverwriteMode( bool on )
{
    overWrite = on;
 }

inline int QMultiLineEdit::lineLength( int row ) const
{
    return contents->at( row )->s.length();
}

inline bool QMultiLineEdit::atEnd() const
{
    return cursorY == (int)contents->count() - 1
	&& cursorX == lineLength( cursorY ) ;
}

inline bool QMultiLineEdit::atBeginning() const
{
    return cursorY == 0 && cursorX == 0;
}

inline QString *QMultiLineEdit::getString( int row ) const
{
    return &(contents->at( row )->s);
}

inline int QMultiLineEdit::numLines() const
{
    return contents->count();
}

#line 386 "c:\\qt\\include\\qmultilineedit.h"

#line 388 "c:\\qt\\include\\qmultilineedit.h"
#line 26 "c:\\qt\\include\\qmultilinedit.h"
#line 27 "c:\\qt\\include\\qmultilinedit.h"
#line 15 "h:\\c_projekte\\elansim\\login.h"
class QVBoxLayout; 
class QHBoxLayout; 
class QGridLayout; 
class QCheckBox;
class QFrame;
class QGroupBox;
class QLabel;
class QLineEdit;
class QListBox;
class QListBoxItem;
class QMultiLineEdit;
class QPushButton;
class QComboBox;
class QMenuBar;

class IOInterface;




class LoginDialog : public QDialog
{ 
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;

public:
    LoginDialog( QWidget* parent = 0, const char* name = 0, bool modal = TRUE, WFlags fl = 0 );
    ~LoginDialog();

	QMenuBar* menu;
    QComboBox* cmbServerlist;
    QGroupBox* frmInput;
    QLabel* lblName;
    QLabel* lblDescription;	
    QMultiLineEdit* txtDescription;
    QLabel* lblAdress;
    QLineEdit* txtAdress;
	QLabel* lblPort;
	QLineEdit* txtPort;
    QLineEdit* txtName;
    QGroupBox* frmLogin;
    QLabel* lblLogin;
    QLabel* lblPassword;
    QLineEdit* txtUsername;
    QLineEdit* txtPassword;
    QCheckBox* chkSavePassword;
    QPushButton* btnNewServer;
    QPushButton* btnDeleteServer;
    QPushButton* btnCancel;
    QPushButton* btnOK;

	QString _adress;
	int _port;
	QString _username;
	QString _password;

	int exec();

private:

	struct _entries {
		int id;
		QString server;
		QString description;
		QString address;
		QString port;
		QString username;
		QString passwd;
	} entries[100];

	int entrieCount;

	IOInterface* io;
	int id;
	QString serverlist;
	QStringList description;
	QStringList adress;
	QStringList username;
	QStringList password;

	void buildWidget();
	void buildList();
	void getServerList();

private :
	void serverSelected(int index);
	void cancel();
	void ok();
	void newServer();
	void deleteAllEntries();
	void setNewServer();
	void newServerCancel();

};

#line 110 "h:\\c_projekte\\elansim\\login.h"
#line 3 "h:\\c_projekte\\elansim\\shellwidget.cpp"
#line 1 "h:\\c_projekte\\elansim\\listdialog.h"











#line 1 "c:\\qt\\include\\qvariant.h"

































































































































































































































































































































#line 13 "h:\\c_projekte\\elansim\\listdialog.h"
#line 1 "c:\\qt\\include\\qdialog.h"






















































































































#line 14 "h:\\c_projekte\\elansim\\listdialog.h"

#line 1 "h:\\c_projekte\\elansim\\iointerface.h"







#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsock.h"



















#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"


























#line 28 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"














#line 43 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"





#pragma once
#line 50 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"

















































#line 100 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"




















#line 121 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"



#line 125 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"



#line 129 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"



#line 133 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"



#line 137 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"



#line 141 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"



#line 145 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"




#line 150 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"
#line 151 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"



#pragma warning(disable:4001)
#pragma warning(disable:4201)
#pragma warning(disable:4214)
#pragma warning(disable:4514)
#line 159 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\excpt.h"















#pragma once
#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\excpt.h"






#line 25 "c:\\programme\\microsoft visual studio\\vc98\\include\\excpt.h"







#pragma pack(push,8)
#line 34 "c:\\programme\\microsoft visual studio\\vc98\\include\\excpt.h"


extern "C" {
#line 38 "c:\\programme\\microsoft visual studio\\vc98\\include\\excpt.h"


















#line 57 "c:\\programme\\microsoft visual studio\\vc98\\include\\excpt.h"















typedef enum _EXCEPTION_DISPOSITION {
    ExceptionContinueExecution,
    ExceptionContinueSearch,
    ExceptionNestedException,
    ExceptionCollidedUnwind
} EXCEPTION_DISPOSITION;











struct _EXCEPTION_RECORD;
struct _CONTEXT;

EXCEPTION_DISPOSITION __cdecl _except_handler (
    struct _EXCEPTION_RECORD *ExceptionRecord,
    void * EstablisherFrame,
    struct _CONTEXT *ContextRecord,
    void * DispatcherContext
    );



















#line 118 "c:\\programme\\microsoft visual studio\\vc98\\include\\excpt.h"















unsigned long __cdecl _exception_code(void);
void *        __cdecl _exception_info(void);
int           __cdecl _abnormal_termination(void);

#line 138 "c:\\programme\\microsoft visual studio\\vc98\\include\\excpt.h"













}
#line 153 "c:\\programme\\microsoft visual studio\\vc98\\include\\excpt.h"


#pragma pack(pop)
#line 157 "c:\\programme\\microsoft visual studio\\vc98\\include\\excpt.h"

#line 159 "c:\\programme\\microsoft visual studio\\vc98\\include\\excpt.h"
#line 160 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdarg.h"















#pragma once
#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdarg.h"






#line 25 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdarg.h"







#pragma pack(push,8)
#line 34 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdarg.h"


extern "C" {
#line 38 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdarg.h"










typedef char *  va_list;
#line 50 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdarg.h"

#line 52 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdarg.h"




































































































#line 153 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdarg.h"



}
#line 158 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdarg.h"


#pragma pack(pop)
#line 162 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdarg.h"

#line 164 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdarg.h"
#line 161 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"
#line 162 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"

#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"
















#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"












extern "C" {
#line 32 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"











typedef unsigned long ULONG;
typedef ULONG *PULONG;
typedef unsigned short USHORT;
typedef USHORT *PUSHORT;
typedef unsigned char UCHAR;
typedef UCHAR *PUCHAR;
typedef char *PSZ;
#line 51 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"













#line 65 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"



#line 69 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"



#line 73 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"



#line 77 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"



#line 81 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"











#line 93 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"






#line 100 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"



#line 104 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"
#line 105 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"


























#line 132 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"







#line 140 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"

typedef unsigned long       DWORD;
typedef int                 BOOL;
typedef unsigned char       BYTE;
typedef unsigned short      WORD;
typedef float               FLOAT;
typedef FLOAT               *PFLOAT;
typedef BOOL            *PBOOL;
typedef BOOL             *LPBOOL;
typedef BYTE            *PBYTE;
typedef BYTE             *LPBYTE;
typedef int             *PINT;
typedef int              *LPINT;
typedef WORD            *PWORD;
typedef WORD             *LPWORD;
typedef long             *LPLONG;
typedef DWORD           *PDWORD;
typedef DWORD            *LPDWORD;
typedef void             *LPVOID;
typedef const void       *LPCVOID;

typedef int                 INT;
typedef unsigned int        UINT;
typedef unsigned int        *PUINT;


#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"





















extern "C" {
#line 24 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"

#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\ctype.h"














#pragma once
#line 17 "c:\\programme\\microsoft visual studio\\vc98\\include\\ctype.h"






#line 24 "c:\\programme\\microsoft visual studio\\vc98\\include\\ctype.h"



extern "C" {
#line 29 "c:\\programme\\microsoft visual studio\\vc98\\include\\ctype.h"


















#line 48 "c:\\programme\\microsoft visual studio\\vc98\\include\\ctype.h"


















typedef wchar_t wint_t;
typedef wchar_t wctype_t;

#line 70 "c:\\programme\\microsoft visual studio\\vc98\\include\\ctype.h"



#line 74 "c:\\programme\\microsoft visual studio\\vc98\\include\\ctype.h"
#line 75 "c:\\programme\\microsoft visual studio\\vc98\\include\\ctype.h"



__declspec(dllimport) extern unsigned short _ctype[];
__declspec(dllimport) extern unsigned short *_pctype;

__declspec(dllimport) extern wctype_t *_pwctype;
#line 83 "c:\\programme\\microsoft visual studio\\vc98\\include\\ctype.h"
#line 84 "c:\\programme\\microsoft visual studio\\vc98\\include\\ctype.h"








                                













__declspec(dllimport) int __cdecl _isctype(int, int);
__declspec(dllimport) int __cdecl isalpha(int);
__declspec(dllimport) int __cdecl isupper(int);
__declspec(dllimport) int __cdecl islower(int);
__declspec(dllimport) int __cdecl isdigit(int);
__declspec(dllimport) int __cdecl isxdigit(int);
__declspec(dllimport) int __cdecl isspace(int);
__declspec(dllimport) int __cdecl ispunct(int);
__declspec(dllimport) int __cdecl isalnum(int);
__declspec(dllimport) int __cdecl isprint(int);
__declspec(dllimport) int __cdecl isgraph(int);
__declspec(dllimport) int __cdecl iscntrl(int);
__declspec(dllimport) int __cdecl toupper(int);
__declspec(dllimport) int __cdecl tolower(int);
__declspec(dllimport) int __cdecl _tolower(int);
__declspec(dllimport) int __cdecl _toupper(int);
__declspec(dllimport) int __cdecl __isascii(int);
__declspec(dllimport) int __cdecl __toascii(int);
__declspec(dllimport) int __cdecl __iscsymf(int);
__declspec(dllimport) int __cdecl __iscsym(int);

#line 128 "c:\\programme\\microsoft visual studio\\vc98\\include\\ctype.h"









__declspec(dllimport) int __cdecl iswalpha(wint_t);
__declspec(dllimport) int __cdecl iswupper(wint_t);
__declspec(dllimport) int __cdecl iswlower(wint_t);
__declspec(dllimport) int __cdecl iswdigit(wint_t);
__declspec(dllimport) int __cdecl iswxdigit(wint_t);
__declspec(dllimport) int __cdecl iswspace(wint_t);
__declspec(dllimport) int __cdecl iswpunct(wint_t);
__declspec(dllimport) int __cdecl iswalnum(wint_t);
__declspec(dllimport) int __cdecl iswprint(wint_t);
__declspec(dllimport) int __cdecl iswgraph(wint_t);
__declspec(dllimport) int __cdecl iswcntrl(wint_t);
__declspec(dllimport) int __cdecl iswascii(wint_t);
__declspec(dllimport) int __cdecl isleadbyte(int);

__declspec(dllimport) wchar_t __cdecl towupper(wchar_t);
__declspec(dllimport) wchar_t __cdecl towlower(wchar_t);

__declspec(dllimport) int __cdecl iswctype(wint_t, wctype_t);


__declspec(dllimport) int __cdecl is_wctype(wint_t, wctype_t);



#line 162 "c:\\programme\\microsoft visual studio\\vc98\\include\\ctype.h"
#line 163 "c:\\programme\\microsoft visual studio\\vc98\\include\\ctype.h"













__declspec(dllimport) extern int __mb_cur_max;

#line 179 "c:\\programme\\microsoft visual studio\\vc98\\include\\ctype.h"








































































#line 252 "c:\\programme\\microsoft visual studio\\vc98\\include\\ctype.h"

#line 254 "c:\\programme\\microsoft visual studio\\vc98\\include\\ctype.h"








































#line 295 "c:\\programme\\microsoft visual studio\\vc98\\include\\ctype.h"

#line 297 "c:\\programme\\microsoft visual studio\\vc98\\include\\ctype.h"






#line 304 "c:\\programme\\microsoft visual studio\\vc98\\include\\ctype.h"
















#line 321 "c:\\programme\\microsoft visual studio\\vc98\\include\\ctype.h"

#line 323 "c:\\programme\\microsoft visual studio\\vc98\\include\\ctype.h"


}
#line 327 "c:\\programme\\microsoft visual studio\\vc98\\include\\ctype.h"


#line 330 "c:\\programme\\microsoft visual studio\\vc98\\include\\ctype.h"
#line 26 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"




#line 31 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"

#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"



#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"

#line 39 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"



#line 43 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"



#line 47 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"

#line 49 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"































#line 81 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"



#line 85 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"

typedef unsigned long POINTER_64_INT;
#line 88 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"

#line 90 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"

#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\basetsd.h"
























extern "C" {
#line 27 "c:\\programme\\microsoft visual studio\\vc98\\include\\basetsd.h"





typedef int LONG32, *PLONG32;
typedef int INT32, *PINT32;





typedef unsigned int ULONG32, *PULONG32;
typedef unsigned int DWORD32, *PDWORD32;
typedef unsigned int UINT32, *PUINT32;

















































































typedef long INT_PTR, *PINT_PTR;
typedef unsigned long UINT_PTR, *PUINT_PTR;





typedef unsigned short UHALF_PTR, *PUHALF_PTR;
typedef short HALF_PTR, *PHALF_PTR;











#line 144 "c:\\programme\\microsoft visual studio\\vc98\\include\\basetsd.h"






typedef UINT_PTR SIZE_T, *PSIZE_T;
typedef INT_PTR SSIZE_T, *PSSIZE_T;





typedef __int64 LONG64, *PLONG64;
typedef __int64 INT64, *PINT64;






typedef unsigned __int64 ULONG64, *PULONG64;
typedef unsigned __int64 DWORD64, *PDWORD64;
typedef unsigned __int64 UINT64, *PUINT64;


}
#line 172 "c:\\programme\\microsoft visual studio\\vc98\\include\\basetsd.h"

#line 174 "c:\\programme\\microsoft visual studio\\vc98\\include\\basetsd.h"
#line 92 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"






#line 99 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"





#line 105 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"

typedef void *PVOID;
typedef void *  PVOID64;







#line 116 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"









#line 126 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"








typedef char CHAR;
typedef short SHORT;
typedef long LONG;
#line 138 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"






typedef wchar_t WCHAR;    



#line 149 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"

typedef WCHAR *PWCHAR;
typedef WCHAR *LPWCH, *PWCH;
typedef const WCHAR *LPCWCH, *PCWCH;
typedef WCHAR *NWPSTR;
typedef WCHAR *LPWSTR, *PWSTR;

typedef const WCHAR *LPCWSTR, *PCWSTR;




typedef CHAR *PCHAR;
typedef CHAR *LPCH, *PCH;

typedef const CHAR *LPCCH, *PCCH;
typedef CHAR *NPSTR;
typedef CHAR *LPSTR, *PSTR;
typedef const CHAR *LPCSTR, *PCSTR;





















typedef char TCHAR, *PTCHAR;
typedef unsigned char TBYTE , *PTBYTE ;

#line 193 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"

typedef LPSTR LPTCH, PTCH;
typedef LPSTR PTSTR, LPTSTR;
typedef LPCSTR LPCTSTR;


#line 200 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"



typedef SHORT *PSHORT;  
typedef LONG *PLONG;    


typedef void *HANDLE;




#line 213 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"
typedef HANDLE *PHANDLE;





typedef BYTE   FCHAR;
typedef WORD   FSHORT;
typedef DWORD  FLONG;





typedef LONG HRESULT;

#line 230 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"


    


#line 236 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"









#line 246 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"













#line 260 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"
















typedef char CCHAR;          
typedef DWORD LCID;         
typedef PDWORD PLCID;       
typedef WORD   LANGID;      
  
  





















typedef struct _FLOAT128 {
    __int64 LowPart;
    __int64 HighPart;
} FLOAT128;

typedef FLOAT128 *PFLOAT128;






#line 316 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"









typedef __int64 LONGLONG;
typedef unsigned __int64 ULONGLONG;














#line 342 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"

typedef LONGLONG *PLONGLONG;
typedef ULONGLONG *PULONGLONG;



typedef LONGLONG USN;



#line 353 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"
typedef union _LARGE_INTEGER {
    struct {
        DWORD LowPart;
        LONG HighPart;
    };
    struct {
        DWORD LowPart;
        LONG HighPart;
    } u;
#line 363 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"
    LONGLONG QuadPart;
} LARGE_INTEGER;

typedef LARGE_INTEGER *PLARGE_INTEGER;




#line 372 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"
typedef union _ULARGE_INTEGER {
    struct {
        DWORD LowPart;
        DWORD HighPart;
    };
    struct {
        DWORD LowPart;
        DWORD HighPart;
    } u;
#line 382 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"
    ULONGLONG QuadPart;
} ULARGE_INTEGER;

typedef ULARGE_INTEGER *PULARGE_INTEGER;








typedef struct _LUID {
    DWORD LowPart;
    LONG HighPart;
} LUID, *PLUID;


typedef ULONGLONG  DWORDLONG;
typedef DWORDLONG *PDWORDLONG;






















#line 425 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"































































#line 489 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"











ULONGLONG
__stdcall
Int64ShllMod32 (
    ULONGLONG Value,
    DWORD ShiftCount
    );

LONGLONG
__stdcall
Int64ShraMod32 (
    LONGLONG Value,
    DWORD ShiftCount
    );

ULONGLONG
__stdcall
Int64ShrlMod32 (
    ULONGLONG Value,
    DWORD ShiftCount
    );

#pragma warning(disable:4035)               

__inline ULONGLONG
__stdcall
Int64ShllMod32 (
    ULONGLONG Value,
    DWORD ShiftCount
    )
{
    __asm    {
        mov     ecx, ShiftCount
        mov     eax, dword ptr [Value]
        mov     edx, dword ptr [Value+4]
        shld    edx, eax, cl
        shl     eax, cl
    }
}

__inline LONGLONG
__stdcall
Int64ShraMod32 (
    LONGLONG Value,
    DWORD ShiftCount
    )
{
    __asm {
        mov     ecx, ShiftCount
        mov     eax, dword ptr [Value]
        mov     edx, dword ptr [Value+4]
        shrd    eax, edx, cl
        sar     edx, cl
    }
}

__inline ULONGLONG
__stdcall
Int64ShrlMod32 (
    ULONGLONG Value,
    DWORD ShiftCount
    )
{
    __asm    {
        mov     ecx, ShiftCount
        mov     eax, dword ptr [Value]
        mov     edx, dword ptr [Value+4]
        shrd    eax, edx, cl
        shr     edx, cl
    }
}

#pragma warning(default:4035)




























































#line 633 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"



typedef BYTE  BOOLEAN;           
typedef BOOLEAN *PBOOLEAN;       





typedef struct _LIST_ENTRY {
   struct _LIST_ENTRY *Flink;
   struct _LIST_ENTRY *Blink;
} LIST_ENTRY, *PLIST_ENTRY, * PRLIST_ENTRY;






typedef struct _SINGLE_LIST_ENTRY {
    struct _SINGLE_LIST_ENTRY *Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY;








typedef struct _GUID {          
    DWORD Data1;
    WORD   Data2;
    WORD   Data3;
    BYTE  Data4[8];
} GUID;

#line 672 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"




typedef struct  _OBJECTID {     
    GUID Lineage;
    DWORD Uniquifier;
} OBJECTID;
#line 681 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"















































































































































































































































































































































































#line 1049 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"



  

































  
#line 1088 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"




typedef UINT_PTR KSPIN_LOCK;
typedef KSPIN_LOCK *PKSPIN_LOCK;














#line 1109 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"
struct _TEB *
NtCurrentTeb(void);
#line 1112 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"








































































































































































































































































































































































































#pragma warning(disable:4164)   
                                

#pragma function(_enable)
#pragma function(_disable)
#line 1510 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"

#pragma warning(default:4164)   

#line 1514 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"
#line 1515 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"



#pragma warning (disable:4035)        
_inline PVOID GetFiberData( void ) { __asm {
                                        mov eax, fs:[0x10]
                                        mov eax,[eax]
                                        }
                                     }
_inline PVOID GetCurrentFiber( void ) { __asm mov eax, fs:[0x10] }

#pragma warning (default:4035)        
#line 1528 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"
































#line 1561 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"



typedef struct _FLOATING_SAVE_AREA {
    DWORD   ControlWord;
    DWORD   StatusWord;
    DWORD   TagWord;
    DWORD   ErrorOffset;
    DWORD   ErrorSelector;
    DWORD   DataOffset;
    DWORD   DataSelector;
    BYTE    RegisterArea[80];
    DWORD   Cr0NpxState;
} FLOATING_SAVE_AREA;

typedef FLOATING_SAVE_AREA *PFLOATING_SAVE_AREA;











typedef struct _CONTEXT {

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    DWORD ContextFlags;

    
    
    
    
    

    DWORD   Dr0;
    DWORD   Dr1;
    DWORD   Dr2;
    DWORD   Dr3;
    DWORD   Dr6;
    DWORD   Dr7;

    
    
    
    

    FLOATING_SAVE_AREA FloatSave;

    
    
    
    

    DWORD   SegGs;
    DWORD   SegFs;
    DWORD   SegEs;
    DWORD   SegDs;

    
    
    
    

    DWORD   Edi;
    DWORD   Esi;
    DWORD   Ebx;
    DWORD   Edx;
    DWORD   Ecx;
    DWORD   Eax;

    
    
    
    

    DWORD   Ebp;
    DWORD   Eip;
    DWORD   SegCs;              
    DWORD   EFlags;             
    DWORD   Esp;
    DWORD   SegSs;

    
    
    
    
    

    BYTE    ExtendedRegisters[512];

} CONTEXT;



typedef CONTEXT *PCONTEXT;



#line 1681 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"





typedef struct _LDT_ENTRY {
    WORD    LimitLow;
    WORD    BaseLow;
    union {
        struct {
            BYTE    BaseMid;
            BYTE    Flags1;     
            BYTE    Flags2;     
            BYTE    BaseHi;
        } Bytes;
        struct {
            DWORD   BaseMid : 8;
            DWORD   Type : 5;
            DWORD   Dpl : 2;
            DWORD   Pres : 1;
            DWORD   LimitHi : 4;
            DWORD   Sys : 1;
            DWORD   Reserved_0 : 1;
            DWORD   Default_Big : 1;
            DWORD   Granularity : 1;
            DWORD   BaseHi : 8;
        } Bits;
    } HighWord;
} LDT_ENTRY, *PLDT_ENTRY;

#line 1712 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"

























































































































































































































































































































































#line 2058 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"










#line 2069 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"





































































































































































































































#line 2299 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"




































































































































































































































#line 2528 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"















#line 2544 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"






































































































































































































































































































































































































































































































































































































typedef struct _EXCEPTION_RECORD {
    DWORD    ExceptionCode;
    DWORD ExceptionFlags;
    struct _EXCEPTION_RECORD *ExceptionRecord;
    PVOID ExceptionAddress;
    DWORD NumberParameters;
    UINT_PTR ExceptionInformation[15];
    } EXCEPTION_RECORD;

typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;





typedef struct _EXCEPTION_POINTERS {
    PEXCEPTION_RECORD ExceptionRecord;
    PCONTEXT ContextRecord;
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;
typedef PVOID PACCESS_TOKEN;            
typedef PVOID PSECURITY_DESCRIPTOR;     
typedef PVOID PSID;     







































typedef DWORD ACCESS_MASK;
typedef ACCESS_MASK *PACCESS_MASK;
























































typedef struct _GENERIC_MAPPING {
    ACCESS_MASK GenericRead;
    ACCESS_MASK GenericWrite;
    ACCESS_MASK GenericExecute;
    ACCESS_MASK GenericAll;
} GENERIC_MAPPING;
typedef GENERIC_MAPPING *PGENERIC_MAPPING;












#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push)
#line 28 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack4.h"
#pragma pack(4)


#line 32 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack4.h"
#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack4.h"
#line 3265 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"

typedef struct _LUID_AND_ATTRIBUTES {
    LUID Luid;
    DWORD Attributes;
    } LUID_AND_ATTRIBUTES, * PLUID_AND_ATTRIBUTES;
typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];
typedef LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY;

#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"


#line 36 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"
#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"
#line 3274 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"


































typedef struct _SID_IDENTIFIER_AUTHORITY {
    BYTE  Value[6];
} SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY;
#line 3312 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"




typedef struct _SID {
   BYTE  Revision;
   BYTE  SubAuthorityCount;
   SID_IDENTIFIER_AUTHORITY IdentifierAuthority;



   DWORD SubAuthority[1];
#line 3325 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"
} SID, *PISID;
#line 3327 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"




                                                

typedef enum _SID_NAME_USE {
    SidTypeUser = 1,
    SidTypeGroup,
    SidTypeDomain,
    SidTypeAlias,
    SidTypeWellKnownGroup,
    SidTypeDeletedAccount,
    SidTypeInvalid,
    SidTypeUnknown,
    SidTypeComputer
} SID_NAME_USE, *PSID_NAME_USE;

typedef struct _SID_AND_ATTRIBUTES {
    PSID Sid;
    DWORD Attributes;
    } SID_AND_ATTRIBUTES, * PSID_AND_ATTRIBUTES;

typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];
typedef SID_AND_ATTRIBUTES_ARRAY *PSID_AND_ATTRIBUTES_ARRAY;






















































































































































































































typedef struct _ACL {
    BYTE  AclRevision;
    BYTE  Sbz1;
    WORD   AclSize;
    WORD   AceCount;
    WORD   Sbz2;
} ACL;
typedef ACL *PACL;





















typedef struct _ACE_HEADER {
    BYTE  AceType;
    BYTE  AceFlags;
    WORD   AceSize;
} ACE_HEADER;
typedef ACE_HEADER *PACE_HEADER;




























































































typedef struct _ACCESS_ALLOWED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_ALLOWED_ACE;

typedef ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE;

typedef struct _ACCESS_DENIED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_DENIED_ACE;
typedef ACCESS_DENIED_ACE *PACCESS_DENIED_ACE;

typedef struct _SYSTEM_AUDIT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_AUDIT_ACE;
typedef SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;

typedef struct _SYSTEM_ALARM_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_ALARM_ACE;
typedef SYSTEM_ALARM_ACE *PSYSTEM_ALARM_ACE;




typedef struct _ACCESS_ALLOWED_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_ALLOWED_OBJECT_ACE, *PACCESS_ALLOWED_OBJECT_ACE;

typedef struct _ACCESS_DENIED_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_DENIED_OBJECT_ACE, *PACCESS_DENIED_OBJECT_ACE;

typedef struct _SYSTEM_AUDIT_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_AUDIT_OBJECT_ACE, *PSYSTEM_AUDIT_OBJECT_ACE;

typedef struct _SYSTEM_ALARM_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_ALARM_OBJECT_ACE, *PSYSTEM_ALARM_OBJECT_ACE;















typedef enum _ACL_INFORMATION_CLASS {
    AclRevisionInformation = 1,
    AclSizeInformation
} ACL_INFORMATION_CLASS;






typedef struct _ACL_REVISION_INFORMATION {
    DWORD AclRevision;
} ACL_REVISION_INFORMATION;
typedef ACL_REVISION_INFORMATION *PACL_REVISION_INFORMATION;





typedef struct _ACL_SIZE_INFORMATION {
    DWORD AceCount;
    DWORD AclBytesInUse;
    DWORD AclBytesFree;
} ACL_SIZE_INFORMATION;
typedef ACL_SIZE_INFORMATION *PACL_SIZE_INFORMATION;


























typedef WORD   SECURITY_DESCRIPTOR_CONTROL, *PSECURITY_DESCRIPTOR_CONTROL;
























































































typedef struct _SECURITY_DESCRIPTOR_RELATIVE {
    BYTE  Revision;
    BYTE  Sbz1;
    SECURITY_DESCRIPTOR_CONTROL Control;
    DWORD Owner;
    DWORD Group;
    DWORD Sacl;
    DWORD Dacl;
    } SECURITY_DESCRIPTOR_RELATIVE, *PISECURITY_DESCRIPTOR_RELATIVE;

typedef struct _SECURITY_DESCRIPTOR {
   BYTE  Revision;
   BYTE  Sbz1;
   SECURITY_DESCRIPTOR_CONTROL Control;
   PSID Owner;
   PSID Group;
   PACL Sacl;
   PACL Dacl;

   } SECURITY_DESCRIPTOR, *PISECURITY_DESCRIPTOR;

















































typedef struct _OBJECT_TYPE_LIST {
    WORD   Level;
    WORD   Sbz;
    GUID *ObjectType;
} OBJECT_TYPE_LIST, *POBJECT_TYPE_LIST;















typedef enum _AUDIT_EVENT_TYPE {
    AuditEventObjectAccess,
    AuditEventDirectoryServiceAccess
} AUDIT_EVENT_TYPE, *PAUDIT_EVENT_TYPE;













































typedef struct _PRIVILEGE_SET {
    DWORD PrivilegeCount;
    DWORD Control;
    LUID_AND_ATTRIBUTES Privilege[1];
    } PRIVILEGE_SET, * PPRIVILEGE_SET;


















































typedef enum _SECURITY_IMPERSONATION_LEVEL {
    SecurityAnonymous,
    SecurityIdentification,
    SecurityImpersonation,
    SecurityDelegation
    } SECURITY_IMPERSONATION_LEVEL, * PSECURITY_IMPERSONATION_LEVEL;

























































typedef enum _TOKEN_TYPE {
    TokenPrimary = 1,
    TokenImpersonation
    } TOKEN_TYPE;
typedef TOKEN_TYPE *PTOKEN_TYPE;







typedef enum _TOKEN_INFORMATION_CLASS {
    TokenUser = 1,
    TokenGroups,
    TokenPrivileges,
    TokenOwner,
    TokenPrimaryGroup,
    TokenDefaultDacl,
    TokenSource,
    TokenType,
    TokenImpersonationLevel,
    TokenStatistics,
    TokenRestrictedSids,
    TokenSessionId
} TOKEN_INFORMATION_CLASS, *PTOKEN_INFORMATION_CLASS;






typedef struct _TOKEN_USER {
    SID_AND_ATTRIBUTES User;
} TOKEN_USER, *PTOKEN_USER;

typedef struct _TOKEN_GROUPS {
    DWORD GroupCount;
    SID_AND_ATTRIBUTES Groups[1];
} TOKEN_GROUPS, *PTOKEN_GROUPS;


typedef struct _TOKEN_PRIVILEGES {
    DWORD PrivilegeCount;
    LUID_AND_ATTRIBUTES Privileges[1];
} TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES;


typedef struct _TOKEN_OWNER {
    PSID Owner;
} TOKEN_OWNER, *PTOKEN_OWNER;


typedef struct _TOKEN_PRIMARY_GROUP {
    PSID PrimaryGroup;
} TOKEN_PRIMARY_GROUP, *PTOKEN_PRIMARY_GROUP;


typedef struct _TOKEN_DEFAULT_DACL {
    PACL DefaultDacl;
} TOKEN_DEFAULT_DACL, *PTOKEN_DEFAULT_DACL;





typedef struct _TOKEN_SOURCE {
    CHAR SourceName[8];
    LUID SourceIdentifier;
} TOKEN_SOURCE, *PTOKEN_SOURCE;


typedef struct _TOKEN_STATISTICS {
    LUID TokenId;
    LUID AuthenticationId;
    LARGE_INTEGER ExpirationTime;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    DWORD DynamicCharged;
    DWORD DynamicAvailable;
    DWORD GroupCount;
    DWORD PrivilegeCount;
    LUID ModifiedId;
} TOKEN_STATISTICS, *PTOKEN_STATISTICS;



typedef struct _TOKEN_CONTROL {
    LUID TokenId;
    LUID AuthenticationId;
    LUID ModifiedId;
    TOKEN_SOURCE TokenSource;
    } TOKEN_CONTROL, *PTOKEN_CONTROL;








typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE,
                    * PSECURITY_CONTEXT_TRACKING_MODE;







typedef struct _SECURITY_QUALITY_OF_SERVICE {
    DWORD Length;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
    BOOLEAN EffectiveOnly;
    } SECURITY_QUALITY_OF_SERVICE, * PSECURITY_QUALITY_OF_SERVICE;






typedef struct _SE_IMPERSONATION_STATE {
    PACCESS_TOKEN Token;
    BOOLEAN CopyOnOpen;
    BOOLEAN EffectiveOnly;
    SECURITY_IMPERSONATION_LEVEL Level;
} SE_IMPERSONATION_STATE, *PSE_IMPERSONATION_STATE;


typedef DWORD SECURITY_INFORMATION, *PSECURITY_INFORMATION;















































typedef struct _NT_TIB {
    struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID SubSystemTib;
    union {
        PVOID FiberData;
        DWORD Version;
    };
    PVOID ArbitraryUserPointer;
    struct _NT_TIB *Self;
} NT_TIB;
typedef NT_TIB *PNT_TIB;



#line 4366 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"






typedef struct _QUOTA_LIMITS {
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    DWORD MinimumWorkingSetSize;
    DWORD MaximumWorkingSetSize;
    SIZE_T PagefileLimit;
    LARGE_INTEGER TimeLimit;
} QUOTA_LIMITS;
typedef QUOTA_LIMITS *PQUOTA_LIMITS;



typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {
    LARGE_INTEGER TotalUserTime;
    LARGE_INTEGER TotalKernelTime;
    LARGE_INTEGER ThisPeriodTotalUserTime;
    LARGE_INTEGER ThisPeriodTotalKernelTime;
    DWORD TotalPageFaultCount;
    DWORD TotalProcesses;
    DWORD ActiveProcesses;
    DWORD TotalTerminatedProcesses;
} JOBOBJECT_BASIC_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;

typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {
    LARGE_INTEGER PerProcessUserTimeLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD LimitFlags;
    DWORD MinimumWorkingSetSize;
    DWORD MaximumWorkingSetSize;
    DWORD ActiveProcessLimit;
    DWORD Affinity;
    DWORD PriorityClass;
} JOBOBJECT_BASIC_LIMIT_INFORMATION, *PJOBOBJECT_BASIC_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {
    DWORD NumberOfAssignedProcesses;
    DWORD NumberOfProcessIdsInList;
    UINT_PTR ProcessIdList[1];
} JOBOBJECT_BASIC_PROCESS_ID_LIST, *PJOBOBJECT_BASIC_PROCESS_ID_LIST;

typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {
    DWORD UIRestrictionsClass;
} JOBOBJECT_BASIC_UI_RESTRICTIONS, *PJOBOBJECT_BASIC_UI_RESTRICTIONS;

typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {
    DWORD SecurityLimitFlags ;
    HANDLE JobToken ;
    PTOKEN_GROUPS SidsToDisable ;
    PTOKEN_PRIVILEGES PrivilegesToDelete ;
    PTOKEN_GROUPS RestrictedSids ;
} JOBOBJECT_SECURITY_LIMIT_INFORMATION, *PJOBOBJECT_SECURITY_LIMIT_INFORMATION ;

typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {
    DWORD EndOfJobTimeAction;
} JOBOBJECT_END_OF_JOB_TIME_INFORMATION, *PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;

typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {
    PVOID CompletionKey;
    HANDLE CompletionPort;
} JOBOBJECT_ASSOCIATE_COMPLETION_PORT, *PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;




















































typedef enum _JOBOBJECTINFOCLASS {
    JobObjectBasicAccountingInformation = 1,
    JobObjectBasicLimitInformation,
    JobObjectBasicProcessIdList,
    JobObjectBasicUIRestrictions,
    JobObjectSecurityLimitInformation,
    JobObjectEndOfJobTimeInformation,
    JobObjectAssociateCompletionPortInformation,
    MaxJobObjectInfoClass
    } JOBOBJECTINFOCLASS;

































































typedef struct _MEMORY_BASIC_INFORMATION {
    PVOID BaseAddress;
    PVOID AllocationBase;
    DWORD AllocationProtect;
    SIZE_T RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
} MEMORY_BASIC_INFORMATION, *PMEMORY_BASIC_INFORMATION;

typedef struct _MEMORY_BASIC_INFORMATION_VLM {
    union {
        PVOID64 BaseAddress;
        ULONGLONG BaseAddressAsUlongLong;
    };
    union {
        PVOID64 AllocationBase;
        ULONGLONG AllocationBaseAsUlongLong;
    };
    ULONGLONG RegionSize;
    DWORD AllocationProtect;
    DWORD State;
    DWORD Protect;
    DWORD Type;
} MEMORY_BASIC_INFORMATION_VLM, *PMEMORY_BASIC_INFORMATION_VLM;


















































































































































typedef struct _FILE_NOTIFY_INFORMATION {
    DWORD NextEntryOffset;
    DWORD Action;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_NOTIFY_INFORMATION, *PFILE_NOTIFY_INFORMATION;






typedef union _FILE_SEGMENT_ELEMENT {
    PVOID64 Buffer;
    ULONGLONG Alignment;
}FILE_SEGMENT_ELEMENT, *PFILE_SEGMENT_ELEMENT;











typedef struct _REPARSE_DATA_BUFFER {
    DWORD  ReparseTag;
    WORD   ReparseDataLength;
    WORD   Reserved;
    union {
        struct {
            WORD   SubstituteNameOffset;
            WORD   SubstituteNameLength;
            WORD   PrintNameOffset;
            WORD   PrintNameLength;
            WCHAR PathBuffer[1];
        } SymbolicLinkReparseBuffer;
        struct {
            WORD   SubstituteNameOffset;
            WORD   SubstituteNameLength;
            WORD   PrintNameOffset;
            WORD   PrintNameLength;
            WCHAR PathBuffer[1];
        } MountPointReparseBuffer;
        struct {
            BYTE   DataBuffer[1];
        } GenericReparseBuffer;
    };
} REPARSE_DATA_BUFFER, *PREPARSE_DATA_BUFFER;












typedef struct _REPARSE_GUID_DATA_BUFFER {
    DWORD  ReparseTag;
    WORD   ReparseDataLength;
    WORD   Reserved;
    GUID   ReparseGuid;
    struct {
        BYTE   DataBuffer[1];
    } GenericReparseBuffer;
} REPARSE_GUID_DATA_BUFFER, *PREPARSE_GUID_DATA_BUFFER;









typedef struct _REPARSE_POINT_INFORMATION {
    WORD   ReparseDataLength;
    WORD   UnparsedNameLength;
} REPARSE_POINT_INFORMATION, *PREPARSE_POINT_INFORMATION;
















































































































typedef DWORD EXECUTION_STATE;

typedef enum {
    LT_DONT_CARE,
    LT_LOWEST_LATENCY
} LATENCY_TIME;


typedef struct _POWER_DEVICE_TIMEOUTS {
    DWORD   ConservationIdleTime;
    DWORD   PerformanceIdleTime;
} POWER_DEVICE_TIMEOUTS, *PPOWER_DEVICE_TIMEOUTS;










#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push)
#line 28 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack4.h"
#pragma pack(4)


#line 32 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack4.h"
#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack4.h"
#line 4950 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"







#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push)
#line 28 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack2.h"
#pragma pack(2)


#line 32 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack2.h"
#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack2.h"
#line 4958 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"









#line 4968 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"

typedef struct _IMAGE_DOS_HEADER {      
    WORD   e_magic;                     
    WORD   e_cblp;                      
    WORD   e_cp;                        
    WORD   e_crlc;                      
    WORD   e_cparhdr;                   
    WORD   e_minalloc;                  
    WORD   e_maxalloc;                  
    WORD   e_ss;                        
    WORD   e_sp;                        
    WORD   e_csum;                      
    WORD   e_ip;                        
    WORD   e_cs;                        
    WORD   e_lfarlc;                    
    WORD   e_ovno;                      
    WORD   e_res[4];                    
    WORD   e_oemid;                     
    WORD   e_oeminfo;                   
    WORD   e_res2[10];                  
    LONG   e_lfanew;                    
  } IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;

typedef struct _IMAGE_OS2_HEADER {      
    WORD   ne_magic;                    
    CHAR   ne_ver;                      
    CHAR   ne_rev;                      
    WORD   ne_enttab;                   
    WORD   ne_cbenttab;                 
    LONG   ne_crc;                      
    WORD   ne_flags;                    
    WORD   ne_autodata;                 
    WORD   ne_heap;                     
    WORD   ne_stack;                    
    LONG   ne_csip;                     
    LONG   ne_sssp;                     
    WORD   ne_cseg;                     
    WORD   ne_cmod;                     
    WORD   ne_cbnrestab;                
    WORD   ne_segtab;                   
    WORD   ne_rsrctab;                  
    WORD   ne_restab;                   
    WORD   ne_modtab;                   
    WORD   ne_imptab;                   
    LONG   ne_nrestab;                  
    WORD   ne_cmovent;                  
    WORD   ne_align;                    
    WORD   ne_cres;                     
    BYTE   ne_exetyp;                   
    BYTE   ne_flagsothers;              
    WORD   ne_pretthunks;               
    WORD   ne_psegrefbytes;             
    WORD   ne_swaparea;                 
    WORD   ne_expver;                   
  } IMAGE_OS2_HEADER, *PIMAGE_OS2_HEADER;

typedef struct _IMAGE_VXD_HEADER {      
    WORD   e32_magic;                   
    BYTE   e32_border;                  
    BYTE   e32_worder;                  
    DWORD  e32_level;                   
    WORD   e32_cpu;                     
    WORD   e32_os;                      
    DWORD  e32_ver;                     
    DWORD  e32_mflags;                  
    DWORD  e32_mpages;                  
    DWORD  e32_startobj;                
    DWORD  e32_eip;                     
    DWORD  e32_stackobj;                
    DWORD  e32_esp;                     
    DWORD  e32_pagesize;                
    DWORD  e32_lastpagesize;            
    DWORD  e32_fixupsize;               
    DWORD  e32_fixupsum;                
    DWORD  e32_ldrsize;                 
    DWORD  e32_ldrsum;                  
    DWORD  e32_objtab;                  
    DWORD  e32_objcnt;                  
    DWORD  e32_objmap;                  
    DWORD  e32_itermap;                 
    DWORD  e32_rsrctab;                 
    DWORD  e32_rsrccnt;                 
    DWORD  e32_restab;                  
    DWORD  e32_enttab;                  
    DWORD  e32_dirtab;                  
    DWORD  e32_dircnt;                  
    DWORD  e32_fpagetab;                
    DWORD  e32_frectab;                 
    DWORD  e32_impmod;                  
    DWORD  e32_impmodcnt;               
    DWORD  e32_impproc;                 
    DWORD  e32_pagesum;                 
    DWORD  e32_datapage;                
    DWORD  e32_preload;                 
    DWORD  e32_nrestab;                 
    DWORD  e32_cbnrestab;               
    DWORD  e32_nressum;                 
    DWORD  e32_autodata;                
    DWORD  e32_debuginfo;               
    DWORD  e32_debuglen;                
    DWORD  e32_instpreload;             
    DWORD  e32_instdemand;              
    DWORD  e32_heapsize;                
    BYTE   e32_res3[12];                
    DWORD  e32_winresoff;
    DWORD  e32_winreslen;
    WORD   e32_devid;                   
    WORD   e32_ddkver;                  
  } IMAGE_VXD_HEADER, *PIMAGE_VXD_HEADER;


#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"


#line 36 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"
#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"
#line 5080 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"
#line 5081 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"





typedef struct _IMAGE_FILE_HEADER {
    WORD    Machine;
    WORD    NumberOfSections;
    DWORD   TimeDateStamp;
    DWORD   PointerToSymbolTable;
    DWORD   NumberOfSymbols;
    WORD    SizeOfOptionalHeader;
    WORD    Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;












































typedef struct _IMAGE_DATA_DIRECTORY {
    DWORD   VirtualAddress;
    DWORD   Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;







typedef struct _IMAGE_OPTIONAL_HEADER {
    
    
    

    WORD    Magic;
    BYTE    MajorLinkerVersion;
    BYTE    MinorLinkerVersion;
    DWORD   SizeOfCode;
    DWORD   SizeOfInitializedData;
    DWORD   SizeOfUninitializedData;
    DWORD   AddressOfEntryPoint;
    DWORD   BaseOfCode;
    DWORD   BaseOfData;

    
    
    

    DWORD   ImageBase;
    DWORD   SectionAlignment;
    DWORD   FileAlignment;
    WORD    MajorOperatingSystemVersion;
    WORD    MinorOperatingSystemVersion;
    WORD    MajorImageVersion;
    WORD    MinorImageVersion;
    WORD    MajorSubsystemVersion;
    WORD    MinorSubsystemVersion;
    DWORD   Win32VersionValue;
    DWORD   SizeOfImage;
    DWORD   SizeOfHeaders;
    DWORD   CheckSum;
    WORD    Subsystem;
    WORD    DllCharacteristics;
    DWORD   SizeOfStackReserve;
    DWORD   SizeOfStackCommit;
    DWORD   SizeOfHeapReserve;
    DWORD   SizeOfHeapCommit;
    DWORD   LoaderFlags;
    DWORD   NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;

typedef struct _IMAGE_ROM_OPTIONAL_HEADER {
    WORD   Magic;
    BYTE   MajorLinkerVersion;
    BYTE   MinorLinkerVersion;
    DWORD  SizeOfCode;
    DWORD  SizeOfInitializedData;
    DWORD  SizeOfUninitializedData;
    DWORD  AddressOfEntryPoint;
    DWORD  BaseOfCode;
    DWORD  BaseOfData;
    DWORD  BaseOfBss;
    DWORD  GprMask;
    DWORD  CprMask[4];
    DWORD  GpValue;
} IMAGE_ROM_OPTIONAL_HEADER, *PIMAGE_ROM_OPTIONAL_HEADER;

typedef struct _IMAGE_OPTIONAL_HEADER64 {
    WORD        Magic;
    BYTE        MajorLinkerVersion;
    BYTE        MinorLinkerVersion;
    DWORD       SizeOfCode;
    DWORD       SizeOfInitializedData;
    DWORD       SizeOfUninitializedData;
    DWORD       AddressOfEntryPoint;
    DWORD       BaseOfCode;
    ULONGLONG   ImageBase;
    DWORD       SectionAlignment;
    DWORD       FileAlignment;
    WORD        MajorOperatingSystemVersion;
    WORD        MinorOperatingSystemVersion;
    WORD        MajorImageVersion;
    WORD        MinorImageVersion;
    WORD        MajorSubsystemVersion;
    WORD        MinorSubsystemVersion;
    DWORD       Win32VersionValue;
    DWORD       SizeOfImage;
    DWORD       SizeOfHeaders;
    DWORD       CheckSum;
    WORD        Subsystem;
    WORD        DllCharacteristics;
    ULONGLONG   SizeOfStackReserve;
    ULONGLONG   SizeOfStackCommit;
    ULONGLONG   SizeOfHeapReserve;
    ULONGLONG   SizeOfHeapCommit;
    DWORD       LoaderFlags;
    DWORD       NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER64, *PIMAGE_OPTIONAL_HEADER64;
















typedef IMAGE_OPTIONAL_HEADER32             IMAGE_OPTIONAL_HEADER;
typedef PIMAGE_OPTIONAL_HEADER32            PIMAGE_OPTIONAL_HEADER;


#line 5262 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"

typedef struct _IMAGE_NT_HEADERS64 {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER64 OptionalHeader;
} IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;

typedef struct _IMAGE_NT_HEADERS {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER32 OptionalHeader;
} IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;

typedef struct _IMAGE_ROM_HEADERS {
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
} IMAGE_ROM_HEADERS, *PIMAGE_ROM_HEADERS;


















typedef IMAGE_NT_HEADERS32                  IMAGE_NT_HEADERS;
typedef PIMAGE_NT_HEADERS32                 PIMAGE_NT_HEADERS;

#line 5301 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"














































typedef struct _IMAGE_SECTION_HEADER {
    BYTE    Name[8];
    union {
            DWORD   PhysicalAddress;
            DWORD   VirtualSize;
    } Misc;
    DWORD   VirtualAddress;
    DWORD   SizeOfRawData;
    DWORD   PointerToRawData;
    DWORD   PointerToRelocations;
    DWORD   PointerToLinenumbers;
    WORD    NumberOfRelocations;
    WORD    NumberOfLinenumbers;
    DWORD   Characteristics;
} IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;
































































#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push)
#line 28 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack2.h"
#pragma pack(2)


#line 32 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack2.h"
#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack2.h"
#line 5427 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"
#line 5428 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"





typedef struct _IMAGE_SYMBOL {
    union {
        BYTE    ShortName[8];
        struct {
            DWORD   Short;     
            DWORD   Long;      
        } Name;
        PBYTE   LongName[2];
    } N;
    DWORD   Value;
    SHORT   SectionNumber;
    WORD    Type;
    BYTE    StorageClass;
    BYTE    NumberOfAuxSymbols;
} IMAGE_SYMBOL;
typedef IMAGE_SYMBOL  *PIMAGE_SYMBOL;































































































#line 5545 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"




#line 5550 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"





#line 5556 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"




#line 5561 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"



#line 5565 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"


#line 5568 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"





typedef union _IMAGE_AUX_SYMBOL {
    struct {
        DWORD    TagIndex;                      
        union {
            struct {
                WORD    Linenumber;             
                WORD    Size;                   
            } LnSz;
           DWORD    TotalSize;
        } Misc;
        union {
            struct {                            
                DWORD    PointerToLinenumber;
                DWORD    PointerToNextFunction;
            } Function;
            struct {                            
                WORD     Dimension[4];
            } Array;
        } FcnAry;
        WORD    TvIndex;                        
    } Sym;
    struct {
        BYTE    Name[18];
    } File;
    struct {
        DWORD   Length;                         
        WORD    NumberOfRelocations;            
        WORD    NumberOfLinenumbers;            
        DWORD   CheckSum;                       
        SHORT   Number;                         
        BYTE    Selection;                      
    } Section;
} IMAGE_AUX_SYMBOL;
typedef IMAGE_AUX_SYMBOL  *PIMAGE_AUX_SYMBOL;























typedef struct _IMAGE_RELOCATION {
    union {
        DWORD   VirtualAddress;
        DWORD   RelocCount;             
    };
    DWORD   SymbolTableIndex;
    WORD    Type;
} IMAGE_RELOCATION;
typedef IMAGE_RELOCATION  *PIMAGE_RELOCATION;




















































































































































































































typedef struct _IMAGE_LINENUMBER {
    union {
        DWORD   SymbolTableIndex;               
        DWORD   VirtualAddress;                 
    } Type;
    WORD    Linenumber;                         
} IMAGE_LINENUMBER;
typedef IMAGE_LINENUMBER  *PIMAGE_LINENUMBER;




#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"


#line 36 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"
#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"
#line 5864 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"
#line 5865 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"





typedef struct _IMAGE_BASE_RELOCATION {
    DWORD   VirtualAddress;
    DWORD   SizeOfBlock;

} IMAGE_BASE_RELOCATION;
typedef IMAGE_BASE_RELOCATION  * PIMAGE_BASE_RELOCATION;

































typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER {
    BYTE     Name[16];                          
    BYTE     Date[12];                          
    BYTE     UserID[6];                         
    BYTE     GroupID[6];                        
    BYTE     Mode[8];                           
    BYTE     Size[10];                          
    BYTE     EndHeader[2];                      
} IMAGE_ARCHIVE_MEMBER_HEADER, *PIMAGE_ARCHIVE_MEMBER_HEADER;











typedef struct _IMAGE_EXPORT_DIRECTORY {
    DWORD   Characteristics;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    DWORD   Name;
    DWORD   Base;
    DWORD   NumberOfFunctions;
    DWORD   NumberOfNames;
    DWORD   AddressOfFunctions;     
    DWORD   AddressOfNames;         
    DWORD   AddressOfNameOrdinals;  
} IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;





typedef struct _IMAGE_IMPORT_BY_NAME {
    WORD    Hint;
    BYTE    Name[1];
} IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;

#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push)
#line 28 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack8.h"
#pragma pack(8)


#line 32 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack8.h"
#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack8.h"
#line 5953 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"

typedef struct _IMAGE_THUNK_DATA64 {
    union {
        PBYTE  ForwarderString;
        PDWORD Function;
        ULONGLONG Ordinal;
        PIMAGE_IMPORT_BY_NAME  AddressOfData;
    } u1;
} IMAGE_THUNK_DATA64;
typedef IMAGE_THUNK_DATA64 * PIMAGE_THUNK_DATA64;

#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"


#line 36 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"
#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"
#line 5965 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"

typedef struct _IMAGE_THUNK_DATA32 {
    union {
        PBYTE  ForwarderString;
        PDWORD Function;
        DWORD Ordinal;
        PIMAGE_IMPORT_BY_NAME  AddressOfData;
    } u1;
} IMAGE_THUNK_DATA32;
typedef IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;












typedef void
(__stdcall *PIMAGE_TLS_CALLBACK) (
    PVOID DllHandle,
    DWORD Reason,
    PVOID Reserved
    );

typedef struct _IMAGE_TLS_DIRECTORY64 {
    ULONGLONG   StartAddressOfRawData;
    ULONGLONG   EndAddressOfRawData;
    PDWORD  AddressOfIndex;
    PIMAGE_TLS_CALLBACK *AddressOfCallBacks;
    DWORD   SizeOfZeroFill;
    DWORD   Characteristics;
} IMAGE_TLS_DIRECTORY64;
typedef IMAGE_TLS_DIRECTORY64 * PIMAGE_TLS_DIRECTORY64;

typedef struct _IMAGE_TLS_DIRECTORY32 {
    DWORD   StartAddressOfRawData;
    DWORD   EndAddressOfRawData;
    PDWORD  AddressOfIndex;
    PIMAGE_TLS_CALLBACK *AddressOfCallBacks;
    DWORD   SizeOfZeroFill;
    DWORD   Characteristics;
} IMAGE_TLS_DIRECTORY32;
typedef IMAGE_TLS_DIRECTORY32 * PIMAGE_TLS_DIRECTORY32;












typedef IMAGE_THUNK_DATA32              IMAGE_THUNK_DATA;
typedef PIMAGE_THUNK_DATA32             PIMAGE_THUNK_DATA;

typedef IMAGE_TLS_DIRECTORY32           IMAGE_TLS_DIRECTORY;
typedef PIMAGE_TLS_DIRECTORY32          PIMAGE_TLS_DIRECTORY;
#line 6031 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"

typedef struct _IMAGE_IMPORT_DESCRIPTOR {
    union {
        DWORD   Characteristics;            
        DWORD   OriginalFirstThunk;         
    };
    DWORD   TimeDateStamp;                  
                                            
                                            
                                            

    DWORD   ForwarderChain;                 
    DWORD   Name;
    DWORD   FirstThunk;                     
} IMAGE_IMPORT_DESCRIPTOR;
typedef IMAGE_IMPORT_DESCRIPTOR  *PIMAGE_IMPORT_DESCRIPTOR;





typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
    DWORD   TimeDateStamp;
    WORD    OffsetModuleName;
    WORD    NumberOfModuleForwarderRefs;

} IMAGE_BOUND_IMPORT_DESCRIPTOR,  *PIMAGE_BOUND_IMPORT_DESCRIPTOR;

typedef struct _IMAGE_BOUND_FORWARDER_REF {
    DWORD   TimeDateStamp;
    WORD    OffsetModuleName;
    WORD    Reserved;
} IMAGE_BOUND_FORWARDER_REF, *PIMAGE_BOUND_FORWARDER_REF;


































typedef struct _IMAGE_RESOURCE_DIRECTORY {
    DWORD   Characteristics;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    WORD    NumberOfNamedEntries;
    WORD    NumberOfIdEntries;

} IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY;


















typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
    union {
        struct {
            DWORD NameOffset:31;
            DWORD NameIsString:1;
        };
        DWORD   Name;
        WORD    Id;
    };
    union {
        DWORD   OffsetToData;
        struct {
            DWORD   OffsetToDirectory:31;
            DWORD   DataIsDirectory:1;
        };
    };
} IMAGE_RESOURCE_DIRECTORY_ENTRY, *PIMAGE_RESOURCE_DIRECTORY_ENTRY;










typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING {
    WORD    Length;
    CHAR    NameString[ 1 ];
} IMAGE_RESOURCE_DIRECTORY_STRING, *PIMAGE_RESOURCE_DIRECTORY_STRING;


typedef struct _IMAGE_RESOURCE_DIR_STRING_U {
    WORD    Length;
    WCHAR   NameString[ 1 ];
} IMAGE_RESOURCE_DIR_STRING_U, *PIMAGE_RESOURCE_DIR_STRING_U;











typedef struct _IMAGE_RESOURCE_DATA_ENTRY {
    DWORD   OffsetToData;
    DWORD   Size;
    DWORD   CodePage;
    DWORD   Reserved;
} IMAGE_RESOURCE_DATA_ENTRY, *PIMAGE_RESOURCE_DATA_ENTRY;





typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY {
    DWORD   Characteristics;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    DWORD   GlobalFlagsClear;
    DWORD   GlobalFlagsSet;
    DWORD   CriticalSectionDefaultTimeout;
    DWORD   DeCommitFreeBlockThreshold;
    DWORD   DeCommitTotalFreeThreshold;
    PVOID   LockPrefixTable;
    DWORD   MaximumAllocationSize;
    DWORD   VirtualMemoryThreshold;
    DWORD   ProcessHeapFlags;
    DWORD   ProcessAffinityMask;
    WORD    CSDVersion;
    WORD    Reserved1;
    PVOID   EditList;
    DWORD   Reserved[ 1 ];
} IMAGE_LOAD_CONFIG_DIRECTORY, *PIMAGE_LOAD_CONFIG_DIRECTORY;









typedef struct _IMAGE_IA64_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    DWORD EndAddress;
    DWORD UnwindInfoAddress;
} IMAGE_IA64_RUNTIME_FUNCTION_ENTRY, *PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY;








typedef struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    DWORD EndAddress;
    DWORD ExceptionHandler;
    DWORD HandlerData;
    DWORD PrologEndAddress;
} IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {
    ULONGLONG BeginAddress;
    ULONGLONG EndAddress;
    ULONGLONG ExceptionHandler;
    ULONGLONG HandlerData;
    ULONGLONG PrologEndAddress;
} IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;

typedef  IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY  IMAGE_AXP64_RUNTIME_FUNCTION_ENTRY;
typedef PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY PIMAGE_AXP64_RUNTIME_FUNCTION_ENTRY;





typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
    DWORD FuncStart;
    DWORD PrologLen : 8;
    DWORD FuncLen : 22;
    DWORD ThirtyTwoBit : 1;
    DWORD ExceptionFlag : 1;
} IMAGE_CE_RUNTIME_FUNCTION_ENTRY, * PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;






#line 6263 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"

typedef  IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY  IMAGE_RUNTIME_FUNCTION_ENTRY;
typedef PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY;

#line 6268 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"





typedef struct _IMAGE_DEBUG_DIRECTORY {
    DWORD   Characteristics;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    DWORD   Type;
    DWORD   SizeOfData;
    DWORD   AddressOfRawData;
    DWORD   PointerToRawData;
} IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY;














typedef struct _IMAGE_COFF_SYMBOLS_HEADER {
    DWORD   NumberOfSymbols;
    DWORD   LvaToFirstSymbol;
    DWORD   NumberOfLinenumbers;
    DWORD   LvaToFirstLinenumber;
    DWORD   RvaToFirstByteOfCode;
    DWORD   RvaToLastByteOfCode;
    DWORD   RvaToFirstByteOfData;
    DWORD   RvaToLastByteOfData;
} IMAGE_COFF_SYMBOLS_HEADER, *PIMAGE_COFF_SYMBOLS_HEADER;






typedef struct _FPO_DATA {
    DWORD       ulOffStart;             
    DWORD       cbProcSize;             
    DWORD       cdwLocals;              
    WORD        cdwParams;              
    WORD        cbProlog : 8;           
    WORD        cbRegs   : 3;           
    WORD        fHasSEH  : 1;           
    WORD        fUseBP   : 1;           
    WORD        reserved : 1;           
    WORD        cbFrame  : 2;           
} FPO_DATA, *PFPO_DATA;





typedef struct _IMAGE_DEBUG_MISC {
    DWORD       DataType;               
    DWORD       Length;                 
                                        
    BOOLEAN     Unicode;                
    BYTE        Reserved[ 3 ];
    BYTE        Data[ 1 ];              
} IMAGE_DEBUG_MISC, *PIMAGE_DEBUG_MISC;
















#line 6355 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"

typedef struct _IMAGE_FUNCTION_ENTRY {
    DWORD   StartingAddress;
    DWORD   EndingAddress;
    DWORD   EndOfPrologue;
} IMAGE_FUNCTION_ENTRY, *PIMAGE_FUNCTION_ENTRY;

#line 6363 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"
typedef struct _IMAGE_FUNCTION_ENTRY64 {
    ULONGLONG   StartingAddress;
    ULONGLONG   EndingAddress;
    ULONGLONG   EndOfPrologue;
} IMAGE_FUNCTION_ENTRY64, *PIMAGE_FUNCTION_ENTRY64;





















typedef struct _IMAGE_SEPARATE_DEBUG_HEADER {
    WORD        Signature;
    WORD        Flags;
    WORD        Machine;
    WORD        Characteristics;
    DWORD       TimeDateStamp;
    DWORD       CheckSum;
    DWORD       ImageBase;
    DWORD       SizeOfImage;
    DWORD       NumberOfSections;
    DWORD       ExportedNamesSize;
    DWORD       DebugDirectorySize;
    DWORD       SectionAlignment;
    DWORD       Reserved[2];
} IMAGE_SEPARATE_DEBUG_HEADER, *PIMAGE_SEPARATE_DEBUG_HEADER;





#line 6410 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"



                                                









typedef struct _ImageArchitectureHeader {
    unsigned int AmaskValue: 1;                 
                                                
    int :7;                                     
    unsigned int AmaskShift: 8;                 
    int :16;                                    
    DWORD FirstEntryRVA;                        
} IMAGE_ARCHITECTURE_HEADER, *PIMAGE_ARCHITECTURE_HEADER;

typedef struct _ImageArchitectureEntry {
    DWORD FixupInstRVA;                         
    DWORD NewInst;                              
} IMAGE_ARCHITECTURE_ENTRY, *PIMAGE_ARCHITECTURE_ENTRY;

#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"


#line 36 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"
#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"
#line 6438 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"








typedef struct IMPORT_OBJECT_HEADER {
    WORD    Sig1;                       
    WORD    Sig2;                       
    WORD    Version;
    WORD    Machine;
    DWORD   TimeDateStamp;              
    DWORD   SizeOfData;                 

    union {
        WORD    Ordinal;                
        WORD    Hint;
    };

    WORD    Type : 2;                   
    WORD    NameType : 3;               
    WORD    Reserved : 11;              
} IMPORT_OBJECT_HEADER;

typedef enum IMPORT_OBJECT_TYPE
{
    IMPORT_OBJECT_CODE = 0,
    IMPORT_OBJECT_DATA = 1,
    IMPORT_OBJECT_CONST = 2,
} IMPORT_OBJECT_TYPE;

typedef enum IMPORT_OBJECT_NAME_TYPE
{
    IMPORT_OBJECT_ORDINAL = 0,          
    IMPORT_OBJECT_NAME = 1,             
    IMPORT_OBJECT_NAME_NO_PREFIX = 2,   
    IMPORT_OBJECT_NAME_UNDECORATE = 3,  
                                        
} IMPORT_OBJECT_NAME_TYPE;














#line 6494 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"












































__declspec(dllimport)
SIZE_T
__stdcall
RtlCompareMemory (
    const void *Source1,
    const void *Source2,
    SIZE_T Length
    );


















































#line 6597 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"







#line 6605 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"






























#line 6636 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"

typedef struct _MESSAGE_RESOURCE_ENTRY {
    WORD   Length;
    WORD   Flags;
    BYTE  Text[ 1 ];
} MESSAGE_RESOURCE_ENTRY, *PMESSAGE_RESOURCE_ENTRY;



typedef struct _MESSAGE_RESOURCE_BLOCK {
    DWORD LowId;
    DWORD HighId;
    DWORD OffsetToEntries;
} MESSAGE_RESOURCE_BLOCK, *PMESSAGE_RESOURCE_BLOCK;

typedef struct _MESSAGE_RESOURCE_DATA {
    DWORD NumberOfBlocks;
    MESSAGE_RESOURCE_BLOCK Blocks[ 1 ];
} MESSAGE_RESOURCE_DATA, *PMESSAGE_RESOURCE_DATA;


typedef struct _RTL_CRITICAL_SECTION_DEBUG {
    WORD   Type;
    WORD   CreatorBackTraceIndex;
    struct _RTL_CRITICAL_SECTION *CriticalSection;
    LIST_ENTRY ProcessLocksList;
    DWORD EntryCount;
    DWORD ContentionCount;
    DWORD Spare[ 2 ];
} RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG, RTL_RESOURCE_DEBUG, *PRTL_RESOURCE_DEBUG;




typedef struct _RTL_CRITICAL_SECTION {
    PRTL_CRITICAL_SECTION_DEBUG DebugInfo;

    
    
    
    

    LONG LockCount;
    LONG RecursionCount;
    HANDLE OwningThread;        
    HANDLE LockSemaphore;
    DWORD SpinCount;
} RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION;










typedef void (__stdcall * WAITORTIMERCALLBACKFUNC) (PVOID, BOOLEAN );   
typedef void (__stdcall * WORKERCALLBACKFUNC) (PVOID );                 











































typedef struct _EVENTLOGRECORD {
    DWORD  Length;        
    DWORD  Reserved;      
    DWORD  RecordNumber;  
    DWORD  TimeGenerated; 
    DWORD  TimeWritten;   
    DWORD  EventID;
    WORD   EventType;
    WORD   NumStrings;
    WORD   EventCategory;
    WORD   ReservedFlags; 
    DWORD  ClosingRecordNumber; 
    DWORD  StringOffset;  
    DWORD  UserSidLength;
    DWORD  UserSidOffset;
    DWORD  DataLength;
    DWORD  DataOffset;    
    
    
    
    
    
    
    
    
    
    
    
} EVENTLOGRECORD, *PEVENTLOGRECORD;





#pragma warning(disable : 4200)
typedef struct _EVENTSFORLOGFILE{
	DWORD			ulSize;
    WCHAR   		szLogicalLogFile[256];        
    DWORD			ulNumRecords;
	EVENTLOGRECORD 	pEventLogRecords[];
}EVENTSFORLOGFILE, *PEVENTSFORLOGFILE;

typedef struct _PACKEDEVENTINFO{
    DWORD               ulSize;  
    DWORD               ulNumEventsForLogFile; 
    DWORD 				ulOffsets[];           
}PACKEDEVENTINFO, *PPACKEDEVENTINFO;

#pragma warning(default : 4200)
























































                                                    


                                                    


                                                    


                                                    
                                                    


















































                                            




























































typedef enum _CM_SERVICE_NODE_TYPE {
    DriverType               = 0x00000001,
    FileSystemType           = 0x00000002,
    Win32ServiceOwnProcess   = 0x00000010,
    Win32ServiceShareProcess = 0x00000020,
    AdapterType              = 0x00000004,
    RecognizerType           = 0x00000008
} SERVICE_NODE_TYPE;

typedef enum _CM_SERVICE_LOAD_TYPE {
    BootLoad    = 0x00000000,
    SystemLoad  = 0x00000001,
    AutoLoad    = 0x00000002,
    DemandLoad  = 0x00000003,
    DisableLoad = 0x00000004
} SERVICE_LOAD_TYPE;

typedef enum _CM_ERROR_CONTROL_TYPE {
    IgnoreError   = 0x00000000,
    NormalError   = 0x00000001,
    SevereError   = 0x00000002,
    CriticalError = 0x00000003
} SERVICE_ERROR_TYPE;










typedef struct _TAPE_ERASE {
    DWORD Type;
    BOOLEAN Immediate;
} TAPE_ERASE, *PTAPE_ERASE;












typedef struct _TAPE_PREPARE {
    DWORD Operation;
    BOOLEAN Immediate;
} TAPE_PREPARE, *PTAPE_PREPARE;










typedef struct _TAPE_WRITE_MARKS {
    DWORD Type;
    DWORD Count;
    BOOLEAN Immediate;
} TAPE_WRITE_MARKS, *PTAPE_WRITE_MARKS;









typedef struct _TAPE_GET_POSITION {
    DWORD Type;
    DWORD Partition;
    LARGE_INTEGER Offset;
} TAPE_GET_POSITION, *PTAPE_GET_POSITION;
















typedef struct _TAPE_SET_POSITION {
    DWORD Method;
    DWORD Partition;
    LARGE_INTEGER Offset;
    BOOLEAN Immediate;
} TAPE_SET_POSITION, *PTAPE_SET_POSITION;























































































typedef struct _TAPE_GET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD DefaultBlockSize;
    DWORD MaximumBlockSize;
    DWORD MinimumBlockSize;
    DWORD MaximumPartitionCount;
    DWORD FeaturesLow;
    DWORD FeaturesHigh;
    DWORD EOTWarningZoneSize;
} TAPE_GET_DRIVE_PARAMETERS, *PTAPE_GET_DRIVE_PARAMETERS;





typedef struct _TAPE_SET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD EOTWarningZoneSize;
} TAPE_SET_DRIVE_PARAMETERS, *PTAPE_SET_DRIVE_PARAMETERS;





typedef struct _TAPE_GET_MEDIA_PARAMETERS {
    LARGE_INTEGER Capacity;
    LARGE_INTEGER Remaining;
    DWORD BlockSize;
    DWORD PartitionCount;
    BOOLEAN WriteProtected;
} TAPE_GET_MEDIA_PARAMETERS, *PTAPE_GET_MEDIA_PARAMETERS;





typedef struct _TAPE_SET_MEDIA_PARAMETERS {
    DWORD BlockSize;
} TAPE_SET_MEDIA_PARAMETERS, *PTAPE_SET_MEDIA_PARAMETERS;









typedef struct _TAPE_CREATE_PARTITION {
    DWORD Method;
    DWORD Count;
    DWORD Size;
} TAPE_CREATE_PARTITION, *PTAPE_CREATE_PARTITION;



}
#line 7221 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"

#line 7223 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnt.h"
#line 167 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"
#line 168 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"


typedef UINT WPARAM;
typedef LONG LPARAM;
typedef LONG LRESULT;





#line 179 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"



#line 183 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"

#line 185 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"










struct HWND__ { int unused; }; typedef struct HWND__ *HWND;
struct HHOOK__ { int unused; }; typedef struct HHOOK__ *HHOOK;



#line 201 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"

typedef WORD                ATOM;

typedef HANDLE          *SPHANDLE;
typedef HANDLE           *LPHANDLE;
typedef HANDLE              HGLOBAL;
typedef HANDLE              HLOCAL;
typedef HANDLE              GLOBALHANDLE;
typedef HANDLE              LOCALHANDLE;

typedef int ( __stdcall *FARPROC)();
typedef int ( __stdcall *NEARPROC)();
typedef int (__stdcall *PROC)();




#line 219 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"



typedef void * HGDIOBJ;


#line 226 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"
#line 227 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"


struct HACCEL__ { int unused; }; typedef struct HACCEL__ *HACCEL;
#line 231 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"

struct HBITMAP__ { int unused; }; typedef struct HBITMAP__ *HBITMAP;
struct HBRUSH__ { int unused; }; typedef struct HBRUSH__ *HBRUSH;
#line 235 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"

struct HCOLORSPACE__ { int unused; }; typedef struct HCOLORSPACE__ *HCOLORSPACE;
#line 238 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"

struct HDC__ { int unused; }; typedef struct HDC__ *HDC;
#line 241 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"
struct HGLRC__ { int unused; }; typedef struct HGLRC__ *HGLRC;          
struct HDESK__ { int unused; }; typedef struct HDESK__ *HDESK;
struct HENHMETAFILE__ { int unused; }; typedef struct HENHMETAFILE__ *HENHMETAFILE;

struct HFONT__ { int unused; }; typedef struct HFONT__ *HFONT;
#line 247 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"
struct HICON__ { int unused; }; typedef struct HICON__ *HICON;

struct HMENU__ { int unused; }; typedef struct HMENU__ *HMENU;
#line 251 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"
struct HMETAFILE__ { int unused; }; typedef struct HMETAFILE__ *HMETAFILE;
struct HINSTANCE__ { int unused; }; typedef struct HINSTANCE__ *HINSTANCE;
typedef HINSTANCE HMODULE;      

struct HPALETTE__ { int unused; }; typedef struct HPALETTE__ *HPALETTE;
struct HPEN__ { int unused; }; typedef struct HPEN__ *HPEN;
#line 258 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"
struct HRGN__ { int unused; }; typedef struct HRGN__ *HRGN;
struct HRSRC__ { int unused; }; typedef struct HRSRC__ *HRSRC;
struct HSTR__ { int unused; }; typedef struct HSTR__ *HSTR;
struct HTASK__ { int unused; }; typedef struct HTASK__ *HTASK;
struct HWINSTA__ { int unused; }; typedef struct HWINSTA__ *HWINSTA;
struct HKL__ { int unused; }; typedef struct HKL__ *HKL;







#line 272 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"


typedef int HFILE;
typedef HICON HCURSOR;      



#line 280 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"

typedef DWORD   COLORREF;
typedef DWORD   *LPCOLORREF;



typedef struct tagRECT
{
    LONG    left;
    LONG    top;
    LONG    right;
    LONG    bottom;
} RECT, *PRECT,  *NPRECT,  *LPRECT;

typedef const RECT * LPCRECT;

typedef struct _RECTL       
{
    LONG    left;
    LONG    top;
    LONG    right;
    LONG    bottom;
} RECTL, *PRECTL, *LPRECTL;

typedef const RECTL * LPCRECTL;

typedef struct tagPOINT
{
    LONG  x;
    LONG  y;
} POINT, *PPOINT,  *NPPOINT,  *LPPOINT;

typedef struct _POINTL      
{
    LONG  x;
    LONG  y;
} POINTL, *PPOINTL;

typedef struct tagSIZE
{
    LONG        cx;
    LONG        cy;
} SIZE, *PSIZE, *LPSIZE;

typedef SIZE               SIZEL;
typedef SIZE               *PSIZEL, *LPSIZEL;

typedef struct tagPOINTS
{

    SHORT   x;
    SHORT   y;



#line 336 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"
} POINTS, *PPOINTS, *LPPOINTS;

































}
#line 372 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"

#line 374 "c:\\programme\\microsoft visual studio\\vc98\\include\\windef.h"

#line 164 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"























#line 25 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"





#line 31 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"





#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"


extern "C" {
#line 41 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"



































































#line 109 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"















































#line 157 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"


























































typedef struct _OVERLAPPED {
    DWORD   Internal;
    DWORD   InternalHigh;
    DWORD   Offset;
    DWORD   OffsetHigh;
    HANDLE  hEvent;
} OVERLAPPED, *LPOVERLAPPED;

typedef struct _SECURITY_ATTRIBUTES {
    DWORD nLength;
    LPVOID lpSecurityDescriptor;
    BOOL bInheritHandle;
} SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;

typedef struct _PROCESS_INFORMATION {
    HANDLE hProcess;
    HANDLE hThread;
    DWORD dwProcessId;
    DWORD dwThreadId;
} PROCESS_INFORMATION, *PPROCESS_INFORMATION, *LPPROCESS_INFORMATION;





typedef struct _FILETIME {
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
} FILETIME, *PFILETIME, *LPFILETIME;





typedef struct _SYSTEMTIME {
    WORD wYear;
    WORD wMonth;
    WORD wDayOfWeek;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    WORD wMilliseconds;
} SYSTEMTIME, *PSYSTEMTIME, *LPSYSTEMTIME;

typedef DWORD (__stdcall *PTHREAD_START_ROUTINE)(
    LPVOID lpThreadParameter
    );
typedef PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE;






#line 271 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION PCRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;

typedef RTL_CRITICAL_SECTION_DEBUG CRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG PCRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG LPCRITICAL_SECTION_DEBUG;


typedef PLDT_ENTRY LPLDT_ENTRY;


#line 285 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"









































































































typedef struct _COMMPROP {
    WORD wPacketLength;
    WORD wPacketVersion;
    DWORD dwServiceMask;
    DWORD dwReserved1;
    DWORD dwMaxTxQueue;
    DWORD dwMaxRxQueue;
    DWORD dwMaxBaud;
    DWORD dwProvSubType;
    DWORD dwProvCapabilities;
    DWORD dwSettableParams;
    DWORD dwSettableBaud;
    WORD wSettableData;
    WORD wSettableStopParity;
    DWORD dwCurrentTxQueue;
    DWORD dwCurrentRxQueue;
    DWORD dwProvSpec1;
    DWORD dwProvSpec2;
    WCHAR wcProvChar[1];
} COMMPROP,*LPCOMMPROP;







typedef struct _COMSTAT {
    DWORD fCtsHold : 1;
    DWORD fDsrHold : 1;
    DWORD fRlsdHold : 1;
    DWORD fXoffHold : 1;
    DWORD fXoffSent : 1;
    DWORD fEof : 1;
    DWORD fTxim : 1;
    DWORD fReserved : 25;
    DWORD cbInQue;
    DWORD cbOutQue;
} COMSTAT, *LPCOMSTAT;
















typedef struct _DCB {
    DWORD DCBlength;      
    DWORD BaudRate;       
    DWORD fBinary: 1;     
    DWORD fParity: 1;     
    DWORD fOutxCtsFlow:1; 
    DWORD fOutxDsrFlow:1; 
    DWORD fDtrControl:2;  
    DWORD fDsrSensitivity:1; 
    DWORD fTXContinueOnXoff: 1; 
    DWORD fOutX: 1;       
    DWORD fInX: 1;        
    DWORD fErrorChar: 1;  
    DWORD fNull: 1;       
    DWORD fRtsControl:2;  
    DWORD fAbortOnError:1; 
    DWORD fDummy2:17;     
    WORD wReserved;       
    WORD XonLim;          
    WORD XoffLim;         
    BYTE ByteSize;        
    BYTE Parity;          
    BYTE StopBits;        
    char XonChar;         
    char XoffChar;        
    char ErrorChar;       
    char EofChar;         
    char EvtChar;         
    WORD wReserved1;      
} DCB, *LPDCB;

typedef struct _COMMTIMEOUTS {
    DWORD ReadIntervalTimeout;          
    DWORD ReadTotalTimeoutMultiplier;   
    DWORD ReadTotalTimeoutConstant;     
    DWORD WriteTotalTimeoutMultiplier;  
    DWORD WriteTotalTimeoutConstant;    
} COMMTIMEOUTS,*LPCOMMTIMEOUTS;

typedef struct _COMMCONFIG {
    DWORD dwSize;               
    WORD wVersion;              
    WORD wReserved;             
    DCB dcb;                    
    DWORD dwProviderSubType;    

    DWORD dwProviderOffset;     

    DWORD dwProviderSize;       
    WCHAR wcProviderData[1];    
} COMMCONFIG,*LPCOMMCONFIG;

typedef struct _SYSTEM_INFO {
    union {
        DWORD dwOemId;          
        struct {
            WORD wProcessorArchitecture;
            WORD wReserved;
        };
    };
    DWORD dwPageSize;
    LPVOID lpMinimumApplicationAddress;
    LPVOID lpMaximumApplicationAddress;
    DWORD dwActiveProcessorMask;
    DWORD dwNumberOfProcessors;
    DWORD dwProcessorType;
    DWORD dwAllocationGranularity;
    WORD wProcessorLevel;
    WORD wProcessorRevision;
} SYSTEM_INFO, *LPSYSTEM_INFO;




































typedef struct _MEMORYSTATUS {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    DWORD dwTotalPhys;
    DWORD dwAvailPhys;
    DWORD dwTotalPageFile;
    DWORD dwAvailPageFile;
    DWORD dwTotalVirtual;
    DWORD dwAvailVirtual;
} MEMORYSTATUS, *LPMEMORYSTATUS;















































































typedef struct _EXCEPTION_DEBUG_INFO {
    EXCEPTION_RECORD ExceptionRecord;
    DWORD dwFirstChance;
} EXCEPTION_DEBUG_INFO, *LPEXCEPTION_DEBUG_INFO;

typedef struct _CREATE_THREAD_DEBUG_INFO {
    HANDLE hThread;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
} CREATE_THREAD_DEBUG_INFO, *LPCREATE_THREAD_DEBUG_INFO;

typedef struct _CREATE_PROCESS_DEBUG_INFO {
    HANDLE hFile;
    HANDLE hProcess;
    HANDLE hThread;
    LPVOID lpBaseOfImage;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
    LPVOID lpImageName;
    WORD fUnicode;
} CREATE_PROCESS_DEBUG_INFO, *LPCREATE_PROCESS_DEBUG_INFO;

typedef struct _EXIT_THREAD_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_THREAD_DEBUG_INFO, *LPEXIT_THREAD_DEBUG_INFO;

typedef struct _EXIT_PROCESS_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_PROCESS_DEBUG_INFO, *LPEXIT_PROCESS_DEBUG_INFO;

typedef struct _LOAD_DLL_DEBUG_INFO {
    HANDLE hFile;
    LPVOID lpBaseOfDll;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpImageName;
    WORD fUnicode;
} LOAD_DLL_DEBUG_INFO, *LPLOAD_DLL_DEBUG_INFO;

typedef struct _UNLOAD_DLL_DEBUG_INFO {
    LPVOID lpBaseOfDll;
} UNLOAD_DLL_DEBUG_INFO, *LPUNLOAD_DLL_DEBUG_INFO;

typedef struct _OUTPUT_DEBUG_STRING_INFO {
    LPSTR lpDebugStringData;
    WORD fUnicode;
    WORD nDebugStringLength;
} OUTPUT_DEBUG_STRING_INFO, *LPOUTPUT_DEBUG_STRING_INFO;

typedef struct _RIP_INFO {
    DWORD dwError;
    DWORD dwType;
} RIP_INFO, *LPRIP_INFO;


typedef struct _DEBUG_EVENT {
    DWORD dwDebugEventCode;
    DWORD dwProcessId;
    DWORD dwThreadId;
    union {
        EXCEPTION_DEBUG_INFO Exception;
        CREATE_THREAD_DEBUG_INFO CreateThread;
        CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
        EXIT_THREAD_DEBUG_INFO ExitThread;
        EXIT_PROCESS_DEBUG_INFO ExitProcess;
        LOAD_DLL_DEBUG_INFO LoadDll;
        UNLOAD_DLL_DEBUG_INFO UnloadDll;
        OUTPUT_DEBUG_STRING_INFO DebugString;
        RIP_INFO RipInfo;
    } u;
} DEBUG_EVENT, *LPDEBUG_EVENT;


typedef PCONTEXT LPCONTEXT;
typedef PEXCEPTION_RECORD LPEXCEPTION_RECORD;
typedef PEXCEPTION_POINTERS LPEXCEPTION_POINTERS;
#line 719 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"














#line 734 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"














































































































































































































typedef struct _OFSTRUCT {
    BYTE cBytes;
    BYTE fFixedDisk;
    WORD nErrCode;
    WORD Reserved1;
    WORD Reserved2;
    CHAR szPathName[128];
} OFSTRUCT, *LPOFSTRUCT, *POFSTRUCT;






















































#line 1003 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"



__declspec(dllimport)
LONG
__stdcall
InterlockedIncrement(
    LPLONG lpAddend
    );

__declspec(dllimport)
LONG
__stdcall
InterlockedDecrement(
    LPLONG lpAddend
    );

__declspec(dllimport)
LONG
__stdcall
InterlockedExchange(
    LPLONG Target,
    LONG Value
    );

__declspec(dllimport)
LONG
__stdcall
InterlockedExchangeAdd(
    LPLONG Addend,
    LONG Value
    );

__declspec(dllimport)
PVOID
__stdcall
InterlockedCompareExchange (
    PVOID *Destination,
    PVOID Exchange,
    PVOID Comperand
    );

#line 1046 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

#line 1048 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
FreeResource(
        HGLOBAL hResData
        );

__declspec(dllimport)
LPVOID
__stdcall
LockResource(
        HGLOBAL hResData
        );







int
__stdcall



#line 1075 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"
WinMain(
    HINSTANCE hInstance,
    HINSTANCE hPrevInstance,
    LPSTR lpCmdLine,
    int nShowCmd
    );

__declspec(dllimport)
BOOL
__stdcall
FreeLibrary(
    HMODULE hLibModule
    );


__declspec(dllimport)
void
__stdcall
FreeLibraryAndExitThread(
    HMODULE hLibModule,
    DWORD dwExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
DisableThreadLibraryCalls(
    HMODULE hLibModule
    );

__declspec(dllimport)
FARPROC
__stdcall
GetProcAddress(
    HMODULE hModule,
    LPCSTR lpProcName
    );

__declspec(dllimport)
DWORD
__stdcall
GetVersion( void );

__declspec(dllimport)
HGLOBAL
__stdcall
GlobalAlloc(
    UINT uFlags,
    DWORD dwBytes
    );

__declspec(dllimport)
HGLOBAL
__stdcall
GlobalReAlloc(
    HGLOBAL hMem,
    DWORD dwBytes,
    UINT uFlags
    );

__declspec(dllimport)
DWORD
__stdcall
GlobalSize(
    HGLOBAL hMem
    );

__declspec(dllimport)
UINT
__stdcall
GlobalFlags(
    HGLOBAL hMem
    );


__declspec(dllimport)
LPVOID
__stdcall
GlobalLock(
    HGLOBAL hMem
    );


__declspec(dllimport)
HGLOBAL
__stdcall
GlobalHandle(
    LPCVOID pMem
    );


__declspec(dllimport)
BOOL
__stdcall
GlobalUnlock(
    HGLOBAL hMem
    );


__declspec(dllimport)
HGLOBAL
__stdcall
GlobalFree(
    HGLOBAL hMem
    );

__declspec(dllimport)
UINT
__stdcall
GlobalCompact(
    DWORD dwMinFree
    );

__declspec(dllimport)
void
__stdcall
GlobalFix(
    HGLOBAL hMem
    );

__declspec(dllimport)
void
__stdcall
GlobalUnfix(
    HGLOBAL hMem
    );

__declspec(dllimport)
LPVOID
__stdcall
GlobalWire(
    HGLOBAL hMem
    );

__declspec(dllimport)
BOOL
__stdcall
GlobalUnWire(
    HGLOBAL hMem
    );

__declspec(dllimport)
void
__stdcall
GlobalMemoryStatus(
    LPMEMORYSTATUS lpBuffer
    );

__declspec(dllimport)
HLOCAL
__stdcall
LocalAlloc(
    UINT uFlags,
    UINT uBytes
    );

__declspec(dllimport)
HLOCAL
__stdcall
LocalReAlloc(
    HLOCAL hMem,
    UINT uBytes,
    UINT uFlags
    );

__declspec(dllimport)
LPVOID
__stdcall
LocalLock(
    HLOCAL hMem
    );

__declspec(dllimport)
HLOCAL
__stdcall
LocalHandle(
    LPCVOID pMem
    );

__declspec(dllimport)
BOOL
__stdcall
LocalUnlock(
    HLOCAL hMem
    );

__declspec(dllimport)
UINT
__stdcall
LocalSize(
    HLOCAL hMem
    );

__declspec(dllimport)
UINT
__stdcall
LocalFlags(
    HLOCAL hMem
    );

__declspec(dllimport)
HLOCAL
__stdcall
LocalFree(
    HLOCAL hMem
    );

__declspec(dllimport)
UINT
__stdcall
LocalShrink(
    HLOCAL hMem,
    UINT cbNewSize
    );

__declspec(dllimport)
UINT
__stdcall
LocalCompact(
    UINT uMinFree
    );

__declspec(dllimport)
BOOL
__stdcall
FlushInstructionCache(
    HANDLE hProcess,
    LPCVOID lpBaseAddress,
    DWORD dwSize
    );

__declspec(dllimport)
LPVOID
__stdcall
VirtualAlloc(
    LPVOID lpAddress,
    DWORD dwSize,
    DWORD flAllocationType,
    DWORD flProtect
    );

__declspec(dllimport)
BOOL
__stdcall
VirtualFree(
    LPVOID lpAddress,
    DWORD dwSize,
    DWORD dwFreeType
    );

__declspec(dllimport)
BOOL
__stdcall
VirtualProtect(
    LPVOID lpAddress,
    DWORD dwSize,
    DWORD flNewProtect,
    PDWORD lpflOldProtect
    );

__declspec(dllimport)
DWORD
__stdcall
VirtualQuery(
    LPCVOID lpAddress,
    PMEMORY_BASIC_INFORMATION lpBuffer,
    DWORD dwLength
    );

__declspec(dllimport)
LPVOID
__stdcall
VirtualAllocEx(
    HANDLE hProcess,
    LPVOID lpAddress,
    DWORD dwSize,
    DWORD flAllocationType,
    DWORD flProtect
    );

__declspec(dllimport)
BOOL
__stdcall
VirtualFreeEx(
    HANDLE hProcess,
    LPVOID lpAddress,
    DWORD dwSize,
    DWORD dwFreeType
    );

__declspec(dllimport)
BOOL
__stdcall
VirtualProtectEx(
    HANDLE hProcess,
    LPVOID lpAddress,
    DWORD dwSize,
    DWORD flNewProtect,
    PDWORD lpflOldProtect
    );

__declspec(dllimport)
DWORD
__stdcall
VirtualQueryEx(
    HANDLE hProcess,
    LPCVOID lpAddress,
    PMEMORY_BASIC_INFORMATION lpBuffer,
    DWORD dwLength
    );

__declspec(dllimport)
HANDLE
__stdcall
HeapCreate(
    DWORD flOptions,
    DWORD dwInitialSize,
    DWORD dwMaximumSize
    );

__declspec(dllimport)
BOOL
__stdcall
HeapDestroy(
    HANDLE hHeap
    );


__declspec(dllimport)
LPVOID
__stdcall
HeapAlloc(
    HANDLE hHeap,
    DWORD dwFlags,
    DWORD dwBytes
    );

__declspec(dllimport)
LPVOID
__stdcall
HeapReAlloc(
    HANDLE hHeap,
    DWORD dwFlags,
    LPVOID lpMem,
    DWORD dwBytes
    );

__declspec(dllimport)
BOOL
__stdcall
HeapFree(
    HANDLE hHeap,
    DWORD dwFlags,
    LPVOID lpMem
    );

__declspec(dllimport)
DWORD
__stdcall
HeapSize(
    HANDLE hHeap,
    DWORD dwFlags,
    LPCVOID lpMem
    );

__declspec(dllimport)
BOOL
__stdcall
HeapValidate(
    HANDLE hHeap,
    DWORD dwFlags,
    LPCVOID lpMem
    );

__declspec(dllimport)
UINT
__stdcall
HeapCompact(
    HANDLE hHeap,
    DWORD dwFlags
    );

__declspec(dllimport)
HANDLE
__stdcall
GetProcessHeap( void );

__declspec(dllimport)
DWORD
__stdcall
GetProcessHeaps(
    DWORD NumberOfHeaps,
    PHANDLE ProcessHeaps
    );

typedef struct _PROCESS_HEAP_ENTRY {
    PVOID lpData;
    DWORD cbData;
    BYTE cbOverhead;
    BYTE iRegionIndex;
    WORD wFlags;
    union {
        struct {
            HANDLE hMem;
            DWORD dwReserved[ 3 ];
        } Block;
        struct {
            DWORD dwCommittedSize;
            DWORD dwUnCommittedSize;
            LPVOID lpFirstBlock;
            LPVOID lpLastBlock;
        } Region;
    };
} PROCESS_HEAP_ENTRY, *LPPROCESS_HEAP_ENTRY, *PPROCESS_HEAP_ENTRY;







__declspec(dllimport)
BOOL
__stdcall
HeapLock(
    HANDLE hHeap
    );

__declspec(dllimport)
BOOL
__stdcall
HeapUnlock(
    HANDLE hHeap
    );


__declspec(dllimport)
BOOL
__stdcall
HeapWalk(
    HANDLE hHeap,
    LPPROCESS_HEAP_ENTRY lpEntry
    );










__declspec(dllimport)
BOOL
__stdcall
GetBinaryTypeA(
    LPCSTR lpApplicationName,
    LPDWORD lpBinaryType
    );
__declspec(dllimport)
BOOL
__stdcall
GetBinaryTypeW(
    LPCWSTR lpApplicationName,
    LPDWORD lpBinaryType
    );




#line 1547 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetShortPathNameA(
    LPCSTR lpszLongPath,
    LPSTR  lpszShortPath,
    DWORD    cchBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
GetShortPathNameW(
    LPCWSTR lpszLongPath,
    LPWSTR  lpszShortPath,
    DWORD    cchBuffer
    );




#line 1569 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetLongPathNameA(
    LPCSTR lpszShortPath,
    LPSTR  lpszLongPath,
    DWORD    cchBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
GetLongPathNameW(
    LPCWSTR lpszShortPath,
    LPWSTR  lpszLongPath,
    DWORD    cchBuffer
    );




#line 1591 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetProcessAffinityMask(
    HANDLE hProcess,
    LPDWORD lpProcessAffinityMask,
    LPDWORD lpSystemAffinityMask
    );

__declspec(dllimport)
BOOL
__stdcall
SetProcessAffinityMask(
    HANDLE hProcess,
    DWORD dwProcessAffinityMask
    );


__declspec(dllimport)
BOOL
__stdcall
GetProcessTimes(
    HANDLE hProcess,
    LPFILETIME lpCreationTime,
    LPFILETIME lpExitTime,
    LPFILETIME lpKernelTime,
    LPFILETIME lpUserTime
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessWorkingSetSize(
    HANDLE hProcess,
    LPDWORD lpMinimumWorkingSetSize,
    LPDWORD lpMaximumWorkingSetSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetProcessWorkingSetSize(
    HANDLE hProcess,
    DWORD dwMinimumWorkingSetSize,
    DWORD dwMaximumWorkingSetSize
    );

__declspec(dllimport)
HANDLE
__stdcall
OpenProcess(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    DWORD dwProcessId
    );

__declspec(dllimport)
HANDLE
__stdcall
GetCurrentProcess(
    void
    );

__declspec(dllimport)
DWORD
__stdcall
GetCurrentProcessId(
    void
    );

__declspec(dllimport)
void
__stdcall
ExitProcess(
    UINT uExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
TerminateProcess(
    HANDLE hProcess,
    UINT uExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
GetExitCodeProcess(
    HANDLE hProcess,
    LPDWORD lpExitCode
    );


__declspec(dllimport)
void
__stdcall
FatalExit(
    int ExitCode
    );

__declspec(dllimport)
LPSTR
__stdcall
GetEnvironmentStrings(
    void
    );

__declspec(dllimport)
LPWSTR
__stdcall
GetEnvironmentStringsW(
    void
    );





#line 1712 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
FreeEnvironmentStringsA(
    LPSTR
    );
__declspec(dllimport)
BOOL
__stdcall
FreeEnvironmentStringsW(
    LPWSTR
    );




#line 1730 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
void
__stdcall
RaiseException(
    DWORD dwExceptionCode,
    DWORD dwExceptionFlags,
    DWORD nNumberOfArguments,
    const DWORD *lpArguments
    );

__declspec(dllimport)
LONG
__stdcall
UnhandledExceptionFilter(
    struct _EXCEPTION_POINTERS *ExceptionInfo
    );

typedef LONG (__stdcall *PTOP_LEVEL_EXCEPTION_FILTER)(
    struct _EXCEPTION_POINTERS *ExceptionInfo
    );
typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;

__declspec(dllimport)
LPTOP_LEVEL_EXCEPTION_FILTER
__stdcall
SetUnhandledExceptionFilter(
    LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter
    );






































#line 1798 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
CreateThread(
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    DWORD dwStackSize,
    LPTHREAD_START_ROUTINE lpStartAddress,
    LPVOID lpParameter,
    DWORD dwCreationFlags,
    LPDWORD lpThreadId
    );

__declspec(dllimport)
HANDLE
__stdcall
CreateRemoteThread(
    HANDLE hProcess,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    DWORD dwStackSize,
    LPTHREAD_START_ROUTINE lpStartAddress,
    LPVOID lpParameter,
    DWORD dwCreationFlags,
    LPDWORD lpThreadId
    );

__declspec(dllimport)
HANDLE
__stdcall
GetCurrentThread(
    void
    );

__declspec(dllimport)
DWORD
__stdcall
GetCurrentThreadId(
    void
    );

__declspec(dllimport)
DWORD
__stdcall
SetThreadAffinityMask(
    HANDLE hThread,
    DWORD dwThreadAffinityMask
    );









#line 1855 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetProcessPriorityBoost(
    HANDLE hProcess,
    BOOL bDisablePriorityBoost
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessPriorityBoost(
    HANDLE hProcess,
    PBOOL pDisablePriorityBoost
    );

__declspec(dllimport)
BOOL
__stdcall
RequestWakeupLatency(
    LATENCY_TIME latency
    );

__declspec(dllimport)
BOOL
__stdcall
SetThreadPriority(
    HANDLE hThread,
    int nPriority
    );

__declspec(dllimport)
BOOL
__stdcall
SetThreadPriorityBoost(
    HANDLE hThread,
    BOOL bDisablePriorityBoost
    );

__declspec(dllimport)
BOOL
__stdcall
GetThreadPriorityBoost(
    HANDLE hThread,
    PBOOL pDisablePriorityBoost
    );

__declspec(dllimport)
int
__stdcall
GetThreadPriority(
    HANDLE hThread
    );

__declspec(dllimport)
BOOL
__stdcall
GetThreadTimes(
    HANDLE hThread,
    LPFILETIME lpCreationTime,
    LPFILETIME lpExitTime,
    LPFILETIME lpKernelTime,
    LPFILETIME lpUserTime
    );

__declspec(dllimport)
void
__stdcall
ExitThread(
    DWORD dwExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
TerminateThread(
    HANDLE hThread,
    DWORD dwExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
GetExitCodeThread(
    HANDLE hThread,
    LPDWORD lpExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
GetThreadSelectorEntry(
    HANDLE hThread,
    DWORD dwSelector,
    LPLDT_ENTRY lpSelectorEntry
    );

__declspec(dllimport)
EXECUTION_STATE
__stdcall
SetThreadExecutionState(
    EXECUTION_STATE esFlags
    );

__declspec(dllimport)
DWORD
__stdcall
GetLastError(
    void
    );

__declspec(dllimport)
void
__stdcall
SetLastError(
    DWORD dwErrCode
    );



__declspec(dllimport)
BOOL
__stdcall
GetOverlappedResult(
    HANDLE hFile,
    LPOVERLAPPED lpOverlapped,
    LPDWORD lpNumberOfBytesTransferred,
    BOOL bWait
    );

__declspec(dllimport)
HANDLE
__stdcall
CreateIoCompletionPort(
    HANDLE FileHandle,
    HANDLE ExistingCompletionPort,
    DWORD CompletionKey,
    DWORD NumberOfConcurrentThreads
    );

__declspec(dllimport)
BOOL
__stdcall
GetQueuedCompletionStatus(
    HANDLE CompletionPort,
    LPDWORD lpNumberOfBytesTransferred,
    LPDWORD lpCompletionKey,
    LPOVERLAPPED *lpOverlapped,
    DWORD dwMilliseconds
    );

__declspec(dllimport)
BOOL
__stdcall
PostQueuedCompletionStatus(
    HANDLE CompletionPort,
    DWORD dwNumberOfBytesTransferred,
    DWORD dwCompletionKey,
    LPOVERLAPPED lpOverlapped
    );






__declspec(dllimport)
UINT
__stdcall
SetErrorMode(
    UINT uMode
    );

__declspec(dllimport)
BOOL
__stdcall
ReadProcessMemory(
    HANDLE hProcess,
    LPCVOID lpBaseAddress,
    LPVOID lpBuffer,
    DWORD nSize,
    LPDWORD lpNumberOfBytesRead
    );

__declspec(dllimport)
BOOL
__stdcall
WriteProcessMemory(
    HANDLE hProcess,
    LPVOID lpBaseAddress,
    LPVOID lpBuffer,
    DWORD nSize,
    LPDWORD lpNumberOfBytesWritten
    );


__declspec(dllimport)
BOOL
__stdcall
GetThreadContext(
    HANDLE hThread,
    LPCONTEXT lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
SetThreadContext(
    HANDLE hThread,
    const CONTEXT *lpContext
    );
#line 2068 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
SuspendThread(
    HANDLE hThread
    );

__declspec(dllimport)
DWORD
__stdcall
ResumeThread(
    HANDLE hThread
    );


















#line 2101 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"








#line 2110 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
void
__stdcall
DebugBreak(
    void
    );

__declspec(dllimport)
BOOL
__stdcall
WaitForDebugEvent(
    LPDEBUG_EVENT lpDebugEvent,
    DWORD dwMilliseconds
    );

__declspec(dllimport)
BOOL
__stdcall
ContinueDebugEvent(
    DWORD dwProcessId,
    DWORD dwThreadId,
    DWORD dwContinueStatus
    );

__declspec(dllimport)
BOOL
__stdcall
DebugActiveProcess(
    DWORD dwProcessId
    );

__declspec(dllimport)
void
__stdcall
InitializeCriticalSection(
    LPCRITICAL_SECTION lpCriticalSection
    );

__declspec(dllimport)
void
__stdcall
EnterCriticalSection(
    LPCRITICAL_SECTION lpCriticalSection
    );

__declspec(dllimport)
void
__stdcall
LeaveCriticalSection(
    LPCRITICAL_SECTION lpCriticalSection
    );

















#line 2180 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"








#line 2189 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
void
__stdcall
DeleteCriticalSection(
    LPCRITICAL_SECTION lpCriticalSection
    );

__declspec(dllimport)
BOOL
__stdcall
SetEvent(
    HANDLE hEvent
    );

__declspec(dllimport)
BOOL
__stdcall
ResetEvent(
    HANDLE hEvent
    );

__declspec(dllimport)
BOOL
__stdcall
PulseEvent(
    HANDLE hEvent
    );

__declspec(dllimport)
BOOL
__stdcall
ReleaseSemaphore(
    HANDLE hSemaphore,
    LONG lReleaseCount,
    LPLONG lpPreviousCount
    );

__declspec(dllimport)
BOOL
__stdcall
ReleaseMutex(
    HANDLE hMutex
    );

__declspec(dllimport)
DWORD
__stdcall
WaitForSingleObject(
    HANDLE hHandle,
    DWORD dwMilliseconds
    );

__declspec(dllimport)
DWORD
__stdcall
WaitForMultipleObjects(
    DWORD nCount,
    const HANDLE *lpHandles,
    BOOL bWaitAll,
    DWORD dwMilliseconds
    );

__declspec(dllimport)
void
__stdcall
Sleep(
    DWORD dwMilliseconds
    );

__declspec(dllimport)
HGLOBAL
__stdcall
LoadResource(
    HMODULE hModule,
    HRSRC hResInfo
    );

__declspec(dllimport)
DWORD
__stdcall
SizeofResource(
    HMODULE hModule,
    HRSRC hResInfo
    );


__declspec(dllimport)
ATOM
__stdcall
GlobalDeleteAtom(
    ATOM nAtom
    );

__declspec(dllimport)
BOOL
__stdcall
InitAtomTable(
    DWORD nSize
    );

__declspec(dllimport)
ATOM
__stdcall
DeleteAtom(
    ATOM nAtom
    );

__declspec(dllimport)
UINT
__stdcall
SetHandleCount(
    UINT uNumber
    );

__declspec(dllimport)
DWORD
__stdcall
GetLogicalDrives(
    void
    );

__declspec(dllimport)
BOOL
__stdcall
LockFile(
    HANDLE hFile,
    DWORD dwFileOffsetLow,
    DWORD dwFileOffsetHigh,
    DWORD nNumberOfBytesToLockLow,
    DWORD nNumberOfBytesToLockHigh
    );

__declspec(dllimport)
BOOL
__stdcall
UnlockFile(
    HANDLE hFile,
    DWORD dwFileOffsetLow,
    DWORD dwFileOffsetHigh,
    DWORD nNumberOfBytesToUnlockLow,
    DWORD nNumberOfBytesToUnlockHigh
    );

__declspec(dllimport)
BOOL
__stdcall
LockFileEx(
    HANDLE hFile,
    DWORD dwFlags,
    DWORD dwReserved,
    DWORD nNumberOfBytesToLockLow,
    DWORD nNumberOfBytesToLockHigh,
    LPOVERLAPPED lpOverlapped
    );




__declspec(dllimport)
BOOL
__stdcall
UnlockFileEx(
    HANDLE hFile,
    DWORD dwReserved,
    DWORD nNumberOfBytesToUnlockLow,
    DWORD nNumberOfBytesToUnlockHigh,
    LPOVERLAPPED lpOverlapped
    );

typedef struct _BY_HANDLE_FILE_INFORMATION {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD dwVolumeSerialNumber;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD nNumberOfLinks;
    DWORD nFileIndexHigh;
    DWORD nFileIndexLow;
} BY_HANDLE_FILE_INFORMATION, *PBY_HANDLE_FILE_INFORMATION, *LPBY_HANDLE_FILE_INFORMATION;

__declspec(dllimport)
BOOL
__stdcall
GetFileInformationByHandle(
    HANDLE hFile,
    LPBY_HANDLE_FILE_INFORMATION lpFileInformation
    );

__declspec(dllimport)
DWORD
__stdcall
GetFileType(
    HANDLE hFile
    );

__declspec(dllimport)
DWORD
__stdcall
GetFileSize(
    HANDLE hFile,
    LPDWORD lpFileSizeHigh
    );

__declspec(dllimport)
HANDLE
__stdcall
GetStdHandle(
    DWORD nStdHandle
    );

__declspec(dllimport)
BOOL
__stdcall
SetStdHandle(
    DWORD nStdHandle,
    HANDLE hHandle
    );

__declspec(dllimport)
BOOL
__stdcall
WriteFile(
    HANDLE hFile,
    LPCVOID lpBuffer,
    DWORD nNumberOfBytesToWrite,
    LPDWORD lpNumberOfBytesWritten,
    LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
BOOL
__stdcall
ReadFile(
    HANDLE hFile,
    LPVOID lpBuffer,
    DWORD nNumberOfBytesToRead,
    LPDWORD lpNumberOfBytesRead,
    LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
BOOL
__stdcall
FlushFileBuffers(
    HANDLE hFile
    );

__declspec(dllimport)
BOOL
__stdcall
DeviceIoControl(
    HANDLE hDevice,
    DWORD dwIoControlCode,
    LPVOID lpInBuffer,
    DWORD nInBufferSize,
    LPVOID lpOutBuffer,
    DWORD nOutBufferSize,
    LPDWORD lpBytesReturned,
    LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
BOOL
__stdcall
GetDevicePowerState(
    HANDLE hFile
    );

__declspec(dllimport)
BOOL
__stdcall
SetEndOfFile(
    HANDLE hFile
    );

__declspec(dllimport)
DWORD
__stdcall
SetFilePointer(
    HANDLE hFile,
    LONG lDistanceToMove,
    PLONG lpDistanceToMoveHigh,
    DWORD dwMoveMethod
    );

__declspec(dllimport)
BOOL
__stdcall
FindClose(
    HANDLE hFindFile
    );

__declspec(dllimport)
BOOL
__stdcall
GetFileTime(
    HANDLE hFile,
    LPFILETIME lpCreationTime,
    LPFILETIME lpLastAccessTime,
    LPFILETIME lpLastWriteTime
    );

__declspec(dllimport)
BOOL
__stdcall
SetFileTime(
    HANDLE hFile,
    const FILETIME *lpCreationTime,
    const FILETIME *lpLastAccessTime,
    const FILETIME *lpLastWriteTime
    );

__declspec(dllimport)
BOOL
__stdcall
CloseHandle(
    HANDLE hObject
    );

__declspec(dllimport)
BOOL
__stdcall
DuplicateHandle(
    HANDLE hSourceProcessHandle,
    HANDLE hSourceHandle,
    HANDLE hTargetProcessHandle,
    LPHANDLE lpTargetHandle,
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    DWORD dwOptions
    );

__declspec(dllimport)
BOOL
__stdcall
GetHandleInformation(
    HANDLE hObject,
    LPDWORD lpdwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
SetHandleInformation(
    HANDLE hObject,
    DWORD dwMask,
    DWORD dwFlags
    );






__declspec(dllimport)
DWORD
__stdcall
LoadModule(
    LPCSTR lpModuleName,
    LPVOID lpParameterBlock
    );

__declspec(dllimport)
UINT
__stdcall
WinExec(
    LPCSTR lpCmdLine,
    UINT uCmdShow
    );

__declspec(dllimport)
BOOL
__stdcall
ClearCommBreak(
    HANDLE hFile
    );

__declspec(dllimport)
BOOL
__stdcall
ClearCommError(
    HANDLE hFile,
    LPDWORD lpErrors,
    LPCOMSTAT lpStat
    );

__declspec(dllimport)
BOOL
__stdcall
SetupComm(
    HANDLE hFile,
    DWORD dwInQueue,
    DWORD dwOutQueue
    );

__declspec(dllimport)
BOOL
__stdcall
EscapeCommFunction(
    HANDLE hFile,
    DWORD dwFunc
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommConfig(
    HANDLE hCommDev,
    LPCOMMCONFIG lpCC,
    LPDWORD lpdwSize
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommMask(
    HANDLE hFile,
    LPDWORD lpEvtMask
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommProperties(
    HANDLE hFile,
    LPCOMMPROP lpCommProp
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommModemStatus(
    HANDLE hFile,
    LPDWORD lpModemStat
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommState(
    HANDLE hFile,
    LPDCB lpDCB
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommTimeouts(
    HANDLE hFile,
    LPCOMMTIMEOUTS lpCommTimeouts
    );

__declspec(dllimport)
BOOL
__stdcall
PurgeComm(
    HANDLE hFile,
    DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommBreak(
    HANDLE hFile
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommConfig(
    HANDLE hCommDev,
    LPCOMMCONFIG lpCC,
    DWORD dwSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommMask(
    HANDLE hFile,
    DWORD dwEvtMask
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommState(
    HANDLE hFile,
    LPDCB lpDCB
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommTimeouts(
    HANDLE hFile,
    LPCOMMTIMEOUTS lpCommTimeouts
    );

__declspec(dllimport)
BOOL
__stdcall
TransmitCommChar(
    HANDLE hFile,
    char cChar
    );

__declspec(dllimport)
BOOL
__stdcall
WaitCommEvent(
    HANDLE hFile,
    LPDWORD lpEvtMask,
    LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
DWORD
__stdcall
SetTapePosition(
    HANDLE hDevice,
    DWORD dwPositionMethod,
    DWORD dwPartition,
    DWORD dwOffsetLow,
    DWORD dwOffsetHigh,
    BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapePosition(
    HANDLE hDevice,
    DWORD dwPositionType,
    LPDWORD lpdwPartition,
    LPDWORD lpdwOffsetLow,
    LPDWORD lpdwOffsetHigh
    );

__declspec(dllimport)
DWORD
__stdcall
PrepareTape(
    HANDLE hDevice,
    DWORD dwOperation,
    BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
EraseTape(
    HANDLE hDevice,
    DWORD dwEraseType,
    BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
CreateTapePartition(
    HANDLE hDevice,
    DWORD dwPartitionMethod,
    DWORD dwCount,
    DWORD dwSize
    );

__declspec(dllimport)
DWORD
__stdcall
WriteTapemark(
    HANDLE hDevice,
    DWORD dwTapemarkType,
    DWORD dwTapemarkCount,
    BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapeStatus(
    HANDLE hDevice
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapeParameters(
    HANDLE hDevice,
    DWORD dwOperation,
    LPDWORD lpdwSize,
    LPVOID lpTapeInformation
    );




__declspec(dllimport)
DWORD
__stdcall
SetTapeParameters(
    HANDLE hDevice,
    DWORD dwOperation,
    LPVOID lpTapeInformation
    );




__declspec(dllimport)
BOOL
__stdcall
Beep(
    DWORD dwFreq,
    DWORD dwDuration
    );

__declspec(dllimport)
int
__stdcall
MulDiv(
    int nNumber,
    int nNumerator,
    int nDenominator
    );

__declspec(dllimport)
void
__stdcall
GetSystemTime(
    LPSYSTEMTIME lpSystemTime
    );

__declspec(dllimport)
void
__stdcall
GetSystemTimeAsFileTime(
    LPFILETIME lpSystemTimeAsFileTime
    );

__declspec(dllimport)
BOOL
__stdcall
SetSystemTime(
    const SYSTEMTIME *lpSystemTime
    );

__declspec(dllimport)
void
__stdcall
GetLocalTime(
    LPSYSTEMTIME lpSystemTime
    );

__declspec(dllimport)
BOOL
__stdcall
SetLocalTime(
    const SYSTEMTIME *lpSystemTime
    );

__declspec(dllimport)
void
__stdcall
GetSystemInfo(
    LPSYSTEM_INFO lpSystemInfo
    );

__declspec(dllimport)
BOOL
__stdcall
IsProcessorFeaturePresent(
    DWORD ProcessorFeature
    );

typedef struct _TIME_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[ 32 ];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[ 32 ];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
} TIME_ZONE_INFORMATION, *PTIME_ZONE_INFORMATION, *LPTIME_ZONE_INFORMATION;

__declspec(dllimport)
BOOL
__stdcall
SystemTimeToTzSpecificLocalTime(
    LPTIME_ZONE_INFORMATION lpTimeZoneInformation,
    LPSYSTEMTIME lpUniversalTime,
    LPSYSTEMTIME lpLocalTime
    );

__declspec(dllimport)
DWORD
__stdcall
GetTimeZoneInformation(
    LPTIME_ZONE_INFORMATION lpTimeZoneInformation
    );

__declspec(dllimport)
BOOL
__stdcall
SetTimeZoneInformation(
    const TIME_ZONE_INFORMATION *lpTimeZoneInformation
    );






__declspec(dllimport)
BOOL
__stdcall
SystemTimeToFileTime(
    const SYSTEMTIME *lpSystemTime,
    LPFILETIME lpFileTime
    );

__declspec(dllimport)
BOOL
__stdcall
FileTimeToLocalFileTime(
    const FILETIME *lpFileTime,
    LPFILETIME lpLocalFileTime
    );

__declspec(dllimport)
BOOL
__stdcall
LocalFileTimeToFileTime(
    const FILETIME *lpLocalFileTime,
    LPFILETIME lpFileTime
    );

__declspec(dllimport)
BOOL
__stdcall
FileTimeToSystemTime(
    const FILETIME *lpFileTime,
    LPSYSTEMTIME lpSystemTime
    );

__declspec(dllimport)
LONG
__stdcall
CompareFileTime(
    const FILETIME *lpFileTime1,
    const FILETIME *lpFileTime2
    );

__declspec(dllimport)
BOOL
__stdcall
FileTimeToDosDateTime(
    const FILETIME *lpFileTime,
    LPWORD lpFatDate,
    LPWORD lpFatTime
    );

__declspec(dllimport)
BOOL
__stdcall
DosDateTimeToFileTime(
    WORD wFatDate,
    WORD wFatTime,
    LPFILETIME lpFileTime
    );

__declspec(dllimport)
DWORD
__stdcall
GetTickCount(
    void
    );

__declspec(dllimport)
BOOL
__stdcall
SetSystemTimeAdjustment(
    DWORD dwTimeAdjustment,
    BOOL  bTimeAdjustmentDisabled
    );

__declspec(dllimport)
BOOL
__stdcall
GetSystemTimeAdjustment(
    PDWORD lpTimeAdjustment,
    PDWORD lpTimeIncrement,
    PBOOL  lpTimeAdjustmentDisabled
    );


__declspec(dllimport)
DWORD
__stdcall
FormatMessageA(
    DWORD dwFlags,
    LPCVOID lpSource,
    DWORD dwMessageId,
    DWORD dwLanguageId,
    LPSTR lpBuffer,
    DWORD nSize,
    va_list *Arguments
    );
__declspec(dllimport)
DWORD
__stdcall
FormatMessageW(
    DWORD dwFlags,
    LPCVOID lpSource,
    DWORD dwMessageId,
    DWORD dwLanguageId,
    LPWSTR lpBuffer,
    DWORD nSize,
    va_list *Arguments
    );




#line 3019 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"
#line 3020 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"










__declspec(dllimport)
BOOL
__stdcall
CreatePipe(
    PHANDLE hReadPipe,
    PHANDLE hWritePipe,
    LPSECURITY_ATTRIBUTES lpPipeAttributes,
    DWORD nSize
    );

__declspec(dllimport)
BOOL
__stdcall
ConnectNamedPipe(
    HANDLE hNamedPipe,
    LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
BOOL
__stdcall
DisconnectNamedPipe(
    HANDLE hNamedPipe
    );

__declspec(dllimport)
BOOL
__stdcall
SetNamedPipeHandleState(
    HANDLE hNamedPipe,
    LPDWORD lpMode,
    LPDWORD lpMaxCollectionCount,
    LPDWORD lpCollectDataTimeout
    );

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeInfo(
    HANDLE hNamedPipe,
    LPDWORD lpFlags,
    LPDWORD lpOutBufferSize,
    LPDWORD lpInBufferSize,
    LPDWORD lpMaxInstances
    );

__declspec(dllimport)
BOOL
__stdcall
PeekNamedPipe(
    HANDLE hNamedPipe,
    LPVOID lpBuffer,
    DWORD nBufferSize,
    LPDWORD lpBytesRead,
    LPDWORD lpTotalBytesAvail,
    LPDWORD lpBytesLeftThisMessage
    );

__declspec(dllimport)
BOOL
__stdcall
TransactNamedPipe(
    HANDLE hNamedPipe,
    LPVOID lpInBuffer,
    DWORD nInBufferSize,
    LPVOID lpOutBuffer,
    DWORD nOutBufferSize,
    LPDWORD lpBytesRead,
    LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
HANDLE
__stdcall
CreateMailslotA(
    LPCSTR lpName,
    DWORD nMaxMessageSize,
    DWORD lReadTimeout,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateMailslotW(
    LPCWSTR lpName,
    DWORD nMaxMessageSize,
    DWORD lReadTimeout,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );




#line 3124 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetMailslotInfo(
    HANDLE hMailslot,
    LPDWORD lpMaxMessageSize,
    LPDWORD lpNextSize,
    LPDWORD lpMessageCount,
    LPDWORD lpReadTimeout
    );

__declspec(dllimport)
BOOL
__stdcall
SetMailslotInfo(
    HANDLE hMailslot,
    DWORD lReadTimeout
    );

__declspec(dllimport)
LPVOID
__stdcall
MapViewOfFile(
    HANDLE hFileMappingObject,
    DWORD dwDesiredAccess,
    DWORD dwFileOffsetHigh,
    DWORD dwFileOffsetLow,
    DWORD dwNumberOfBytesToMap
    );


__declspec(dllimport)
PVOID64
__stdcall
MapViewOfFileVlm(
    HANDLE hFileMappingObject,
    DWORD dwDesiredAccess,
    DWORDLONG ulOffset,
    DWORDLONG ulNumberOfBytesToMap,
    PVOID64 lpBaseAddress
    );

__declspec(dllimport)
BOOL
__stdcall
FlushViewOfFile(
    LPCVOID lpBaseAddress,
    DWORD dwNumberOfBytesToFlush
    );

__declspec(dllimport)
BOOL
__stdcall
UnmapViewOfFile(
    LPCVOID lpBaseAddress
    );

__declspec(dllimport)
BOOL
__stdcall
UnmapViewOfFileVlm(
    PVOID64 lpBaseAddress
    );





__declspec(dllimport)
BOOL
__stdcall
EncryptFileA(
    LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
EncryptFileW(
    LPCWSTR lpFileName
    );




#line 3210 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
DecryptFileA(
    LPCSTR lpFileName,
    DWORD    dwReserved
    );
__declspec(dllimport)
BOOL
__stdcall
DecryptFileW(
    LPCWSTR lpFileName,
    DWORD    dwReserved
    );




#line 3230 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"







typedef
DWORD
(*PFE_EXPORT_FUNC)(
    PBYTE pbData,
    PVOID pvCallbackContext,
    ULONG ulLength
    );

typedef
DWORD
(*PFE_IMPORT_FUNC)(
    PBYTE pbData,
    PVOID pvCallbackContext,
    PULONG ulLength
    );










__declspec(dllimport)
DWORD
__stdcall
OpenRawA(
    LPCSTR        lpFileName,
    ULONG           ulFlags,
    PVOID *         pvContext
    );
__declspec(dllimport)
DWORD
__stdcall
OpenRawW(
    LPCWSTR        lpFileName,
    ULONG           ulFlags,
    PVOID *         pvContext
    );




#line 3283 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
ReadRaw(
    PFE_EXPORT_FUNC pfExportCallback,
    PVOID           pvCallbackContext,
    PVOID           pvContext
    );

__declspec(dllimport)
DWORD
__stdcall
WriteRaw(
    PFE_IMPORT_FUNC pfImportCallback,
    PVOID           pvCallbackContext,
    PVOID           pvContext
    );

__declspec(dllimport)
void
__stdcall
CloseRaw(
    PVOID           pvContext
    );

typedef struct _RECOVERY_AGENT_INFORMATIONA {
    DWORD NextEntryOffset;
    DWORD AgentNameLength;
    CHAR   AgentInformation[1];
} RECOVERY_AGENT_INFORMATIONA, *LPRECOVERY_AGENT_INFORMATIONA;
typedef struct _RECOVERY_AGENT_INFORMATIONW {
    DWORD NextEntryOffset;
    DWORD AgentNameLength;
    WCHAR  AgentInformation[1];
} RECOVERY_AGENT_INFORMATIONW, *LPRECOVERY_AGENT_INFORMATIONW;




typedef RECOVERY_AGENT_INFORMATIONA RECOVERY_AGENT_INFORMATION;
typedef LPRECOVERY_AGENT_INFORMATIONA LPRECOVERY_AGENT_INFORMATION;
#line 3326 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
QueryRecoveryAgentsA(
           LPCSTR                        lpFileName,
          PDWORD                          AgentCount,
          LPRECOVERY_AGENT_INFORMATIONA * RecoveryAgentInformation
     );
__declspec(dllimport)
DWORD
__stdcall
QueryRecoveryAgentsW(
           LPCWSTR                        lpFileName,
          PDWORD                          AgentCount,
          LPRECOVERY_AGENT_INFORMATIONW * RecoveryAgentInformation
     );




#line 3348 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"





__declspec(dllimport)
int
__stdcall
lstrcmpA(
    LPCSTR lpString1,
    LPCSTR lpString2
    );
__declspec(dllimport)
int
__stdcall
lstrcmpW(
    LPCWSTR lpString1,
    LPCWSTR lpString2
    );




#line 3372 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
int
__stdcall
lstrcmpiA(
    LPCSTR lpString1,
    LPCSTR lpString2
    );
__declspec(dllimport)
int
__stdcall
lstrcmpiW(
    LPCWSTR lpString1,
    LPCWSTR lpString2
    );




#line 3392 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
LPSTR
__stdcall
lstrcpynA(
    LPSTR lpString1,
    LPCSTR lpString2,
    int iMaxLength
    );
__declspec(dllimport)
LPWSTR
__stdcall
lstrcpynW(
    LPWSTR lpString1,
    LPCWSTR lpString2,
    int iMaxLength
    );




#line 3414 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
LPSTR
__stdcall
lstrcpyA(
    LPSTR lpString1,
    LPCSTR lpString2
    );
__declspec(dllimport)
LPWSTR
__stdcall
lstrcpyW(
    LPWSTR lpString1,
    LPCWSTR lpString2
    );




#line 3434 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
LPSTR
__stdcall
lstrcatA(
    LPSTR lpString1,
    LPCSTR lpString2
    );
__declspec(dllimport)
LPWSTR
__stdcall
lstrcatW(
    LPWSTR lpString1,
    LPCWSTR lpString2
    );




#line 3454 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
int
__stdcall
lstrlenA(
    LPCSTR lpString
    );
__declspec(dllimport)
int
__stdcall
lstrlenW(
    LPCWSTR lpString
    );




#line 3472 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
HFILE
__stdcall
OpenFile(
    LPCSTR lpFileName,
    LPOFSTRUCT lpReOpenBuff,
    UINT uStyle
    );

__declspec(dllimport)
HFILE
__stdcall
_lopen(
    LPCSTR lpPathName,
    int iReadWrite
    );

__declspec(dllimport)
HFILE
__stdcall
_lcreat(
    LPCSTR lpPathName,
    int  iAttribute
    );

__declspec(dllimport)
UINT
__stdcall
_lread(
    HFILE hFile,
    LPVOID lpBuffer,
    UINT uBytes
    );

__declspec(dllimport)
UINT
__stdcall
_lwrite(
    HFILE hFile,
    LPCSTR lpBuffer,
    UINT uBytes
    );

__declspec(dllimport)
long
__stdcall
_hread(
    HFILE hFile,
    LPVOID lpBuffer,
    long lBytes
    );

__declspec(dllimport)
long
__stdcall
_hwrite(
    HFILE hFile,
    LPCSTR lpBuffer,
    long lBytes
    );

__declspec(dllimport)
HFILE
__stdcall
_lclose(
    HFILE hFile
    );

__declspec(dllimport)
LONG
__stdcall
_llseek(
    HFILE hFile,
    LONG lOffset,
    int iOrigin
    );

__declspec(dllimport)
BOOL
__stdcall
IsTextUnicode(
    const LPVOID lpBuffer,
    int cb,
    LPINT lpi
    );

__declspec(dllimport)
DWORD
__stdcall
TlsAlloc(
    void
    );



__declspec(dllimport)
LPVOID
__stdcall
TlsGetValue(
    DWORD dwTlsIndex
    );

__declspec(dllimport)
BOOL
__stdcall
TlsSetValue(
    DWORD dwTlsIndex,
    LPVOID lpTlsValue
    );

__declspec(dllimport)
BOOL
__stdcall
TlsFree(
    DWORD dwTlsIndex
    );

typedef
void
(__stdcall *LPOVERLAPPED_COMPLETION_ROUTINE)(
    DWORD dwErrorCode,
    DWORD dwNumberOfBytesTransfered,
    LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
DWORD
__stdcall
SleepEx(
    DWORD dwMilliseconds,
    BOOL bAlertable
    );

__declspec(dllimport)
DWORD
__stdcall
WaitForSingleObjectEx(
    HANDLE hHandle,
    DWORD dwMilliseconds,
    BOOL bAlertable
    );

__declspec(dllimport)
DWORD
__stdcall
WaitForMultipleObjectsEx(
    DWORD nCount,
    const HANDLE *lpHandles,
    BOOL bWaitAll,
    DWORD dwMilliseconds,
    BOOL bAlertable
    );











#line 3637 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ReadFileEx(
    HANDLE hFile,
    LPVOID lpBuffer,
    DWORD nNumberOfBytesToRead,
    LPOVERLAPPED lpOverlapped,
    LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );

__declspec(dllimport)
BOOL
__stdcall
WriteFileEx(
    HANDLE hFile,
    LPCVOID lpBuffer,
    DWORD nNumberOfBytesToWrite,
    LPOVERLAPPED lpOverlapped,
    LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );

__declspec(dllimport)
BOOL
__stdcall
BackupRead(
    HANDLE hFile,
    LPBYTE lpBuffer,
    DWORD nNumberOfBytesToRead,
    LPDWORD lpNumberOfBytesRead,
    BOOL bAbort,
    BOOL bProcessSecurity,
    LPVOID *lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
BackupSeek(
    HANDLE hFile,
    DWORD  dwLowBytesToSeek,
    DWORD  dwHighBytesToSeek,
    LPDWORD lpdwLowByteSeeked,
    LPDWORD lpdwHighByteSeeked,
    LPVOID *lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
BackupWrite(
    HANDLE hFile,
    LPBYTE lpBuffer,
    DWORD nNumberOfBytesToWrite,
    LPDWORD lpNumberOfBytesWritten,
    BOOL bAbort,
    BOOL bProcessSecurity,
    LPVOID *lpContext
    );




typedef struct _WIN32_STREAM_ID {
        DWORD          dwStreamId ;
        DWORD          dwStreamAttributes ;
        LARGE_INTEGER  Size ;
        DWORD          dwStreamNameSize ;
        WCHAR          cStreamName[ 1 ] ;
} WIN32_STREAM_ID, *LPWIN32_STREAM_ID ;



























__declspec(dllimport)
BOOL
__stdcall
ReadFileScatter(
    HANDLE hFile,
    FILE_SEGMENT_ELEMENT aSegmentArray[],
    DWORD nNumberOfBytesToRead,
    LPDWORD lpReserved,
    LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
BOOL
__stdcall
WriteFileGather(
    HANDLE hFile,
    FILE_SEGMENT_ELEMENT aSegmentArray[],
    DWORD nNumberOfBytesToWrite,
    LPDWORD lpReserved,
    LPOVERLAPPED lpOverlapped
    );
















#line 3773 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

typedef struct _STARTUPINFOA {
    DWORD   cb;
    LPSTR   lpReserved;
    LPSTR   lpDesktop;
    LPSTR   lpTitle;
    DWORD   dwX;
    DWORD   dwY;
    DWORD   dwXSize;
    DWORD   dwYSize;
    DWORD   dwXCountChars;
    DWORD   dwYCountChars;
    DWORD   dwFillAttribute;
    DWORD   dwFlags;
    WORD    wShowWindow;
    WORD    cbReserved2;
    LPBYTE  lpReserved2;
    HANDLE  hStdInput;
    HANDLE  hStdOutput;
    HANDLE  hStdError;
} STARTUPINFOA, *LPSTARTUPINFOA;
typedef struct _STARTUPINFOW {
    DWORD   cb;
    LPWSTR  lpReserved;
    LPWSTR  lpDesktop;
    LPWSTR  lpTitle;
    DWORD   dwX;
    DWORD   dwY;
    DWORD   dwXSize;
    DWORD   dwYSize;
    DWORD   dwXCountChars;
    DWORD   dwYCountChars;
    DWORD   dwFillAttribute;
    DWORD   dwFlags;
    WORD    wShowWindow;
    WORD    cbReserved2;
    LPBYTE  lpReserved2;
    HANDLE  hStdInput;
    HANDLE  hStdOutput;
    HANDLE  hStdError;
} STARTUPINFOW, *LPSTARTUPINFOW;




typedef STARTUPINFOA STARTUPINFO;
typedef LPSTARTUPINFOA LPSTARTUPINFO;
#line 3821 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"



typedef struct _WIN32_FIND_DATAA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    CHAR   cFileName[ 260 ];
    CHAR   cAlternateFileName[ 14 ];





} WIN32_FIND_DATAA, *PWIN32_FIND_DATAA, *LPWIN32_FIND_DATAA;
typedef struct _WIN32_FIND_DATAW {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    WCHAR  cFileName[ 260 ];
    WCHAR  cAlternateFileName[ 14 ];





} WIN32_FIND_DATAW, *PWIN32_FIND_DATAW, *LPWIN32_FIND_DATAW;





typedef WIN32_FIND_DATAA WIN32_FIND_DATA;
typedef PWIN32_FIND_DATAA PWIN32_FIND_DATA;
typedef LPWIN32_FIND_DATAA LPWIN32_FIND_DATA;
#line 3867 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

typedef struct _WIN32_FILE_ATTRIBUTE_DATA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
} WIN32_FILE_ATTRIBUTE_DATA, *LPWIN32_FILE_ATTRIBUTE_DATA;

__declspec(dllimport)
HANDLE
__stdcall
CreateMutexA(
    LPSECURITY_ATTRIBUTES lpMutexAttributes,
    BOOL bInitialOwner,
    LPCSTR lpName
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateMutexW(
    LPSECURITY_ATTRIBUTES lpMutexAttributes,
    BOOL bInitialOwner,
    LPCWSTR lpName
    );




#line 3898 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
OpenMutexA(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCSTR lpName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenMutexW(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCWSTR lpName
    );




#line 3920 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
CreateEventA(
    LPSECURITY_ATTRIBUTES lpEventAttributes,
    BOOL bManualReset,
    BOOL bInitialState,
    LPCSTR lpName
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateEventW(
    LPSECURITY_ATTRIBUTES lpEventAttributes,
    BOOL bManualReset,
    BOOL bInitialState,
    LPCWSTR lpName
    );




#line 3944 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
OpenEventA(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCSTR lpName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenEventW(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCWSTR lpName
    );




#line 3966 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
CreateSemaphoreA(
    LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
    LONG lInitialCount,
    LONG lMaximumCount,
    LPCSTR lpName
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateSemaphoreW(
    LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
    LONG lInitialCount,
    LONG lMaximumCount,
    LPCWSTR lpName
    );




#line 3990 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
OpenSemaphoreA(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCSTR lpName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenSemaphoreW(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCWSTR lpName
    );




#line 4012 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"








































































#line 4085 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
CreateFileMappingA(
    HANDLE hFile,
    LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
    DWORD flProtect,
    DWORD dwMaximumSizeHigh,
    DWORD dwMaximumSizeLow,
    LPCSTR lpName
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateFileMappingW(
    HANDLE hFile,
    LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
    DWORD flProtect,
    DWORD dwMaximumSizeHigh,
    DWORD dwMaximumSizeLow,
    LPCWSTR lpName
    );




#line 4113 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
OpenFileMappingA(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCSTR lpName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenFileMappingW(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    LPCWSTR lpName
    );




#line 4135 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetLogicalDriveStringsA(
    DWORD nBufferLength,
    LPSTR lpBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
GetLogicalDriveStringsW(
    DWORD nBufferLength,
    LPWSTR lpBuffer
    );




#line 4155 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
HMODULE
__stdcall
LoadLibraryA(
    LPCSTR lpLibFileName
    );
__declspec(dllimport)
HMODULE
__stdcall
LoadLibraryW(
    LPCWSTR lpLibFileName
    );




#line 4173 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
HMODULE
__stdcall
LoadLibraryExA(
    LPCSTR lpLibFileName,
    HANDLE hFile,
    DWORD dwFlags
    );
__declspec(dllimport)
HMODULE
__stdcall
LoadLibraryExW(
    LPCWSTR lpLibFileName,
    HANDLE hFile,
    DWORD dwFlags
    );




#line 4195 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"







__declspec(dllimport)
DWORD
__stdcall
GetModuleFileNameA(
    HMODULE hModule,
    LPSTR lpFilename,
    DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetModuleFileNameW(
    HMODULE hModule,
    LPWSTR lpFilename,
    DWORD nSize
    );




#line 4223 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
HMODULE
__stdcall
GetModuleHandleA(
    LPCSTR lpModuleName
    );
__declspec(dllimport)
HMODULE
__stdcall
GetModuleHandleW(
    LPCWSTR lpModuleName
    );




#line 4241 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CreateProcessA(
    LPCSTR lpApplicationName,
    LPSTR lpCommandLine,
    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    BOOL bInheritHandles,
    DWORD dwCreationFlags,
    LPVOID lpEnvironment,
    LPCSTR lpCurrentDirectory,
    LPSTARTUPINFOA lpStartupInfo,
    LPPROCESS_INFORMATION lpProcessInformation
    );
__declspec(dllimport)
BOOL
__stdcall
CreateProcessW(
    LPCWSTR lpApplicationName,
    LPWSTR lpCommandLine,
    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    BOOL bInheritHandles,
    DWORD dwCreationFlags,
    LPVOID lpEnvironment,
    LPCWSTR lpCurrentDirectory,
    LPSTARTUPINFOW lpStartupInfo,
    LPPROCESS_INFORMATION lpProcessInformation
    );




#line 4277 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetProcessShutdownParameters(
    DWORD dwLevel,
    DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessShutdownParameters(
    LPDWORD lpdwLevel,
    LPDWORD lpdwFlags
    );

__declspec(dllimport)
DWORD
__stdcall
GetProcessVersion(
    DWORD ProcessId
    );

__declspec(dllimport)
void
__stdcall
FatalAppExitA(
    UINT uAction,
    LPCSTR lpMessageText
    );
__declspec(dllimport)
void
__stdcall
FatalAppExitW(
    UINT uAction,
    LPCWSTR lpMessageText
    );




#line 4320 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
void
__stdcall
GetStartupInfoA(
    LPSTARTUPINFOA lpStartupInfo
    );
__declspec(dllimport)
void
__stdcall
GetStartupInfoW(
    LPSTARTUPINFOW lpStartupInfo
    );




#line 4338 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
LPSTR
__stdcall
GetCommandLineA(
    void
    );
__declspec(dllimport)
LPWSTR
__stdcall
GetCommandLineW(
    void
    );




#line 4356 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetEnvironmentVariableA(
    LPCSTR lpName,
    LPSTR lpBuffer,
    DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetEnvironmentVariableW(
    LPCWSTR lpName,
    LPWSTR lpBuffer,
    DWORD nSize
    );




#line 4378 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentVariableA(
    LPCSTR lpName,
    LPCSTR lpValue
    );
__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentVariableW(
    LPCWSTR lpName,
    LPCWSTR lpValue
    );




#line 4398 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
ExpandEnvironmentStringsA(
    LPCSTR lpSrc,
    LPSTR lpDst,
    DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
ExpandEnvironmentStringsW(
    LPCWSTR lpSrc,
    LPWSTR lpDst,
    DWORD nSize
    );




#line 4420 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
void
__stdcall
OutputDebugStringA(
    LPCSTR lpOutputString
    );
__declspec(dllimport)
void
__stdcall
OutputDebugStringW(
    LPCWSTR lpOutputString
    );




#line 4438 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
HRSRC
__stdcall
FindResourceA(
    HMODULE hModule,
    LPCSTR lpName,
    LPCSTR lpType
    );
__declspec(dllimport)
HRSRC
__stdcall
FindResourceW(
    HMODULE hModule,
    LPCWSTR lpName,
    LPCWSTR lpType
    );




#line 4460 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
HRSRC
__stdcall
FindResourceExA(
    HMODULE hModule,
    LPCSTR lpType,
    LPCSTR lpName,
    WORD    wLanguage
    );
__declspec(dllimport)
HRSRC
__stdcall
FindResourceExW(
    HMODULE hModule,
    LPCWSTR lpType,
    LPCWSTR lpName,
    WORD    wLanguage
    );




#line 4484 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"


typedef BOOL (__stdcall* ENUMRESTYPEPROC)(HMODULE hModule, LPTSTR lpType,
        LONG lParam);
typedef BOOL (__stdcall* ENUMRESNAMEPROC)(HMODULE hModule, LPCTSTR lpType,
        LPTSTR lpName, LONG lParam);
typedef BOOL (__stdcall* ENUMRESLANGPROC)(HMODULE hModule, LPCTSTR lpType,
        LPCTSTR lpName, WORD  wLanguage, LONG lParam);




#line 4497 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesA(
    HMODULE hModule,
    ENUMRESTYPEPROC lpEnumFunc,
    LONG lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesW(
    HMODULE hModule,
    ENUMRESTYPEPROC lpEnumFunc,
    LONG lParam
    );




#line 4519 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesA(
    HMODULE hModule,
    LPCSTR lpType,
    ENUMRESNAMEPROC lpEnumFunc,
    LONG lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesW(
    HMODULE hModule,
    LPCWSTR lpType,
    ENUMRESNAMEPROC lpEnumFunc,
    LONG lParam
    );




#line 4544 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesA(
    HMODULE hModule,
    LPCSTR lpType,
    LPCSTR lpName,
    ENUMRESLANGPROC lpEnumFunc,
    LONG lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesW(
    HMODULE hModule,
    LPCWSTR lpType,
    LPCWSTR lpName,
    ENUMRESLANGPROC lpEnumFunc,
    LONG lParam
    );




#line 4570 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
BeginUpdateResourceA(
    LPCSTR pFileName,
    BOOL bDeleteExistingResources
    );
__declspec(dllimport)
HANDLE
__stdcall
BeginUpdateResourceW(
    LPCWSTR pFileName,
    BOOL bDeleteExistingResources
    );




#line 4590 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
UpdateResourceA(
    HANDLE      hUpdate,
    LPCSTR     lpType,
    LPCSTR     lpName,
    WORD        wLanguage,
    LPVOID      lpData,
    DWORD       cbData
    );
__declspec(dllimport)
BOOL
__stdcall
UpdateResourceW(
    HANDLE      hUpdate,
    LPCWSTR     lpType,
    LPCWSTR     lpName,
    WORD        wLanguage,
    LPVOID      lpData,
    DWORD       cbData
    );




#line 4618 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
EndUpdateResourceA(
    HANDLE      hUpdate,
    BOOL        fDiscard
    );
__declspec(dllimport)
BOOL
__stdcall
EndUpdateResourceW(
    HANDLE      hUpdate,
    BOOL        fDiscard
    );




#line 4638 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomA(
    LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomW(
    LPCWSTR lpString
    );




#line 4656 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
ATOM
__stdcall
GlobalFindAtomA(
    LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
GlobalFindAtomW(
    LPCWSTR lpString
    );




#line 4674 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GlobalGetAtomNameA(
    ATOM nAtom,
    LPSTR lpBuffer,
    int nSize
    );
__declspec(dllimport)
UINT
__stdcall
GlobalGetAtomNameW(
    ATOM nAtom,
    LPWSTR lpBuffer,
    int nSize
    );




#line 4696 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
ATOM
__stdcall
AddAtomA(
    LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
AddAtomW(
    LPCWSTR lpString
    );




#line 4714 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
ATOM
__stdcall
FindAtomA(
    LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
FindAtomW(
    LPCWSTR lpString
    );




#line 4732 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GetAtomNameA(
    ATOM nAtom,
    LPSTR lpBuffer,
    int nSize
    );
__declspec(dllimport)
UINT
__stdcall
GetAtomNameW(
    ATOM nAtom,
    LPWSTR lpBuffer,
    int nSize
    );




#line 4754 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GetProfileIntA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    INT nDefault
    );
__declspec(dllimport)
UINT
__stdcall
GetProfileIntW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    INT nDefault
    );




#line 4776 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetProfileStringA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    LPCSTR lpDefault,
    LPSTR lpReturnedString,
    DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetProfileStringW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    LPCWSTR lpDefault,
    LPWSTR lpReturnedString,
    DWORD nSize
    );




#line 4802 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WriteProfileStringA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    LPCSTR lpString
    );
__declspec(dllimport)
BOOL
__stdcall
WriteProfileStringW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    LPCWSTR lpString
    );




#line 4824 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetProfileSectionA(
    LPCSTR lpAppName,
    LPSTR lpReturnedString,
    DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetProfileSectionW(
    LPCWSTR lpAppName,
    LPWSTR lpReturnedString,
    DWORD nSize
    );




#line 4846 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WriteProfileSectionA(
    LPCSTR lpAppName,
    LPCSTR lpString
    );
__declspec(dllimport)
BOOL
__stdcall
WriteProfileSectionW(
    LPCWSTR lpAppName,
    LPCWSTR lpString
    );




#line 4866 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GetPrivateProfileIntA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    INT nDefault,
    LPCSTR lpFileName
    );
__declspec(dllimport)
UINT
__stdcall
GetPrivateProfileIntW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    INT nDefault,
    LPCWSTR lpFileName
    );




#line 4890 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileStringA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    LPCSTR lpDefault,
    LPSTR lpReturnedString,
    DWORD nSize,
    LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileStringW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    LPCWSTR lpDefault,
    LPWSTR lpReturnedString,
    DWORD nSize,
    LPCWSTR lpFileName
    );




#line 4918 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStringA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    LPCSTR lpString,
    LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStringW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    LPCWSTR lpString,
    LPCWSTR lpFileName
    );




#line 4942 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionA(
    LPCSTR lpAppName,
    LPSTR lpReturnedString,
    DWORD nSize,
    LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionW(
    LPCWSTR lpAppName,
    LPWSTR lpReturnedString,
    DWORD nSize,
    LPCWSTR lpFileName
    );




#line 4966 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileSectionA(
    LPCSTR lpAppName,
    LPCSTR lpString,
    LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileSectionW(
    LPCWSTR lpAppName,
    LPCWSTR lpString,
    LPCWSTR lpFileName
    );




#line 4988 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"


__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionNamesA(
    LPSTR lpszReturnBuffer,
    DWORD nSize,
    LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionNamesW(
    LPWSTR lpszReturnBuffer,
    DWORD nSize,
    LPCWSTR lpFileName
    );




#line 5011 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetPrivateProfileStructA(
    LPCSTR lpszSection,
    LPCSTR lpszKey,
    LPVOID   lpStruct,
    UINT     uSizeStruct,
    LPCSTR szFile
    );
__declspec(dllimport)
BOOL
__stdcall
GetPrivateProfileStructW(
    LPCWSTR lpszSection,
    LPCWSTR lpszKey,
    LPVOID   lpStruct,
    UINT     uSizeStruct,
    LPCWSTR szFile
    );




#line 5037 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStructA(
    LPCSTR lpszSection,
    LPCSTR lpszKey,
    LPVOID   lpStruct,
    UINT     uSizeStruct,
    LPCSTR szFile
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStructW(
    LPCWSTR lpszSection,
    LPCWSTR lpszKey,
    LPVOID   lpStruct,
    UINT     uSizeStruct,
    LPCWSTR szFile
    );




#line 5063 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"


__declspec(dllimport)
UINT
__stdcall
GetDriveTypeA(
    LPCSTR lpRootPathName
    );
__declspec(dllimport)
UINT
__stdcall
GetDriveTypeW(
    LPCWSTR lpRootPathName
    );




#line 5082 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GetSystemDirectoryA(
    LPSTR lpBuffer,
    UINT uSize
    );
__declspec(dllimport)
UINT
__stdcall
GetSystemDirectoryW(
    LPWSTR lpBuffer,
    UINT uSize
    );




#line 5102 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetTempPathA(
    DWORD nBufferLength,
    LPSTR lpBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
GetTempPathW(
    DWORD nBufferLength,
    LPWSTR lpBuffer
    );




#line 5122 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GetTempFileNameA(
    LPCSTR lpPathName,
    LPCSTR lpPrefixString,
    UINT uUnique,
    LPSTR lpTempFileName
    );
__declspec(dllimport)
UINT
__stdcall
GetTempFileNameW(
    LPCWSTR lpPathName,
    LPCWSTR lpPrefixString,
    UINT uUnique,
    LPWSTR lpTempFileName
    );




#line 5146 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GetWindowsDirectoryA(
    LPSTR lpBuffer,
    UINT uSize
    );
__declspec(dllimport)
UINT
__stdcall
GetWindowsDirectoryW(
    LPWSTR lpBuffer,
    UINT uSize
    );




#line 5166 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetCurrentDirectoryA(
    LPCSTR lpPathName
    );
__declspec(dllimport)
BOOL
__stdcall
SetCurrentDirectoryW(
    LPCWSTR lpPathName
    );




#line 5184 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetCurrentDirectoryA(
    DWORD nBufferLength,
    LPSTR lpBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
GetCurrentDirectoryW(
    DWORD nBufferLength,
    LPWSTR lpBuffer
    );




#line 5204 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceA(
    LPCSTR lpRootPathName,
    LPDWORD lpSectorsPerCluster,
    LPDWORD lpBytesPerSector,
    LPDWORD lpNumberOfFreeClusters,
    LPDWORD lpTotalNumberOfClusters
    );
__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceW(
    LPCWSTR lpRootPathName,
    LPDWORD lpSectorsPerCluster,
    LPDWORD lpBytesPerSector,
    LPDWORD lpNumberOfFreeClusters,
    LPDWORD lpTotalNumberOfClusters
    );




#line 5230 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceExA(
    LPCSTR lpDirectoryName,
    PULARGE_INTEGER lpFreeBytesAvailableToCaller,
    PULARGE_INTEGER lpTotalNumberOfBytes,
    PULARGE_INTEGER lpTotalNumberOfFreeBytes
    );
__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceExW(
    LPCWSTR lpDirectoryName,
    PULARGE_INTEGER lpFreeBytesAvailableToCaller,
    PULARGE_INTEGER lpTotalNumberOfBytes,
    PULARGE_INTEGER lpTotalNumberOfFreeBytes
    );




#line 5254 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryA(
    LPCSTR lpPathName,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryW(
    LPCWSTR lpPathName,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );




#line 5274 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryExA(
    LPCSTR lpTemplateDirectory,
    LPCSTR lpNewDirectory,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryExW(
    LPCWSTR lpTemplateDirectory,
    LPCWSTR lpNewDirectory,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );




#line 5296 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryA(
    LPCSTR lpPathName
    );
__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryW(
    LPCWSTR lpPathName
    );




#line 5314 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetFullPathNameA(
    LPCSTR lpFileName,
    DWORD nBufferLength,
    LPSTR lpBuffer,
    LPSTR *lpFilePart
    );
__declspec(dllimport)
DWORD
__stdcall
GetFullPathNameW(
    LPCWSTR lpFileName,
    DWORD nBufferLength,
    LPWSTR lpBuffer,
    LPWSTR *lpFilePart
    );




#line 5338 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"







__declspec(dllimport)
BOOL
__stdcall
DefineDosDeviceA(
    DWORD dwFlags,
    LPCSTR lpDeviceName,
    LPCSTR lpTargetPath
    );
__declspec(dllimport)
BOOL
__stdcall
DefineDosDeviceW(
    DWORD dwFlags,
    LPCWSTR lpDeviceName,
    LPCWSTR lpTargetPath
    );




#line 5366 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
QueryDosDeviceA(
    LPCSTR lpDeviceName,
    LPSTR lpTargetPath,
    DWORD ucchMax
    );
__declspec(dllimport)
DWORD
__stdcall
QueryDosDeviceW(
    LPCWSTR lpDeviceName,
    LPWSTR lpTargetPath,
    DWORD ucchMax
    );




#line 5388 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"



__declspec(dllimport)
HANDLE
__stdcall
CreateFileA(
    LPCSTR lpFileName,
    DWORD dwDesiredAccess,
    DWORD dwShareMode,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    DWORD dwCreationDisposition,
    DWORD dwFlagsAndAttributes,
    HANDLE hTemplateFile
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateFileW(
    LPCWSTR lpFileName,
    DWORD dwDesiredAccess,
    DWORD dwShareMode,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    DWORD dwCreationDisposition,
    DWORD dwFlagsAndAttributes,
    HANDLE hTemplateFile
    );




#line 5420 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesA(
    LPCSTR lpFileName,
    DWORD dwFileAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesW(
    LPCWSTR lpFileName,
    DWORD dwFileAttributes
    );




#line 5440 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetFileAttributesA(
    LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetFileAttributesW(
    LPCWSTR lpFileName
    );




#line 5458 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

typedef enum _GET_FILEEX_INFO_LEVELS {
    GetFileExInfoStandard,
    GetFileExMaxInfoLevel
} GET_FILEEX_INFO_LEVELS;

__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesExA(
    LPCSTR lpFileName,
    GET_FILEEX_INFO_LEVELS fInfoLevelId,
    LPVOID lpFileInformation
    );
__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesExW(
    LPCWSTR lpFileName,
    GET_FILEEX_INFO_LEVELS fInfoLevelId,
    LPVOID lpFileInformation
    );




#line 5485 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeA(
    LPCSTR lpFileName,
    LPDWORD lpFileSizeHigh
    );
__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeW(
    LPCWSTR lpFileName,
    LPDWORD lpFileSizeHigh
    );




#line 5505 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
DeleteFileA(
    LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
DeleteFileW(
    LPCWSTR lpFileName
    );




#line 5523 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"











































#line 5567 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileA(
    LPCSTR lpFileName,
    LPWIN32_FIND_DATAA lpFindFileData
    );
__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileW(
    LPCWSTR lpFileName,
    LPWIN32_FIND_DATAW lpFindFileData
    );




#line 5587 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
FindNextFileA(
    HANDLE hFindFile,
    LPWIN32_FIND_DATAA lpFindFileData
    );
__declspec(dllimport)
BOOL
__stdcall
FindNextFileW(
    HANDLE hFindFile,
    LPWIN32_FIND_DATAW lpFindFileData
    );




#line 5607 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
SearchPathA(
    LPCSTR lpPath,
    LPCSTR lpFileName,
    LPCSTR lpExtension,
    DWORD nBufferLength,
    LPSTR lpBuffer,
    LPSTR *lpFilePart
    );
__declspec(dllimport)
DWORD
__stdcall
SearchPathW(
    LPCWSTR lpPath,
    LPCWSTR lpFileName,
    LPCWSTR lpExtension,
    DWORD nBufferLength,
    LPWSTR lpBuffer,
    LPWSTR *lpFilePart
    );




#line 5635 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CopyFileA(
    LPCSTR lpExistingFileName,
    LPCSTR lpNewFileName,
    BOOL bFailIfExists
    );
__declspec(dllimport)
BOOL
__stdcall
CopyFileW(
    LPCWSTR lpExistingFileName,
    LPCWSTR lpNewFileName,
    BOOL bFailIfExists
    );




#line 5657 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"











































#line 5701 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
MoveFileA(
    LPCSTR lpExistingFileName,
    LPCSTR lpNewFileName
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileW(
    LPCWSTR lpExistingFileName,
    LPCWSTR lpNewFileName
    );




#line 5721 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
MoveFileExA(
    LPCSTR lpExistingFileName,
    LPCSTR lpNewFileName,
    DWORD dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileExW(
    LPCWSTR lpExistingFileName,
    LPCWSTR lpNewFileName,
    DWORD dwFlags
    );




#line 5743 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"



























#line 5771 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"








#line 5780 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"





























#line 5810 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"


__declspec(dllimport)
HANDLE
__stdcall
CreateNamedPipeA(
    LPCSTR lpName,
    DWORD dwOpenMode,
    DWORD dwPipeMode,
    DWORD nMaxInstances,
    DWORD nOutBufferSize,
    DWORD nInBufferSize,
    DWORD nDefaultTimeOut,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateNamedPipeW(
    LPCWSTR lpName,
    DWORD dwOpenMode,
    DWORD dwPipeMode,
    DWORD nMaxInstances,
    DWORD nOutBufferSize,
    DWORD nInBufferSize,
    DWORD nDefaultTimeOut,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );




#line 5843 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeHandleStateA(
    HANDLE hNamedPipe,
    LPDWORD lpState,
    LPDWORD lpCurInstances,
    LPDWORD lpMaxCollectionCount,
    LPDWORD lpCollectDataTimeout,
    LPSTR lpUserName,
    DWORD nMaxUserNameSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeHandleStateW(
    HANDLE hNamedPipe,
    LPDWORD lpState,
    LPDWORD lpCurInstances,
    LPDWORD lpMaxCollectionCount,
    LPDWORD lpCollectDataTimeout,
    LPWSTR lpUserName,
    DWORD nMaxUserNameSize
    );




#line 5873 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CallNamedPipeA(
    LPCSTR lpNamedPipeName,
    LPVOID lpInBuffer,
    DWORD nInBufferSize,
    LPVOID lpOutBuffer,
    DWORD nOutBufferSize,
    LPDWORD lpBytesRead,
    DWORD nTimeOut
    );
__declspec(dllimport)
BOOL
__stdcall
CallNamedPipeW(
    LPCWSTR lpNamedPipeName,
    LPVOID lpInBuffer,
    DWORD nInBufferSize,
    LPVOID lpOutBuffer,
    DWORD nOutBufferSize,
    LPDWORD lpBytesRead,
    DWORD nTimeOut
    );




#line 5903 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WaitNamedPipeA(
    LPCSTR lpNamedPipeName,
    DWORD nTimeOut
    );
__declspec(dllimport)
BOOL
__stdcall
WaitNamedPipeW(
    LPCWSTR lpNamedPipeName,
    DWORD nTimeOut
    );




#line 5923 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetVolumeLabelA(
    LPCSTR lpRootPathName,
    LPCSTR lpVolumeName
    );
__declspec(dllimport)
BOOL
__stdcall
SetVolumeLabelW(
    LPCWSTR lpRootPathName,
    LPCWSTR lpVolumeName
    );




#line 5943 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
void
__stdcall
SetFileApisToOEM( void );

__declspec(dllimport)
void
__stdcall
SetFileApisToANSI( void );

__declspec(dllimport)
BOOL
__stdcall
AreFileApisANSI( void );

__declspec(dllimport)
BOOL
__stdcall
GetVolumeInformationA(
    LPCSTR lpRootPathName,
    LPSTR lpVolumeNameBuffer,
    DWORD nVolumeNameSize,
    LPDWORD lpVolumeSerialNumber,
    LPDWORD lpMaximumComponentLength,
    LPDWORD lpFileSystemFlags,
    LPSTR lpFileSystemNameBuffer,
    DWORD nFileSystemNameSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetVolumeInformationW(
    LPCWSTR lpRootPathName,
    LPWSTR lpVolumeNameBuffer,
    DWORD nVolumeNameSize,
    LPDWORD lpVolumeSerialNumber,
    LPDWORD lpMaximumComponentLength,
    LPDWORD lpFileSystemFlags,
    LPWSTR lpFileSystemNameBuffer,
    DWORD nFileSystemNameSize
    );




#line 5990 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CancelIo(
    HANDLE hFile
    );





__declspec(dllimport)
BOOL
__stdcall
ClearEventLogA (
    HANDLE hEventLog,
    LPCSTR lpBackupFileName
    );
__declspec(dllimport)
BOOL
__stdcall
ClearEventLogW (
    HANDLE hEventLog,
    LPCWSTR lpBackupFileName
    );




#line 6021 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
BackupEventLogA (
    HANDLE hEventLog,
    LPCSTR lpBackupFileName
    );
__declspec(dllimport)
BOOL
__stdcall
BackupEventLogW (
    HANDLE hEventLog,
    LPCWSTR lpBackupFileName
    );




#line 6041 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CloseEventLog (
    HANDLE hEventLog
    );

__declspec(dllimport)
BOOL
__stdcall
DeregisterEventSource (
    HANDLE hEventLog
    );

__declspec(dllimport)
BOOL
__stdcall
NotifyChangeEventLog(
    HANDLE  hEventLog,
    HANDLE  hEvent
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumberOfEventLogRecords (
    HANDLE hEventLog,
    PDWORD NumberOfRecords
    );

__declspec(dllimport)
BOOL
__stdcall
GetOldestEventLogRecord (
    HANDLE hEventLog,
    PDWORD OldestRecord
    );

__declspec(dllimport)
HANDLE
__stdcall
OpenEventLogA (
    LPCSTR lpUNCServerName,
    LPCSTR lpSourceName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenEventLogW (
    LPCWSTR lpUNCServerName,
    LPCWSTR lpSourceName
    );




#line 6099 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
RegisterEventSourceA (
    LPCSTR lpUNCServerName,
    LPCSTR lpSourceName
    );
__declspec(dllimport)
HANDLE
__stdcall
RegisterEventSourceW (
    LPCWSTR lpUNCServerName,
    LPCWSTR lpSourceName
    );




#line 6119 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
OpenBackupEventLogA (
    LPCSTR lpUNCServerName,
    LPCSTR lpFileName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenBackupEventLogW (
    LPCWSTR lpUNCServerName,
    LPCWSTR lpFileName
    );




#line 6139 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ReadEventLogA (
     HANDLE     hEventLog,
     DWORD      dwReadFlags,
     DWORD      dwRecordOffset,
     LPVOID     lpBuffer,
     DWORD      nNumberOfBytesToRead,
     DWORD      *pnBytesRead,
     DWORD      *pnMinNumberOfBytesNeeded
    );
__declspec(dllimport)
BOOL
__stdcall
ReadEventLogW (
     HANDLE     hEventLog,
     DWORD      dwReadFlags,
     DWORD      dwRecordOffset,
     LPVOID     lpBuffer,
     DWORD      nNumberOfBytesToRead,
     DWORD      *pnBytesRead,
     DWORD      *pnMinNumberOfBytesNeeded
    );




#line 6169 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ReportEventA (
     HANDLE     hEventLog,
     WORD       wType,
     WORD       wCategory,
     DWORD      dwEventID,
     PSID       lpUserSid,
     WORD       wNumStrings,
     DWORD      dwDataSize,
     LPCSTR   *lpStrings,
     LPVOID     lpRawData
    );
__declspec(dllimport)
BOOL
__stdcall
ReportEventW (
     HANDLE     hEventLog,
     WORD       wType,
     WORD       wCategory,
     DWORD      dwEventID,
     PSID       lpUserSid,
     WORD       wNumStrings,
     DWORD      dwDataSize,
     LPCWSTR   *lpStrings,
     LPVOID     lpRawData
    );




#line 6203 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"







__declspec(dllimport)
BOOL
__stdcall
DuplicateToken(
    HANDLE ExistingTokenHandle,
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
    PHANDLE DuplicateTokenHandle
    );

__declspec(dllimport)
BOOL
__stdcall
GetKernelObjectSecurity (
    HANDLE Handle,
    SECURITY_INFORMATION RequestedInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    DWORD nLength,
    LPDWORD lpnLengthNeeded
    );

__declspec(dllimport)
BOOL
__stdcall
ImpersonateNamedPipeClient(
    HANDLE hNamedPipe
    );

__declspec(dllimport)
BOOL
__stdcall
ImpersonateSelf(
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
    );


__declspec(dllimport)
BOOL
__stdcall
RevertToSelf (
    void
    );

__declspec(dllimport)
BOOL
__stdcall
SetThreadToken (
    PHANDLE Thread,
    HANDLE Token
    );

__declspec(dllimport)
BOOL
__stdcall
AccessCheck (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    HANDLE ClientToken,
    DWORD DesiredAccess,
    PGENERIC_MAPPING GenericMapping,
    PPRIVILEGE_SET PrivilegeSet,
    LPDWORD PrivilegeSetLength,
    LPDWORD GrantedAccess,
    LPBOOL AccessStatus
    );



































#line 6309 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
OpenProcessToken (
    HANDLE ProcessHandle,
    DWORD DesiredAccess,
    PHANDLE TokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
OpenThreadToken (
    HANDLE ThreadHandle,
    DWORD DesiredAccess,
    BOOL OpenAsSelf,
    PHANDLE TokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
GetTokenInformation (
    HANDLE TokenHandle,
    TOKEN_INFORMATION_CLASS TokenInformationClass,
    LPVOID TokenInformation,
    DWORD TokenInformationLength,
    PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
SetTokenInformation (
    HANDLE TokenHandle,
    TOKEN_INFORMATION_CLASS TokenInformationClass,
    LPVOID TokenInformation,
    DWORD TokenInformationLength
    );


__declspec(dllimport)
BOOL
__stdcall
AdjustTokenPrivileges (
    HANDLE TokenHandle,
    BOOL DisableAllPrivileges,
    PTOKEN_PRIVILEGES NewState,
    DWORD BufferLength,
    PTOKEN_PRIVILEGES PreviousState,
    PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
AdjustTokenGroups (
    HANDLE TokenHandle,
    BOOL ResetToDefault,
    PTOKEN_GROUPS NewState,
    DWORD BufferLength,
    PTOKEN_GROUPS PreviousState,
    PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
PrivilegeCheck (
    HANDLE ClientToken,
    PPRIVILEGE_SET RequiredPrivileges,
    LPBOOL pfResult
    );


__declspec(dllimport)
BOOL
__stdcall
AccessCheckAndAuditAlarmA (
    LPCSTR SubsystemName,
    LPVOID HandleId,
    LPSTR ObjectTypeName,
    LPSTR ObjectName,
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    DWORD DesiredAccess,
    PGENERIC_MAPPING GenericMapping,
    BOOL ObjectCreation,
    LPDWORD GrantedAccess,
    LPBOOL AccessStatus,
    LPBOOL pfGenerateOnClose
    );
__declspec(dllimport)
BOOL
__stdcall
AccessCheckAndAuditAlarmW (
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    LPWSTR ObjectTypeName,
    LPWSTR ObjectName,
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    DWORD DesiredAccess,
    PGENERIC_MAPPING GenericMapping,
    BOOL ObjectCreation,
    LPDWORD GrantedAccess,
    LPBOOL AccessStatus,
    LPBOOL pfGenerateOnClose
    );




#line 6428 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"



































































































#line 6528 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
ObjectOpenAuditAlarmA (
    LPCSTR SubsystemName,
    LPVOID HandleId,
    LPSTR ObjectTypeName,
    LPSTR ObjectName,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    HANDLE ClientToken,
    DWORD DesiredAccess,
    DWORD GrantedAccess,
    PPRIVILEGE_SET Privileges,
    BOOL ObjectCreation,
    BOOL AccessGranted,
    LPBOOL GenerateOnClose
    );
__declspec(dllimport)
BOOL
__stdcall
ObjectOpenAuditAlarmW (
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    LPWSTR ObjectTypeName,
    LPWSTR ObjectName,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    HANDLE ClientToken,
    DWORD DesiredAccess,
    DWORD GrantedAccess,
    PPRIVILEGE_SET Privileges,
    BOOL ObjectCreation,
    BOOL AccessGranted,
    LPBOOL GenerateOnClose
    );




#line 6569 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
ObjectPrivilegeAuditAlarmA (
    LPCSTR SubsystemName,
    LPVOID HandleId,
    HANDLE ClientToken,
    DWORD DesiredAccess,
    PPRIVILEGE_SET Privileges,
    BOOL AccessGranted
    );
__declspec(dllimport)
BOOL
__stdcall
ObjectPrivilegeAuditAlarmW (
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    HANDLE ClientToken,
    DWORD DesiredAccess,
    PPRIVILEGE_SET Privileges,
    BOOL AccessGranted
    );




#line 6598 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
ObjectCloseAuditAlarmA (
    LPCSTR SubsystemName,
    LPVOID HandleId,
    BOOL GenerateOnClose
    );
__declspec(dllimport)
BOOL
__stdcall
ObjectCloseAuditAlarmW (
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    BOOL GenerateOnClose
    );




#line 6621 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
ObjectDeleteAuditAlarmA (
    LPCSTR SubsystemName,
    LPVOID HandleId,
    BOOL GenerateOnClose
    );
__declspec(dllimport)
BOOL
__stdcall
ObjectDeleteAuditAlarmW (
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    BOOL GenerateOnClose
    );




#line 6644 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
PrivilegedServiceAuditAlarmA (
    LPCSTR SubsystemName,
    LPCSTR ServiceName,
    HANDLE ClientToken,
    PPRIVILEGE_SET Privileges,
    BOOL AccessGranted
    );
__declspec(dllimport)
BOOL
__stdcall
PrivilegedServiceAuditAlarmW (
    LPCWSTR SubsystemName,
    LPCWSTR ServiceName,
    HANDLE ClientToken,
    PPRIVILEGE_SET Privileges,
    BOOL AccessGranted
    );




#line 6671 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
IsValidSid (
    PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
EqualSid (
    PSID pSid1,
    PSID pSid2
    );


__declspec(dllimport)
BOOL
__stdcall
EqualPrefixSid (
    PSID pSid1,
    PSID pSid2
    );


__declspec(dllimport)
DWORD
__stdcall
GetSidLengthRequired (
    UCHAR nSubAuthorityCount
    );


__declspec(dllimport)
BOOL
__stdcall
AllocateAndInitializeSid (
    PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
    BYTE nSubAuthorityCount,
    DWORD nSubAuthority0,
    DWORD nSubAuthority1,
    DWORD nSubAuthority2,
    DWORD nSubAuthority3,
    DWORD nSubAuthority4,
    DWORD nSubAuthority5,
    DWORD nSubAuthority6,
    DWORD nSubAuthority7,
    PSID *pSid
    );

__declspec(dllimport)
PVOID
__stdcall
FreeSid(
    PSID pSid
    );

__declspec(dllimport)
BOOL
__stdcall
InitializeSid (
    PSID Sid,
    PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
    BYTE nSubAuthorityCount
    );


__declspec(dllimport)
PSID_IDENTIFIER_AUTHORITY
__stdcall
GetSidIdentifierAuthority (
    PSID pSid
    );


__declspec(dllimport)
PDWORD
__stdcall
GetSidSubAuthority (
    PSID pSid,
    DWORD nSubAuthority
    );


__declspec(dllimport)
PUCHAR
__stdcall
GetSidSubAuthorityCount (
    PSID pSid
    );


__declspec(dllimport)
DWORD
__stdcall
GetLengthSid (
    PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
CopySid (
    DWORD nDestinationSidLength,
    PSID pDestinationSid,
    PSID pSourceSid
    );


__declspec(dllimport)
BOOL
__stdcall
AreAllAccessesGranted (
    DWORD GrantedAccess,
    DWORD DesiredAccess
    );


__declspec(dllimport)
BOOL
__stdcall
AreAnyAccessesGranted (
    DWORD GrantedAccess,
    DWORD DesiredAccess
    );


__declspec(dllimport)
void
__stdcall
MapGenericMask (
    PDWORD AccessMask,
    PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
IsValidAcl (
    PACL pAcl
    );


__declspec(dllimport)
BOOL
__stdcall
InitializeAcl (
    PACL pAcl,
    DWORD nAclLength,
    DWORD dwAclRevision
    );


__declspec(dllimport)
BOOL
__stdcall
GetAclInformation (
    PACL pAcl,
    LPVOID pAclInformation,
    DWORD nAclInformationLength,
    ACL_INFORMATION_CLASS dwAclInformationClass
    );


__declspec(dllimport)
BOOL
__stdcall
SetAclInformation (
    PACL pAcl,
    LPVOID pAclInformation,
    DWORD nAclInformationLength,
    ACL_INFORMATION_CLASS dwAclInformationClass
    );


__declspec(dllimport)
BOOL
__stdcall
AddAce (
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD dwStartingAceIndex,
    LPVOID pAceList,
    DWORD nAceListLength
    );


__declspec(dllimport)
BOOL
__stdcall
DeleteAce (
    PACL pAcl,
    DWORD dwAceIndex
    );


__declspec(dllimport)
BOOL
__stdcall
GetAce (
    PACL pAcl,
    DWORD dwAceIndex,
    LPVOID *pAce
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessAllowedAce (
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD AccessMask,
    PSID pSid
    );












#line 6904 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
AddAccessDeniedAce (
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD AccessMask,
    PSID pSid
    );












#line 6928 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
AddAuditAccessAce(
    PACL pAcl,
    DWORD dwAceRevision,
    DWORD dwAccessMask,
    PSID pSid,
    BOOL bAuditSuccess,
    BOOL bAuditFailure
    );























































#line 6996 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
FindFirstFreeAce (
    PACL pAcl,
    LPVOID *pAce
    );


__declspec(dllimport)
BOOL
__stdcall
InitializeSecurityDescriptor (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    DWORD dwRevision
    );


__declspec(dllimport)
BOOL
__stdcall
IsValidSecurityDescriptor (
    PSECURITY_DESCRIPTOR pSecurityDescriptor
    );


__declspec(dllimport)
DWORD
__stdcall
GetSecurityDescriptorLength (
    PSECURITY_DESCRIPTOR pSecurityDescriptor
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorControl (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    PSECURITY_DESCRIPTOR_CONTROL pControl,
    LPDWORD lpdwRevision
    );










#line 7050 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorDacl (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    BOOL bDaclPresent,
    PACL pDacl,
    BOOL bDaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorDacl (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    LPBOOL lpbDaclPresent,
    PACL *pDacl,
    LPBOOL lpbDaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorSacl (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    BOOL bSaclPresent,
    PACL pSacl,
    BOOL bSaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorSacl (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    LPBOOL lpbSaclPresent,
    PACL *pSacl,
    LPBOOL lpbSaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorOwner (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    PSID pOwner,
    BOOL bOwnerDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorOwner (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    PSID *pOwner,
    LPBOOL lpbOwnerDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorGroup (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    PSID pGroup,
    BOOL bGroupDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorGroup (
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    PSID *pGroup,
    LPBOOL lpbGroupDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
CreatePrivateObjectSecurity (
    PSECURITY_DESCRIPTOR ParentDescriptor,
    PSECURITY_DESCRIPTOR CreatorDescriptor,
    PSECURITY_DESCRIPTOR * NewDescriptor,
    BOOL IsDirectoryObject,
    HANDLE Token,
    PGENERIC_MAPPING GenericMapping
    );




























#line 7175 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetPrivateObjectSecurity (
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR ModificationDescriptor,
    PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor,
    PGENERIC_MAPPING GenericMapping,
    HANDLE Token
    );













#line 7200 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetPrivateObjectSecurity (
    PSECURITY_DESCRIPTOR ObjectDescriptor,
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR ResultantDescriptor,
    DWORD DescriptorLength,
    PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
DestroyPrivateObjectSecurity (
    PSECURITY_DESCRIPTOR * ObjectDescriptor
    );


__declspec(dllimport)
BOOL
__stdcall
MakeSelfRelativeSD (
    PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
    PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
    LPDWORD lpdwBufferLength
    );


__declspec(dllimport)
BOOL
__stdcall
MakeAbsoluteSD (
    PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
    PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
    LPDWORD lpdwAbsoluteSecurityDescriptorSize,
    PACL pDacl,
    LPDWORD lpdwDaclSize,
    PACL pSacl,
    LPDWORD lpdwSaclSize,
    PSID pOwner,
    LPDWORD lpdwOwnerSize,
    PSID pPrimaryGroup,
    LPDWORD lpdwPrimaryGroupSize
    );


__declspec(dllimport)
BOOL
__stdcall
SetFileSecurityA (
    LPCSTR lpFileName,
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor
    );
__declspec(dllimport)
BOOL
__stdcall
SetFileSecurityW (
    LPCWSTR lpFileName,
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor
    );




#line 7270 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
GetFileSecurityA (
    LPCSTR lpFileName,
    SECURITY_INFORMATION RequestedInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    DWORD nLength,
    LPDWORD lpnLengthNeeded
    );
__declspec(dllimport)
BOOL
__stdcall
GetFileSecurityW (
    LPCWSTR lpFileName,
    SECURITY_INFORMATION RequestedInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    DWORD nLength,
    LPDWORD lpnLengthNeeded
    );




#line 7297 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
SetKernelObjectSecurity (
    HANDLE Handle,
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR SecurityDescriptor
    );



__declspec(dllimport)
HANDLE
__stdcall
FindFirstChangeNotificationA(
    LPCSTR lpPathName,
    BOOL bWatchSubtree,
    DWORD dwNotifyFilter
    );
__declspec(dllimport)
HANDLE
__stdcall
FindFirstChangeNotificationW(
    LPCWSTR lpPathName,
    BOOL bWatchSubtree,
    DWORD dwNotifyFilter
    );




#line 7331 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
FindNextChangeNotification(
    HANDLE hChangeHandle
    );

__declspec(dllimport)
BOOL
__stdcall
FindCloseChangeNotification(
    HANDLE hChangeHandle
    );















#line 7361 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
VirtualLock(
    LPVOID lpAddress,
    DWORD dwSize
    );

__declspec(dllimport)
BOOL
__stdcall
VirtualUnlock(
    LPVOID lpAddress,
    DWORD dwSize
    );

__declspec(dllimport)
LPVOID
__stdcall
MapViewOfFileEx(
    HANDLE hFileMappingObject,
    DWORD dwDesiredAccess,
    DWORD dwFileOffsetHigh,
    DWORD dwFileOffsetLow,
    DWORD dwNumberOfBytesToMap,
    LPVOID lpBaseAddress
    );

__declspec(dllimport)
BOOL
__stdcall
SetPriorityClass(
    HANDLE hProcess,
    DWORD dwPriorityClass
    );

__declspec(dllimport)
DWORD
__stdcall
GetPriorityClass(
    HANDLE hProcess
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadReadPtr(
    const void *lp,
    UINT ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadWritePtr(
    LPVOID lp,
    UINT ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadHugeReadPtr(
    const void *lp,
    UINT ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadHugeWritePtr(
    LPVOID lp,
    UINT ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadCodePtr(
    FARPROC lpfn
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadStringPtrA(
    LPCSTR lpsz,
    UINT ucchMax
    );
__declspec(dllimport)
BOOL
__stdcall
IsBadStringPtrW(
    LPCWSTR lpsz,
    UINT ucchMax
    );




#line 7463 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
LookupAccountSidA(
    LPCSTR lpSystemName,
    PSID Sid,
    LPSTR Name,
    LPDWORD cbName,
    LPSTR ReferencedDomainName,
    LPDWORD cbReferencedDomainName,
    PSID_NAME_USE peUse
    );
__declspec(dllimport)
BOOL
__stdcall
LookupAccountSidW(
    LPCWSTR lpSystemName,
    PSID Sid,
    LPWSTR Name,
    LPDWORD cbName,
    LPWSTR ReferencedDomainName,
    LPDWORD cbReferencedDomainName,
    PSID_NAME_USE peUse
    );




#line 7493 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
LookupAccountNameA(
    LPCSTR lpSystemName,
    LPCSTR lpAccountName,
    PSID Sid,
    LPDWORD cbSid,
    LPSTR ReferencedDomainName,
    LPDWORD cbReferencedDomainName,
    PSID_NAME_USE peUse
    );
__declspec(dllimport)
BOOL
__stdcall
LookupAccountNameW(
    LPCWSTR lpSystemName,
    LPCWSTR lpAccountName,
    PSID Sid,
    LPDWORD cbSid,
    LPWSTR ReferencedDomainName,
    LPDWORD cbReferencedDomainName,
    PSID_NAME_USE peUse
    );




#line 7523 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeValueA(
    LPCSTR lpSystemName,
    LPCSTR lpName,
    PLUID   lpLuid
    );
__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeValueW(
    LPCWSTR lpSystemName,
    LPCWSTR lpName,
    PLUID   lpLuid
    );




#line 7545 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeNameA(
    LPCSTR lpSystemName,
    PLUID   lpLuid,
    LPSTR lpName,
    LPDWORD cbName
    );
__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeNameW(
    LPCWSTR lpSystemName,
    PLUID   lpLuid,
    LPWSTR lpName,
    LPDWORD cbName
    );




#line 7569 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeDisplayNameA(
    LPCSTR lpSystemName,
    LPCSTR lpName,
    LPSTR lpDisplayName,
    LPDWORD cbDisplayName,
    LPDWORD lpLanguageId
    );
__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeDisplayNameW(
    LPCWSTR lpSystemName,
    LPCWSTR lpName,
    LPWSTR lpDisplayName,
    LPDWORD cbDisplayName,
    LPDWORD lpLanguageId
    );




#line 7595 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
AllocateLocallyUniqueId(
    PLUID Luid
    );

__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBA(
    LPCSTR lpDef,
    LPDCB lpDCB
    );
__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBW(
    LPCWSTR lpDef,
    LPDCB lpDCB
    );




#line 7622 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBAndTimeoutsA(
    LPCSTR lpDef,
    LPDCB lpDCB,
    LPCOMMTIMEOUTS lpCommTimeouts
    );
__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBAndTimeoutsW(
    LPCWSTR lpDef,
    LPDCB lpDCB,
    LPCOMMTIMEOUTS lpCommTimeouts
    );




#line 7644 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CommConfigDialogA(
    LPCSTR lpszName,
    HWND hWnd,
    LPCOMMCONFIG lpCC
    );
__declspec(dllimport)
BOOL
__stdcall
CommConfigDialogW(
    LPCWSTR lpszName,
    HWND hWnd,
    LPCOMMCONFIG lpCC
    );




#line 7666 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetDefaultCommConfigA(
    LPCSTR lpszName,
    LPCOMMCONFIG lpCC,
    LPDWORD lpdwSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetDefaultCommConfigW(
    LPCWSTR lpszName,
    LPCOMMCONFIG lpCC,
    LPDWORD lpdwSize
    );




#line 7688 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetDefaultCommConfigA(
    LPCSTR lpszName,
    LPCOMMCONFIG lpCC,
    DWORD dwSize
    );
__declspec(dllimport)
BOOL
__stdcall
SetDefaultCommConfigW(
    LPCWSTR lpszName,
    LPCOMMCONFIG lpCC,
    DWORD dwSize
    );




#line 7710 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"





#line 7716 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetComputerNameA (
    LPSTR lpBuffer,
    LPDWORD nSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetComputerNameW (
    LPWSTR lpBuffer,
    LPDWORD nSize
    );




#line 7736 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetComputerNameA (
    LPCSTR lpComputerName
    );
__declspec(dllimport)
BOOL
__stdcall
SetComputerNameW (
    LPCWSTR lpComputerName
    );




#line 7754 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetUserNameA (
    LPSTR lpBuffer,
    LPDWORD nSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetUserNameW (
    LPWSTR lpBuffer,
    LPDWORD nSize
    );




#line 7774 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"














#line 7789 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"


#line 7792 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
LogonUserA (
    LPSTR lpszUsername,
    LPSTR lpszDomain,
    LPSTR lpszPassword,
    DWORD dwLogonType,
    DWORD dwLogonProvider,
    PHANDLE phToken
    );
__declspec(dllimport)
BOOL
__stdcall
LogonUserW (
    LPWSTR lpszUsername,
    LPWSTR lpszDomain,
    LPWSTR lpszPassword,
    DWORD dwLogonType,
    DWORD dwLogonProvider,
    PHANDLE phToken
    );




#line 7822 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ImpersonateLoggedOnUser(
    HANDLE  hToken
    );

__declspec(dllimport)
BOOL
__stdcall
CreateProcessAsUserA (
    HANDLE hToken,
    LPCSTR lpApplicationName,
    LPSTR lpCommandLine,
    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    BOOL bInheritHandles,
    DWORD dwCreationFlags,
    LPVOID lpEnvironment,
    LPCSTR lpCurrentDirectory,
    LPSTARTUPINFOA lpStartupInfo,
    LPPROCESS_INFORMATION lpProcessInformation
    );
__declspec(dllimport)
BOOL
__stdcall
CreateProcessAsUserW (
    HANDLE hToken,
    LPCWSTR lpApplicationName,
    LPWSTR lpCommandLine,
    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    BOOL bInheritHandles,
    DWORD dwCreationFlags,
    LPVOID lpEnvironment,
    LPCWSTR lpCurrentDirectory,
    LPSTARTUPINFOW lpStartupInfo,
    LPPROCESS_INFORMATION lpProcessInformation
    );




#line 7867 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
DuplicateTokenEx(
    HANDLE hExistingToken,
    DWORD dwDesiredAccess,
    LPSECURITY_ATTRIBUTES lpTokenAttributes,
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
    TOKEN_TYPE TokenType,
    PHANDLE phNewToken);

__declspec(dllimport)
BOOL
__stdcall
CreateRestrictedToken(
     HANDLE ExistingTokenHandle,
     DWORD Flags,
     DWORD DisableSidCount,
     PSID_AND_ATTRIBUTES SidsToDisable ,
     DWORD DeletePrivilegeCount,
     PLUID_AND_ATTRIBUTES PrivilegesToDelete ,
     DWORD RestrictedSidCount,
     PSID_AND_ATTRIBUTES SidsToRestrict ,
     PHANDLE NewTokenHandle
    );

__declspec(dllimport)
BOOL
__stdcall
IsTokenRestricted(
     HANDLE TokenHandle
    );




















































#line 7953 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"





__declspec(dllimport)
BOOL
__stdcall
QueryPerformanceCounter(
    LARGE_INTEGER *lpPerformanceCount
    );

__declspec(dllimport)
BOOL
__stdcall
QueryPerformanceFrequency(
    LARGE_INTEGER *lpFrequency
    );

typedef struct _OSVERSIONINFOA {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR   szCSDVersion[ 128 ];     
} OSVERSIONINFOA, *POSVERSIONINFOA, *LPOSVERSIONINFOA;
typedef struct _OSVERSIONINFOW {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR  szCSDVersion[ 128 ];     
} OSVERSIONINFOW, *POSVERSIONINFOW, *LPOSVERSIONINFOW;





typedef OSVERSIONINFOA OSVERSIONINFO;
typedef POSVERSIONINFOA POSVERSIONINFO;
typedef LPOSVERSIONINFOA LPOSVERSIONINFO;
#line 7997 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

typedef struct _OSVERSIONINFOEXA {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR   szCSDVersion[ 128 ];     
    WORD wServicePackMajor;
    WORD wServicePackMinor;
    WORD wReserved[2];
} OSVERSIONINFOEXA, *POSVERSIONINFOEXA, *LPOSVERSIONINFOEXA;
typedef struct _OSVERSIONINFOEXW {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR  szCSDVersion[ 128 ];     
    WORD wServicePackMajor;
    WORD wServicePackMinor;
    WORD wReserved[2];
} OSVERSIONINFOEXW, *POSVERSIONINFOEXW, *LPOSVERSIONINFOEXW;





typedef OSVERSIONINFOEXA OSVERSIONINFOEX;
typedef POSVERSIONINFOEXA POSVERSIONINFOEX;
typedef LPOSVERSIONINFOEXA LPOSVERSIONINFOEX;
#line 8029 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"










__declspec(dllimport)
BOOL
__stdcall
GetVersionExA(
    LPOSVERSIONINFOA lpVersionInformation
    );
__declspec(dllimport)
BOOL
__stdcall
GetVersionExW(
    LPOSVERSIONINFOW lpVersionInformation
    );




#line 8056 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"






#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\winerror.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 8021 "c:\\programme\\microsoft visual studio\\vc98\\include\\winerror.h"


























































































































































































#line 8208 "c:\\programme\\microsoft visual studio\\vc98\\include\\winerror.h"

































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































 
 
 
 
 


















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 12937 "c:\\programme\\microsoft visual studio\\vc98\\include\\winerror.h"
#line 8063 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"





























typedef struct _SYSTEM_POWER_STATUS {
    BYTE ACLineStatus;
    BYTE BatteryFlag;
    BYTE BatteryLifePercent;
    BYTE Reserved1;
    DWORD BatteryLifeTime;
    DWORD BatteryFullLifeTime;
}   SYSTEM_POWER_STATUS, *LPSYSTEM_POWER_STATUS;

BOOL
__stdcall
GetSystemPowerStatus(
    LPSYSTEM_POWER_STATUS lpSystemPowerStatus
    );

BOOL
__stdcall
SetSystemPowerState(
    BOOL fSuspend,
    BOOL fForce
    );

#line 8115 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"











typedef struct _WIN_CERTIFICATE {
    DWORD       dwLength;
    WORD        wRevision;
    WORD        wCertificateType;   
    BYTE        bCertificate[1];
} WIN_CERTIFICATE, *LPWIN_CERTIFICATE;























BOOL
__stdcall
WinSubmitCertificate(
    LPWIN_CERTIFICATE lpCertificate
    );









LONG
__stdcall
WinVerifyTrust(
    HWND    hwnd,
    GUID *  ActionID,
    LPVOID  ActionData
    );


BOOL
__stdcall
WinLoadTrustProvider(
    GUID * ActionID
    );












typedef LPVOID WIN_TRUST_SUBJECT;





typedef struct _WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT {

    HANDLE            hClientToken;
    GUID *            SubjectType;
    WIN_TRUST_SUBJECT Subject;

} WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT, *LPWIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT ;


typedef struct _WIN_TRUST_ACTDATA_SUBJECT_ONLY {

    GUID *            SubjectType;
    WIN_TRUST_SUBJECT Subject;

} WIN_TRUST_ACTDATA_SUBJECT_ONLY, *LPWIN_TRUST_ACTDATA_SUBJECT_ONLY;



















































typedef struct _WIN_TRUST_SUBJECT_FILE {

    HANDLE  hFile;
    LPCWSTR lpPath;

} WIN_TRUST_SUBJECT_FILE, *LPWIN_TRUST_SUBJECT_FILE;












































typedef struct _WIN_TRUST_SUBJECT_FILE_AND_DISPLAY {

    HANDLE  hFile;              
    LPCWSTR lpPath;             
    LPCWSTR lpDisplayName;      
                                

} WIN_TRUST_SUBJECT_FILE_AND_DISPLAY, *LPWIN_TRUST_SUBJECT_FILE_AND_DISPLAY;

























































































typedef struct _WIN_SPUB_TRUSTED_PUBLISHER_DATA {

    HANDLE            hClientToken;
    LPWIN_CERTIFICATE lpCertificate;

} WIN_SPUB_TRUSTED_PUBLISHER_DATA, *LPWIN_SPUB_TRUSTED_PUBLISHER_DATA;






























































































































































































#line 8611 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"



}
#line 8616 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"


#line 8619 "c:\\programme\\microsoft visual studio\\vc98\\include\\winbase.h"

#line 165 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"























#line 25 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"









#line 35 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"


extern "C" {
#line 39 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
















































#line 88 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

































#line 122 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"






















#line 145 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
















#line 162 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"


#line 165 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"





















































































typedef struct _DRAWPATRECT {
        POINT ptPosition;
        POINT ptSize;
        WORD wStyle;
        WORD wPattern;
} DRAWPATRECT, *PDRAWPATRECT;
#line 257 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

#line 259 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"































































































typedef struct _PSINJECTDATA {

    DWORD   DataBytes;          
    DWORD   InjectionPoint;     
    DWORD   Flags;              
    DWORD   Reserved;           

    

} PSINJECTDATA, *PPSINJECTDATA;






































































































typedef struct  tagXFORM
  {
    FLOAT   eM11;
    FLOAT   eM12;
    FLOAT   eM21;
    FLOAT   eM22;
    FLOAT   eDx;
    FLOAT   eDy;
  } XFORM, *PXFORM,  *LPXFORM;


typedef struct tagBITMAP
  {
    LONG        bmType;
    LONG        bmWidth;
    LONG        bmHeight;
    LONG        bmWidthBytes;
    WORD        bmPlanes;
    WORD        bmBitsPixel;
    LPVOID      bmBits;
  } BITMAP, *PBITMAP,  *NPBITMAP,  *LPBITMAP;

#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push)
#line 28 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack1.h"
#pragma pack(1)


#line 32 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack1.h"
#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack1.h"
#line 489 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
typedef struct tagRGBTRIPLE {
        BYTE    rgbtBlue;
        BYTE    rgbtGreen;
        BYTE    rgbtRed;
} RGBTRIPLE;
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"


#line 36 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"
#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"
#line 495 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

typedef struct tagRGBQUAD {
        BYTE    rgbBlue;
        BYTE    rgbGreen;
        BYTE    rgbRed;
        BYTE    rgbReserved;
} RGBQUAD;
typedef RGBQUAD * LPRGBQUAD;


















typedef LONG   LCSCSTYPE;




typedef LONG    LCSGAMUTMATCH;


























typedef long            FXPT16DOT16,  *LPFXPT16DOT16;
typedef long            FXPT2DOT30,  *LPFXPT2DOT30;




typedef struct tagCIEXYZ
{
        FXPT2DOT30 ciexyzX;
        FXPT2DOT30 ciexyzY;
        FXPT2DOT30 ciexyzZ;
} CIEXYZ;
typedef CIEXYZ   *LPCIEXYZ;

typedef struct tagICEXYZTRIPLE
{
        CIEXYZ  ciexyzRed;
        CIEXYZ  ciexyzGreen;
        CIEXYZ  ciexyzBlue;
} CIEXYZTRIPLE;
typedef CIEXYZTRIPLE     *LPCIEXYZTRIPLE;






typedef struct tagLOGCOLORSPACEA {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    CHAR   lcsFilename[260];
} LOGCOLORSPACEA, *LPLOGCOLORSPACEA;
typedef struct tagLOGCOLORSPACEW {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    WCHAR  lcsFilename[260];
} LOGCOLORSPACEW, *LPLOGCOLORSPACEW;




typedef LOGCOLORSPACEA LOGCOLORSPACE;
typedef LPLOGCOLORSPACEA LPLOGCOLORSPACE;
#line 611 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

#line 613 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"


typedef struct tagBITMAPCOREHEADER {
        DWORD   bcSize;                 
        WORD    bcWidth;
        WORD    bcHeight;
        WORD    bcPlanes;
        WORD    bcBitCount;
} BITMAPCOREHEADER,  *LPBITMAPCOREHEADER, *PBITMAPCOREHEADER;

typedef struct tagBITMAPINFOHEADER{
        DWORD      biSize;
        LONG       biWidth;
        LONG       biHeight;
        WORD       biPlanes;
        WORD       biBitCount;
        DWORD      biCompression;
        DWORD      biSizeImage;
        LONG       biXPelsPerMeter;
        LONG       biYPelsPerMeter;
        DWORD      biClrUsed;
        DWORD      biClrImportant;
} BITMAPINFOHEADER,  *LPBITMAPINFOHEADER, *PBITMAPINFOHEADER;


typedef struct {
        DWORD        bV4Size;
        LONG         bV4Width;
        LONG         bV4Height;
        WORD         bV4Planes;
        WORD         bV4BitCount;
        DWORD        bV4V4Compression;
        DWORD        bV4SizeImage;
        LONG         bV4XPelsPerMeter;
        LONG         bV4YPelsPerMeter;
        DWORD        bV4ClrUsed;
        DWORD        bV4ClrImportant;
        DWORD        bV4RedMask;
        DWORD        bV4GreenMask;
        DWORD        bV4BlueMask;
        DWORD        bV4AlphaMask;
        DWORD        bV4CSType;
        CIEXYZTRIPLE bV4Endpoints;
        DWORD        bV4GammaRed;
        DWORD        bV4GammaGreen;
        DWORD        bV4GammaBlue;
} BITMAPV4HEADER,  *LPBITMAPV4HEADER, *PBITMAPV4HEADER;
#line 661 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
































#line 694 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"







#line 702 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

typedef struct tagBITMAPINFO {
    BITMAPINFOHEADER    bmiHeader;
    RGBQUAD             bmiColors[1];
} BITMAPINFO,  *LPBITMAPINFO, *PBITMAPINFO;

typedef struct tagBITMAPCOREINFO {
    BITMAPCOREHEADER    bmciHeader;
    RGBTRIPLE           bmciColors[1];
} BITMAPCOREINFO,  *LPBITMAPCOREINFO, *PBITMAPCOREINFO;

#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push)
#line 28 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack2.h"
#pragma pack(2)


#line 32 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack2.h"
#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack2.h"
#line 714 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
typedef struct tagBITMAPFILEHEADER {
        WORD    bfType;
        DWORD   bfSize;
        WORD    bfReserved1;
        WORD    bfReserved2;
        DWORD   bfOffBits;
} BITMAPFILEHEADER,  *LPBITMAPFILEHEADER, *PBITMAPFILEHEADER;
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"


#line 36 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"
#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"
#line 722 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"





typedef struct tagFONTSIGNATURE
{
    DWORD fsUsb[4];
    DWORD fsCsb[2];
} FONTSIGNATURE, *PFONTSIGNATURE, *LPFONTSIGNATURE;

typedef struct tagCHARSETINFO
{
    UINT ciCharset;
    UINT ciACP;
    FONTSIGNATURE fs;
} CHARSETINFO, *PCHARSETINFO,  *NPCHARSETINFO,  *LPCHARSETINFO;





typedef struct tagLOCALESIGNATURE
{
    DWORD lsUsb[4];
    DWORD lsCsbDefault[2];
    DWORD lsCsbSupported[2];
} LOCALESIGNATURE, *PLOCALESIGNATURE, *LPLOCALESIGNATURE;


#line 753 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
#line 754 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"




typedef struct tagHANDLETABLE
  {
    HGDIOBJ     objectHandle[1];
  } HANDLETABLE, *PHANDLETABLE,  *LPHANDLETABLE;

typedef struct tagMETARECORD
  {
    DWORD       rdSize;
    WORD        rdFunction;
    WORD        rdParm[1];
  } METARECORD;
typedef struct tagMETARECORD  *PMETARECORD;
typedef struct tagMETARECORD   *LPMETARECORD;

typedef struct tagMETAFILEPICT
  {
    LONG        mm;
    LONG        xExt;
    LONG        yExt;
    HMETAFILE   hMF;
  } METAFILEPICT,  *LPMETAFILEPICT;

#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push)
#line 28 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack2.h"
#pragma pack(2)


#line 32 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack2.h"
#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack2.h"
#line 781 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
typedef struct tagMETAHEADER
{
    WORD        mtType;
    WORD        mtHeaderSize;
    WORD        mtVersion;
    DWORD       mtSize;
    WORD        mtNoObjects;
    DWORD       mtMaxRecord;
    WORD        mtNoParameters;
} METAHEADER;
typedef struct tagMETAHEADER  *PMETAHEADER;
typedef struct tagMETAHEADER   *LPMETAHEADER;

#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"


#line 36 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"
#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"
#line 795 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"


typedef struct tagENHMETARECORD
{
    DWORD   iType;              
    DWORD   nSize;              
    DWORD   dParm[1];           
} ENHMETARECORD, *PENHMETARECORD, *LPENHMETARECORD;

typedef struct tagENHMETAHEADER
{
    DWORD   iType;              
    DWORD   nSize;              
                                
    RECTL   rclBounds;          
    RECTL   rclFrame;           
    DWORD   dSignature;         
    DWORD   nVersion;           
    DWORD   nBytes;             
    DWORD   nRecords;           
    WORD    nHandles;           
                                
    WORD    sReserved;          
    DWORD   nDescription;       
                                
    DWORD   offDescription;     
                                
    DWORD   nPalEntries;        
    SIZEL   szlDevice;          
    SIZEL   szlMillimeters;     

    DWORD   cbPixelFormat;      
                                
    DWORD   offPixelFormat;     
                                
    DWORD   bOpenGL;            
                                
#line 833 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
} ENHMETAHEADER, *PENHMETAHEADER, *LPENHMETAHEADER;

#line 836 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"















    typedef BYTE BCHAR;
#line 853 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

typedef struct tagTEXTMETRICA
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    BYTE        tmFirstChar;
    BYTE        tmLastChar;
    BYTE        tmDefaultChar;
    BYTE        tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
} TEXTMETRICA, *PTEXTMETRICA,  *NPTEXTMETRICA,  *LPTEXTMETRICA;
typedef struct tagTEXTMETRICW
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    WCHAR       tmFirstChar;
    WCHAR       tmLastChar;
    WCHAR       tmDefaultChar;
    WCHAR       tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
} TEXTMETRICW, *PTEXTMETRICW,  *NPTEXTMETRICW,  *LPTEXTMETRICW;






typedef TEXTMETRICA TEXTMETRIC;
typedef PTEXTMETRICA PTEXTMETRIC;
typedef NPTEXTMETRICA NPTEXTMETRIC;
typedef LPTEXTMETRICA LPTEXTMETRIC;
#line 911 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"













#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push)
#line 28 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack4.h"
#pragma pack(4)


#line 32 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack4.h"
#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack4.h"
#line 925 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
typedef struct tagNEWTEXTMETRICA
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    BYTE        tmFirstChar;
    BYTE        tmLastChar;
    BYTE        tmDefaultChar;
    BYTE        tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
    DWORD   ntmFlags;
    UINT    ntmSizeEM;
    UINT    ntmCellHeight;
    UINT    ntmAvgWidth;
} NEWTEXTMETRICA, *PNEWTEXTMETRICA,  *NPNEWTEXTMETRICA,  *LPNEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    WCHAR       tmFirstChar;
    WCHAR       tmLastChar;
    WCHAR       tmDefaultChar;
    WCHAR       tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
    DWORD   ntmFlags;
    UINT    ntmSizeEM;
    UINT    ntmCellHeight;
    UINT    ntmAvgWidth;
} NEWTEXTMETRICW, *PNEWTEXTMETRICW,  *NPNEWTEXTMETRICW,  *LPNEWTEXTMETRICW;






typedef NEWTEXTMETRICA NEWTEXTMETRIC;
typedef PNEWTEXTMETRICA PNEWTEXTMETRIC;
typedef NPNEWTEXTMETRICA NPNEWTEXTMETRIC;
typedef LPNEWTEXTMETRICA LPNEWTEXTMETRIC;
#line 990 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"


#line 36 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"
#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"
#line 991 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"


typedef struct tagNEWTEXTMETRICEXA
{
    NEWTEXTMETRICA  ntmTm;
    FONTSIGNATURE   ntmFontSig;
}NEWTEXTMETRICEXA;
typedef struct tagNEWTEXTMETRICEXW
{
    NEWTEXTMETRICW  ntmTm;
    FONTSIGNATURE   ntmFontSig;
}NEWTEXTMETRICEXW;



typedef NEWTEXTMETRICEXA NEWTEXTMETRICEX;
#line 1008 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
#line 1009 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

#line 1011 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"



typedef struct tagPELARRAY
  {
    LONG        paXCount;
    LONG        paYCount;
    LONG        paXExt;
    LONG        paYExt;
    BYTE        paRGBs;
  } PELARRAY, *PPELARRAY,  *NPPELARRAY,  *LPPELARRAY;


typedef struct tagLOGBRUSH
  {
    UINT        lbStyle;
    COLORREF    lbColor;
    LONG        lbHatch;
  } LOGBRUSH, *PLOGBRUSH,  *NPLOGBRUSH,  *LPLOGBRUSH;

typedef LOGBRUSH            PATTERN;
typedef PATTERN             *PPATTERN;
typedef PATTERN         *NPPATTERN;
typedef PATTERN          *LPPATTERN;


typedef struct tagLOGPEN
  {
    UINT        lopnStyle;
    POINT       lopnWidth;
    COLORREF    lopnColor;
  } LOGPEN, *PLOGPEN,  *NPLOGPEN,  *LPLOGPEN;

typedef struct tagEXTLOGPEN {
    DWORD       elpPenStyle;
    DWORD       elpWidth;
    UINT        elpBrushStyle;
    COLORREF    elpColor;
    LONG        elpHatch;
    DWORD       elpNumEntries;
    DWORD       elpStyleEntry[1];
} EXTLOGPEN, *PEXTLOGPEN,  *NPEXTLOGPEN,  *LPEXTLOGPEN;

typedef struct tagPALETTEENTRY {
    BYTE        peRed;
    BYTE        peGreen;
    BYTE        peBlue;
    BYTE        peFlags;
} PALETTEENTRY, *PPALETTEENTRY,  *LPPALETTEENTRY;


typedef struct tagLOGPALETTE {
    WORD        palVersion;
    WORD        palNumEntries;
    PALETTEENTRY        palPalEntry[1];
} LOGPALETTE, *PLOGPALETTE,  *NPLOGPALETTE,  *LPLOGPALETTE;





typedef struct tagLOGFONTA
{
    LONG      lfHeight;
    LONG      lfWidth;
    LONG      lfEscapement;
    LONG      lfOrientation;
    LONG      lfWeight;
    BYTE      lfItalic;
    BYTE      lfUnderline;
    BYTE      lfStrikeOut;
    BYTE      lfCharSet;
    BYTE      lfOutPrecision;
    BYTE      lfClipPrecision;
    BYTE      lfQuality;
    BYTE      lfPitchAndFamily;
    CHAR      lfFaceName[32];
} LOGFONTA, *PLOGFONTA,  *NPLOGFONTA,  *LPLOGFONTA;
typedef struct tagLOGFONTW
{
    LONG      lfHeight;
    LONG      lfWidth;
    LONG      lfEscapement;
    LONG      lfOrientation;
    LONG      lfWeight;
    BYTE      lfItalic;
    BYTE      lfUnderline;
    BYTE      lfStrikeOut;
    BYTE      lfCharSet;
    BYTE      lfOutPrecision;
    BYTE      lfClipPrecision;
    BYTE      lfQuality;
    BYTE      lfPitchAndFamily;
    WCHAR     lfFaceName[32];
} LOGFONTW, *PLOGFONTW,  *NPLOGFONTW,  *LPLOGFONTW;






typedef LOGFONTA LOGFONT;
typedef PLOGFONTA PLOGFONT;
typedef NPLOGFONTA NPLOGFONT;
typedef LPLOGFONTA LPLOGFONT;
#line 1117 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"




typedef struct tagENUMLOGFONTA
{
    LOGFONTA elfLogFont;
    BYTE     elfFullName[64];
    BYTE     elfStyle[32];
} ENUMLOGFONTA, * LPENUMLOGFONTA;

typedef struct tagENUMLOGFONTW
{
    LOGFONTW elfLogFont;
    WCHAR    elfFullName[64];
    WCHAR    elfStyle[32];
} ENUMLOGFONTW, * LPENUMLOGFONTW;




typedef ENUMLOGFONTA ENUMLOGFONT;
typedef LPENUMLOGFONTA LPENUMLOGFONT;
#line 1141 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"


typedef struct tagENUMLOGFONTEXA
{
    LOGFONTA    elfLogFont;
    BYTE        elfFullName[64];
    BYTE        elfStyle[32];
    BYTE        elfScript[32];
} ENUMLOGFONTEXA,  *LPENUMLOGFONTEXA;
typedef struct tagENUMLOGFONTEXW
{
    LOGFONTW    elfLogFont;
    WCHAR       elfFullName[64];
    WCHAR       elfStyle[32];
    WCHAR       elfScript[32];
} ENUMLOGFONTEXW,  *LPENUMLOGFONTEXW;




typedef ENUMLOGFONTEXA ENUMLOGFONTEX;
typedef LPENUMLOGFONTEXA LPENUMLOGFONTEX;
#line 1164 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
#line 1165 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"


























#line 1192 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"






#line 1199 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"








































#line 1240 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"




                                    

                                    

                                    



































typedef struct tagPANOSE
{
    BYTE    bFamilyType;
    BYTE    bSerifStyle;
    BYTE    bWeight;
    BYTE    bProportion;
    BYTE    bContrast;
    BYTE    bStrokeVariation;
    BYTE    bArmStyle;
    BYTE    bLetterform;
    BYTE    bMidline;
    BYTE    bXHeight;
} PANOSE, * LPPANOSE;

















































































































typedef struct tagEXTLOGFONTA {
    LOGFONTA    elfLogFont;
    BYTE        elfFullName[64];
    BYTE        elfStyle[32];
    DWORD       elfVersion;     
    DWORD       elfStyleSize;
    DWORD       elfMatch;
    DWORD       elfReserved;
    BYTE        elfVendorId[4];
    DWORD       elfCulture;     
    PANOSE      elfPanose;
} EXTLOGFONTA, *PEXTLOGFONTA,  *NPEXTLOGFONTA,  *LPEXTLOGFONTA;
typedef struct tagEXTLOGFONTW {
    LOGFONTW    elfLogFont;
    WCHAR       elfFullName[64];
    WCHAR       elfStyle[32];
    DWORD       elfVersion;     
    DWORD       elfStyleSize;
    DWORD       elfMatch;
    DWORD       elfReserved;
    BYTE        elfVendorId[4];
    DWORD       elfCulture;     
    PANOSE      elfPanose;
} EXTLOGFONTW, *PEXTLOGFONTW,  *NPEXTLOGFONTW,  *LPEXTLOGFONTW;






typedef EXTLOGFONTA EXTLOGFONT;
typedef PEXTLOGFONTA PEXTLOGFONT;
typedef NPEXTLOGFONTA NPEXTLOGFONT;
typedef LPEXTLOGFONTA LPEXTLOGFONT;
#line 1445 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
















































































#line 1526 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"




#line 1531 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"



#line 1535 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"



#line 1539 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
















































































#line 1620 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"





















                             

                             

                             











































































#line 1722 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"































#line 1754 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"



























typedef struct _devicemodeA {
    BYTE   dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union {
      struct {
        short dmOrientation;
        short dmPaperSize;
        short dmPaperLength;
        short dmPaperWidth;
      };
      POINTL dmPosition;
    };
    short dmScale;
    short dmCopies;
    short dmDefaultSource;
    short dmPrintQuality;
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    BYTE   dmFormName[32];
    WORD   dmLogPixels;
    DWORD  dmBitsPerPel;
    DWORD  dmPelsWidth;
    DWORD  dmPelsHeight;
    DWORD  dmDisplayFlags;
    DWORD  dmDisplayFrequency;

    DWORD  dmICMMethod;
    DWORD  dmICMIntent;
    DWORD  dmMediaType;
    DWORD  dmDitherType;
    DWORD  dmReserved1;
    DWORD  dmReserved2;



#line 1824 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
#line 1825 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
} DEVMODEA, *PDEVMODEA, *NPDEVMODEA, *LPDEVMODEA;
typedef struct _devicemodeW {
    WCHAR  dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union {
      struct {
        short dmOrientation;
        short dmPaperSize;
        short dmPaperLength;
        short dmPaperWidth;
      };
      POINTL dmPosition;
    };
    short dmScale;
    short dmCopies;
    short dmDefaultSource;
    short dmPrintQuality;
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    WCHAR  dmFormName[32];
    WORD   dmLogPixels;
    DWORD  dmBitsPerPel;
    DWORD  dmPelsWidth;
    DWORD  dmPelsHeight;
    DWORD  dmDisplayFlags;
    DWORD  dmDisplayFrequency;

    DWORD  dmICMMethod;
    DWORD  dmICMIntent;
    DWORD  dmMediaType;
    DWORD  dmDitherType;
    DWORD  dmReserved1;
    DWORD  dmReserved2;



#line 1869 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
#line 1870 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
} DEVMODEW, *PDEVMODEW, *NPDEVMODEW, *LPDEVMODEW;






typedef DEVMODEA DEVMODE;
typedef PDEVMODEA PDEVMODE;
typedef NPDEVMODEA NPDEVMODE;
typedef LPDEVMODEA LPDEVMODE;
#line 1882 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"




#line 1887 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"



#line 1891 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"









#line 1901 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"






















#line 1924 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"












































































#line 2001 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"




















































#line 2054 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"



#line 2058 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"



#line 2062 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"












































#line 2107 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

















































#line 2157 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

typedef struct _DISPLAY_DEVICEA {
    DWORD  cb;
    BYTE   DeviceName[32];
    BYTE   DeviceString[128];
    DWORD  StateFlags;
} DISPLAY_DEVICEA, *PDISPLAY_DEVICEA, *LPDISPLAY_DEVICEA;
typedef struct _DISPLAY_DEVICEW {
    DWORD  cb;
    WCHAR  DeviceName[32];
    WCHAR  DeviceString[128];
    DWORD  StateFlags;
} DISPLAY_DEVICEW, *PDISPLAY_DEVICEW, *LPDISPLAY_DEVICEW;





typedef DISPLAY_DEVICEA DISPLAY_DEVICE;
typedef PDISPLAY_DEVICEA PDISPLAY_DEVICE;
typedef LPDISPLAY_DEVICEA LPDISPLAY_DEVICE;
#line 2179 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"











typedef struct _RGNDATAHEADER {
    DWORD   dwSize;
    DWORD   iType;
    DWORD   nCount;
    DWORD   nRgnSize;
    RECT    rcBound;
} RGNDATAHEADER, *PRGNDATAHEADER;

typedef struct _RGNDATA {
    RGNDATAHEADER   rdh;
    char            Buffer[1];
} RGNDATA, *PRGNDATA,  *NPRGNDATA,  *LPRGNDATA;


typedef struct _ABC {
    int     abcA;
    UINT    abcB;
    int     abcC;
} ABC, *PABC,  *NPABC,  *LPABC;

typedef struct _ABCFLOAT {
    FLOAT   abcfA;
    FLOAT   abcfB;
    FLOAT   abcfC;
} ABCFLOAT, *PABCFLOAT,  *NPABCFLOAT,  *LPABCFLOAT;






typedef struct _OUTLINETEXTMETRICA {
    UINT    otmSize;
    TEXTMETRICA otmTextMetrics;
    BYTE    otmFiller;
    PANOSE  otmPanoseNumber;
    UINT    otmfsSelection;
    UINT    otmfsType;
     int    otmsCharSlopeRise;
     int    otmsCharSlopeRun;
     int    otmItalicAngle;
    UINT    otmEMSquare;
     int    otmAscent;
     int    otmDescent;
    UINT    otmLineGap;
    UINT    otmsCapEmHeight;
    UINT    otmsXHeight;
    RECT    otmrcFontBox;
     int    otmMacAscent;
     int    otmMacDescent;
    UINT    otmMacLineGap;
    UINT    otmusMinimumPPEM;
    POINT   otmptSubscriptSize;
    POINT   otmptSubscriptOffset;
    POINT   otmptSuperscriptSize;
    POINT   otmptSuperscriptOffset;
    UINT    otmsStrikeoutSize;
     int    otmsStrikeoutPosition;
     int    otmsUnderscoreSize;
     int    otmsUnderscorePosition;
    PSTR    otmpFamilyName;
    PSTR    otmpFaceName;
    PSTR    otmpStyleName;
    PSTR    otmpFullName;
} OUTLINETEXTMETRICA, *POUTLINETEXTMETRICA,  *NPOUTLINETEXTMETRICA,  *LPOUTLINETEXTMETRICA;
typedef struct _OUTLINETEXTMETRICW {
    UINT    otmSize;
    TEXTMETRICW otmTextMetrics;
    BYTE    otmFiller;
    PANOSE  otmPanoseNumber;
    UINT    otmfsSelection;
    UINT    otmfsType;
     int    otmsCharSlopeRise;
     int    otmsCharSlopeRun;
     int    otmItalicAngle;
    UINT    otmEMSquare;
     int    otmAscent;
     int    otmDescent;
    UINT    otmLineGap;
    UINT    otmsCapEmHeight;
    UINT    otmsXHeight;
    RECT    otmrcFontBox;
     int    otmMacAscent;
     int    otmMacDescent;
    UINT    otmMacLineGap;
    UINT    otmusMinimumPPEM;
    POINT   otmptSubscriptSize;
    POINT   otmptSubscriptOffset;
    POINT   otmptSuperscriptSize;
    POINT   otmptSuperscriptOffset;
    UINT    otmsStrikeoutSize;
     int    otmsStrikeoutPosition;
     int    otmsUnderscoreSize;
     int    otmsUnderscorePosition;
    PSTR    otmpFamilyName;
    PSTR    otmpFaceName;
    PSTR    otmpStyleName;
    PSTR    otmpFullName;
} OUTLINETEXTMETRICW, *POUTLINETEXTMETRICW,  *NPOUTLINETEXTMETRICW,  *LPOUTLINETEXTMETRICW;






typedef OUTLINETEXTMETRICA OUTLINETEXTMETRIC;
typedef POUTLINETEXTMETRICA POUTLINETEXTMETRIC;
typedef NPOUTLINETEXTMETRICA NPOUTLINETEXTMETRIC;
typedef LPOUTLINETEXTMETRICA LPOUTLINETEXTMETRIC;
#line 2300 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"





#line 2306 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"


typedef struct tagPOLYTEXTA
{
    int       x;
    int       y;
    UINT      n;
    LPCSTR    lpstr;
    UINT      uiFlags;
    RECT      rcl;
    int      *pdx;
} POLYTEXTA, *PPOLYTEXTA,  *NPPOLYTEXTA,  *LPPOLYTEXTA;
typedef struct tagPOLYTEXTW
{
    int       x;
    int       y;
    UINT      n;
    LPCWSTR   lpstr;
    UINT      uiFlags;
    RECT      rcl;
    int      *pdx;
} POLYTEXTW, *PPOLYTEXTW,  *NPPOLYTEXTW,  *LPPOLYTEXTW;






typedef POLYTEXTA POLYTEXT;
typedef PPOLYTEXTA PPOLYTEXT;
typedef NPPOLYTEXTA NPPOLYTEXT;
typedef LPPOLYTEXTA LPPOLYTEXT;
#line 2339 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

typedef struct _FIXED {

    WORD    fract;
    short   value;



#line 2348 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
} FIXED;


typedef struct _MAT2 {
     FIXED  eM11;
     FIXED  eM12;
     FIXED  eM21;
     FIXED  eM22;
} MAT2,  *LPMAT2;



typedef struct _GLYPHMETRICS {
    UINT    gmBlackBoxX;
    UINT    gmBlackBoxY;
    POINT   gmptGlyphOrigin;
    short   gmCellIncX;
    short   gmCellIncY;
} GLYPHMETRICS,  *LPGLYPHMETRICS;













#line 2381 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"







typedef struct tagPOINTFX
{
    FIXED x;
    FIXED y;
} POINTFX, * LPPOINTFX;

typedef struct tagTTPOLYCURVE
{
    WORD    wType;
    WORD    cpfx;
    POINTFX apfx[1];
} TTPOLYCURVE, * LPTTPOLYCURVE;

typedef struct tagTTPOLYGONHEADER
{
    DWORD   cb;
    DWORD   dwType;
    POINTFX pfxStart;
} TTPOLYGONHEADER, * LPTTPOLYGONHEADER;













































typedef struct tagGCP_RESULTSA
    {
    DWORD   lStructSize;
    LPSTR     lpOutString;
    UINT  *lpOrder;
    int   *lpDx;
    int   *lpCaretPos;
    LPSTR   lpClass;
    LPWSTR  lpGlyphs;
    UINT    nGlyphs;
    int     nMaxFit;
    } GCP_RESULTSA, * LPGCP_RESULTSA;
typedef struct tagGCP_RESULTSW
    {
    DWORD   lStructSize;
    LPWSTR    lpOutString;
    UINT  *lpOrder;
    int   *lpDx;
    int   *lpCaretPos;
    LPSTR   lpClass;
    LPWSTR  lpGlyphs;
    UINT    nGlyphs;
    int     nMaxFit;
    } GCP_RESULTSW, * LPGCP_RESULTSW;




typedef GCP_RESULTSA GCP_RESULTS;
typedef LPGCP_RESULTSA LPGCP_RESULTS;
#line 2483 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
#line 2484 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

typedef struct _RASTERIZER_STATUS {
    short   nSize;
    short   wFlags;
    short   nLanguageID;
} RASTERIZER_STATUS,  *LPRASTERIZER_STATUS;






typedef struct tagPIXELFORMATDESCRIPTOR
{
    WORD  nSize;
    WORD  nVersion;
    DWORD dwFlags;
    BYTE  iPixelType;
    BYTE  cColorBits;
    BYTE  cRedBits;
    BYTE  cRedShift;
    BYTE  cGreenBits;
    BYTE  cGreenShift;
    BYTE  cBlueBits;
    BYTE  cBlueShift;
    BYTE  cAlphaBits;
    BYTE  cAlphaShift;
    BYTE  cAccumBits;
    BYTE  cAccumRedBits;
    BYTE  cAccumGreenBits;
    BYTE  cAccumBlueBits;
    BYTE  cAccumAlphaBits;
    BYTE  cDepthBits;
    BYTE  cStencilBits;
    BYTE  cAuxBuffers;
    BYTE  iLayerType;
    BYTE  bReserved;
    DWORD dwLayerMask;
    DWORD dwVisibleMask;
    DWORD dwDamageMask;
} PIXELFORMATDESCRIPTOR, *PPIXELFORMATDESCRIPTOR,  *LPPIXELFORMATDESCRIPTOR;

































typedef int (__stdcall* OLDFONTENUMPROCA)(const LOGFONTA *, const TEXTMETRICA *, DWORD, LPARAM);
typedef int (__stdcall* OLDFONTENUMPROCW)(const LOGFONTW *, const TEXTMETRICW *, DWORD, LPARAM);




#line 2565 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"








#line 2574 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

typedef OLDFONTENUMPROCA    FONTENUMPROCA;
typedef OLDFONTENUMPROCW    FONTENUMPROCW;



typedef FONTENUMPROCA FONTENUMPROC;
#line 2582 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

typedef int (__stdcall* GOBJENUMPROC)(LPVOID, LPARAM);
typedef void (__stdcall* LINEDDAPROC)(int, int, LPARAM);











#line 2597 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

__declspec(dllimport) int __stdcall AddFontResourceA(LPCSTR);
__declspec(dllimport) int __stdcall AddFontResourceW(LPCWSTR);




#line 2605 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"


__declspec(dllimport) BOOL  __stdcall AnimatePalette(HPALETTE, UINT, UINT, const PALETTEENTRY *);
__declspec(dllimport) BOOL  __stdcall Arc(HDC, int, int, int, int, int, int, int, int);
__declspec(dllimport) BOOL  __stdcall BitBlt(HDC, int, int, int, int, HDC, int, int, DWORD);
__declspec(dllimport) BOOL  __stdcall CancelDC(HDC);
__declspec(dllimport) BOOL  __stdcall Chord(HDC, int, int, int, int, int, int, int, int);
__declspec(dllimport) int   __stdcall ChoosePixelFormat(HDC, const PIXELFORMATDESCRIPTOR *);
__declspec(dllimport) HMETAFILE  __stdcall CloseMetaFile(HDC);
__declspec(dllimport) int     __stdcall CombineRgn(HRGN, HRGN, HRGN, int);
__declspec(dllimport) HMETAFILE __stdcall CopyMetaFileA(HMETAFILE, LPCSTR);
__declspec(dllimport) HMETAFILE __stdcall CopyMetaFileW(HMETAFILE, LPCWSTR);




#line 2622 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
__declspec(dllimport) HBITMAP __stdcall CreateBitmap(int, int, UINT, UINT, const void *);
__declspec(dllimport) HBITMAP __stdcall CreateBitmapIndirect(const BITMAP *);
__declspec(dllimport) HBRUSH  __stdcall CreateBrushIndirect(const LOGBRUSH *);
__declspec(dllimport) HBITMAP __stdcall CreateCompatibleBitmap(HDC, int, int);
__declspec(dllimport) HBITMAP __stdcall CreateDiscardableBitmap(HDC, int, int);
__declspec(dllimport) HDC     __stdcall CreateCompatibleDC(HDC);
__declspec(dllimport) HDC     __stdcall CreateDCA(LPCSTR, LPCSTR , LPCSTR , const DEVMODEA *);
__declspec(dllimport) HDC     __stdcall CreateDCW(LPCWSTR, LPCWSTR , LPCWSTR , const DEVMODEW *);




#line 2635 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
__declspec(dllimport) HBITMAP __stdcall CreateDIBitmap(HDC, const BITMAPINFOHEADER *, DWORD, const void *, const BITMAPINFO *, UINT);
__declspec(dllimport) HBRUSH  __stdcall CreateDIBPatternBrush(HGLOBAL, UINT);
__declspec(dllimport) HBRUSH  __stdcall CreateDIBPatternBrushPt(const void *, UINT);
__declspec(dllimport) HRGN    __stdcall CreateEllipticRgn(int, int, int, int);
__declspec(dllimport) HRGN    __stdcall CreateEllipticRgnIndirect(const RECT *);
__declspec(dllimport) HFONT   __stdcall CreateFontIndirectA(const LOGFONTA *);
__declspec(dllimport) HFONT   __stdcall CreateFontIndirectW(const LOGFONTW *);




#line 2647 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
__declspec(dllimport) HFONT   __stdcall CreateFontA(int, int, int, int, int, DWORD,
                             DWORD, DWORD, DWORD, DWORD, DWORD,
                             DWORD, DWORD, LPCSTR);
__declspec(dllimport) HFONT   __stdcall CreateFontW(int, int, int, int, int, DWORD,
                             DWORD, DWORD, DWORD, DWORD, DWORD,
                             DWORD, DWORD, LPCWSTR);




#line 2658 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

__declspec(dllimport) HBRUSH  __stdcall CreateHatchBrush(int, COLORREF);
__declspec(dllimport) HDC     __stdcall CreateICA(LPCSTR, LPCSTR , LPCSTR , const DEVMODEA *);
__declspec(dllimport) HDC     __stdcall CreateICW(LPCWSTR, LPCWSTR , LPCWSTR , const DEVMODEW *);




#line 2667 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
__declspec(dllimport) HDC     __stdcall CreateMetaFileA(LPCSTR);
__declspec(dllimport) HDC     __stdcall CreateMetaFileW(LPCWSTR);




#line 2674 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
__declspec(dllimport) HPALETTE __stdcall CreatePalette(const LOGPALETTE *);
__declspec(dllimport) HPEN    __stdcall CreatePen(int, int, COLORREF);
__declspec(dllimport) HPEN    __stdcall CreatePenIndirect(const LOGPEN *);
__declspec(dllimport) HRGN    __stdcall CreatePolyPolygonRgn(const POINT *, const INT *, int, int);
__declspec(dllimport) HBRUSH  __stdcall CreatePatternBrush(HBITMAP);
__declspec(dllimport) HRGN    __stdcall CreateRectRgn(int, int, int, int);
__declspec(dllimport) HRGN    __stdcall CreateRectRgnIndirect(const RECT *);
__declspec(dllimport) HRGN    __stdcall CreateRoundRectRgn(int, int, int, int, int, int);
__declspec(dllimport) BOOL    __stdcall CreateScalableFontResourceA(DWORD, LPCSTR, LPCSTR, LPCSTR);
__declspec(dllimport) BOOL    __stdcall CreateScalableFontResourceW(DWORD, LPCWSTR, LPCWSTR, LPCWSTR);




#line 2689 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
__declspec(dllimport) HBRUSH  __stdcall CreateSolidBrush(COLORREF);

__declspec(dllimport) BOOL __stdcall DeleteDC(HDC);
__declspec(dllimport) BOOL __stdcall DeleteMetaFile(HMETAFILE);
__declspec(dllimport) BOOL __stdcall DeleteObject(HGDIOBJ);
__declspec(dllimport) int  __stdcall DescribePixelFormat(HDC, int, UINT, LPPIXELFORMATDESCRIPTOR);





typedef UINT   (__stdcall* LPFNDEVMODE)(HWND, HMODULE, LPDEVMODE, LPSTR, LPSTR, LPDEVMODE, LPSTR, UINT);

typedef DWORD  (__stdcall* LPFNDEVCAPS)(LPSTR, LPSTR, UINT, LPSTR, LPDEVMODE);






































#line 2742 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"














#line 2757 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

















#line 2775 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

__declspec(dllimport) int  __stdcall DeviceCapabilitiesA(LPCSTR, LPCSTR, WORD,
                                LPSTR, const DEVMODEA *);
__declspec(dllimport) int  __stdcall DeviceCapabilitiesW(LPCWSTR, LPCWSTR, WORD,
                                LPWSTR, const DEVMODEW *);




#line 2785 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

__declspec(dllimport) int  __stdcall DrawEscape(HDC, int, int, LPCSTR);
__declspec(dllimport) BOOL __stdcall Ellipse(HDC, int, int, int, int);


__declspec(dllimport) int  __stdcall EnumFontFamiliesExA(HDC, LPLOGFONTA,FONTENUMPROCA, LPARAM,DWORD);
__declspec(dllimport) int  __stdcall EnumFontFamiliesExW(HDC, LPLOGFONTW,FONTENUMPROCW, LPARAM,DWORD);




#line 2797 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
#line 2798 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

__declspec(dllimport) int  __stdcall EnumFontFamiliesA(HDC, LPCSTR, FONTENUMPROCA, LPARAM);
__declspec(dllimport) int  __stdcall EnumFontFamiliesW(HDC, LPCWSTR, FONTENUMPROCW, LPARAM);




#line 2806 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
__declspec(dllimport) int  __stdcall EnumFontsA(HDC, LPCSTR,  FONTENUMPROCA, LPARAM);
__declspec(dllimport) int  __stdcall EnumFontsW(HDC, LPCWSTR,  FONTENUMPROCW, LPARAM);




#line 2813 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"


__declspec(dllimport) int  __stdcall EnumObjects(HDC, int, GOBJENUMPROC, LPARAM);


#line 2819 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"


__declspec(dllimport) BOOL __stdcall EqualRgn(HRGN, HRGN);
__declspec(dllimport) int  __stdcall Escape(HDC, int, int, LPCSTR, LPVOID);
__declspec(dllimport) int  __stdcall ExtEscape(HDC, int, int, LPCSTR, int, LPSTR);
__declspec(dllimport) int  __stdcall ExcludeClipRect(HDC, int, int, int, int);
__declspec(dllimport) HRGN __stdcall ExtCreateRegion(const XFORM *, DWORD, const RGNDATA *);
__declspec(dllimport) BOOL  __stdcall ExtFloodFill(HDC, int, int, COLORREF, UINT);
__declspec(dllimport) BOOL   __stdcall FillRgn(HDC, HRGN, HBRUSH);
__declspec(dllimport) BOOL   __stdcall FloodFill(HDC, int, int, COLORREF);
__declspec(dllimport) BOOL   __stdcall FrameRgn(HDC, HRGN, HBRUSH, int, int);
__declspec(dllimport) int   __stdcall GetROP2(HDC);
__declspec(dllimport) BOOL  __stdcall GetAspectRatioFilterEx(HDC, LPSIZE);
__declspec(dllimport) COLORREF __stdcall GetBkColor(HDC);




#line 2838 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

__declspec(dllimport) int   __stdcall GetBkMode(HDC);
__declspec(dllimport) LONG  __stdcall GetBitmapBits(HBITMAP, LONG, LPVOID);
__declspec(dllimport) BOOL  __stdcall GetBitmapDimensionEx(HBITMAP, LPSIZE);
__declspec(dllimport) UINT  __stdcall GetBoundsRect(HDC, LPRECT, UINT);

__declspec(dllimport) BOOL  __stdcall GetBrushOrgEx(HDC, LPPOINT);

__declspec(dllimport) BOOL  __stdcall GetCharWidthA(HDC, UINT, UINT, LPINT);
__declspec(dllimport) BOOL  __stdcall GetCharWidthW(HDC, UINT, UINT, LPINT);




#line 2853 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall GetCharWidth32A(HDC, UINT, UINT, LPINT);
__declspec(dllimport) BOOL  __stdcall GetCharWidth32W(HDC, UINT, UINT, LPINT);




#line 2860 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall GetCharWidthFloatA(HDC, UINT, UINT, PFLOAT);
__declspec(dllimport) BOOL  __stdcall GetCharWidthFloatW(HDC, UINT, UINT, PFLOAT);




#line 2867 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsA(HDC, UINT, UINT, LPABC);
__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsW(HDC, UINT, UINT, LPABC);




#line 2874 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsFloatA(HDC, UINT, UINT, LPABCFLOAT);
__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsFloatW(HDC, UINT, UINT, LPABCFLOAT);




#line 2881 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
__declspec(dllimport) int   __stdcall GetClipBox(HDC, LPRECT);
__declspec(dllimport) int   __stdcall GetClipRgn(HDC, HRGN);
__declspec(dllimport) int   __stdcall GetMetaRgn(HDC, HRGN);
__declspec(dllimport) HGDIOBJ __stdcall GetCurrentObject(HDC, UINT);
__declspec(dllimport) BOOL  __stdcall GetCurrentPositionEx(HDC, LPPOINT);
__declspec(dllimport) int   __stdcall GetDeviceCaps(HDC, int);
__declspec(dllimport) int   __stdcall GetDIBits(HDC, HBITMAP, UINT, UINT, LPVOID, LPBITMAPINFO, UINT);
__declspec(dllimport) DWORD __stdcall GetFontData(HDC, DWORD, DWORD, LPVOID, DWORD);
__declspec(dllimport) DWORD __stdcall GetGlyphOutlineA(HDC, UINT, UINT, LPGLYPHMETRICS, DWORD, LPVOID, const MAT2 *);
__declspec(dllimport) DWORD __stdcall GetGlyphOutlineW(HDC, UINT, UINT, LPGLYPHMETRICS, DWORD, LPVOID, const MAT2 *);




#line 2896 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
__declspec(dllimport) int   __stdcall GetGraphicsMode(HDC);
__declspec(dllimport) int   __stdcall GetMapMode(HDC);
__declspec(dllimport) UINT  __stdcall GetMetaFileBitsEx(HMETAFILE, UINT, LPVOID);
__declspec(dllimport) HMETAFILE   __stdcall GetMetaFileA(LPCSTR);
__declspec(dllimport) HMETAFILE   __stdcall GetMetaFileW(LPCWSTR);




#line 2906 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
__declspec(dllimport) COLORREF __stdcall GetNearestColor(HDC, COLORREF);
__declspec(dllimport) UINT  __stdcall GetNearestPaletteIndex(HPALETTE, COLORREF);
__declspec(dllimport) DWORD __stdcall GetObjectType(HGDIOBJ h);



__declspec(dllimport) UINT __stdcall GetOutlineTextMetricsA(HDC, UINT, LPOUTLINETEXTMETRICA);
__declspec(dllimport) UINT __stdcall GetOutlineTextMetricsW(HDC, UINT, LPOUTLINETEXTMETRICW);




#line 2919 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

#line 2921 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

__declspec(dllimport) UINT  __stdcall GetPaletteEntries(HPALETTE, UINT, UINT, LPPALETTEENTRY);
__declspec(dllimport) COLORREF __stdcall GetPixel(HDC, int, int);
__declspec(dllimport) int   __stdcall GetPixelFormat(HDC);
__declspec(dllimport) int   __stdcall GetPolyFillMode(HDC);
__declspec(dllimport) BOOL  __stdcall GetRasterizerCaps(LPRASTERIZER_STATUS, UINT);
__declspec(dllimport) DWORD __stdcall GetRegionData(HRGN, DWORD, LPRGNDATA);
__declspec(dllimport) int   __stdcall GetRgnBox(HRGN, LPRECT);
__declspec(dllimport) HGDIOBJ __stdcall GetStockObject(int);
__declspec(dllimport) int   __stdcall GetStretchBltMode(HDC);
__declspec(dllimport) UINT  __stdcall GetSystemPaletteEntries(HDC, UINT, UINT, LPPALETTEENTRY);
__declspec(dllimport) UINT  __stdcall GetSystemPaletteUse(HDC);
__declspec(dllimport) int   __stdcall GetTextCharacterExtra(HDC);
__declspec(dllimport) UINT  __stdcall GetTextAlign(HDC);
__declspec(dllimport) COLORREF __stdcall GetTextColor(HDC);

__declspec(dllimport) BOOL  __stdcall GetTextExtentPointA(
                    HDC,
                    LPCSTR,
                    int,
                    LPSIZE
                    );
__declspec(dllimport) BOOL  __stdcall GetTextExtentPointW(
                    HDC,
                    LPCWSTR,
                    int,
                    LPSIZE
                    );




#line 2954 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

__declspec(dllimport) BOOL  __stdcall GetTextExtentPoint32A(
                    HDC,
                    LPCSTR,
                    int,
                    LPSIZE
                    );
__declspec(dllimport) BOOL  __stdcall GetTextExtentPoint32W(
                    HDC,
                    LPCWSTR,
                    int,
                    LPSIZE
                    );




#line 2972 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

__declspec(dllimport) BOOL  __stdcall GetTextExtentExPointA(
                    HDC,
                    LPCSTR,
                    int,
                    int,
                    LPINT,
                    LPINT,
                    LPSIZE
                    );
__declspec(dllimport) BOOL  __stdcall GetTextExtentExPointW(
                    HDC,
                    LPCWSTR,
                    int,
                    int,
                    LPINT,
                    LPINT,
                    LPSIZE
                    );




#line 2996 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

__declspec(dllimport) int __stdcall GetTextCharset(HDC hdc);
__declspec(dllimport) int __stdcall GetTextCharsetInfo(HDC hdc, LPFONTSIGNATURE lpSig, DWORD dwFlags);
__declspec(dllimport) BOOL __stdcall TranslateCharsetInfo( DWORD  *lpSrc, LPCHARSETINFO lpCs, DWORD dwFlags);
__declspec(dllimport) DWORD __stdcall GetFontLanguageInfo( HDC );
__declspec(dllimport) DWORD __stdcall GetCharacterPlacementA(HDC, LPCSTR, int, int, LPGCP_RESULTSA, DWORD);
__declspec(dllimport) DWORD __stdcall GetCharacterPlacementW(HDC, LPCWSTR, int, int, LPGCP_RESULTSW, DWORD);




#line 3008 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
#line 3009 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"


















































































































































































#line 3188 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"


__declspec(dllimport) BOOL  __stdcall GetViewportExtEx(HDC, LPSIZE);
__declspec(dllimport) BOOL  __stdcall GetViewportOrgEx(HDC, LPPOINT);
__declspec(dllimport) BOOL  __stdcall GetWindowExtEx(HDC, LPSIZE);
__declspec(dllimport) BOOL  __stdcall GetWindowOrgEx(HDC, LPPOINT);

__declspec(dllimport) int  __stdcall IntersectClipRect(HDC, int, int, int, int);
__declspec(dllimport) BOOL __stdcall InvertRgn(HDC, HRGN);
__declspec(dllimport) BOOL __stdcall LineDDA(int, int, int, int, LINEDDAPROC, LPARAM);
__declspec(dllimport) BOOL __stdcall LineTo(HDC, int, int);
__declspec(dllimport) BOOL __stdcall MaskBlt(HDC, int, int, int, int,
              HDC, int, int, HBITMAP, int, int, DWORD);
__declspec(dllimport) BOOL __stdcall PlgBlt(HDC, const POINT *, HDC, int, int, int,
                     int, HBITMAP, int, int);

__declspec(dllimport) int  __stdcall OffsetClipRgn(HDC, int, int);
__declspec(dllimport) int  __stdcall OffsetRgn(HRGN, int, int);
__declspec(dllimport) BOOL __stdcall PatBlt(HDC, int, int, int, int, DWORD);
__declspec(dllimport) BOOL __stdcall Pie(HDC, int, int, int, int, int, int, int, int);
__declspec(dllimport) BOOL __stdcall PlayMetaFile(HDC, HMETAFILE);
__declspec(dllimport) BOOL __stdcall PaintRgn(HDC, HRGN);
__declspec(dllimport) BOOL __stdcall PolyPolygon(HDC, const POINT *, const INT *, int);
__declspec(dllimport) BOOL __stdcall PtInRegion(HRGN, int, int);
__declspec(dllimport) BOOL __stdcall PtVisible(HDC, int, int);
__declspec(dllimport) BOOL __stdcall RectInRegion(HRGN, const RECT *);
__declspec(dllimport) BOOL __stdcall RectVisible(HDC, const RECT *);
__declspec(dllimport) BOOL __stdcall Rectangle(HDC, int, int, int, int);
__declspec(dllimport) BOOL __stdcall RestoreDC(HDC, int);
__declspec(dllimport) HDC  __stdcall ResetDCA(HDC, const DEVMODEA *);
__declspec(dllimport) HDC  __stdcall ResetDCW(HDC, const DEVMODEW *);




#line 3224 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
__declspec(dllimport) UINT __stdcall RealizePalette(HDC);
__declspec(dllimport) BOOL __stdcall RemoveFontResourceA(LPCSTR);
__declspec(dllimport) BOOL __stdcall RemoveFontResourceW(LPCWSTR);




#line 3232 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall RoundRect(HDC, int, int, int, int, int, int);
__declspec(dllimport) BOOL __stdcall ResizePalette(HPALETTE, UINT);

__declspec(dllimport) int  __stdcall SaveDC(HDC);
__declspec(dllimport) int  __stdcall SelectClipRgn(HDC, HRGN);
__declspec(dllimport) int  __stdcall ExtSelectClipRgn(HDC, HRGN, int);
__declspec(dllimport) int  __stdcall SetMetaRgn(HDC);
__declspec(dllimport) HGDIOBJ __stdcall SelectObject(HDC, HGDIOBJ);
__declspec(dllimport) HPALETTE __stdcall SelectPalette(HDC, HPALETTE, BOOL);
__declspec(dllimport) COLORREF __stdcall SetBkColor(HDC, COLORREF);




#line 3247 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

__declspec(dllimport) int   __stdcall SetBkMode(HDC, int);
__declspec(dllimport) LONG  __stdcall SetBitmapBits(HBITMAP, DWORD, const void *);

__declspec(dllimport) UINT  __stdcall SetBoundsRect(HDC, const RECT *, UINT);
__declspec(dllimport) int   __stdcall SetDIBits(HDC, HBITMAP, UINT, UINT, const void *, const BITMAPINFO *, UINT);
__declspec(dllimport) int   __stdcall SetDIBitsToDevice(HDC, int, int, DWORD, DWORD, int,
        int, UINT, UINT, const void *, const BITMAPINFO *, UINT);
__declspec(dllimport) DWORD __stdcall SetMapperFlags(HDC, DWORD);
__declspec(dllimport) int   __stdcall SetGraphicsMode(HDC hdc, int iMode);
__declspec(dllimport) int   __stdcall SetMapMode(HDC, int);
__declspec(dllimport) HMETAFILE   __stdcall SetMetaFileBitsEx(UINT, const BYTE *);
__declspec(dllimport) UINT  __stdcall SetPaletteEntries(HPALETTE, UINT, UINT, const PALETTEENTRY *);
__declspec(dllimport) COLORREF __stdcall SetPixel(HDC, int, int, COLORREF);
__declspec(dllimport) BOOL   __stdcall SetPixelV(HDC, int, int, COLORREF);
__declspec(dllimport) BOOL  __stdcall SetPixelFormat(HDC, int, const PIXELFORMATDESCRIPTOR *);
__declspec(dllimport) int   __stdcall SetPolyFillMode(HDC, int);
__declspec(dllimport) BOOL   __stdcall StretchBlt(HDC, int, int, int, int, HDC, int, int, int, int, DWORD);
__declspec(dllimport) BOOL   __stdcall SetRectRgn(HRGN, int, int, int, int);
__declspec(dllimport) int   __stdcall StretchDIBits(HDC, int, int, int, int, int, int, int, int, const
        void *, const BITMAPINFO *, UINT, DWORD);
__declspec(dllimport) int   __stdcall SetROP2(HDC, int);
__declspec(dllimport) int   __stdcall SetStretchBltMode(HDC, int);
__declspec(dllimport) UINT  __stdcall SetSystemPaletteUse(HDC, UINT);
__declspec(dllimport) int   __stdcall SetTextCharacterExtra(HDC, int);
__declspec(dllimport) COLORREF __stdcall SetTextColor(HDC, COLORREF);
__declspec(dllimport) UINT  __stdcall SetTextAlign(HDC, UINT);
__declspec(dllimport) BOOL  __stdcall SetTextJustification(HDC, int, int);
__declspec(dllimport) BOOL  __stdcall UpdateColors(HDC);








typedef USHORT COLOR16;

typedef struct _TRIVERTEX
{
    LONG    x;
    LONG    y;
    COLOR16 Red;
    COLOR16 Green;
    COLOR16 Blue;
    COLOR16 Alpha;
}TRIVERTEX,*PTRIVERTEX,*LPTRIVERTEX;

typedef struct _GRADIENT_TRIANGLE
{
    ULONG Vertex1;
    ULONG Vertex2;
    ULONG Vertex3;
} GRADIENT_TRIANGLE,*PGRADIENT_TRIANGLE,*LPGRADIENT_TRIANGLE;

typedef struct _GRADIENT_RECT
{
    ULONG UpperLeft;
    ULONG LowerRight;
}GRADIENT_RECT,*PGRADIENT_RECT,*LPGRADIENT_RECT;

typedef struct _BLENDFUNCTION
{
    BYTE   BlendOp;
    BYTE   BlendFlags;
    BYTE   SourceConstantAlpha;
    BYTE   AlphaFormat;
}BLENDFUNCTION,*PBLENDFUNCTION;

















__declspec(dllimport) BOOL  __stdcall AlphaBlend(HDC,int,int,int,int,HDC,int,int,int,int,BLENDFUNCTION);

__declspec(dllimport) BOOL  __stdcall AlphaDIBBlend(HDC,int,int,int,int,const void *,
        const BITMAPINFO *,UINT,int,int,int,int,BLENDFUNCTION);

__declspec(dllimport) BOOL  __stdcall TransparentBlt(HDC,int,int,int,int,HDC,int,int,int,int,UINT);

__declspec(dllimport) BOOL  __stdcall TransparentDIBits(HDC,int,int,int,int,const void *,
        const BITMAPINFO *,UINT,int,int,int,int,UINT);










__declspec(dllimport) BOOL  __stdcall GradientFill(HDC,PTRIVERTEX,ULONG,PVOID,ULONG,ULONG);

#line 3355 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"




__declspec(dllimport) BOOL  __stdcall PlayMetaFileRecord(HDC, LPHANDLETABLE, LPMETARECORD, UINT);
typedef int (__stdcall* MFENUMPROC)(HDC, HANDLETABLE *, METARECORD *, int, LPARAM);
__declspec(dllimport) BOOL  __stdcall EnumMetaFile(HDC, HMETAFILE, MFENUMPROC, LPARAM);

typedef int (__stdcall* ENHMFENUMPROC)(HDC, HANDLETABLE *, const ENHMETARECORD *, int, LPARAM);



__declspec(dllimport) HENHMETAFILE __stdcall CloseEnhMetaFile(HDC);
__declspec(dllimport) HENHMETAFILE __stdcall CopyEnhMetaFileA(HENHMETAFILE, LPCSTR);
__declspec(dllimport) HENHMETAFILE __stdcall CopyEnhMetaFileW(HENHMETAFILE, LPCWSTR);




#line 3375 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
__declspec(dllimport) HDC   __stdcall CreateEnhMetaFileA(HDC, LPCSTR, const RECT *, LPCSTR);
__declspec(dllimport) HDC   __stdcall CreateEnhMetaFileW(HDC, LPCWSTR, const RECT *, LPCWSTR);




#line 3382 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall DeleteEnhMetaFile(HENHMETAFILE);
__declspec(dllimport) BOOL  __stdcall EnumEnhMetaFile(HDC, HENHMETAFILE, ENHMFENUMPROC,
        LPVOID, const RECT *);
__declspec(dllimport) HENHMETAFILE  __stdcall GetEnhMetaFileA(LPCSTR);
__declspec(dllimport) HENHMETAFILE  __stdcall GetEnhMetaFileW(LPCWSTR);




#line 3392 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
__declspec(dllimport) UINT  __stdcall GetEnhMetaFileBits(HENHMETAFILE, UINT, LPBYTE);
__declspec(dllimport) UINT  __stdcall GetEnhMetaFileDescriptionA(HENHMETAFILE, UINT, LPSTR );
__declspec(dllimport) UINT  __stdcall GetEnhMetaFileDescriptionW(HENHMETAFILE, UINT, LPWSTR );




#line 3400 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
__declspec(dllimport) UINT  __stdcall GetEnhMetaFileHeader(HENHMETAFILE, UINT, LPENHMETAHEADER );
__declspec(dllimport) UINT  __stdcall GetEnhMetaFilePaletteEntries(HENHMETAFILE, UINT, LPPALETTEENTRY );
__declspec(dllimport) UINT  __stdcall GetEnhMetaFilePixelFormat(HENHMETAFILE, UINT,
                                                 PIXELFORMATDESCRIPTOR *);
__declspec(dllimport) UINT  __stdcall GetWinMetaFileBits(HENHMETAFILE, UINT, LPBYTE, INT, HDC);
__declspec(dllimport) BOOL  __stdcall PlayEnhMetaFile(HDC, HENHMETAFILE, const RECT *);
__declspec(dllimport) BOOL  __stdcall PlayEnhMetaFileRecord(HDC, LPHANDLETABLE, const ENHMETARECORD *, UINT);
__declspec(dllimport) HENHMETAFILE  __stdcall SetEnhMetaFileBits(UINT, const BYTE *);
__declspec(dllimport) HENHMETAFILE  __stdcall SetWinMetaFileBits(UINT, const BYTE *, HDC, const METAFILEPICT *);
__declspec(dllimport) BOOL  __stdcall GdiComment(HDC, UINT, const BYTE *);

#line 3412 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"



__declspec(dllimport) BOOL __stdcall GetTextMetricsA(HDC, LPTEXTMETRICA);
__declspec(dllimport) BOOL __stdcall GetTextMetricsW(HDC, LPTEXTMETRICW);




#line 3422 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

#line 3424 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"



typedef struct tagDIBSECTION {
    BITMAP              dsBm;
    BITMAPINFOHEADER    dsBmih;
    DWORD               dsBitfields[3];
    HANDLE              dshSection;
    DWORD               dsOffset;
} DIBSECTION,  *LPDIBSECTION, *PDIBSECTION;

__declspec(dllimport) BOOL __stdcall AngleArc(HDC, int, int, DWORD, FLOAT, FLOAT);
__declspec(dllimport) BOOL __stdcall PolyPolyline(HDC, const POINT *, const DWORD *, DWORD);
__declspec(dllimport) BOOL __stdcall GetWorldTransform(HDC, LPXFORM);
__declspec(dllimport) BOOL __stdcall SetWorldTransform(HDC, const XFORM *);
__declspec(dllimport) BOOL __stdcall ModifyWorldTransform(HDC, const XFORM *, DWORD);
__declspec(dllimport) BOOL __stdcall CombineTransform(LPXFORM, const XFORM *, const XFORM *);
__declspec(dllimport) HBITMAP __stdcall CreateDIBSection(HDC, const BITMAPINFO *, UINT, void **, HANDLE, DWORD);
__declspec(dllimport) UINT __stdcall GetDIBColorTable(HDC, UINT, UINT, RGBQUAD *);
__declspec(dllimport) UINT __stdcall SetDIBColorTable(HDC, UINT, UINT, const RGBQUAD *);




































typedef struct  tagCOLORADJUSTMENT {
    WORD   caSize;
    WORD   caFlags;
    WORD   caIlluminantIndex;
    WORD   caRedGamma;
    WORD   caGreenGamma;
    WORD   caBlueGamma;
    WORD   caReferenceBlack;
    WORD   caReferenceWhite;
    SHORT  caContrast;
    SHORT  caBrightness;
    SHORT  caColorfulness;
    SHORT  caRedGreenTint;
} COLORADJUSTMENT, *PCOLORADJUSTMENT,  *LPCOLORADJUSTMENT;

__declspec(dllimport) BOOL __stdcall SetColorAdjustment(HDC, const COLORADJUSTMENT *);
__declspec(dllimport) BOOL __stdcall GetColorAdjustment(HDC, LPCOLORADJUSTMENT);
__declspec(dllimport) HPALETTE __stdcall CreateHalftonePalette(HDC);


typedef BOOL (__stdcall* ABORTPROC)(HDC, int);


#line 3504 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

typedef struct _DOCINFOA {
    int     cbSize;
    LPCSTR   lpszDocName;
    LPCSTR   lpszOutput;

    LPCSTR   lpszDatatype;
    DWORD    fwType;
#line 3513 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
} DOCINFOA, *LPDOCINFOA;
typedef struct _DOCINFOW {
    int     cbSize;
    LPCWSTR  lpszDocName;
    LPCWSTR  lpszOutput;

    LPCWSTR  lpszDatatype;
    DWORD    fwType;
#line 3522 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
} DOCINFOW, *LPDOCINFOW;




typedef DOCINFOA DOCINFO;
typedef LPDOCINFOA LPDOCINFO;
#line 3530 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"




#line 3535 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

__declspec(dllimport) int __stdcall StartDocA(HDC, const DOCINFOA *);
__declspec(dllimport) int __stdcall StartDocW(HDC, const DOCINFOW *);




#line 3543 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
__declspec(dllimport) int __stdcall EndDoc(HDC);
__declspec(dllimport) int __stdcall StartPage(HDC);
__declspec(dllimport) int __stdcall EndPage(HDC);
__declspec(dllimport) int __stdcall AbortDoc(HDC);
__declspec(dllimport) int __stdcall SetAbortProc(HDC, ABORTPROC);

__declspec(dllimport) BOOL __stdcall AbortPath(HDC);
__declspec(dllimport) BOOL __stdcall ArcTo(HDC, int, int, int, int, int, int,int, int);
__declspec(dllimport) BOOL __stdcall BeginPath(HDC);
__declspec(dllimport) BOOL __stdcall CloseFigure(HDC);
__declspec(dllimport) BOOL __stdcall EndPath(HDC);
__declspec(dllimport) BOOL __stdcall FillPath(HDC);
__declspec(dllimport) BOOL __stdcall FlattenPath(HDC);
__declspec(dllimport) int  __stdcall GetPath(HDC, LPPOINT, LPBYTE, int);
__declspec(dllimport) HRGN __stdcall PathToRegion(HDC);
__declspec(dllimport) BOOL __stdcall PolyDraw(HDC, const POINT *, const BYTE *, int);
__declspec(dllimport) BOOL __stdcall SelectClipPath(HDC, int);
__declspec(dllimport) int  __stdcall SetArcDirection(HDC, int);
__declspec(dllimport) BOOL __stdcall SetMiterLimit(HDC, FLOAT, PFLOAT);
__declspec(dllimport) BOOL __stdcall StrokeAndFillPath(HDC);
__declspec(dllimport) BOOL __stdcall StrokePath(HDC);
__declspec(dllimport) BOOL __stdcall WidenPath(HDC);
__declspec(dllimport) HPEN __stdcall ExtCreatePen(DWORD, DWORD, const LOGBRUSH *, DWORD, const DWORD *);
__declspec(dllimport) BOOL __stdcall GetMiterLimit(HDC, PFLOAT);
__declspec(dllimport) int  __stdcall GetArcDirection(HDC);

__declspec(dllimport) int   __stdcall GetObjectA(HGDIOBJ, int, LPVOID);
__declspec(dllimport) int   __stdcall GetObjectW(HGDIOBJ, int, LPVOID);




#line 3576 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall MoveToEx(HDC, int, int, LPPOINT);
__declspec(dllimport) BOOL  __stdcall TextOutA(HDC, int, int, LPCSTR, int);
__declspec(dllimport) BOOL  __stdcall TextOutW(HDC, int, int, LPCWSTR, int);




#line 3584 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall ExtTextOutA(HDC, int, int, UINT, const RECT *,LPCSTR, UINT, const INT *);
__declspec(dllimport) BOOL  __stdcall ExtTextOutW(HDC, int, int, UINT, const RECT *,LPCWSTR, UINT, const INT *);




#line 3591 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall PolyTextOutA(HDC, const POLYTEXTA *, int);
__declspec(dllimport) BOOL  __stdcall PolyTextOutW(HDC, const POLYTEXTW *, int);




#line 3598 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

__declspec(dllimport) HRGN  __stdcall CreatePolygonRgn(const POINT *, int, int);
__declspec(dllimport) BOOL  __stdcall DPtoLP(HDC, LPPOINT, int);
__declspec(dllimport) BOOL  __stdcall LPtoDP(HDC, LPPOINT, int);
__declspec(dllimport) BOOL  __stdcall Polygon(HDC, const POINT *, int);
__declspec(dllimport) BOOL  __stdcall Polyline(HDC, const POINT *, int);

__declspec(dllimport) BOOL  __stdcall PolyBezier(HDC, const POINT *, DWORD);
__declspec(dllimport) BOOL  __stdcall PolyBezierTo(HDC, const POINT *, DWORD);
__declspec(dllimport) BOOL  __stdcall PolylineTo(HDC, const POINT *, DWORD);

__declspec(dllimport) BOOL  __stdcall SetViewportExtEx(HDC, int, int, LPSIZE);
__declspec(dllimport) BOOL  __stdcall SetViewportOrgEx(HDC, int, int, LPPOINT);
__declspec(dllimport) BOOL  __stdcall SetWindowExtEx(HDC, int, int, LPSIZE);
__declspec(dllimport) BOOL  __stdcall SetWindowOrgEx(HDC, int, int, LPPOINT);

__declspec(dllimport) BOOL  __stdcall OffsetViewportOrgEx(HDC, int, int, LPPOINT);
__declspec(dllimport) BOOL  __stdcall OffsetWindowOrgEx(HDC, int, int, LPPOINT);
__declspec(dllimport) BOOL  __stdcall ScaleViewportExtEx(HDC, int, int, int, int, LPSIZE);
__declspec(dllimport) BOOL  __stdcall ScaleWindowExtEx(HDC, int, int, int, int, LPSIZE);
__declspec(dllimport) BOOL  __stdcall SetBitmapDimensionEx(HBITMAP, int, int, LPSIZE);
__declspec(dllimport) BOOL  __stdcall SetBrushOrgEx(HDC, int, int, LPPOINT);

__declspec(dllimport) int   __stdcall GetTextFaceA(HDC, int, LPSTR);
__declspec(dllimport) int   __stdcall GetTextFaceW(HDC, int, LPWSTR);




#line 3628 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"



typedef struct tagKERNINGPAIR {
   WORD wFirst;
   WORD wSecond;
   int  iKernAmount;
} KERNINGPAIR, *LPKERNINGPAIR;

__declspec(dllimport) DWORD __stdcall GetKerningPairsA(HDC, DWORD, LPKERNINGPAIR);
__declspec(dllimport) DWORD __stdcall GetKerningPairsW(HDC, DWORD, LPKERNINGPAIR);




#line 3644 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

__declspec(dllimport) BOOL  __stdcall GetDCOrgEx(HDC,LPPOINT);
__declspec(dllimport) BOOL  __stdcall FixBrushOrgEx(HDC,int,int,LPPOINT);
__declspec(dllimport) BOOL  __stdcall UnrealizeObject(HGDIOBJ);

__declspec(dllimport) BOOL  __stdcall GdiFlush();
__declspec(dllimport) DWORD __stdcall GdiSetBatchLimit(DWORD);
__declspec(dllimport) DWORD __stdcall GdiGetBatchLimit();









typedef int (__stdcall* ICMENUMPROCA)(LPSTR, LPARAM);
typedef int (__stdcall* ICMENUMPROCW)(LPWSTR, LPARAM);




#line 3668 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

__declspec(dllimport) int         __stdcall SetICMMode(HDC, int);
__declspec(dllimport) BOOL        __stdcall CheckColorsInGamut(HDC,LPVOID,LPVOID,DWORD);
__declspec(dllimport) HCOLORSPACE __stdcall GetColorSpace(HDC);
__declspec(dllimport) BOOL        __stdcall GetLogColorSpaceA(HCOLORSPACE,LPLOGCOLORSPACEA,DWORD);
__declspec(dllimport) BOOL        __stdcall GetLogColorSpaceW(HCOLORSPACE,LPLOGCOLORSPACEW,DWORD);




#line 3679 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
__declspec(dllimport) HCOLORSPACE __stdcall CreateColorSpaceA(LPLOGCOLORSPACEA);
__declspec(dllimport) HCOLORSPACE __stdcall CreateColorSpaceW(LPLOGCOLORSPACEW);




#line 3686 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
__declspec(dllimport) HCOLORSPACE __stdcall SetColorSpace(HDC,HCOLORSPACE);
__declspec(dllimport) BOOL        __stdcall DeleteColorSpace(HCOLORSPACE);
__declspec(dllimport) BOOL        __stdcall GetICMProfileA(HDC,LPDWORD,LPSTR);
__declspec(dllimport) BOOL        __stdcall GetICMProfileW(HDC,LPDWORD,LPWSTR);




#line 3695 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
__declspec(dllimport) BOOL        __stdcall SetICMProfileA(HDC,LPSTR);
__declspec(dllimport) BOOL        __stdcall SetICMProfileW(HDC,LPWSTR);




#line 3702 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
__declspec(dllimport) BOOL        __stdcall GetDeviceGammaRamp(HDC,LPVOID);
__declspec(dllimport) BOOL        __stdcall SetDeviceGammaRamp(HDC,LPVOID);
__declspec(dllimport) BOOL        __stdcall ColorMatchToTarget(HDC,HDC,DWORD);
__declspec(dllimport) int         __stdcall EnumICMProfilesA(HDC,ICMENUMPROCA,LPARAM);
__declspec(dllimport) int         __stdcall EnumICMProfilesW(HDC,ICMENUMPROCW,LPARAM);




#line 3712 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
__declspec(dllimport) BOOL        __stdcall UpdateICMRegKeyA(DWORD,LPSTR,LPSTR,UINT);
__declspec(dllimport) BOOL        __stdcall UpdateICMRegKeyW(DWORD,LPWSTR,LPWSTR,UINT);




#line 3719 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
#line 3720 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"



#line 3724 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"









#line 3734 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"




















































































































#line 3851 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"


















#line 3870 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"





#line 3876 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"



#line 3880 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"



typedef struct tagEMR
{
    DWORD   iType;              
    DWORD   nSize;              
                                
} EMR, *PEMR;



typedef struct tagEMRTEXT
{
    POINTL  ptlReference;
    DWORD   nChars;
    DWORD   offString;          
    DWORD   fOptions;
    RECTL   rcl;
    DWORD   offDx;              
                                
} EMRTEXT, *PEMRTEXT;



typedef struct tagABORTPATH
{
    EMR     emr;
} EMRABORTPATH,      *PEMRABORTPATH,
  EMRBEGINPATH,      *PEMRBEGINPATH,
  EMRENDPATH,        *PEMRENDPATH,
  EMRCLOSEFIGURE,    *PEMRCLOSEFIGURE,
  EMRFLATTENPATH,    *PEMRFLATTENPATH,
  EMRWIDENPATH,      *PEMRWIDENPATH,
  EMRSETMETARGN,     *PEMRSETMETARGN,
  EMRSAVEDC,         *PEMRSAVEDC,
  EMRREALIZEPALETTE, *PEMRREALIZEPALETTE;

typedef struct tagEMRSELECTCLIPPATH
{
    EMR     emr;
    DWORD   iMode;
} EMRSELECTCLIPPATH,    *PEMRSELECTCLIPPATH,
  EMRSETBKMODE,         *PEMRSETBKMODE,
  EMRSETMAPMODE,        *PEMRSETMAPMODE,
  EMRSETPOLYFILLMODE,   *PEMRSETPOLYFILLMODE,
  EMRSETROP2,           *PEMRSETROP2,
  EMRSETSTRETCHBLTMODE, *PEMRSETSTRETCHBLTMODE,
  EMRSETICMMODE,        *PEMRSETICMMODE,
  EMRSETTEXTALIGN,      *PEMRSETTEXTALIGN;

typedef struct tagEMRSETMITERLIMIT
{
    EMR     emr;
    FLOAT   eMiterLimit;
} EMRSETMITERLIMIT, *PEMRSETMITERLIMIT;

typedef struct tagEMRRESTOREDC
{
    EMR     emr;
    LONG    iRelative;          
} EMRRESTOREDC, *PEMRRESTOREDC;

typedef struct tagEMRSETARCDIRECTION
{
    EMR     emr;
    DWORD   iArcDirection;      
                                
} EMRSETARCDIRECTION, *PEMRSETARCDIRECTION;

typedef struct tagEMRSETMAPPERFLAGS
{
    EMR     emr;
    DWORD   dwFlags;
} EMRSETMAPPERFLAGS, *PEMRSETMAPPERFLAGS;

typedef struct tagEMRSETTEXTCOLOR
{
    EMR     emr;
    COLORREF crColor;
} EMRSETBKCOLOR,   *PEMRSETBKCOLOR,
  EMRSETTEXTCOLOR, *PEMRSETTEXTCOLOR;

typedef struct tagEMRSELECTOBJECT
{
    EMR     emr;
    DWORD   ihObject;           
} EMRSELECTOBJECT, *PEMRSELECTOBJECT,
  EMRDELETEOBJECT, *PEMRDELETEOBJECT;


typedef struct tagEMRSELECTCOLORSPACE
{
    EMR     emr;
    DWORD   ihCS;               
} EMRSELECTCOLORSPACE, *PEMRSELECTCOLORSPACE,
  EMRDELETECOLORSPACE, *PEMRDELETECOLORSPACE;
#line 3978 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

typedef struct tagEMRSELECTPALETTE
{
    EMR     emr;
    DWORD   ihPal;              
} EMRSELECTPALETTE, *PEMRSELECTPALETTE;

typedef struct tagEMRRESIZEPALETTE
{
    EMR     emr;
    DWORD   ihPal;              
    DWORD   cEntries;
} EMRRESIZEPALETTE, *PEMRRESIZEPALETTE;

typedef struct tagEMRSETPALETTEENTRIES
{
    EMR     emr;
    DWORD   ihPal;              
    DWORD   iStart;
    DWORD   cEntries;
    PALETTEENTRY aPalEntries[1];
} EMRSETPALETTEENTRIES, *PEMRSETPALETTEENTRIES;

typedef struct tagEMRSETCOLORADJUSTMENT
{
    EMR     emr;
    COLORADJUSTMENT ColorAdjustment;
} EMRSETCOLORADJUSTMENT, *PEMRSETCOLORADJUSTMENT;

typedef struct tagEMRGDICOMMENT
{
    EMR     emr;
    DWORD   cbData;             
    BYTE    Data[1];
} EMRGDICOMMENT, *PEMRGDICOMMENT;

typedef struct tagEMREOF
{
    EMR     emr;
    DWORD   nPalEntries;        
    DWORD   offPalEntries;      
    DWORD   nSizeLast;          
                                
                                
} EMREOF, *PEMREOF;

typedef struct tagEMRLINETO
{
    EMR     emr;
    POINTL  ptl;
} EMRLINETO,   *PEMRLINETO,
  EMRMOVETOEX, *PEMRMOVETOEX;

typedef struct tagEMROFFSETCLIPRGN
{
    EMR     emr;
    POINTL  ptlOffset;
} EMROFFSETCLIPRGN, *PEMROFFSETCLIPRGN;

typedef struct tagEMRFILLPATH
{
    EMR     emr;
    RECTL   rclBounds;          
} EMRFILLPATH,          *PEMRFILLPATH,
  EMRSTROKEANDFILLPATH, *PEMRSTROKEANDFILLPATH,
  EMRSTROKEPATH,        *PEMRSTROKEPATH;

typedef struct tagEMREXCLUDECLIPRECT
{
    EMR     emr;
    RECTL   rclClip;
} EMREXCLUDECLIPRECT,   *PEMREXCLUDECLIPRECT,
  EMRINTERSECTCLIPRECT, *PEMRINTERSECTCLIPRECT;

typedef struct tagEMRSETVIEWPORTORGEX
{
    EMR     emr;
    POINTL  ptlOrigin;
} EMRSETVIEWPORTORGEX, *PEMRSETVIEWPORTORGEX,
  EMRSETWINDOWORGEX,   *PEMRSETWINDOWORGEX,
  EMRSETBRUSHORGEX,    *PEMRSETBRUSHORGEX;

typedef struct tagEMRSETVIEWPORTEXTEX
{
    EMR     emr;
    SIZEL   szlExtent;
} EMRSETVIEWPORTEXTEX, *PEMRSETVIEWPORTEXTEX,
  EMRSETWINDOWEXTEX,   *PEMRSETWINDOWEXTEX;

typedef struct tagEMRSCALEVIEWPORTEXTEX
{
    EMR     emr;
    LONG    xNum;
    LONG    xDenom;
    LONG    yNum;
    LONG    yDenom;
} EMRSCALEVIEWPORTEXTEX, *PEMRSCALEVIEWPORTEXTEX,
  EMRSCALEWINDOWEXTEX,   *PEMRSCALEWINDOWEXTEX;

typedef struct tagEMRSETWORLDTRANSFORM
{
    EMR     emr;
    XFORM   xform;
} EMRSETWORLDTRANSFORM, *PEMRSETWORLDTRANSFORM;

typedef struct tagEMRMODIFYWORLDTRANSFORM
{
    EMR     emr;
    XFORM   xform;
    DWORD   iMode;
} EMRMODIFYWORLDTRANSFORM, *PEMRMODIFYWORLDTRANSFORM;

typedef struct tagEMRSETPIXELV
{
    EMR     emr;
    POINTL  ptlPixel;
    COLORREF crColor;
} EMRSETPIXELV, *PEMRSETPIXELV;

typedef struct tagEMREXTFLOODFILL
{
    EMR     emr;
    POINTL  ptlStart;
    COLORREF crColor;
    DWORD   iMode;
} EMREXTFLOODFILL, *PEMREXTFLOODFILL;

typedef struct tagEMRELLIPSE
{
    EMR     emr;
    RECTL   rclBox;             
} EMRELLIPSE,  *PEMRELLIPSE,
  EMRRECTANGLE, *PEMRRECTANGLE;

typedef struct tagEMRROUNDRECT
{
    EMR     emr;
    RECTL   rclBox;             
    SIZEL   szlCorner;
} EMRROUNDRECT, *PEMRROUNDRECT;

typedef struct tagEMRARC
{
    EMR     emr;
    RECTL   rclBox;             
    POINTL  ptlStart;
    POINTL  ptlEnd;
} EMRARC,   *PEMRARC,
  EMRARCTO, *PEMRARCTO,
  EMRCHORD, *PEMRCHORD,
  EMRPIE,   *PEMRPIE;

typedef struct tagEMRANGLEARC
{
    EMR     emr;
    POINTL  ptlCenter;
    DWORD   nRadius;
    FLOAT   eStartAngle;
    FLOAT   eSweepAngle;
} EMRANGLEARC, *PEMRANGLEARC;

typedef struct tagEMRPOLYLINE
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cptl;
    POINTL  aptl[1];
} EMRPOLYLINE,     *PEMRPOLYLINE,
  EMRPOLYBEZIER,   *PEMRPOLYBEZIER,
  EMRPOLYGON,      *PEMRPOLYGON,
  EMRPOLYBEZIERTO, *PEMRPOLYBEZIERTO,
  EMRPOLYLINETO,   *PEMRPOLYLINETO;

typedef struct tagEMRPOLYLINE16
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cpts;
    POINTS  apts[1];
} EMRPOLYLINE16,     *PEMRPOLYLINE16,
  EMRPOLYBEZIER16,   *PEMRPOLYBEZIER16,
  EMRPOLYGON16,      *PEMRPOLYGON16,
  EMRPOLYBEZIERTO16, *PEMRPOLYBEZIERTO16,
  EMRPOLYLINETO16,   *PEMRPOLYLINETO16;

typedef struct tagEMRPOLYDRAW
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cptl;               
    POINTL  aptl[1];            
    BYTE    abTypes[1];         
} EMRPOLYDRAW, *PEMRPOLYDRAW;

typedef struct tagEMRPOLYDRAW16
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cpts;               
    POINTS  apts[1];            
    BYTE    abTypes[1];         
} EMRPOLYDRAW16, *PEMRPOLYDRAW16;

typedef struct tagEMRPOLYPOLYLINE
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   nPolys;             
    DWORD   cptl;               
    DWORD   aPolyCounts[1];     
    POINTL  aptl[1];            
} EMRPOLYPOLYLINE, *PEMRPOLYPOLYLINE,
  EMRPOLYPOLYGON,  *PEMRPOLYPOLYGON;

typedef struct tagEMRPOLYPOLYLINE16
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   nPolys;             
    DWORD   cpts;               
    DWORD   aPolyCounts[1];     
    POINTS  apts[1];            
} EMRPOLYPOLYLINE16, *PEMRPOLYPOLYLINE16,
  EMRPOLYPOLYGON16,  *PEMRPOLYPOLYGON16;

typedef struct tagEMRINVERTRGN
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbRgnData;          
    BYTE    RgnData[1];
} EMRINVERTRGN, *PEMRINVERTRGN,
  EMRPAINTRGN,  *PEMRPAINTRGN;

typedef struct tagEMRFILLRGN
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbRgnData;          
    DWORD   ihBrush;            
    BYTE    RgnData[1];
} EMRFILLRGN, *PEMRFILLRGN;

typedef struct tagEMRFRAMERGN
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbRgnData;          
    DWORD   ihBrush;            
    SIZEL   szlStroke;
    BYTE    RgnData[1];
} EMRFRAMERGN, *PEMRFRAMERGN;













#line 4244 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

typedef struct tagEMREXTSELECTCLIPRGN
{
    EMR     emr;
    DWORD   cbRgnData;          
    DWORD   iMode;
    BYTE    RgnData[1];
} EMREXTSELECTCLIPRGN, *PEMREXTSELECTCLIPRGN;

typedef struct tagEMREXTTEXTOUTA
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   iGraphicsMode;      
    FLOAT   exScale;            
    FLOAT   eyScale;            
    EMRTEXT emrtext;            
                                
} EMREXTTEXTOUTA, *PEMREXTTEXTOUTA,
  EMREXTTEXTOUTW, *PEMREXTTEXTOUTW;

typedef struct tagEMRPOLYTEXTOUTA
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   iGraphicsMode;      
    FLOAT   exScale;            
    FLOAT   eyScale;            
    LONG    cStrings;
    EMRTEXT aemrtext[1];        
                                
} EMRPOLYTEXTOUTA, *PEMRPOLYTEXTOUTA,
  EMRPOLYTEXTOUTW, *PEMRPOLYTEXTOUTW;

typedef struct tagEMRBITBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
} EMRBITBLT, *PEMRBITBLT;

typedef struct tagEMRSTRETCHBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    cxSrc;
    LONG    cySrc;
} EMRSTRETCHBLT, *PEMRSTRETCHBLT;

typedef struct tagEMRMASKBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    xMask;
    LONG    yMask;
    DWORD   iUsageMask;         
    DWORD   offBmiMask;         
    DWORD   cbBmiMask;          
    DWORD   offBitsMask;        
    DWORD   cbBitsMask;         
} EMRMASKBLT, *PEMRMASKBLT;

typedef struct tagEMRPLGBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    POINTL  aptlDest[3];
    LONG    xSrc;
    LONG    ySrc;
    LONG    cxSrc;
    LONG    cySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    xMask;
    LONG    yMask;
    DWORD   iUsageMask;         
    DWORD   offBmiMask;         
    DWORD   cbBmiMask;          
    DWORD   offBitsMask;        
    DWORD   cbBitsMask;         
} EMRPLGBLT, *PEMRPLGBLT;

typedef struct tagEMRSETDIBITSTODEVICE
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    xSrc;
    LONG    ySrc;
    LONG    cxSrc;
    LONG    cySrc;
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    DWORD   iUsageSrc;          
    DWORD   iStartScan;
    DWORD   cScans;
} EMRSETDIBITSTODEVICE, *PEMRSETDIBITSTODEVICE;

typedef struct tagEMRSTRETCHDIBITS
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    xSrc;
    LONG    ySrc;
    LONG    cxSrc;
    LONG    cySrc;
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    DWORD   iUsageSrc;          
    DWORD   dwRop;
    LONG    cxDest;
    LONG    cyDest;
} EMRSTRETCHDIBITS, *PEMRSTRETCHDIBITS;

















































#line 4464 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

typedef struct tagEMREXTCREATEFONTINDIRECTW
{
    EMR     emr;
    DWORD   ihFont;             
    EXTLOGFONTW elfw;
} EMREXTCREATEFONTINDIRECTW, *PEMREXTCREATEFONTINDIRECTW;


typedef struct tagEMRCREATEPALETTE
{
    EMR     emr;
    DWORD   ihPal;              
    LOGPALETTE lgpl;            
                                
} EMRCREATEPALETTE, *PEMRCREATEPALETTE;



typedef struct tagEMRCREATECOLORSPACE
{
    EMR             emr;
    DWORD           ihCS;       
    LOGCOLORSPACEW  lcs;
} EMRCREATECOLORSPACE, *PEMRCREATECOLORSPACE;

#line 4491 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

typedef struct tagEMRCREATEPEN
{
    EMR     emr;
    DWORD   ihPen;              
    LOGPEN  lopn;
} EMRCREATEPEN, *PEMRCREATEPEN;

typedef struct tagEMREXTCREATEPEN
{
    EMR     emr;
    DWORD   ihPen;              
    DWORD   offBmi;             
    DWORD   cbBmi;              
                                
                                
    DWORD   offBits;            
    DWORD   cbBits;             
    EXTLOGPEN elp;              
} EMREXTCREATEPEN, *PEMREXTCREATEPEN;

typedef struct tagEMRCREATEBRUSHINDIRECT
{
    EMR     emr;
    DWORD   ihBrush;            
    LOGBRUSH lb;                
                                
} EMRCREATEBRUSHINDIRECT, *PEMRCREATEBRUSHINDIRECT;

typedef struct tagEMRCREATEMONOBRUSH
{
    EMR     emr;
    DWORD   ihBrush;            
    DWORD   iUsage;             
    DWORD   offBmi;             
    DWORD   cbBmi;              
    DWORD   offBits;            
    DWORD   cbBits;             
} EMRCREATEMONOBRUSH, *PEMRCREATEMONOBRUSH;

typedef struct tagEMRCREATEDIBPATTERNBRUSHPT
{
    EMR     emr;
    DWORD   ihBrush;            
    DWORD   iUsage;             
    DWORD   offBmi;             
    DWORD   cbBmi;              
                                
                                
    DWORD   offBits;            
    DWORD   cbBits;             
} EMRCREATEDIBPATTERNBRUSHPT, *PEMRCREATEDIBPATTERNBRUSHPT;

typedef struct tagEMRFORMAT
{
    DWORD   dSignature;         
    DWORD   nVersion;           
    DWORD   cbData;             
    DWORD   offData;            
                                
} EMRFORMAT, *PEMRFORMAT;

typedef struct tagEMRGLSRECORD
{
    EMR     emr;
    DWORD   cbData;             
    BYTE    Data[1];
} EMRGLSRECORD, *PEMRGLSRECORD;

typedef struct tagEMRGLSBOUNDEDRECORD
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbData;             
    BYTE    Data[1];
} EMRGLSBOUNDEDRECORD, *PEMRGLSBOUNDEDRECORD;

typedef struct tagEMRPIXELFORMAT
{
    EMR     emr;
    PIXELFORMATDESCRIPTOR pfd;
} EMRPIXELFORMAT, *PEMRPIXELFORMAT;



typedef struct tagEMRSETICMPROFILE
{
    EMR     emr;
    DWORD   dwFlags;            
    DWORD   cbName;             
    DWORD   cbData;             
    BYTE    Data[1];            
} EMRSETICMPROFILE, *PEMRSETICMPROFILE;








#line 4593 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"




__declspec(dllimport) BOOL  __stdcall wglCopyContext(HGLRC, HGLRC, UINT);
__declspec(dllimport) HGLRC __stdcall wglCreateContext(HDC);
__declspec(dllimport) HGLRC __stdcall wglCreateLayerContext(HDC, int);
__declspec(dllimport) BOOL  __stdcall wglDeleteContext(HGLRC);
__declspec(dllimport) HGLRC __stdcall wglGetCurrentContext(void);
__declspec(dllimport) HDC   __stdcall wglGetCurrentDC(void);
__declspec(dllimport) PROC  __stdcall wglGetProcAddress(LPCSTR);
__declspec(dllimport) BOOL  __stdcall wglMakeCurrent(HDC, HGLRC);
__declspec(dllimport) BOOL  __stdcall wglShareLists(HGLRC, HGLRC);
__declspec(dllimport) BOOL  __stdcall wglUseFontBitmapsA(HDC, DWORD, DWORD, DWORD);
__declspec(dllimport) BOOL  __stdcall wglUseFontBitmapsW(HDC, DWORD, DWORD, DWORD);




#line 4613 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall SwapBuffers(HDC);

typedef struct _POINTFLOAT {
    FLOAT   x;
    FLOAT   y;
} POINTFLOAT, *PPOINTFLOAT;

typedef struct _GLYPHMETRICSFLOAT {
    FLOAT       gmfBlackBoxX;
    FLOAT       gmfBlackBoxY;
    POINTFLOAT  gmfptGlyphOrigin;
    FLOAT       gmfCellIncX;
    FLOAT       gmfCellIncY;
} GLYPHMETRICSFLOAT, *PGLYPHMETRICSFLOAT,  *LPGLYPHMETRICSFLOAT;



__declspec(dllimport) BOOL  __stdcall wglUseFontOutlinesA(HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);
__declspec(dllimport) BOOL  __stdcall wglUseFontOutlinesW(HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);




#line 4639 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"


typedef struct tagLAYERPLANEDESCRIPTOR { 
    WORD  nSize;
    WORD  nVersion;
    DWORD dwFlags;
    BYTE  iPixelType;
    BYTE  cColorBits;
    BYTE  cRedBits;
    BYTE  cRedShift;
    BYTE  cGreenBits;
    BYTE  cGreenShift;
    BYTE  cBlueBits;
    BYTE  cBlueShift;
    BYTE  cAlphaBits;
    BYTE  cAlphaShift;
    BYTE  cAccumBits;
    BYTE  cAccumRedBits;
    BYTE  cAccumGreenBits;
    BYTE  cAccumBlueBits;
    BYTE  cAccumAlphaBits;
    BYTE  cDepthBits;
    BYTE  cStencilBits;
    BYTE  cAuxBuffers;
    BYTE  iLayerPlane;
    BYTE  bReserved;
    COLORREF crTransparent;
} LAYERPLANEDESCRIPTOR, *PLAYERPLANEDESCRIPTOR,  *LPLAYERPLANEDESCRIPTOR;

















































__declspec(dllimport) BOOL  __stdcall wglDescribeLayerPlane(HDC, int, int, UINT,
                                             LPLAYERPLANEDESCRIPTOR);
__declspec(dllimport) int   __stdcall wglSetLayerPaletteEntries(HDC, int, int, int,
                                                 const COLORREF *);
__declspec(dllimport) int   __stdcall wglGetLayerPaletteEntries(HDC, int, int, int,
                                                 COLORREF *);
__declspec(dllimport) BOOL  __stdcall wglRealizeLayerPalette(HDC, int, BOOL);
__declspec(dllimport) BOOL  __stdcall wglSwapLayerBuffers(HDC, UINT);













#line 4738 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

#line 4740 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"


}
#line 4744 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"


#line 4747 "c:\\programme\\microsoft visual studio\\vc98\\include\\wingdi.h"

#line 166 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"




















#line 22 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"






extern "C" {
#line 30 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"









typedef HANDLE HDWP;
typedef void MENUTEMPLATEA;
typedef void MENUTEMPLATEW;



typedef MENUTEMPLATEA MENUTEMPLATE;
#line 47 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
typedef PVOID LPMENUTEMPLATEA;
typedef PVOID LPMENUTEMPLATEW;



typedef LPMENUTEMPLATEA LPMENUTEMPLATE;
#line 54 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

typedef LRESULT (__stdcall* WNDPROC)(HWND, UINT, WPARAM, LPARAM);



typedef BOOL (__stdcall* DLGPROC)(HWND, UINT, WPARAM, LPARAM);
typedef void (__stdcall* TIMERPROC)(HWND, UINT, UINT, DWORD);
typedef BOOL (__stdcall* GRAYSTRINGPROC)(HDC, LPARAM, int);
typedef BOOL (__stdcall* WNDENUMPROC)(HWND, LPARAM);
typedef LRESULT (__stdcall* HOOKPROC)(int code, WPARAM wParam, LPARAM lParam);
typedef void (__stdcall* SENDASYNCPROC)(HWND, UINT, DWORD, LRESULT);

typedef BOOL (__stdcall* PROPENUMPROCA)(HWND, LPCSTR, HANDLE);
typedef BOOL (__stdcall* PROPENUMPROCW)(HWND, LPCWSTR, HANDLE);

typedef BOOL (__stdcall* PROPENUMPROCEXA)(HWND, LPSTR, HANDLE, DWORD);
typedef BOOL (__stdcall* PROPENUMPROCEXW)(HWND, LPWSTR, HANDLE, DWORD);

typedef int (__stdcall* EDITWORDBREAKPROCA)(LPSTR lpch, int ichCurrent, int cch, int code);
typedef int (__stdcall* EDITWORDBREAKPROCW)(LPWSTR lpch, int ichCurrent, int cch, int code);


typedef BOOL (__stdcall* DRAWSTATEPROC)(HDC hdc, LPARAM lData, WPARAM wData, int cx, int cy);
#line 78 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"





















#line 100 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"






typedef PROPENUMPROCA        PROPENUMPROC;
typedef PROPENUMPROCEXA      PROPENUMPROCEX;
typedef EDITWORDBREAKPROCA   EDITWORDBREAKPROC;
#line 110 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"



typedef BOOL (__stdcall* NAMEENUMPROCA)(LPSTR, LPARAM);
typedef BOOL (__stdcall* NAMEENUMPROCW)(LPWSTR, LPARAM);

typedef NAMEENUMPROCA   WINSTAENUMPROCA;
typedef NAMEENUMPROCA   DESKTOPENUMPROCA;
typedef NAMEENUMPROCW   WINSTAENUMPROCW;
typedef NAMEENUMPROCW   DESKTOPENUMPROCW;












#line 133 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"







typedef WINSTAENUMPROCA     WINSTAENUMPROC;
typedef DESKTOPENUMPROCA    DESKTOPENUMPROC;

#line 144 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"







#line 152 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"




























#line 181 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


#line 184 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
int
__stdcall
wvsprintfA(
    LPSTR,
    LPCSTR,
    va_list arglist);
__declspec(dllimport)
int
__stdcall
wvsprintfW(
    LPWSTR,
    LPCWSTR,
    va_list arglist);




#line 204 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport) int __cdecl wsprintfA(LPSTR, LPCSTR, ...);
__declspec(dllimport) int __cdecl wsprintfW(LPWSTR, LPCWSTR, ...);




#line 212 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"






























#line 243 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"











































#line 287 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"















#line 303 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"




































































































































#line 436 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"













#line 450 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"






















#line 473 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"




#line 478 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"




#line 483 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

#line 485 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


#line 488 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
































typedef struct tagCBT_CREATEWNDA
{
    struct tagCREATESTRUCTA *lpcs;
    HWND           hwndInsertAfter;
} CBT_CREATEWNDA, *LPCBT_CREATEWNDA;



typedef struct tagCBT_CREATEWNDW
{
    struct tagCREATESTRUCTW *lpcs;
    HWND           hwndInsertAfter;
} CBT_CREATEWNDW, *LPCBT_CREATEWNDW;




typedef CBT_CREATEWNDA CBT_CREATEWND;
typedef LPCBT_CREATEWNDA LPCBT_CREATEWND;
#line 540 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"




typedef struct tagCBTACTIVATESTRUCT
{
    BOOL    fMouse;
    HWND    hWndActive;
} CBTACTIVATESTRUCT, *LPCBTACTIVATESTRUCT;






























#line 580 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
#line 581 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"





typedef struct tagEVENTMSG {
    UINT    message;
    UINT    paramL;
    UINT    paramH;
    DWORD    time;
    HWND     hwnd;
} EVENTMSG, *PEVENTMSGMSG,  *NPEVENTMSGMSG,  *LPEVENTMSGMSG;

typedef struct tagEVENTMSG *PEVENTMSG,  *NPEVENTMSG,  *LPEVENTMSG;




typedef struct tagCWPSTRUCT {
    LPARAM  lParam;
    WPARAM  wParam;
    UINT    message;
    HWND    hwnd;
} CWPSTRUCT, *PCWPSTRUCT,  *NPCWPSTRUCT,  *LPCWPSTRUCT;





typedef struct tagCWPRETSTRUCT {
    LRESULT lResult;
    LPARAM  lParam;
    WPARAM  wParam;
    UINT    message;
    HWND    hwnd;
} CWPRETSTRUCT, *PCWPRETSTRUCT,  *NPCWPRETSTRUCT,  *LPCWPRETSTRUCT;

#line 619 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


































#line 654 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"




typedef struct tagDEBUGHOOKINFO
{
    DWORD   idThread;
    DWORD   idThreadInstaller;
    LPARAM  lParam;
    WPARAM  wParam;
    int     code;
} DEBUGHOOKINFO, *PDEBUGHOOKINFO,  *NPDEBUGHOOKINFO, * LPDEBUGHOOKINFO;




typedef struct tagMOUSEHOOKSTRUCT {
    POINT   pt;
    HWND    hwnd;
    UINT    wHitTestCode;
    DWORD   dwExtraInfo;
} MOUSEHOOKSTRUCT,  *LPMOUSEHOOKSTRUCT, *PMOUSEHOOKSTRUCT;




typedef struct tagHARDWAREHOOKSTRUCT {
    HWND    hwnd;
    UINT    message;
    WPARAM  wParam;
    LPARAM  lParam;
} HARDWAREHOOKSTRUCT,  *LPHARDWAREHOOKSTRUCT, *PHARDWAREHOOKSTRUCT;
#line 687 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
#line 688 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"















#line 704 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"








__declspec(dllimport)
HKL
__stdcall
LoadKeyboardLayoutA(
    LPCSTR pwszKLID,
    UINT Flags);
__declspec(dllimport)
HKL
__stdcall
LoadKeyboardLayoutW(
    LPCWSTR pwszKLID,
    UINT Flags);




#line 729 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"



__declspec(dllimport)
HKL
__stdcall
ActivateKeyboardLayout(
    HKL hkl,
    UINT Flags);







#line 746 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


__declspec(dllimport)
int
__stdcall
ToUnicodeEx(
    UINT wVirtKey,
    UINT wScanCode,
    PBYTE lpKeyState,
    LPWSTR pwszBuff,
    int cchBuff,
    UINT wFlags,
    HKL dwhkl);
#line 760 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UnloadKeyboardLayout(
    HKL hkl);

__declspec(dllimport)
BOOL
__stdcall
GetKeyboardLayoutNameA(
    LPSTR pwszKLID);
__declspec(dllimport)
BOOL
__stdcall
GetKeyboardLayoutNameW(
    LPWSTR pwszKLID);




#line 782 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


__declspec(dllimport)
int
__stdcall
GetKeyboardLayoutList(
        int nBuff,
        HKL  *lpList);

__declspec(dllimport)
HKL
__stdcall
GetKeyboardLayout(
    DWORD dwLayout
);
#line 798 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

























#line 824 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"























__declspec(dllimport)
HDESK
__stdcall
CreateDesktopA(
    LPSTR lpszDesktop,
    LPSTR lpszDevice,
    LPDEVMODEA pDevmode,
    DWORD dwFlags,
    ACCESS_MASK dwDesiredAccess,
    LPSECURITY_ATTRIBUTES lpsa);
__declspec(dllimport)
HDESK
__stdcall
CreateDesktopW(
    LPWSTR lpszDesktop,
    LPWSTR lpszDevice,
    LPDEVMODEW pDevmode,
    DWORD dwFlags,
    ACCESS_MASK dwDesiredAccess,
    LPSECURITY_ATTRIBUTES lpsa);




#line 872 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

#line 874 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
#line 875 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
HDESK
__stdcall
OpenDesktopA(
    LPSTR lpszDesktop,
    DWORD dwFlags,
    BOOL fInherit,
    ACCESS_MASK dwDesiredAccess);
__declspec(dllimport)
HDESK
__stdcall
OpenDesktopW(
    LPWSTR lpszDesktop,
    DWORD dwFlags,
    BOOL fInherit,
    ACCESS_MASK dwDesiredAccess);




#line 897 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
HDESK
__stdcall
OpenInputDesktop(
    DWORD dwFlags,
    BOOL fInherit,
    ACCESS_MASK dwDesiredAccess);

__declspec(dllimport)
BOOL
__stdcall
EnumDesktopsA(
    HWINSTA hwinsta,
    DESKTOPENUMPROCA lpEnumFunc,
    LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumDesktopsW(
    HWINSTA hwinsta,
    DESKTOPENUMPROCW lpEnumFunc,
    LPARAM lParam);




#line 925 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
EnumDesktopWindows(
    HDESK hDesktop,
    WNDENUMPROC lpfn,
    LPARAM lParam);

__declspec(dllimport)
BOOL
__stdcall
SwitchDesktop(
    HDESK hDesktop);

__declspec(dllimport)
BOOL
__stdcall
SetThreadDesktop(
    HDESK hDesktop);

__declspec(dllimport)
BOOL
__stdcall
CloseDesktop(
    HDESK hDesktop);

__declspec(dllimport)
HDESK
__stdcall
GetThreadDesktop(
    DWORD dwThreadId);
#line 958 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"





















__declspec(dllimport)
HWINSTA
__stdcall
CreateWindowStationA(
    LPSTR               lpwinsta,
    DWORD                 dwReserved,
    ACCESS_MASK           dwDesiredAccess,
    LPSECURITY_ATTRIBUTES lpsa);
__declspec(dllimport)
HWINSTA
__stdcall
CreateWindowStationW(
    LPWSTR               lpwinsta,
    DWORD                 dwReserved,
    ACCESS_MASK           dwDesiredAccess,
    LPSECURITY_ATTRIBUTES lpsa);




#line 1000 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
HWINSTA
__stdcall
OpenWindowStationA(
    LPSTR lpszWinSta,
    BOOL fInherit,
    ACCESS_MASK dwDesiredAccess);
__declspec(dllimport)
HWINSTA
__stdcall
OpenWindowStationW(
    LPWSTR lpszWinSta,
    BOOL fInherit,
    ACCESS_MASK dwDesiredAccess);




#line 1020 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
EnumWindowStationsA(
    WINSTAENUMPROCA lpEnumFunc,
    LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumWindowStationsW(
    WINSTAENUMPROCW lpEnumFunc,
    LPARAM lParam);




#line 1038 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
CloseWindowStation(
    HWINSTA hWinSta);

__declspec(dllimport)
BOOL
__stdcall
SetProcessWindowStation(
    HWINSTA hWinSta);

__declspec(dllimport)
HWINSTA
__stdcall
GetProcessWindowStation(
    void);
#line 1058 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"



__declspec(dllimport)
BOOL
__stdcall
SetUserObjectSecurity(
    HANDLE hObj,
    PSECURITY_INFORMATION pSIRequested,
    PSECURITY_DESCRIPTOR pSID);

__declspec(dllimport)
BOOL
__stdcall
GetUserObjectSecurity(
    HANDLE hObj,
    PSECURITY_INFORMATION pSIRequested,
    PSECURITY_DESCRIPTOR pSID,
    DWORD nLength,
    LPDWORD lpnLengthNeeded);






typedef struct tagUSEROBJECTFLAGS {
    BOOL fInherit;
    BOOL fReserved;
    DWORD dwFlags;
} USEROBJECTFLAGS, *PUSEROBJECTFLAGS;

__declspec(dllimport)
BOOL
__stdcall
GetUserObjectInformationA(
    HANDLE hObj,
    int nIndex,
    PVOID pvInfo,
    DWORD nLength,
    LPDWORD lpnLengthNeeded);
__declspec(dllimport)
BOOL
__stdcall
GetUserObjectInformationW(
    HANDLE hObj,
    int nIndex,
    PVOID pvInfo,
    DWORD nLength,
    LPDWORD lpnLengthNeeded);




#line 1113 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetUserObjectInformationA(
    HANDLE hObj,
    int nIndex,
    PVOID pvInfo,
    DWORD nLength);
__declspec(dllimport)
BOOL
__stdcall
SetUserObjectInformationW(
    HANDLE hObj,
    int nIndex,
    PVOID pvInfo,
    DWORD nLength);




#line 1135 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

#line 1137 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


typedef struct tagWNDCLASSEXA {
    UINT        cbSize;
    
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCSTR      lpszMenuName;
    LPCSTR      lpszClassName;
    
    HICON       hIconSm;
} WNDCLASSEXA, *PWNDCLASSEXA,  *NPWNDCLASSEXA,  *LPWNDCLASSEXA;
typedef struct tagWNDCLASSEXW {
    UINT        cbSize;
    
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCWSTR     lpszMenuName;
    LPCWSTR     lpszClassName;
    
    HICON       hIconSm;
} WNDCLASSEXW, *PWNDCLASSEXW,  *NPWNDCLASSEXW,  *LPWNDCLASSEXW;






typedef WNDCLASSEXA WNDCLASSEX;
typedef PWNDCLASSEXA PWNDCLASSEX;
typedef NPWNDCLASSEXA NPWNDCLASSEX;
typedef LPWNDCLASSEXA LPWNDCLASSEX;
#line 1182 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
#line 1183 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

typedef struct tagWNDCLASSA {
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCSTR      lpszMenuName;
    LPCSTR      lpszClassName;
} WNDCLASSA, *PWNDCLASSA,  *NPWNDCLASSA,  *LPWNDCLASSA;
typedef struct tagWNDCLASSW {
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCWSTR     lpszMenuName;
    LPCWSTR     lpszClassName;
} WNDCLASSW, *PWNDCLASSW,  *NPWNDCLASSW,  *LPWNDCLASSW;






typedef WNDCLASSA WNDCLASS;
typedef PWNDCLASSA PWNDCLASS;
typedef NPWNDCLASSA NPWNDCLASS;
typedef LPWNDCLASSA LPWNDCLASS;
#line 1219 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"







typedef struct tagMSG {
    HWND        hwnd;
    UINT        message;
    WPARAM      wParam;
    LPARAM      lParam;
    DWORD       time;
    POINT       pt;



} MSG, *PMSG,  *NPMSG,  *LPMSG;











#line 1249 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"






























#line 1280 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

#line 1282 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"










































#line 1325 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

















typedef struct tagMINMAXINFO {
    POINT ptReserved;
    POINT ptMaxSize;
    POINT ptMaxPosition;
    POINT ptMinTrackSize;
    POINT ptMaxTrackSize;
} MINMAXINFO, *PMINMAXINFO, *LPMINMAXINFO;



















#line 1369 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"























typedef struct tagCOPYDATASTRUCT {
    DWORD dwData;
    DWORD cbData;
    PVOID lpData;
} COPYDATASTRUCT, *PCOPYDATASTRUCT;























#line 1421 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"




































#line 1458 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


















#line 1477 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


























#line 1504 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

#line 1506 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"



#line 1510 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


#line 1513 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"









typedef struct tagMDINEXTMENU
{
    HMENU   hmenuIn;
    HMENU   hmenuNext;
    HWND    hwndNext;
} MDINEXTMENU, * PMDINEXTMENU,  * LPMDINEXTMENU;


































#line 1563 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"



























#line 1591 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


#line 1594 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"



#line 1598 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"





#line 1604 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"






























#line 1635 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"







#line 1643 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"




















#line 1664 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"




































#line 1701 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"









#line 1711 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

#line 1713 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

















__declspec(dllimport)
UINT
__stdcall
RegisterWindowMessageA(
    LPCSTR lpString);
__declspec(dllimport)
UINT
__stdcall
RegisterWindowMessageW(
    LPCWSTR lpString);




#line 1745 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

























typedef struct tagWINDOWPOS {
    HWND    hwnd;
    HWND    hwndInsertAfter;
    int     x;
    int     y;
    int     cx;
    int     cy;
    UINT    flags;
} WINDOWPOS, *LPWINDOWPOS, *PWINDOWPOS;




typedef struct tagNCCALCSIZE_PARAMS {
    RECT       rgrc[3];
    PWINDOWPOS lppos;
} NCCALCSIZE_PARAMS, *LPNCCALCSIZE_PARAMS;



























#line 1815 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"





























#line 1845 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"



#line 1849 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


















































































#line 1932 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"






















#line 1955 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"




















































__declspec(dllimport)
BOOL
__stdcall
DrawEdge(HDC hdc, LPRECT qrc, UINT edge, UINT grfFlags);









#line 2021 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

































#line 2055 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"





__declspec(dllimport)
BOOL
__stdcall
DrawFrameControl(HDC, LPRECT, UINT, UINT);










#line 2075 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
DrawCaption(HWND, HDC, const RECT *, UINT);






__declspec(dllimport)
BOOL
__stdcall
DrawAnimatedRects(HWND hwnd, int idAni, const RECT * lprcFrom, const RECT * lprcTo);

#line 2092 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


























#line 2119 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"





















#line 2141 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"










typedef struct tagACCEL {

    BYTE   fVirt;               
    WORD   key;
    WORD   cmd;




#line 2161 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
} ACCEL, *LPACCEL;

typedef struct tagPAINTSTRUCT {
    HDC         hdc;
    BOOL        fErase;
    RECT        rcPaint;
    BOOL        fRestore;
    BOOL        fIncUpdate;
    BYTE        rgbReserved[32];
} PAINTSTRUCT, *PPAINTSTRUCT, *NPPAINTSTRUCT, *LPPAINTSTRUCT;

typedef struct tagCREATESTRUCTA {
    LPVOID      lpCreateParams;
    HINSTANCE   hInstance;
    HMENU       hMenu;
    HWND        hwndParent;
    int         cy;
    int         cx;
    int         y;
    int         x;
    LONG        style;
    LPCSTR      lpszName;
    LPCSTR      lpszClass;
    DWORD       dwExStyle;
} CREATESTRUCTA, *LPCREATESTRUCTA;
typedef struct tagCREATESTRUCTW {
    LPVOID      lpCreateParams;
    HINSTANCE   hInstance;
    HMENU       hMenu;
    HWND        hwndParent;
    int         cy;
    int         cx;
    int         y;
    int         x;
    LONG        style;
    LPCWSTR     lpszName;
    LPCWSTR     lpszClass;
    DWORD       dwExStyle;
} CREATESTRUCTW, *LPCREATESTRUCTW;




typedef CREATESTRUCTA CREATESTRUCT;
typedef LPCREATESTRUCTA LPCREATESTRUCT;
#line 2207 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

typedef struct tagWINDOWPLACEMENT {
    UINT  length;
    UINT  flags;
    UINT  showCmd;
    POINT ptMinPosition;
    POINT ptMaxPosition;
    RECT  rcNormalPosition;



} WINDOWPLACEMENT;
typedef WINDOWPLACEMENT *PWINDOWPLACEMENT, *LPWINDOWPLACEMENT;




typedef struct tagNMHDR
{
    HWND  hwndFrom;
    UINT  idFrom;
    UINT  code;         
}   NMHDR;
typedef NMHDR  * LPNMHDR;

typedef struct tagSTYLESTRUCT
{
    DWORD   styleOld;
    DWORD   styleNew;
} STYLESTRUCT, * LPSTYLESTRUCT;
#line 2238 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"











#line 2250 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"



















#line 2270 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"



#line 2274 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"




typedef struct tagMEASUREITEMSTRUCT {
    UINT       CtlType;
    UINT       CtlID;
    UINT       itemID;
    UINT       itemWidth;
    UINT       itemHeight;
    DWORD      itemData;
} MEASUREITEMSTRUCT,  *PMEASUREITEMSTRUCT,  *LPMEASUREITEMSTRUCT;





typedef struct tagDRAWITEMSTRUCT {
    UINT        CtlType;
    UINT        CtlID;
    UINT        itemID;
    UINT        itemAction;
    UINT        itemState;
    HWND        hwndItem;
    HDC         hDC;
    RECT        rcItem;
    DWORD       itemData;
} DRAWITEMSTRUCT,  *PDRAWITEMSTRUCT,  *LPDRAWITEMSTRUCT;




typedef struct tagDELETEITEMSTRUCT {
    UINT       CtlType;
    UINT       CtlID;
    UINT       itemID;
    HWND       hwndItem;
    UINT       itemData;
} DELETEITEMSTRUCT,  *PDELETEITEMSTRUCT,  *LPDELETEITEMSTRUCT;




typedef struct tagCOMPAREITEMSTRUCT {
    UINT        CtlType;
    UINT        CtlID;
    HWND        hwndItem;
    UINT        itemID1;
    DWORD       itemData1;
    UINT        itemID2;
    DWORD       itemData2;
    DWORD       dwLocaleId;
} COMPAREITEMSTRUCT,  *PCOMPAREITEMSTRUCT,  *LPCOMPAREITEMSTRUCT;







__declspec(dllimport)
BOOL
__stdcall
GetMessageA(
    LPMSG lpMsg,
    HWND hWnd ,
    UINT wMsgFilterMin,
    UINT wMsgFilterMax);
__declspec(dllimport)
BOOL
__stdcall
GetMessageW(
    LPMSG lpMsg,
    HWND hWnd ,
    UINT wMsgFilterMin,
    UINT wMsgFilterMax);




#line 2355 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
TranslateMessage(
    const MSG *lpMsg);

__declspec(dllimport)
LONG
__stdcall
DispatchMessageA(
    const MSG *lpMsg);
__declspec(dllimport)
LONG
__stdcall
DispatchMessageW(
    const MSG *lpMsg);




#line 2377 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
SetMessageQueue(
    int cMessagesMax);

__declspec(dllimport)
BOOL
__stdcall
PeekMessageA(
    LPMSG lpMsg,
    HWND hWnd ,
    UINT wMsgFilterMin,
    UINT wMsgFilterMax,
    UINT wRemoveMsg);
__declspec(dllimport)
BOOL
__stdcall
PeekMessageW(
    LPMSG lpMsg,
    HWND hWnd ,
    UINT wMsgFilterMin,
    UINT wMsgFilterMax,
    UINT wRemoveMsg);




#line 2408 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"








#line 2417 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
RegisterHotKey(
    HWND hWnd ,
    int id,
    UINT fsModifiers,
    UINT vk);

__declspec(dllimport)
BOOL
__stdcall
UnregisterHotKey(
    HWND hWnd,
    int id);






















#line 2456 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"








#line 2465 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"




__declspec(dllimport)
BOOL
__stdcall
ExitWindowsEx(
    UINT uFlags,
    DWORD dwReserved);

__declspec(dllimport)
BOOL
__stdcall
SwapMouseButton(
    BOOL fSwap);

__declspec(dllimport)
DWORD
__stdcall
GetMessagePos(
    void);

__declspec(dllimport)
LONG
__stdcall
GetMessageTime(
    void);

__declspec(dllimport)
LONG
__stdcall
GetMessageExtraInfo(
    void);


__declspec(dllimport)
LPARAM
__stdcall
SetMessageExtraInfo(
    LPARAM lParam);
#line 2507 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
LRESULT
__stdcall
SendMessageA(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
SendMessageW(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);




#line 2529 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
LRESULT
__stdcall
SendMessageTimeoutA(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam,
    UINT fuFlags,
    UINT uTimeout,
    LPDWORD lpdwResult);
__declspec(dllimport)
LRESULT
__stdcall
SendMessageTimeoutW(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam,
    UINT fuFlags,
    UINT uTimeout,
    LPDWORD lpdwResult);




#line 2557 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SendNotifyMessageA(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
SendNotifyMessageW(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);




#line 2579 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SendMessageCallbackA(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam,
    SENDASYNCPROC lpResultCallBack,
    DWORD dwData);
__declspec(dllimport)
BOOL
__stdcall
SendMessageCallbackW(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam,
    SENDASYNCPROC lpResultCallBack,
    DWORD dwData);




#line 2605 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"











#line 2617 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


#line 2620 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"



















#line 2640 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"





































#line 2678 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
PostMessageA(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
PostMessageW(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);




#line 2701 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
PostThreadMessageA(
    DWORD idThread,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
PostThreadMessageW(
    DWORD idThread,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);




#line 2723 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"









#line 2733 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"








#line 2742 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
AttachThreadInput(
    DWORD idAttach,
    DWORD idAttachTo,
    BOOL fAttach);


__declspec(dllimport)
BOOL
__stdcall
ReplyMessage(
    LRESULT lResult);

__declspec(dllimport)
BOOL
__stdcall
WaitMessage(
    void);

__declspec(dllimport)
DWORD
__stdcall
WaitForInputIdle(
    HANDLE hProcess,
    DWORD dwMilliseconds);

__declspec(dllimport)

LRESULT
__stdcall



#line 2779 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
DefWindowProcA(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
__declspec(dllimport)

LRESULT
__stdcall



#line 2792 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
DefWindowProcW(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);




#line 2802 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
void
__stdcall
PostQuitMessage(
    int nExitCode);



__declspec(dllimport)
LRESULT
__stdcall
CallWindowProcA(
    WNDPROC lpPrevWndFunc,
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
CallWindowProcW(
    WNDPROC lpPrevWndFunc,
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);




#line 2834 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"



























#line 2862 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
InSendMessage(
    void);
















#line 2885 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
UINT
__stdcall
GetDoubleClickTime(
    void);

__declspec(dllimport)
BOOL
__stdcall
SetDoubleClickTime(
    UINT);

__declspec(dllimport)
ATOM
__stdcall
RegisterClassA(
    const WNDCLASSA *lpWndClass);
__declspec(dllimport)
ATOM
__stdcall
RegisterClassW(
    const WNDCLASSW *lpWndClass);




#line 2913 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UnregisterClassA(
    LPCSTR lpClassName,
    HINSTANCE hInstance);
__declspec(dllimport)
BOOL
__stdcall
UnregisterClassW(
    LPCWSTR lpClassName,
    HINSTANCE hInstance);




#line 2931 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetClassInfoA(
    HINSTANCE hInstance ,
    LPCSTR lpClassName,
    LPWNDCLASSA lpWndClass);
__declspec(dllimport)
BOOL
__stdcall
GetClassInfoW(
    HINSTANCE hInstance ,
    LPCWSTR lpClassName,
    LPWNDCLASSW lpWndClass);




#line 2951 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


__declspec(dllimport)
ATOM
__stdcall
RegisterClassExA(const WNDCLASSEXA *);
__declspec(dllimport)
ATOM
__stdcall
RegisterClassExW(const WNDCLASSEXW *);




#line 2966 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetClassInfoExA(HINSTANCE, LPCSTR, LPWNDCLASSEXA);
__declspec(dllimport)
BOOL
__stdcall
GetClassInfoExW(HINSTANCE, LPCWSTR, LPWNDCLASSEXW);




#line 2980 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

#line 2982 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"








__declspec(dllimport)
HWND
__stdcall
CreateWindowExA(
    DWORD dwExStyle,
    LPCSTR lpClassName,
    LPCSTR lpWindowName,
    DWORD dwStyle,
    int X,
    int Y,
    int nWidth,
    int nHeight,
    HWND hWndParent ,
    HMENU hMenu,
    HINSTANCE hInstance,
    LPVOID lpParam);
__declspec(dllimport)
HWND
__stdcall
CreateWindowExW(
    DWORD dwExStyle,
    LPCWSTR lpClassName,
    LPCWSTR lpWindowName,
    DWORD dwStyle,
    int X,
    int Y,
    int nWidth,
    int nHeight,
    HWND hWndParent ,
    HMENU hMenu,
    HINSTANCE hInstance,
    LPVOID lpParam);




#line 3027 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"













#line 3041 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
IsWindow(
    HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
IsMenu(
    HMENU hMenu);

__declspec(dllimport)
BOOL
__stdcall
IsChild(
    HWND hWndParent,
    HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
DestroyWindow(
    HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ShowWindow(
    HWND hWnd,
    int nCmdShow);









#line 3083 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
ShowWindowAsync(
    HWND hWnd,
    int nCmdShow);
#line 3092 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
FlashWindow(
    HWND hWnd,


#line 3101 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
    BOOL bInvert);
#line 3103 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"








#line 3112 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
ShowOwnedPopups(
    HWND hWnd,
    BOOL fShow);

__declspec(dllimport)
BOOL
__stdcall
OpenIcon(
    HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
CloseWindow(
    HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
MoveWindow(
    HWND hWnd,
    int X,
    int Y,
    int nWidth,
    int nHeight,
    BOOL bRepaint);

__declspec(dllimport)
BOOL
__stdcall
SetWindowPos(
    HWND hWnd,
    HWND hWndInsertAfter ,
    int X,
    int Y,
    int cx,
    int cy,
    UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
GetWindowPlacement(
    HWND hWnd,
    WINDOWPLACEMENT *lpwndpl);

__declspec(dllimport)
BOOL
__stdcall
SetWindowPlacement(
    HWND hWnd,
    const WINDOWPLACEMENT *lpwndpl);




__declspec(dllimport)
HDWP
__stdcall
BeginDeferWindowPos(
    int nNumWindows);

__declspec(dllimport)
HDWP
__stdcall
DeferWindowPos(
    HDWP hWinPosInfo,
    HWND hWnd,
    HWND hWndInsertAfter ,
    int x,
    int y,
    int cx,
    int cy,
    UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
EndDeferWindowPos(
    HDWP hWinPosInfo);

#line 3198 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
IsWindowVisible(
    HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
IsIconic(
    HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
AnyPopup(
    void);

__declspec(dllimport)
BOOL
__stdcall
BringWindowToTop(
    HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
IsZoomed(
    HWND hWnd);






















#line 3251 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"














#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push)
#line 28 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack2.h"
#pragma pack(2)


#line 32 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack2.h"
#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack2.h"
#line 3266 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"




typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    WORD cdit;
    short x;
    short y;
    short cx;
    short cy;
} DLGTEMPLATE;
typedef DLGTEMPLATE *LPDLGTEMPLATEA;
typedef DLGTEMPLATE *LPDLGTEMPLATEW;



typedef LPDLGTEMPLATEA LPDLGTEMPLATE;
#line 3286 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
typedef const DLGTEMPLATE *LPCDLGTEMPLATEA;
typedef const DLGTEMPLATE *LPCDLGTEMPLATEW;



typedef LPCDLGTEMPLATEA LPCDLGTEMPLATE;
#line 3293 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"




typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    short x;
    short y;
    short cx;
    short cy;
    WORD id;
} DLGITEMTEMPLATE;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEW;



typedef PDLGITEMTEMPLATEA PDLGITEMTEMPLATE;
#line 3313 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEW;



typedef LPDLGITEMTEMPLATEA LPDLGITEMTEMPLATE;
#line 3320 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"


#line 36 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"
#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"
#line 3323 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
CreateDialogParamA(
    HINSTANCE hInstance,
    LPCSTR lpTemplateName,
    HWND hWndParent ,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);
__declspec(dllimport)
HWND
__stdcall
CreateDialogParamW(
    HINSTANCE hInstance,
    LPCWSTR lpTemplateName,
    HWND hWndParent ,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);




#line 3347 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
CreateDialogIndirectParamA(
    HINSTANCE hInstance,
    LPCDLGTEMPLATEA lpTemplate,
    HWND hWndParent,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);
__declspec(dllimport)
HWND
__stdcall
CreateDialogIndirectParamW(
    HINSTANCE hInstance,
    LPCDLGTEMPLATEW lpTemplate,
    HWND hWndParent,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);




#line 3371 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"









#line 3381 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"









#line 3391 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
int
__stdcall
DialogBoxParamA(
    HINSTANCE hInstance,
    LPCSTR lpTemplateName,
    HWND hWndParent ,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);
__declspec(dllimport)
int
__stdcall
DialogBoxParamW(
    HINSTANCE hInstance,
    LPCWSTR lpTemplateName,
    HWND hWndParent ,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);




#line 3415 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
int
__stdcall
DialogBoxIndirectParamA(
    HINSTANCE hInstance,
    LPCDLGTEMPLATEA hDialogTemplate,
    HWND hWndParent ,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);
__declspec(dllimport)
int
__stdcall
DialogBoxIndirectParamW(
    HINSTANCE hInstance,
    LPCDLGTEMPLATEW hDialogTemplate,
    HWND hWndParent ,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);




#line 3439 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"









#line 3449 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"









#line 3459 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
EndDialog(
    HWND hDlg,
    int nResult);

__declspec(dllimport)
HWND
__stdcall
GetDlgItem(
    HWND hDlg,
    int nIDDlgItem);

__declspec(dllimport)
BOOL
__stdcall
SetDlgItemInt(
    HWND hDlg,
    int nIDDlgItem,
    UINT uValue,
    BOOL bSigned);

__declspec(dllimport)
UINT
__stdcall
GetDlgItemInt(
    HWND hDlg,
    int nIDDlgItem,
    BOOL *lpTranslated,
    BOOL bSigned);

__declspec(dllimport)
BOOL
__stdcall
SetDlgItemTextA(
    HWND hDlg,
    int nIDDlgItem,
    LPCSTR lpString);
__declspec(dllimport)
BOOL
__stdcall
SetDlgItemTextW(
    HWND hDlg,
    int nIDDlgItem,
    LPCWSTR lpString);




#line 3511 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
UINT
__stdcall
GetDlgItemTextA(
    HWND hDlg,
    int nIDDlgItem,
    LPSTR lpString,
    int nMaxCount);
__declspec(dllimport)
UINT
__stdcall
GetDlgItemTextW(
    HWND hDlg,
    int nIDDlgItem,
    LPWSTR lpString,
    int nMaxCount);




#line 3533 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
CheckDlgButton(
    HWND hDlg,
    int nIDButton,
    UINT uCheck);

__declspec(dllimport)
BOOL
__stdcall
CheckRadioButton(
    HWND hDlg,
    int nIDFirstButton,
    int nIDLastButton,
    int nIDCheckButton);

__declspec(dllimport)
UINT
__stdcall
IsDlgButtonChecked(
    HWND hDlg,
    int nIDButton);

__declspec(dllimport)
LONG
__stdcall
SendDlgItemMessageA(
    HWND hDlg,
    int nIDDlgItem,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
__declspec(dllimport)
LONG
__stdcall
SendDlgItemMessageW(
    HWND hDlg,
    int nIDDlgItem,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);




#line 3581 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
GetNextDlgGroupItem(
    HWND hDlg,
    HWND hCtl,
    BOOL bPrevious);

__declspec(dllimport)
HWND
__stdcall
GetNextDlgTabItem(
    HWND hDlg,
    HWND hCtl,
    BOOL bPrevious);

__declspec(dllimport)
int
__stdcall
GetDlgCtrlID(
    HWND hWnd);

__declspec(dllimport)
long
__stdcall
GetDialogBaseUnits(void);

__declspec(dllimport)

LRESULT
__stdcall



#line 3617 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
DefDlgProcA(
    HWND hDlg,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
__declspec(dllimport)

LRESULT
__stdcall



#line 3630 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
DefDlgProcW(
    HWND hDlg,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);




#line 3640 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"








#line 3649 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

#line 3651 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"



__declspec(dllimport)
BOOL
__stdcall
CallMsgFilterA(
    LPMSG lpMsg,
    int nCode);
__declspec(dllimport)
BOOL
__stdcall
CallMsgFilterW(
    LPMSG lpMsg,
    int nCode);




#line 3671 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

#line 3673 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"







__declspec(dllimport)
BOOL
__stdcall
OpenClipboard(
    HWND hWndNewOwner);

__declspec(dllimport)
BOOL
__stdcall
CloseClipboard(
    void);








#line 3700 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
GetClipboardOwner(
    void);

__declspec(dllimport)
HWND
__stdcall
SetClipboardViewer(
    HWND hWndNewViewer);

__declspec(dllimport)
HWND
__stdcall
GetClipboardViewer(
    void);

__declspec(dllimport)
BOOL
__stdcall
ChangeClipboardChain(
    HWND hWndRemove,
    HWND hWndNewNext);

__declspec(dllimport)
HANDLE
__stdcall
SetClipboardData(
    UINT uFormat,
    HANDLE hMem);

__declspec(dllimport)
HANDLE
__stdcall
    GetClipboardData(
    UINT uFormat);

__declspec(dllimport)
UINT
__stdcall
RegisterClipboardFormatA(
    LPCSTR lpszFormat);
__declspec(dllimport)
UINT
__stdcall
RegisterClipboardFormatW(
    LPCWSTR lpszFormat);




#line 3754 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
int
__stdcall
CountClipboardFormats(
    void);

__declspec(dllimport)
UINT
__stdcall
EnumClipboardFormats(
    UINT format);

__declspec(dllimport)
int
__stdcall
GetClipboardFormatNameA(
    UINT format,
    LPSTR lpszFormatName,
    int cchMaxCount);
__declspec(dllimport)
int
__stdcall
GetClipboardFormatNameW(
    UINT format,
    LPWSTR lpszFormatName,
    int cchMaxCount);




#line 3786 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
EmptyClipboard(
    void);

__declspec(dllimport)
BOOL
__stdcall
IsClipboardFormatAvailable(
    UINT format);

__declspec(dllimport)
int
__stdcall
GetPriorityClipboardFormat(
    UINT *paFormatPriorityList,
    int cFormats);

__declspec(dllimport)
HWND
__stdcall
GetOpenClipboardWindow(
    void);

#line 3813 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"





__declspec(dllimport)
BOOL
__stdcall
CharToOemA(
    LPCSTR lpszSrc,
    LPSTR lpszDst);
__declspec(dllimport)
BOOL
__stdcall
CharToOemW(
    LPCWSTR lpszSrc,
    LPSTR lpszDst);




#line 3835 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
OemToCharA(
    LPCSTR lpszSrc,
    LPSTR lpszDst);
__declspec(dllimport)
BOOL
__stdcall
OemToCharW(
    LPCSTR lpszSrc,
    LPWSTR lpszDst);




#line 3853 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
CharToOemBuffA(
    LPCSTR lpszSrc,
    LPSTR lpszDst,
    DWORD cchDstLength);
__declspec(dllimport)
BOOL
__stdcall
CharToOemBuffW(
    LPCWSTR lpszSrc,
    LPSTR lpszDst,
    DWORD cchDstLength);




#line 3873 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
OemToCharBuffA(
    LPCSTR lpszSrc,
    LPSTR lpszDst,
    DWORD cchDstLength);
__declspec(dllimport)
BOOL
__stdcall
OemToCharBuffW(
    LPCSTR lpszSrc,
    LPWSTR lpszDst,
    DWORD cchDstLength);




#line 3893 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
LPSTR
__stdcall
CharUpperA(
    LPSTR lpsz);
__declspec(dllimport)
LPWSTR
__stdcall
CharUpperW(
    LPWSTR lpsz);




#line 3909 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
DWORD
__stdcall
CharUpperBuffA(
    LPSTR lpsz,
    DWORD cchLength);
__declspec(dllimport)
DWORD
__stdcall
CharUpperBuffW(
    LPWSTR lpsz,
    DWORD cchLength);




#line 3927 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
LPSTR
__stdcall
CharLowerA(
    LPSTR lpsz);
__declspec(dllimport)
LPWSTR
__stdcall
CharLowerW(
    LPWSTR lpsz);




#line 3943 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
DWORD
__stdcall
CharLowerBuffA(
    LPSTR lpsz,
    DWORD cchLength);
__declspec(dllimport)
DWORD
__stdcall
CharLowerBuffW(
    LPWSTR lpsz,
    DWORD cchLength);




#line 3961 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
LPSTR
__stdcall
CharNextA(
    LPCSTR lpsz);
__declspec(dllimport)
LPWSTR
__stdcall
CharNextW(
    LPCWSTR lpsz);




#line 3977 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
LPSTR
__stdcall
CharPrevA(
    LPCSTR lpszStart,
    LPCSTR lpszCurrent);
__declspec(dllimport)
LPWSTR
__stdcall
CharPrevW(
    LPCWSTR lpszStart,
    LPCWSTR lpszCurrent);




#line 3995 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


__declspec(dllimport)
LPSTR
__stdcall
CharNextExA(
     WORD CodePage,
     LPCSTR lpCurrentChar,
     DWORD dwFlags);

__declspec(dllimport)
LPSTR
__stdcall
CharPrevExA(
     WORD CodePage,
     LPCSTR lpStart,
     LPCSTR lpCurrentChar,
     DWORD dwFlags);
#line 4014 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"




















__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaA(
    CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaW(
    WCHAR ch);




#line 4049 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaNumericA(
    CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaNumericW(
    WCHAR ch);




#line 4065 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
IsCharUpperA(
    CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharUpperW(
    WCHAR ch);




#line 4081 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
IsCharLowerA(
    CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharLowerW(
    WCHAR ch);




#line 4097 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

#line 4099 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
SetFocus(
    HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
GetActiveWindow(
    void);

__declspec(dllimport)
HWND
__stdcall
GetFocus(
    void);

__declspec(dllimport)
UINT
__stdcall
GetKBCodePage(
    void);

__declspec(dllimport)
SHORT
__stdcall
GetKeyState(
    int nVirtKey);

__declspec(dllimport)
SHORT
__stdcall
GetAsyncKeyState(
    int vKey);

__declspec(dllimport)
BOOL
__stdcall
GetKeyboardState(
    PBYTE lpKeyState);

__declspec(dllimport)
BOOL
__stdcall
SetKeyboardState(
    LPBYTE lpKeyState);

__declspec(dllimport)
int
__stdcall
GetKeyNameTextA(
    LONG lParam,
    LPSTR lpString,
    int nSize
    );
__declspec(dllimport)
int
__stdcall
GetKeyNameTextW(
    LONG lParam,
    LPWSTR lpString,
    int nSize
    );




#line 4169 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
int
__stdcall
GetKeyboardType(
    int nTypeFlag);

__declspec(dllimport)
int
__stdcall
ToAscii(
    UINT uVirtKey,
    UINT uScanCode,
    PBYTE lpKeyState,
    LPWORD lpChar,
    UINT uFlags);


__declspec(dllimport)
int
__stdcall
ToAsciiEx(
    UINT uVirtKey,
    UINT uScanCode,
    PBYTE lpKeyState,
    LPWORD lpChar,
    UINT uFlags,
    HKL dwhkl);
#line 4198 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
int
__stdcall
ToUnicode(
    UINT wVirtKey,
    UINT wScanCode,
    PBYTE lpKeyState,
    LPWSTR pwszBuff,
    int cchBuff,
    UINT wFlags);

__declspec(dllimport)
DWORD
__stdcall
OemKeyScan(
    WORD wOemChar);

__declspec(dllimport)
SHORT
__stdcall
VkKeyScanA(
    CHAR ch);
__declspec(dllimport)
SHORT
__stdcall
VkKeyScanW(
    WCHAR ch);




#line 4231 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


__declspec(dllimport)
SHORT
__stdcall VkKeyScanExA(
    CHAR  ch,
    HKL   dwhkl);
__declspec(dllimport)
SHORT
__stdcall VkKeyScanExW(
    WCHAR  ch,
    HKL   dwhkl);




#line 4248 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
#line 4249 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"



__declspec(dllimport)
void
__stdcall
keybd_event(
    BYTE bVk,
    BYTE bScan,
    DWORD dwFlags,
    DWORD dwExtraInfo);











__declspec(dllimport)
void
__stdcall
mouse_event(
    DWORD dwFlags,
    DWORD dx,
    DWORD dy,
    DWORD dwData,
    DWORD dwExtraInfo);

















































#line 4330 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"












#line 4343 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyA(
    UINT uCode,
    UINT uMapType);
__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyW(
    UINT uCode,
    UINT uMapType);




#line 4361 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyExA(
    UINT uCode,
    UINT uMapType,
    HKL dwhkl);
__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyExW(
    UINT uCode,
    UINT uMapType,
    HKL dwhkl);




#line 4382 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
#line 4383 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetInputState(
    void);

__declspec(dllimport)
DWORD
__stdcall
GetQueueStatus(
    UINT flags);

__declspec(dllimport)
HWND
__stdcall
GetCapture(
    void);

__declspec(dllimport)
HWND
__stdcall
SetCapture(
    HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ReleaseCapture(
    void);

__declspec(dllimport)
DWORD
__stdcall
MsgWaitForMultipleObjects(
    DWORD nCount,
    LPHANDLE pHandles,
    BOOL fWaitAll,
    DWORD dwMilliseconds,
    DWORD dwWakeMask);

__declspec(dllimport)
DWORD
__stdcall
MsgWaitForMultipleObjectsEx(
    DWORD nCount,
    LPHANDLE pHandles,
    DWORD dwMilliseconds,
    DWORD dwWakeMask,
    DWORD dwFlags);










































__declspec(dllimport)
UINT
__stdcall
SetTimer(
    HWND hWnd ,
    UINT nIDEvent,
    UINT uElapse,
    TIMERPROC lpTimerFunc);

__declspec(dllimport)
BOOL
__stdcall
KillTimer(
    HWND hWnd,
    UINT uIDEvent);

__declspec(dllimport)
BOOL
__stdcall
IsWindowUnicode(
    HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
EnableWindow(
    HWND hWnd,
    BOOL bEnable);

__declspec(dllimport)
BOOL
__stdcall
IsWindowEnabled(
    HWND hWnd);

__declspec(dllimport)
HACCEL
__stdcall
LoadAcceleratorsA(
    HINSTANCE hInstance,
    LPCSTR lpTableName);
__declspec(dllimport)
HACCEL
__stdcall
LoadAcceleratorsW(
    HINSTANCE hInstance,
    LPCWSTR lpTableName);




#line 4527 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
HACCEL
__stdcall
CreateAcceleratorTableA(
    LPACCEL, int);
__declspec(dllimport)
HACCEL
__stdcall
CreateAcceleratorTableW(
    LPACCEL, int);




#line 4543 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
DestroyAcceleratorTable(
    HACCEL hAccel);

__declspec(dllimport)
int
__stdcall
CopyAcceleratorTableA(
    HACCEL hAccelSrc,
    LPACCEL lpAccelDst,
    int cAccelEntries);
__declspec(dllimport)
int
__stdcall
CopyAcceleratorTableW(
    HACCEL hAccelSrc,
    LPACCEL lpAccelDst,
    int cAccelEntries);




#line 4569 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"



__declspec(dllimport)
int
__stdcall
TranslateAcceleratorA(
    HWND hWnd,
    HACCEL hAccTable,
    LPMSG lpMsg);
__declspec(dllimport)
int
__stdcall
TranslateAcceleratorW(
    HWND hWnd,
    HACCEL hAccTable,
    LPMSG lpMsg);




#line 4591 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

#line 4593 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

















































































#line 4675 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"






#line 4682 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


#line 4685 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"







#line 4693 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"





#line 4699 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
int
__stdcall
GetSystemMetrics(
    int nIndex);

#line 4707 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"



__declspec(dllimport)
HMENU
__stdcall
LoadMenuA(
    HINSTANCE hInstance,
    LPCSTR lpMenuName);
__declspec(dllimport)
HMENU
__stdcall
LoadMenuW(
    HINSTANCE hInstance,
    LPCWSTR lpMenuName);




#line 4727 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
HMENU
__stdcall
LoadMenuIndirectA(
    const MENUTEMPLATEA *lpMenuTemplate);
__declspec(dllimport)
HMENU
__stdcall
LoadMenuIndirectW(
    const MENUTEMPLATEW *lpMenuTemplate);




#line 4743 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
HMENU
__stdcall
GetMenu(
    HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
SetMenu(
    HWND hWnd,
    HMENU hMenu);

__declspec(dllimport)
BOOL
__stdcall
ChangeMenuA(
    HMENU hMenu,
    UINT cmd,
    LPCSTR lpszNewItem,
    UINT cmdInsert,
    UINT flags);
__declspec(dllimport)
BOOL
__stdcall
ChangeMenuW(
    HMENU hMenu,
    UINT cmd,
    LPCWSTR lpszNewItem,
    UINT cmdInsert,
    UINT flags);




#line 4780 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
HiliteMenuItem(
    HWND hWnd,
    HMENU hMenu,
    UINT uIDHiliteItem,
    UINT uHilite);

__declspec(dllimport)
int
__stdcall
GetMenuStringA(
    HMENU hMenu,
    UINT uIDItem,
    LPSTR lpString,
    int nMaxCount,
    UINT uFlag);
__declspec(dllimport)
int
__stdcall
GetMenuStringW(
    HMENU hMenu,
    UINT uIDItem,
    LPWSTR lpString,
    int nMaxCount,
    UINT uFlag);




#line 4813 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
UINT
__stdcall
GetMenuState(
    HMENU hMenu,
    UINT uId,
    UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
DrawMenuBar(
    HWND hWnd);


__declspec(dllimport)
HMENU
__stdcall
GetSystemMenu(
    HWND hWnd,
    BOOL bRevert);


__declspec(dllimport)
HMENU
__stdcall
CreateMenu(
    void);

__declspec(dllimport)
HMENU
__stdcall
CreatePopupMenu(
    void);

__declspec(dllimport)
BOOL
__stdcall
DestroyMenu(
    HMENU hMenu);

__declspec(dllimport)
DWORD
__stdcall
CheckMenuItem(
    HMENU hMenu,
    UINT uIDCheckItem,
    UINT uCheck);

__declspec(dllimport)
BOOL
__stdcall
EnableMenuItem(
    HMENU hMenu,
    UINT uIDEnableItem,
    UINT uEnable);

__declspec(dllimport)
HMENU
__stdcall
GetSubMenu(
    HMENU hMenu,
    int nPos);

__declspec(dllimport)
UINT
__stdcall
GetMenuItemID(
    HMENU hMenu,
    int nPos);

__declspec(dllimport)
int
__stdcall
GetMenuItemCount(
    HMENU hMenu);

__declspec(dllimport)
BOOL
__stdcall
InsertMenuA(
    HMENU hMenu,
    UINT uPosition,
    UINT uFlags,
    UINT uIDNewItem,
    LPCSTR lpNewItem
    );
__declspec(dllimport)
BOOL
__stdcall
InsertMenuW(
    HMENU hMenu,
    UINT uPosition,
    UINT uFlags,
    UINT uIDNewItem,
    LPCWSTR lpNewItem
    );




#line 4916 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
AppendMenuA(
    HMENU hMenu,
    UINT uFlags,
    UINT uIDNewItem,
    LPCSTR lpNewItem
    );
__declspec(dllimport)
BOOL
__stdcall
AppendMenuW(
    HMENU hMenu,
    UINT uFlags,
    UINT uIDNewItem,
    LPCWSTR lpNewItem
    );




#line 4940 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
ModifyMenuA(
    HMENU hMnu,
    UINT uPosition,
    UINT uFlags,
    UINT uIDNewItem,
    LPCSTR lpNewItem
    );
__declspec(dllimport)
BOOL
__stdcall
ModifyMenuW(
    HMENU hMnu,
    UINT uPosition,
    UINT uFlags,
    UINT uIDNewItem,
    LPCWSTR lpNewItem
    );




#line 4966 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall RemoveMenu(
    HMENU hMenu,
    UINT uPosition,
    UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
DeleteMenu(
    HMENU hMenu,
    UINT uPosition,
    UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
SetMenuItemBitmaps(
    HMENU hMenu,
    UINT uPosition,
    UINT uFlags,
    HBITMAP hBitmapUnchecked,
    HBITMAP hBitmapChecked);

__declspec(dllimport)
LONG
__stdcall
GetMenuCheckMarkDimensions(
    void);

__declspec(dllimport)
BOOL
__stdcall
TrackPopupMenu(
    HMENU hMenu,
    UINT uFlags,
    int x,
    int y,
    int nReserved,
    HWND hWnd,
    const RECT *prcRect);








typedef struct tagTPMPARAMS
{
    UINT    cbSize;     
    RECT    rcExclude;  
}   TPMPARAMS;
typedef TPMPARAMS  *LPTPMPARAMS;

__declspec(dllimport) BOOL    __stdcall TrackPopupMenuEx(HMENU, UINT, int, int, HWND, LPTPMPARAMS);
#line 5026 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"









































































#line 5100 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"








#line 5109 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

















#line 5127 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


typedef struct tagMENUITEMINFOA
{
    UINT    cbSize;
    UINT    fMask;
    UINT    fType;          
    UINT    fState;         
    UINT    wID;            
    HMENU   hSubMenu;       
    HBITMAP hbmpChecked;    
    HBITMAP hbmpUnchecked;  
    DWORD   dwItemData;     
    LPSTR   dwTypeData;     
    UINT    cch;            


#line 5145 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
}   MENUITEMINFOA,  *LPMENUITEMINFOA;
typedef struct tagMENUITEMINFOW
{
    UINT    cbSize;
    UINT    fMask;
    UINT    fType;          
    UINT    fState;         
    UINT    wID;            
    HMENU   hSubMenu;       
    HBITMAP hbmpChecked;    
    HBITMAP hbmpUnchecked;  
    DWORD   dwItemData;     
    LPWSTR  dwTypeData;     
    UINT    cch;            


#line 5162 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
}   MENUITEMINFOW,  *LPMENUITEMINFOW;




typedef MENUITEMINFOA MENUITEMINFO;
typedef LPMENUITEMINFOA LPMENUITEMINFO;
#line 5170 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
typedef MENUITEMINFOA const  *LPCMENUITEMINFOA;
typedef MENUITEMINFOW const  *LPCMENUITEMINFOW;



typedef LPCMENUITEMINFOA LPCMENUITEMINFO;
#line 5177 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
InsertMenuItemA(
    HMENU,
    UINT,
    BOOL,
    LPCMENUITEMINFOA
    );
__declspec(dllimport)
BOOL
__stdcall
InsertMenuItemW(
    HMENU,
    UINT,
    BOOL,
    LPCMENUITEMINFOW
    );




#line 5201 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetMenuItemInfoA(
    HMENU,
    UINT,
    BOOL,
    LPMENUITEMINFOA
    );
__declspec(dllimport)
BOOL
__stdcall
GetMenuItemInfoW(
    HMENU,
    UINT,
    BOOL,
    LPMENUITEMINFOW
    );




#line 5225 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetMenuItemInfoA(
    HMENU,
    UINT,
    BOOL,
    LPCMENUITEMINFOA
    );
__declspec(dllimport)
BOOL
__stdcall
SetMenuItemInfoW(
    HMENU,
    UINT,
    BOOL,
    LPCMENUITEMINFOW
    );




#line 5249 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"





__declspec(dllimport) UINT    __stdcall GetMenuDefaultItem(HMENU hMenu, UINT fByPos, UINT gmdiFlags);
__declspec(dllimport) BOOL    __stdcall SetMenuDefaultItem(HMENU hMenu, UINT uItem, UINT fByPos);

__declspec(dllimport) BOOL    __stdcall GetMenuItemRect(HWND hWnd, HMENU hMenu, UINT uItem, LPRECT lprcItem);
__declspec(dllimport) int     __stdcall MenuItemFromPoint(HWND hWnd, HMENU hMenu, POINT ptScreen);
#line 5260 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


















#line 5279 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


#line 5282 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


#line 5285 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"







typedef struct tagDROPSTRUCT
{
    HWND    hwndSource;
    HWND    hwndSink;
    DWORD   wFmt;
    DWORD   dwData;
    POINT   ptDrop;
    DWORD   dwControlData;
} DROPSTRUCT, *PDROPSTRUCT, *LPDROPSTRUCT;











__declspec(dllimport)
DWORD
__stdcall
DragObject(HWND, HWND, UINT, DWORD, HCURSOR);

__declspec(dllimport)
BOOL
__stdcall
DragDetect(HWND, POINT);
#line 5322 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
DrawIcon(
    HDC hDC,
    int X,
    int Y,
    HICON hIcon);































typedef struct tagDRAWTEXTPARAMS
{
    UINT    cbSize;
    int     iTabLength;
    int     iLeftMargin;
    int     iRightMargin;
    UINT    uiLengthDrawn;
} DRAWTEXTPARAMS,  *LPDRAWTEXTPARAMS;
#line 5371 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


__declspec(dllimport)
int
__stdcall
DrawTextA(
    HDC hDC,
    LPCSTR lpString,
    int nCount,
    LPRECT lpRect,
    UINT uFormat);
__declspec(dllimport)
int
__stdcall
DrawTextW(
    HDC hDC,
    LPCWSTR lpString,
    int nCount,
    LPRECT lpRect,
    UINT uFormat);




#line 5396 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"



__declspec(dllimport)
int
__stdcall
DrawTextExA(HDC, LPSTR, int, LPRECT, UINT, LPDRAWTEXTPARAMS);
__declspec(dllimport)
int
__stdcall
DrawTextExW(HDC, LPWSTR, int, LPRECT, UINT, LPDRAWTEXTPARAMS);




#line 5412 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
#line 5413 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

#line 5415 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GrayStringA(
    HDC hDC,
    HBRUSH hBrush,
    GRAYSTRINGPROC lpOutputFunc,
    LPARAM lpData,
    int nCount,
    int X,
    int Y,
    int nWidth,
    int nHeight);
__declspec(dllimport)
BOOL
__stdcall
GrayStringW(
    HDC hDC,
    HBRUSH hBrush,
    GRAYSTRINGPROC lpOutputFunc,
    LPARAM lpData,
    int nCount,
    int X,
    int Y,
    int nWidth,
    int nHeight);




#line 5447 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

















__declspec(dllimport) BOOL __stdcall DrawStateA(HDC, HBRUSH, DRAWSTATEPROC, LPARAM, WPARAM, int, int, int, int, UINT);
__declspec(dllimport) BOOL __stdcall DrawStateW(HDC, HBRUSH, DRAWSTATEPROC, LPARAM, WPARAM, int, int, int, int, UINT);




#line 5471 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
#line 5472 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
LONG
__stdcall
TabbedTextOutA(
    HDC hDC,
    int X,
    int Y,
    LPCSTR lpString,
    int nCount,
    int nTabPositions,
    LPINT lpnTabStopPositions,
    int nTabOrigin);
__declspec(dllimport)
LONG
__stdcall
TabbedTextOutW(
    HDC hDC,
    int X,
    int Y,
    LPCWSTR lpString,
    int nCount,
    int nTabPositions,
    LPINT lpnTabStopPositions,
    int nTabOrigin);




#line 5502 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
DWORD
__stdcall
GetTabbedTextExtentA(
    HDC hDC,
    LPCSTR lpString,
    int nCount,
    int nTabPositions,
    LPINT lpnTabStopPositions);
__declspec(dllimport)
DWORD
__stdcall
GetTabbedTextExtentW(
    HDC hDC,
    LPCWSTR lpString,
    int nCount,
    int nTabPositions,
    LPINT lpnTabStopPositions);




#line 5526 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UpdateWindow(
    HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
SetActiveWindow(
    HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
GetForegroundWindow(
    void);


__declspec(dllimport) BOOL __stdcall PaintDesktop(HDC hdc);

#line 5549 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetForegroundWindow(
    HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
WindowFromDC(
    HDC hDC);

__declspec(dllimport)
HDC
__stdcall
GetDC(
    HWND hWnd);

__declspec(dllimport)
HDC
__stdcall
GetDCEx(
    HWND hWnd ,
    HRGN hrgnClip,
    DWORD flags);























__declspec(dllimport)
BOOL
__stdcall
AlignRects(LPRECT arc, DWORD cCount, DWORD iPrimary, DWORD dwFlags);













__declspec(dllimport)
HDC
__stdcall
GetWindowDC(
    HWND hWnd);

__declspec(dllimport)
int
__stdcall
ReleaseDC(
    HWND hWnd,
    HDC hDC);

__declspec(dllimport)
HDC
__stdcall
BeginPaint(
    HWND hWnd,
    LPPAINTSTRUCT lpPaint);

__declspec(dllimport)
BOOL
__stdcall
EndPaint(
    HWND hWnd,
    const PAINTSTRUCT *lpPaint);

__declspec(dllimport)
BOOL
__stdcall
GetUpdateRect(
    HWND hWnd,
    LPRECT lpRect,
    BOOL bErase);

__declspec(dllimport)
int
__stdcall
GetUpdateRgn(
    HWND hWnd,
    HRGN hRgn,
    BOOL bErase);

__declspec(dllimport)
int
__stdcall
SetWindowRgn(
    HWND hWnd,
    HRGN hRgn,
    BOOL bRedraw);

__declspec(dllimport)
int
__stdcall
GetWindowRgn(
    HWND hWnd,
    HRGN hRgn);

__declspec(dllimport)
int
__stdcall
ExcludeUpdateRgn(
    HDC hDC,
    HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
InvalidateRect(
    HWND hWnd ,
    const RECT *lpRect,
    BOOL bErase);

__declspec(dllimport)
BOOL
__stdcall
ValidateRect(
    HWND hWnd ,
    const RECT *lpRect);

__declspec(dllimport)
BOOL
__stdcall
InvalidateRgn(
    HWND hWnd,
    HRGN hRgn,
    BOOL bErase);

__declspec(dllimport)
BOOL
__stdcall
ValidateRgn(
    HWND hWnd,
    HRGN hRgn);


__declspec(dllimport)
BOOL
__stdcall
RedrawWindow(
    HWND hWnd,
    const RECT *lprcUpdate,
    HRGN hrgnUpdate,
    UINT flags);


























__declspec(dllimport)
BOOL
__stdcall
LockWindowUpdate(
    HWND hWndLock);

__declspec(dllimport)
BOOL
__stdcall
ScrollWindow(
    HWND hWnd,
    int XAmount,
    int YAmount,
    const RECT *lpRect,
    const RECT *lpClipRect);

__declspec(dllimport)
BOOL
__stdcall
ScrollDC(
    HDC hDC,
    int dx,
    int dy,
    const RECT *lprcScroll,
    const RECT *lprcClip ,
    HRGN hrgnUpdate,
    LPRECT lprcUpdate);

__declspec(dllimport)
int
__stdcall
ScrollWindowEx(
    HWND hWnd,
    int dx,
    int dy,
    const RECT *prcScroll,
    const RECT *prcClip ,
    HRGN hrgnUpdate,
    LPRECT prcUpdate,
    UINT flags);






#line 5792 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"



__declspec(dllimport)
int
__stdcall
SetScrollPos(
    HWND hWnd,
    int nBar,
    int nPos,
    BOOL bRedraw);

__declspec(dllimport)
int
__stdcall
GetScrollPos(
    HWND hWnd,
    int nBar);

__declspec(dllimport)
BOOL
__stdcall
SetScrollRange(
    HWND hWnd,
    int nBar,
    int nMinPos,
    int nMaxPos,
    BOOL bRedraw);

__declspec(dllimport)
BOOL
__stdcall
GetScrollRange(
    HWND hWnd,
    int nBar,
    LPINT lpMinPos,
    LPINT lpMaxPos);

__declspec(dllimport)
BOOL
__stdcall
ShowScrollBar(
    HWND hWnd,
    int wBar,
    BOOL bShow);

__declspec(dllimport)
BOOL
__stdcall
EnableScrollBar(
    HWND hWnd,
    UINT wSBflags,
    UINT wArrows);


















#line 5864 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetPropA(
    HWND hWnd,
    LPCSTR lpString,
    HANDLE hData);
__declspec(dllimport)
BOOL
__stdcall
SetPropW(
    HWND hWnd,
    LPCWSTR lpString,
    HANDLE hData);




#line 5884 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
HANDLE
__stdcall
GetPropA(
    HWND hWnd,
    LPCSTR lpString);
__declspec(dllimport)
HANDLE
__stdcall
GetPropW(
    HWND hWnd,
    LPCWSTR lpString);




#line 5902 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
HANDLE
__stdcall
RemovePropA(
    HWND hWnd,
    LPCSTR lpString);
__declspec(dllimport)
HANDLE
__stdcall
RemovePropW(
    HWND hWnd,
    LPCWSTR lpString);




#line 5920 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
int
__stdcall
EnumPropsExA(
    HWND hWnd,
    PROPENUMPROCEXA lpEnumFunc,
    LPARAM lParam);
__declspec(dllimport)
int
__stdcall
EnumPropsExW(
    HWND hWnd,
    PROPENUMPROCEXW lpEnumFunc,
    LPARAM lParam);




#line 5940 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
int
__stdcall
EnumPropsA(
    HWND hWnd,
    PROPENUMPROCA lpEnumFunc);
__declspec(dllimport)
int
__stdcall
EnumPropsW(
    HWND hWnd,
    PROPENUMPROCW lpEnumFunc);




#line 5958 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetWindowTextA(
    HWND hWnd,
    LPCSTR lpString);
__declspec(dllimport)
BOOL
__stdcall
SetWindowTextW(
    HWND hWnd,
    LPCWSTR lpString);




#line 5976 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
int
__stdcall
GetWindowTextA(
    HWND hWnd,
    LPSTR lpString,
    int nMaxCount);
__declspec(dllimport)
int
__stdcall
GetWindowTextW(
    HWND hWnd,
    LPWSTR lpString,
    int nMaxCount);




#line 5996 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
int
__stdcall
GetWindowTextLengthA(
    HWND hWnd);
__declspec(dllimport)
int
__stdcall
GetWindowTextLengthW(
    HWND hWnd);




#line 6012 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetClientRect(
    HWND hWnd,
    LPRECT lpRect);

__declspec(dllimport)
BOOL
__stdcall
GetWindowRect(
    HWND hWnd,
    LPRECT lpRect);

__declspec(dllimport)
BOOL
__stdcall
AdjustWindowRect(
    LPRECT lpRect,
    DWORD dwStyle,
    BOOL bMenu);

__declspec(dllimport)
BOOL
__stdcall
AdjustWindowRectEx(
    LPRECT lpRect,
    DWORD dwStyle,
    BOOL bMenu,
    DWORD dwExStyle);




typedef struct tagHELPINFO      
{
    UINT    cbSize;             
    int     iContextType;       
    int     iCtrlId;            
    HANDLE  hItemHandle;        
    DWORD   dwContextId;        
    POINT   MousePos;           
}  HELPINFO,  *LPHELPINFO;

__declspec(dllimport) BOOL  __stdcall  SetWindowContextHelpId(HWND, DWORD);
__declspec(dllimport) DWORD __stdcall  GetWindowContextHelpId(HWND);
__declspec(dllimport) BOOL  __stdcall  SetMenuContextHelpId(HMENU, DWORD);
__declspec(dllimport) DWORD __stdcall  GetMenuContextHelpId(HMENU);

#line 6063 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
























#line 6088 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"









#line 6098 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"






#line 6105 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"











#line 6117 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
















__declspec(dllimport)
int
__stdcall
MessageBoxA(
    HWND hWnd ,
    LPCSTR lpText,
    LPCSTR lpCaption,
    UINT uType);
__declspec(dllimport)
int
__stdcall
MessageBoxW(
    HWND hWnd ,
    LPCWSTR lpText,
    LPCWSTR lpCaption,
    UINT uType);




#line 6154 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
int
__stdcall
MessageBoxExA(
    HWND hWnd ,
    LPCSTR lpText,
    LPCSTR lpCaption,
    UINT uType,
    WORD wLanguageId);
__declspec(dllimport)
int
__stdcall
MessageBoxExW(
    HWND hWnd ,
    LPCWSTR lpText,
    LPCWSTR lpCaption,
    UINT uType,
    WORD wLanguageId);




#line 6178 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"



typedef void (__stdcall *MSGBOXCALLBACK)(LPHELPINFO lpHelpInfo);

typedef struct tagMSGBOXPARAMSA
{
    UINT        cbSize;
    HWND        hwndOwner;
    HINSTANCE   hInstance;
    LPCSTR      lpszText;
    LPCSTR      lpszCaption;
    DWORD       dwStyle;
    LPCSTR      lpszIcon;
    DWORD       dwContextHelpId;
    MSGBOXCALLBACK      lpfnMsgBoxCallback;
    DWORD   dwLanguageId;
} MSGBOXPARAMSA, *PMSGBOXPARAMSA, *LPMSGBOXPARAMSA;
typedef struct tagMSGBOXPARAMSW
{
    UINT        cbSize;
    HWND        hwndOwner;
    HINSTANCE   hInstance;
    LPCWSTR     lpszText;
    LPCWSTR     lpszCaption;
    DWORD       dwStyle;
    LPCWSTR     lpszIcon;
    DWORD       dwContextHelpId;
    MSGBOXCALLBACK      lpfnMsgBoxCallback;
    DWORD   dwLanguageId;
} MSGBOXPARAMSW, *PMSGBOXPARAMSW, *LPMSGBOXPARAMSW;





typedef MSGBOXPARAMSA MSGBOXPARAMS;
typedef PMSGBOXPARAMSA PMSGBOXPARAMS;
typedef LPMSGBOXPARAMSA LPMSGBOXPARAMS;
#line 6218 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


__declspec(dllimport) int     __stdcall MessageBoxIndirectA(LPMSGBOXPARAMSA);
__declspec(dllimport) int     __stdcall MessageBoxIndirectW(LPMSGBOXPARAMSW);




#line 6227 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
#line 6228 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"



__declspec(dllimport)
BOOL
__stdcall
MessageBeep(
    UINT uType);

#line 6238 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
int
__stdcall
ShowCursor(
    BOOL bShow);

__declspec(dllimport)
BOOL
__stdcall
SetCursorPos(
    int X,
    int Y);

__declspec(dllimport)
HCURSOR
__stdcall
SetCursor(
    HCURSOR hCursor);

__declspec(dllimport)
BOOL
__stdcall
GetCursorPos(
    LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
ClipCursor(
    const RECT *lpRect);

__declspec(dllimport)
BOOL
__stdcall
GetClipCursor(
    LPRECT lpRect);

__declspec(dllimport)
HCURSOR
__stdcall
GetCursor(
    void);

__declspec(dllimport)
BOOL
__stdcall
CreateCaret(
    HWND hWnd,
    HBITMAP hBitmap ,
    int nWidth,
    int nHeight);

__declspec(dllimport)
UINT
__stdcall
GetCaretBlinkTime(
    void);

__declspec(dllimport)
BOOL
__stdcall
SetCaretBlinkTime(
    UINT uMSeconds);

__declspec(dllimport)
BOOL
__stdcall
DestroyCaret(
    void);

__declspec(dllimport)
BOOL
__stdcall
HideCaret(
    HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ShowCaret(
    HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
SetCaretPos(
    int X,
    int Y);

__declspec(dllimport)
BOOL
__stdcall
GetCaretPos(
    LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
ClientToScreen(
    HWND hWnd,
    LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
ScreenToClient(
    HWND hWnd,
    LPPOINT lpPoint);

__declspec(dllimport)
int
__stdcall
MapWindowPoints(
    HWND hWndFrom,
    HWND hWndTo,
    LPPOINT lpPoints,
    UINT cPoints);

__declspec(dllimport)
HWND
__stdcall
WindowFromPoint(
    POINT Point);

__declspec(dllimport)
HWND
__stdcall
ChildWindowFromPoint(
    HWND hWndParent,
    POINT Point);







__declspec(dllimport) HWND    __stdcall ChildWindowFromPointEx(HWND, POINT, UINT);
#line 6378 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"










































#line 6421 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"





#line 6427 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"








#line 6436 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


__declspec(dllimport)
DWORD
__stdcall
GetSysColor(
    int nIndex);


__declspec(dllimport)
HBRUSH
__stdcall
GetSysColorBrush(
    int nIndex);


#line 6453 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetSysColors(
    int cElements,
    const INT * lpaElements,
    const COLORREF * lpaRgbValues);

#line 6463 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
DrawFocusRect(
    HDC hDC,
    const RECT * lprc);

__declspec(dllimport)
int
__stdcall
FillRect(
    HDC hDC,
    const RECT *lprc,
    HBRUSH hbr);

__declspec(dllimport)
int
__stdcall
FrameRect(
    HDC hDC,
    const RECT *lprc,
    HBRUSH hbr);

__declspec(dllimport)
BOOL
__stdcall
InvertRect(
    HDC hDC,
    const RECT *lprc);

__declspec(dllimport)
BOOL
__stdcall
SetRect(
    LPRECT lprc,
    int xLeft,
    int yTop,
    int xRight,
    int yBottom);

__declspec(dllimport)
BOOL
__stdcall
    SetRectEmpty(
    LPRECT lprc);

__declspec(dllimport)
BOOL
__stdcall
CopyRect(
    LPRECT lprcDst,
    const RECT *lprcSrc);

__declspec(dllimport)
BOOL
__stdcall
InflateRect(
    LPRECT lprc,
    int dx,
    int dy);

__declspec(dllimport)
BOOL
__stdcall
IntersectRect(
    LPRECT lprcDst,
    const RECT *lprcSrc1,
    const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
UnionRect(
    LPRECT lprcDst,
    const RECT *lprcSrc1,
    const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
SubtractRect(
    LPRECT lprcDst,
    const RECT *lprcSrc1,
    const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
OffsetRect(
    LPRECT lprc,
    int dx,
    int dy);

__declspec(dllimport)
BOOL
__stdcall
IsRectEmpty(
    const RECT *lprc);

__declspec(dllimport)
BOOL
__stdcall
EqualRect(
    const RECT *lprc1,
    const RECT *lprc2);

__declspec(dllimport)
BOOL
__stdcall
PtInRect(
    const RECT *lprc,
    POINT pt);



__declspec(dllimport)
WORD
__stdcall
GetWindowWord(
    HWND hWnd,
    int nIndex);

__declspec(dllimport)
WORD
__stdcall
SetWindowWord(
    HWND hWnd,
    int nIndex,
    WORD wNewWord);

__declspec(dllimport)
LONG
__stdcall
GetWindowLongA(
    HWND hWnd,
    int nIndex);
__declspec(dllimport)
LONG
__stdcall
GetWindowLongW(
    HWND hWnd,
    int nIndex);




#line 6611 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
LONG
__stdcall
SetWindowLongA(
    HWND hWnd,
    int nIndex,
    LONG dwNewLong);
__declspec(dllimport)
LONG
__stdcall
SetWindowLongW(
    HWND hWnd,
    int nIndex,
    LONG dwNewLong);




#line 6631 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
WORD
__stdcall
GetClassWord(
    HWND hWnd,
    int nIndex);

__declspec(dllimport)
WORD
__stdcall
SetClassWord(
    HWND hWnd,
    int nIndex,
    WORD wNewWord);

__declspec(dllimport)
DWORD
__stdcall
GetClassLongA(
    HWND hWnd,
    int nIndex);
__declspec(dllimport)
DWORD
__stdcall
GetClassLongW(
    HWND hWnd,
    int nIndex);




#line 6664 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
DWORD
__stdcall
SetClassLongA(
    HWND hWnd,
    int nIndex,
    LONG dwNewLong);
__declspec(dllimport)
DWORD
__stdcall
SetClassLongW(
    HWND hWnd,
    int nIndex,
    LONG dwNewLong);




#line 6684 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

#line 6686 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
GetDesktopWindow(
    void);


__declspec(dllimport)
HWND
__stdcall
GetParent(
    HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
SetParent(
    HWND hWndChild,
    HWND hWndNewParent);

__declspec(dllimport)
BOOL
__stdcall
EnumChildWindows(
    HWND hWndParent,
    WNDENUMPROC lpEnumFunc,
    LPARAM lParam);

__declspec(dllimport)
HWND
__stdcall
FindWindowA(
    LPCSTR lpClassName ,
    LPCSTR lpWindowName);
__declspec(dllimport)
HWND
__stdcall
FindWindowW(
    LPCWSTR lpClassName ,
    LPCWSTR lpWindowName);




#line 6732 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


__declspec(dllimport) HWND    __stdcall FindWindowExA(HWND, HWND, LPCSTR, LPCSTR);
__declspec(dllimport) HWND    __stdcall FindWindowExW(HWND, HWND, LPCWSTR, LPCWSTR);




#line 6741 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

#line 6743 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
EnumWindows(
    WNDENUMPROC lpEnumFunc,
    LPARAM lParam);

__declspec(dllimport)
BOOL
__stdcall
EnumThreadWindows(
    DWORD dwThreadId,
    WNDENUMPROC lpfn,
    LPARAM lParam);



__declspec(dllimport)
int
__stdcall
GetClassNameA(
    HWND hWnd,
    LPSTR lpClassName,
    int nMaxCount);
__declspec(dllimport)
int
__stdcall
GetClassNameW(
    HWND hWnd,
    LPWSTR lpClassName,
    int nMaxCount);




#line 6781 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
GetTopWindow(
    HWND hWnd);





__declspec(dllimport)
DWORD
__stdcall
GetWindowThreadProcessId(
    HWND hWnd,
    LPDWORD lpdwProcessId);




__declspec(dllimport)
HWND
__stdcall
GetLastActivePopup(
    HWND hWnd);















#line 6823 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
GetWindow(
    HWND hWnd,
    UINT uCmd);







__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookA(
    int nFilterType,
    HOOKPROC pfnFilterProc);
__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookW(
    int nFilterType,
    HOOKPROC pfnFilterProc);




#line 6854 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"





















#line 6876 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UnhookWindowsHook(
    int nCode,
    HOOKPROC pfnFilterProc);

__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookExA(
    int idHook,
    HOOKPROC lpfn,
    HINSTANCE hmod,
    DWORD dwThreadId);
__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookExW(
    int idHook,
    HOOKPROC lpfn,
    HINSTANCE hmod,
    DWORD dwThreadId);




#line 6905 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UnhookWindowsHookEx(
    HHOOK hhk);

__declspec(dllimport)
LRESULT
__stdcall
CallNextHookEx(
    HHOOK hhk,
    int nCode,
    WPARAM wParam,
    LPARAM lParam);










#line 6931 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

#line 6933 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"









































#line 6975 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"




#line 6980 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"




#line 6985 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"





























#line 7015 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

#line 7017 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"





__declspec(dllimport)
BOOL
__stdcall
CheckMenuRadioItem(HMENU, UINT, UINT, UINT, UINT);
#line 7027 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"




typedef struct {
    WORD versionNumber;
    WORD offset;
} MENUITEMTEMPLATEHEADER, *PMENUITEMTEMPLATEHEADER;

typedef struct {        
    WORD mtOption;
    WORD mtID;
    WCHAR mtString[1];
} MENUITEMTEMPLATE, *PMENUITEMTEMPLATE;


#line 7044 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"




























#line 7073 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"







#line 7081 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"





__declspec(dllimport)
HBITMAP
__stdcall
LoadBitmapA(
    HINSTANCE hInstance,
    LPCSTR lpBitmapName);
__declspec(dllimport)
HBITMAP
__stdcall
LoadBitmapW(
    HINSTANCE hInstance,
    LPCWSTR lpBitmapName);




#line 7103 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorA(
    HINSTANCE hInstance,
    LPCSTR lpCursorName);
__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorW(
    HINSTANCE hInstance,
    LPCWSTR lpCursorName);




#line 7121 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorFromFileA(
    LPCSTR    lpFileName);
__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorFromFileW(
    LPCWSTR    lpFileName);




#line 7137 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
HCURSOR
__stdcall
CreateCursor(
    HINSTANCE hInst,
    int xHotSpot,
    int yHotSpot,
    int nWidth,
    int nHeight,
    const void *pvANDPlane,
    const void *pvXORPlane);

__declspec(dllimport)
BOOL
__stdcall
DestroyCursor(
    HCURSOR hCursor);









#line 7165 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"



















#line 7185 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"



#line 7189 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetSystemCursor(
    HCURSOR hcur,
    DWORD   id);

typedef struct _ICONINFO {
    BOOL    fIcon;
    DWORD   xHotspot;
    DWORD   yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
} ICONINFO;
typedef ICONINFO *PICONINFO;

__declspec(dllimport)
HICON
__stdcall
LoadIconA(
    HINSTANCE hInstance,
    LPCSTR lpIconName);
__declspec(dllimport)
HICON
__stdcall
LoadIconW(
    HINSTANCE hInstance,
    LPCWSTR lpIconName);




#line 7223 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


__declspec(dllimport)
HICON
__stdcall
CreateIcon(
    HINSTANCE hInstance,
    int nWidth,
    int nHeight,
    BYTE cPlanes,
    BYTE cBitsPixel,
    const BYTE *lpbANDbits,
    const BYTE *lpbXORbits);

__declspec(dllimport)
BOOL
__stdcall
DestroyIcon(
    HICON hIcon);

__declspec(dllimport)
int
__stdcall
LookupIconIdFromDirectory(
    PBYTE presbits,
    BOOL fIcon);


__declspec(dllimport)
int
__stdcall
LookupIconIdFromDirectoryEx(
    PBYTE presbits,
    BOOL  fIcon,
    int   cxDesired,
    int   cyDesired,
    UINT  Flags);
#line 7261 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
HICON
__stdcall
CreateIconFromResource(
    PBYTE presbits,
    DWORD dwResSize,
    BOOL fIcon,
    DWORD dwVer);


__declspec(dllimport)
HICON
__stdcall
CreateIconFromResourceEx(
    PBYTE presbits,
    DWORD dwResSize,
    BOOL  fIcon,
    DWORD dwVer,
    int   cxDesired,
    int   cyDesired,
    UINT  Flags);


typedef struct tagCURSORSHAPE
{
    int     xHotSpot;
    int     yHotSpot;
    int     cx;
    int     cy;
    int     cbWidth;
    BYTE    Planes;
    BYTE    BitsPixel;
} CURSORSHAPE,  *LPCURSORSHAPE;
#line 7296 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"





















__declspec(dllimport)
HANDLE
__stdcall
LoadImageA(
    HINSTANCE,
    LPCSTR,
    UINT,
    int,
    int,
    UINT);
__declspec(dllimport)
HANDLE
__stdcall
LoadImageW(
    HINSTANCE,
    LPCWSTR,
    UINT,
    int,
    int,
    UINT);




#line 7342 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
HANDLE
__stdcall
CopyImage(
    HANDLE,
    UINT,
    int,
    int,
    UINT);







__declspec(dllimport) BOOL __stdcall DrawIconEx(HDC hdc, int xLeft, int yTop,
              HICON hIcon, int cxWidth, int cyWidth,
              UINT istepIfAniCur, HBRUSH hbrFlickerFreeDraw, UINT diFlags);
#line 7363 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
HICON
__stdcall
CreateIconIndirect(
    PICONINFO piconinfo);

__declspec(dllimport)
HICON
__stdcall
CopyIcon(
    HICON hIcon);

__declspec(dllimport)
BOOL
__stdcall
GetIconInfo(
    HICON hIcon,
    PICONINFO piconinfo);




#line 7387 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"














































































































#line 7498 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
#line 7499 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"





#line 7505 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"



#line 7509 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
int
__stdcall
LoadStringA(
    HINSTANCE hInstance,
    UINT uID,
    LPSTR lpBuffer,
    int nBufferMax);
__declspec(dllimport)
int
__stdcall
LoadStringW(
    HINSTANCE hInstance,
    UINT uID,
    LPWSTR lpBuffer,
    int nBufferMax);




#line 7531 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
















#line 7548 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"































#line 7580 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"



#line 7584 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


















#line 7603 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"









#line 7613 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"














































#line 7660 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"




#line 7665 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"



#line 7669 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"








































#line 7710 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
















#line 7727 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"



















#line 7747 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

























#line 7773 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"











#line 7785 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
















#line 7802 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

#line 7804 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"



















__declspec(dllimport)
BOOL
__stdcall
IsDialogMessageA(
    HWND hDlg,
    LPMSG lpMsg);
__declspec(dllimport)
BOOL
__stdcall
IsDialogMessageW(
    HWND hDlg,
    LPMSG lpMsg);




#line 7840 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

#line 7842 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
MapDialogRect(
    HWND hDlg,
    LPRECT lpRect);

__declspec(dllimport)
int
__stdcall
DlgDirListA(
    HWND hDlg,
    LPSTR lpPathSpec,
    int nIDListBox,
    int nIDStaticPath,
    UINT uFileType);
__declspec(dllimport)
int
__stdcall
DlgDirListW(
    HWND hDlg,
    LPWSTR lpPathSpec,
    int nIDListBox,
    int nIDStaticPath,
    UINT uFileType);




#line 7873 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"















__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectExA(
    HWND hDlg,
    LPSTR lpString,
    int nCount,
    int nIDListBox);
__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectExW(
    HWND hDlg,
    LPWSTR lpString,
    int nCount,
    int nIDListBox);




#line 7909 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
int
__stdcall
DlgDirListComboBoxA(
    HWND hDlg,
    LPSTR lpPathSpec,
    int nIDComboBox,
    int nIDStaticPath,
    UINT uFiletype);
__declspec(dllimport)
int
__stdcall
DlgDirListComboBoxW(
    HWND hDlg,
    LPWSTR lpPathSpec,
    int nIDComboBox,
    int nIDStaticPath,
    UINT uFiletype);




#line 7933 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectComboBoxExA(
    HWND hDlg,
    LPSTR lpString,
    int nCount,
    int nIDComboBox);
__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectComboBoxExW(
    HWND hDlg,
    LPWSTR lpString,
    int nCount,
    int nIDComboBox);




#line 7955 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

























#line 7981 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"








#line 7990 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


































                                  




























































#line 8086 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"




#line 8091 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

#line 8093 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
























#line 8118 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"




#line 8123 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"













































#line 8169 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


#line 8172 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"









































#line 8214 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"




#line 8219 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
#line 8220 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"





















#line 8242 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"



#line 8246 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"






















typedef struct tagSCROLLINFO
{
    UINT    cbSize;
    UINT    fMask;
    int     nMin;
    int     nMax;
    UINT    nPage;
    int     nPos;
    int     nTrackPos;
}   SCROLLINFO,  *LPSCROLLINFO;
typedef SCROLLINFO const  *LPCSCROLLINFO;

__declspec(dllimport) int     __stdcall SetScrollInfo(HWND, int, LPCSCROLLINFO, BOOL);
__declspec(dllimport) BOOL    __stdcall GetScrollInfo(HWND, int, LPSCROLLINFO);
#line 8283 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
#line 8284 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
#line 8285 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"















typedef struct tagMDICREATESTRUCTA {
    LPCSTR   szClass;
    LPCSTR   szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;        
} MDICREATESTRUCTA, *LPMDICREATESTRUCTA;
typedef struct tagMDICREATESTRUCTW {
    LPCWSTR  szClass;
    LPCWSTR  szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;        
} MDICREATESTRUCTW, *LPMDICREATESTRUCTW;




typedef MDICREATESTRUCTA MDICREATESTRUCT;
typedef LPMDICREATESTRUCTA LPMDICREATESTRUCT;
#line 8329 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

typedef struct tagCLIENTCREATESTRUCT {
    HANDLE hWindowMenu;
    UINT idFirstChild;
} CLIENTCREATESTRUCT, *LPCLIENTCREATESTRUCT;

__declspec(dllimport)
LRESULT
__stdcall
DefFrameProcA(
    HWND hWnd,
    HWND hWndMDIClient ,
    UINT uMsg,
    WPARAM wParam,
    LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
DefFrameProcW(
    HWND hWnd,
    HWND hWndMDIClient ,
    UINT uMsg,
    WPARAM wParam,
    LPARAM lParam);




#line 8358 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)

LRESULT
__stdcall



#line 8367 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
DefMDIChildProcA(
    HWND hWnd,
    UINT uMsg,
    WPARAM wParam,
    LPARAM lParam);
__declspec(dllimport)

LRESULT
__stdcall



#line 8380 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
DefMDIChildProcW(
    HWND hWnd,
    UINT uMsg,
    WPARAM wParam,
    LPARAM lParam);




#line 8390 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"



__declspec(dllimport)
BOOL
__stdcall
TranslateMDISysAccel(
    HWND hWndClient,
    LPMSG lpMsg);

#line 8401 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
UINT
__stdcall
ArrangeIconicWindows(
    HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
CreateMDIWindowA(
    LPSTR lpClassName,
    LPSTR lpWindowName,
    DWORD dwStyle,
    int X,
    int Y,
    int nWidth,
    int nHeight,
    HWND hWndParent,
    HINSTANCE hInstance,
    LPARAM lParam
    );
__declspec(dllimport)
HWND
__stdcall
CreateMDIWindowW(
    LPWSTR lpClassName,
    LPWSTR lpWindowName,
    DWORD dwStyle,
    int X,
    int Y,
    int nWidth,
    int nHeight,
    HWND hWndParent,
    HINSTANCE hInstance,
    LPARAM lParam
    );




#line 8443 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


__declspec(dllimport) WORD    __stdcall TileWindows(HWND hwndParent, UINT wHow, const RECT * lpRect, UINT cKids, const HWND  * lpKids);
__declspec(dllimport) WORD    __stdcall CascadeWindows(HWND hwndParent, UINT wHow, const RECT * lpRect, UINT cKids,  const HWND  * lpKids);
#line 8448 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
#line 8449 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

#line 8451 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"





typedef DWORD HELPPOLY;
typedef struct tagMULTIKEYHELPA {

    DWORD  mkSize;


#line 8463 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
    CHAR   mkKeylist;
    CHAR   szKeyphrase[1];
} MULTIKEYHELPA, *PMULTIKEYHELPA, *LPMULTIKEYHELPA;
typedef struct tagMULTIKEYHELPW {

    DWORD  mkSize;


#line 8472 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
    WCHAR  mkKeylist;
    WCHAR  szKeyphrase[1];
} MULTIKEYHELPW, *PMULTIKEYHELPW, *LPMULTIKEYHELPW;





typedef MULTIKEYHELPA MULTIKEYHELP;
typedef PMULTIKEYHELPA PMULTIKEYHELP;
typedef LPMULTIKEYHELPA LPMULTIKEYHELP;
#line 8484 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

typedef struct tagHELPWININFOA {
    int  wStructSize;
    int  x;
    int  y;
    int  dx;
    int  dy;
    int  wMax;
    CHAR   rgchMember[2];
} HELPWININFOA, *PHELPWININFOA, *LPHELPWININFOA;
typedef struct tagHELPWININFOW {
    int  wStructSize;
    int  x;
    int  y;
    int  dx;
    int  dy;
    int  wMax;
    WCHAR  rgchMember[2];
} HELPWININFOW, *PHELPWININFOW, *LPHELPWININFOW;





typedef HELPWININFOA HELPWININFO;
typedef PHELPWININFOA PHELPWININFO;
typedef LPHELPWININFOA LPHELPWININFO;
#line 8512 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"






































#line 8551 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"




__declspec(dllimport)
BOOL
__stdcall
WinHelpA(
    HWND hWndMain,
    LPCSTR lpszHelp,
    UINT uCommand,
    DWORD dwData
    );
__declspec(dllimport)
BOOL
__stdcall
WinHelpW(
    HWND hWndMain,
    LPCWSTR lpszHelp,
    UINT uCommand,
    DWORD dwData
    );




#line 8578 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

#line 8580 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"






#line 8587 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"




















































































#line 8672 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"















#line 8688 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"















#line 8704 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"






#line 8711 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
























#line 8736 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"












typedef struct tagNONCLIENTMETRICSA
{
    UINT    cbSize;
    int     iBorderWidth;
    int     iScrollWidth;
    int     iScrollHeight;
    int     iCaptionWidth;
    int     iCaptionHeight;
    LOGFONTA lfCaptionFont;
    int     iSmCaptionWidth;
    int     iSmCaptionHeight;
    LOGFONTA lfSmCaptionFont;
    int     iMenuWidth;
    int     iMenuHeight;
    LOGFONTA lfMenuFont;
    LOGFONTA lfStatusFont;
    LOGFONTA lfMessageFont;
}   NONCLIENTMETRICSA, *PNONCLIENTMETRICSA, * LPNONCLIENTMETRICSA;
typedef struct tagNONCLIENTMETRICSW
{
    UINT    cbSize;
    int     iBorderWidth;
    int     iScrollWidth;
    int     iScrollHeight;
    int     iCaptionWidth;
    int     iCaptionHeight;
    LOGFONTW lfCaptionFont;
    int     iSmCaptionWidth;
    int     iSmCaptionHeight;
    LOGFONTW lfSmCaptionFont;
    int     iMenuWidth;
    int     iMenuHeight;
    LOGFONTW lfMenuFont;
    LOGFONTW lfStatusFont;
    LOGFONTW lfMessageFont;
}   NONCLIENTMETRICSW, *PNONCLIENTMETRICSW, * LPNONCLIENTMETRICSW;





typedef NONCLIENTMETRICSA NONCLIENTMETRICS;
typedef PNONCLIENTMETRICSA PNONCLIENTMETRICS;
typedef LPNONCLIENTMETRICSA LPNONCLIENTMETRICS;
#line 8793 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
#line 8794 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
#line 8795 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"















typedef struct tagMINIMIZEDMETRICS
{
    UINT    cbSize;
    int     iWidth;
    int     iHorzGap;
    int     iVertGap;
    int     iArrange;
}   MINIMIZEDMETRICS, *PMINIMIZEDMETRICS, *LPMINIMIZEDMETRICS;



typedef struct tagICONMETRICSA
{
    UINT    cbSize;
    int     iHorzSpacing;
    int     iVertSpacing;
    int     iTitleWrap;
    LOGFONTA lfFont;
}   ICONMETRICSA, *PICONMETRICSA, *LPICONMETRICSA;
typedef struct tagICONMETRICSW
{
    UINT    cbSize;
    int     iHorzSpacing;
    int     iVertSpacing;
    int     iTitleWrap;
    LOGFONTW lfFont;
}   ICONMETRICSW, *PICONMETRICSW, *LPICONMETRICSW;





typedef ICONMETRICSA ICONMETRICS;
typedef PICONMETRICSA PICONMETRICS;
typedef LPICONMETRICSA LPICONMETRICS;
#line 8846 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
#line 8847 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
#line 8848 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

typedef struct tagANIMATIONINFO
{
    UINT    cbSize;
    int     iMinAnimate;
}   ANIMATIONINFO, *LPANIMATIONINFO;

typedef struct tagSERIALKEYSA
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPSTR     lpszActivePort;
    LPSTR     lpszPort;
    UINT    iBaudRate;
    UINT    iPortState;
    UINT    iActive;
}   SERIALKEYSA, *LPSERIALKEYSA;
typedef struct tagSERIALKEYSW
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPWSTR    lpszActivePort;
    LPWSTR    lpszPort;
    UINT    iBaudRate;
    UINT    iPortState;
    UINT    iActive;
}   SERIALKEYSW, *LPSERIALKEYSW;




typedef SERIALKEYSA SERIALKEYS;
typedef LPSERIALKEYSA LPSERIALKEYS;
#line 8882 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"







typedef struct tagHIGHCONTRASTA
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPSTR   lpszDefaultScheme;
}   HIGHCONTRASTA, *LPHIGHCONTRASTA;
typedef struct tagHIGHCONTRASTW
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPWSTR  lpszDefaultScheme;
}   HIGHCONTRASTW, *LPHIGHCONTRASTW;




typedef HIGHCONTRASTA HIGHCONTRAST;
typedef LPHIGHCONTRASTA LPHIGHCONTRAST;
#line 8908 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
































__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsA(
    LPDEVMODEA  lpDevMode,
    DWORD       dwFlags);
__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsW(
    LPDEVMODEW  lpDevMode,
    DWORD       dwFlags);




#line 8957 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsExA(
    LPCSTR    lpszDeviceName,
    LPDEVMODEA  lpDevMode,
    HWND        hwnd,
    DWORD       dwflags,
    LPVOID      lParam);
__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsExW(
    LPCWSTR    lpszDeviceName,
    LPDEVMODEW  lpDevMode,
    HWND        hwnd,
    DWORD       dwflags,
    LPVOID      lParam);




#line 8981 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"




__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsA(
    LPCSTR lpszDeviceName,
    DWORD iModeNum,
    LPDEVMODEA lpDevMode);
__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsW(
    LPCWSTR lpszDeviceName,
    DWORD iModeNum,
    LPDEVMODEW lpDevMode);




#line 9004 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
























#line 9029 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

#line 9031 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
#line 9032 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
SystemParametersInfoA(
    UINT uiAction,
    UINT uiParam,
    PVOID pvParam,
    UINT fWinIni);
__declspec(dllimport)
BOOL
__stdcall
SystemParametersInfoW(
    UINT uiAction,
    UINT uiParam,
    PVOID pvParam,
    UINT fWinIni);




#line 9055 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

#line 9057 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"




typedef struct tagFILTERKEYS
{
    UINT  cbSize;
    DWORD dwFlags;
    DWORD iWaitMSec;            
    DWORD iDelayMSec;           
    DWORD iRepeatMSec;          
    DWORD iBounceMSec;          
} FILTERKEYS, *LPFILTERKEYS;












typedef struct tagSTICKYKEYS
{
    UINT  cbSize;
    DWORD dwFlags;
} STICKYKEYS, *LPSTICKYKEYS;






























#line 9118 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

typedef struct tagMOUSEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iMaxSpeed;
    DWORD iTimeToMaxSpeed;
    DWORD iCtrlSpeed;
    DWORD dwReserved1;
    DWORD dwReserved2;
} MOUSEKEYS, *LPMOUSEKEYS;


















#line 9148 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

typedef struct tagACCESSTIMEOUT
{
    UINT  cbSize;
    DWORD dwFlags;
    DWORD iTimeOutMSec;
} ACCESSTIMEOUT, *LPACCESSTIMEOUT;
























typedef struct tagSOUNDSENTRYA
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPSTR   lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYA, *LPSOUNDSENTRYA;
typedef struct tagSOUNDSENTRYW
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPWSTR  lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYW, *LPSOUNDSENTRYW;




typedef SOUNDSENTRYA SOUNDSENTRY;
typedef LPSOUNDSENTRYA LPSOUNDSENTRY;
#line 9216 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"








typedef struct tagTOGGLEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
} TOGGLEKEYS, *LPTOGGLEKEYS;















__declspec(dllimport)
void
__stdcall
SetDebugErrorLevel(
    DWORD dwLevel
    );









__declspec(dllimport)
void
__stdcall
SetLastErrorEx(
    DWORD dwErrCode,
    DWORD dwType
    );






























































































































































































































































































































































































































































































































































































































































































































































































































































































#line 10129 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"








#line 10138 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"







#line 10146 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"


}
#line 10150 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"

#line 10152 "c:\\programme\\microsoft visual studio\\vc98\\include\\winuser.h"
#line 167 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"





#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnls.h"





















extern "C" {
#line 24 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnls.h"






































#line 63 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnls.h"



















































































#line 147 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnls.h"































































































































































































































#line 371 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnls.h"























































































































#line 491 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnls.h"









#line 501 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnls.h"





















#line 523 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnls.h"























































#line 579 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnls.h"





































typedef DWORD LCTYPE;





typedef DWORD CALTYPE;





typedef DWORD CALID;






typedef struct _cpinfo {
    UINT    MaxCharSize;                    
    BYTE    DefaultChar[2];   
    BYTE    LeadByte[12];        
} CPINFO, *LPCPINFO;

typedef struct _cpinfoexA {
    UINT    MaxCharSize;                    
    BYTE    DefaultChar[2];   
    BYTE    LeadByte[12];        
    WCHAR   UnicodeDefaultChar;             
    UINT    CodePage;                       
    CHAR    CodePageName[260];         
} CPINFOEXA, *LPCPINFOEXA;
typedef struct _cpinfoexW {
    UINT    MaxCharSize;                    
    BYTE    DefaultChar[2];   
    BYTE    LeadByte[12];        
    WCHAR   UnicodeDefaultChar;             
    UINT    CodePage;                       
    WCHAR   CodePageName[260];         
} CPINFOEXW, *LPCPINFOEXW;




typedef CPINFOEXA CPINFOEX;
typedef LPCPINFOEXA LPCPINFOEX;
#line 664 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnls.h"






typedef struct _numberfmtA {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPSTR   lpDecimalSep;              
    LPSTR   lpThousandSep;             
    UINT    NegativeOrder;             
} NUMBERFMTA, *LPNUMBERFMTA;
typedef struct _numberfmtW {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPWSTR  lpDecimalSep;              
    LPWSTR  lpThousandSep;             
    UINT    NegativeOrder;             
} NUMBERFMTW, *LPNUMBERFMTW;




typedef NUMBERFMTA NUMBERFMT;
typedef LPNUMBERFMTA LPNUMBERFMT;
#line 693 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnls.h"






typedef struct _currencyfmtA {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPSTR   lpDecimalSep;              
    LPSTR   lpThousandSep;             
    UINT    NegativeOrder;             
    UINT    PositiveOrder;             
    LPSTR   lpCurrencySymbol;          
} CURRENCYFMTA, *LPCURRENCYFMTA;
typedef struct _currencyfmtW {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPWSTR  lpDecimalSep;              
    LPWSTR  lpThousandSep;             
    UINT    NegativeOrder;             
    UINT    PositiveOrder;             
    LPWSTR  lpCurrencySymbol;          
} CURRENCYFMTW, *LPCURRENCYFMTW;




typedef CURRENCYFMTA CURRENCYFMT;
typedef LPCURRENCYFMTA LPCURRENCYFMT;
#line 726 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnls.h"








typedef BOOL (__stdcall* LOCALE_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CODEPAGE_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXA)(LPSTR, CALID);
typedef BOOL (__stdcall* TIMEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCEXA)(LPSTR, CALID);

typedef BOOL (__stdcall* LOCALE_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CODEPAGE_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (__stdcall* TIMEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCEXW)(LPWSTR, CALID);



















#line 769 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnls.h"





















#line 791 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnls.h"



























__declspec(dllimport)
BOOL
__stdcall
IsValidCodePage(
    UINT  CodePage);

__declspec(dllimport)
UINT
__stdcall
GetACP(void);

__declspec(dllimport)
UINT
__stdcall
GetOEMCP(void);

__declspec(dllimport)
BOOL
__stdcall
GetCPInfo(
    UINT      CodePage,
    LPCPINFO  lpCPInfo);

__declspec(dllimport)
BOOL
__stdcall
GetCPInfoExA(
    UINT         CodePage,
    DWORD        dwFlags,
    LPCPINFOEXA  lpCPInfoEx);
__declspec(dllimport)
BOOL
__stdcall
GetCPInfoExW(
    UINT         CodePage,
    DWORD        dwFlags,
    LPCPINFOEXW  lpCPInfoEx);




#line 860 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
IsDBCSLeadByte(
    BYTE  TestChar);

__declspec(dllimport)
BOOL
__stdcall
IsDBCSLeadByteEx(
    UINT  CodePage,
    BYTE  TestChar);

__declspec(dllimport)
int
__stdcall
MultiByteToWideChar(
    UINT     CodePage,
    DWORD    dwFlags,
    LPCSTR   lpMultiByteStr,
    int      cchMultiByte,
    LPWSTR   lpWideCharStr,
    int      cchWideChar);

__declspec(dllimport)
int
__stdcall
WideCharToMultiByte(
    UINT     CodePage,
    DWORD    dwFlags,
    LPCWSTR  lpWideCharStr,
    int      cchWideChar,
    LPSTR    lpMultiByteStr,
    int      cchMultiByte,
    LPCSTR   lpDefaultChar,
    LPBOOL   lpUsedDefaultChar);






__declspec(dllimport)
int
__stdcall
CompareStringA(
    LCID     Locale,
    DWORD    dwCmpFlags,
    LPCSTR lpString1,
    int      cchCount1,
    LPCSTR lpString2,
    int      cchCount2);
__declspec(dllimport)
int
__stdcall
CompareStringW(
    LCID     Locale,
    DWORD    dwCmpFlags,
    LPCWSTR lpString1,
    int      cchCount1,
    LPCWSTR lpString2,
    int      cchCount2);




#line 928 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnls.h"

__declspec(dllimport)
int
__stdcall
LCMapStringA(
    LCID     Locale,
    DWORD    dwMapFlags,
    LPCSTR lpSrcStr,
    int      cchSrc,
    LPSTR  lpDestStr,
    int      cchDest);
__declspec(dllimport)
int
__stdcall
LCMapStringW(
    LCID     Locale,
    DWORD    dwMapFlags,
    LPCWSTR lpSrcStr,
    int      cchSrc,
    LPWSTR  lpDestStr,
    int      cchDest);




#line 954 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnls.h"

__declspec(dllimport)
int
__stdcall
GetLocaleInfoA(
    LCID     Locale,
    LCTYPE   LCType,
    LPSTR  lpLCData,
    int      cchData);
__declspec(dllimport)
int
__stdcall
GetLocaleInfoW(
    LCID     Locale,
    LCTYPE   LCType,
    LPWSTR  lpLCData,
    int      cchData);




#line 976 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
SetLocaleInfoA(
    LCID     Locale,
    LCTYPE   LCType,
    LPCSTR lpLCData);
__declspec(dllimport)
BOOL
__stdcall
SetLocaleInfoW(
    LCID     Locale,
    LCTYPE   LCType,
    LPCWSTR lpLCData);




#line 996 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnls.h"

__declspec(dllimport)
int
__stdcall
GetTimeFormatA(
    LCID     Locale,
    DWORD    dwFlags,
    const SYSTEMTIME *lpTime,
    LPCSTR lpFormat,
    LPSTR  lpTimeStr,
    int      cchTime);
__declspec(dllimport)
int
__stdcall
GetTimeFormatW(
    LCID     Locale,
    DWORD    dwFlags,
    const SYSTEMTIME *lpTime,
    LPCWSTR lpFormat,
    LPWSTR  lpTimeStr,
    int      cchTime);




#line 1022 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnls.h"

__declspec(dllimport)
int
__stdcall
GetDateFormatA(
    LCID     Locale,
    DWORD    dwFlags,
    const SYSTEMTIME *lpDate,
    LPCSTR lpFormat,
    LPSTR  lpDateStr,
    int      cchDate);
__declspec(dllimport)
int
__stdcall
GetDateFormatW(
    LCID     Locale,
    DWORD    dwFlags,
    const SYSTEMTIME *lpDate,
    LPCWSTR lpFormat,
    LPWSTR  lpDateStr,
    int      cchDate);




#line 1048 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnls.h"

__declspec(dllimport)
int
__stdcall
GetNumberFormatA(
    LCID     Locale,
    DWORD    dwFlags,
    LPCSTR lpValue,
    const NUMBERFMTA *lpFormat,
    LPSTR  lpNumberStr,
    int      cchNumber);
__declspec(dllimport)
int
__stdcall
GetNumberFormatW(
    LCID     Locale,
    DWORD    dwFlags,
    LPCWSTR lpValue,
    const NUMBERFMTW *lpFormat,
    LPWSTR  lpNumberStr,
    int      cchNumber);




#line 1074 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnls.h"

__declspec(dllimport)
int
__stdcall
GetCurrencyFormatA(
    LCID     Locale,
    DWORD    dwFlags,
    LPCSTR lpValue,
    const CURRENCYFMTA *lpFormat,
    LPSTR  lpCurrencyStr,
    int      cchCurrency);
__declspec(dllimport)
int
__stdcall
GetCurrencyFormatW(
    LCID     Locale,
    DWORD    dwFlags,
    LPCWSTR lpValue,
    const CURRENCYFMTW *lpFormat,
    LPWSTR  lpCurrencyStr,
    int      cchCurrency);




#line 1100 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoA(
    CALINFO_ENUMPROCA lpCalInfoEnumProc,
    LCID              Locale,
    CALID             Calendar,
    CALTYPE           CalType);
__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoW(
    CALINFO_ENUMPROCW lpCalInfoEnumProc,
    LCID              Locale,
    CALID             Calendar,
    CALTYPE           CalType);




#line 1122 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnls.h"























#line 1146 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
EnumTimeFormatsA(
    TIMEFMT_ENUMPROCA lpTimeFmtEnumProc,
    LCID              Locale,
    DWORD             dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumTimeFormatsW(
    TIMEFMT_ENUMPROCW lpTimeFmtEnumProc,
    LCID              Locale,
    DWORD             dwFlags);




#line 1166 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsA(
    DATEFMT_ENUMPROCA lpDateFmtEnumProc,
    LCID              Locale,
    DWORD             dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsW(
    DATEFMT_ENUMPROCW lpDateFmtEnumProc,
    LCID              Locale,
    DWORD             dwFlags);




#line 1186 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnls.h"





















#line 1208 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
IsValidLocale(
    LCID   Locale,
    DWORD  dwFlags);

__declspec(dllimport)
LCID
__stdcall
ConvertDefaultLocale(
    LCID   Locale);

__declspec(dllimport)
LCID
__stdcall
GetThreadLocale(void);

__declspec(dllimport)
BOOL
__stdcall
SetThreadLocale(
    LCID  Locale
    );

__declspec(dllimport)
LANGID
__stdcall
GetSystemDefaultLangID(void);

__declspec(dllimport)
LANGID
__stdcall
GetUserDefaultLangID(void);

__declspec(dllimport)
LCID
__stdcall
GetSystemDefaultLCID(void);

__declspec(dllimport)
LCID
__stdcall
GetUserDefaultLCID(void);






__declspec(dllimport)
BOOL
__stdcall
GetStringTypeExA(
    LCID     Locale,
    DWORD    dwInfoType,
    LPCSTR lpSrcStr,
    int      cchSrc,
    LPWORD   lpCharType);
__declspec(dllimport)
BOOL
__stdcall
GetStringTypeExW(
    LCID     Locale,
    DWORD    dwInfoType,
    LPCWSTR lpSrcStr,
    int      cchSrc,
    LPWORD   lpCharType);




#line 1282 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnls.h"












__declspec(dllimport)
BOOL
__stdcall
GetStringTypeA(
    LCID     Locale,
    DWORD    dwInfoType,
    LPCSTR   lpSrcStr,
    int      cchSrc,
    LPWORD   lpCharType);

__declspec(dllimport)
BOOL
__stdcall
GetStringTypeW(
    DWORD    dwInfoType,
    LPCWSTR  lpSrcStr,
    int      cchSrc,
    LPWORD   lpCharType);


__declspec(dllimport)
int
__stdcall
FoldStringA(
    DWORD    dwMapFlags,
    LPCSTR lpSrcStr,
    int      cchSrc,
    LPSTR  lpDestStr,
    int      cchDest);
__declspec(dllimport)
int
__stdcall
FoldStringW(
    DWORD    dwMapFlags,
    LPCWSTR lpSrcStr,
    int      cchSrc,
    LPWSTR  lpDestStr,
    int      cchDest);




#line 1337 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
EnumSystemLocalesA(
    LOCALE_ENUMPROCA lpLocaleEnumProc,
    DWORD            dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumSystemLocalesW(
    LOCALE_ENUMPROCW lpLocaleEnumProc,
    DWORD            dwFlags);




#line 1355 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
EnumSystemCodePagesA(
    CODEPAGE_ENUMPROCA lpCodePageEnumProc,
    DWORD              dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumSystemCodePagesW(
    CODEPAGE_ENUMPROCW lpCodePageEnumProc,
    DWORD              dwFlags);




#line 1373 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnls.h"


#line 1376 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnls.h"



}
#line 1381 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnls.h"

#line 1383 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnls.h"
#line 173 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"
#line 174 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"

#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\wincon.h"

























extern "C" {
#line 28 "c:\\programme\\microsoft visual studio\\vc98\\include\\wincon.h"

typedef struct _COORD {
    SHORT X;
    SHORT Y;
} COORD, *PCOORD;

typedef struct _SMALL_RECT {
    SHORT Left;
    SHORT Top;
    SHORT Right;
    SHORT Bottom;
} SMALL_RECT, *PSMALL_RECT;

typedef struct _KEY_EVENT_RECORD {
    BOOL bKeyDown;
    WORD wRepeatCount;
    WORD wVirtualKeyCode;
    WORD wVirtualScanCode;
    union {
        WCHAR UnicodeChar;
        CHAR   AsciiChar;
    } uChar;
    DWORD dwControlKeyState;
} KEY_EVENT_RECORD, *PKEY_EVENT_RECORD;






















typedef struct _MOUSE_EVENT_RECORD {
    COORD dwMousePosition;
    DWORD dwButtonState;
    DWORD dwControlKeyState;
    DWORD dwEventFlags;
} MOUSE_EVENT_RECORD, *PMOUSE_EVENT_RECORD;



















typedef struct _WINDOW_BUFFER_SIZE_RECORD {
    COORD dwSize;
} WINDOW_BUFFER_SIZE_RECORD, *PWINDOW_BUFFER_SIZE_RECORD;

typedef struct _MENU_EVENT_RECORD {
    UINT dwCommandId;
} MENU_EVENT_RECORD, *PMENU_EVENT_RECORD;

typedef struct _FOCUS_EVENT_RECORD {
    BOOL bSetFocus;
} FOCUS_EVENT_RECORD, *PFOCUS_EVENT_RECORD;

typedef struct _INPUT_RECORD {
    WORD EventType;
    union {
        KEY_EVENT_RECORD KeyEvent;
        MOUSE_EVENT_RECORD MouseEvent;
        WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
        MENU_EVENT_RECORD MenuEvent;
        FOCUS_EVENT_RECORD FocusEvent;
    } Event;
} INPUT_RECORD, *PINPUT_RECORD;











typedef struct _CHAR_INFO {
    union {
        WCHAR UnicodeChar;
        CHAR   AsciiChar;
    } Char;
    WORD Attributes;
} CHAR_INFO, *PCHAR_INFO;
























typedef struct _CONSOLE_SCREEN_BUFFER_INFO {
    COORD dwSize;
    COORD dwCursorPosition;
    WORD  wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
} CONSOLE_SCREEN_BUFFER_INFO, *PCONSOLE_SCREEN_BUFFER_INFO;

typedef struct _CONSOLE_CURSOR_INFO {
    DWORD  dwSize;
    BOOL   bVisible;
} CONSOLE_CURSOR_INFO, *PCONSOLE_CURSOR_INFO;





typedef
BOOL
(__stdcall *PHANDLER_ROUTINE)(
    DWORD CtrlType
    );






























__declspec(dllimport)
BOOL
__stdcall
PeekConsoleInputA(
    HANDLE hConsoleInput,
    PINPUT_RECORD lpBuffer,
    DWORD nLength,
    LPDWORD lpNumberOfEventsRead
    );
__declspec(dllimport)
BOOL
__stdcall
PeekConsoleInputW(
    HANDLE hConsoleInput,
    PINPUT_RECORD lpBuffer,
    DWORD nLength,
    LPDWORD lpNumberOfEventsRead
    );




#line 238 "c:\\programme\\microsoft visual studio\\vc98\\include\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
ReadConsoleInputA(
    HANDLE hConsoleInput,
    PINPUT_RECORD lpBuffer,
    DWORD nLength,
    LPDWORD lpNumberOfEventsRead
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleInputW(
    HANDLE hConsoleInput,
    PINPUT_RECORD lpBuffer,
    DWORD nLength,
    LPDWORD lpNumberOfEventsRead
    );




#line 262 "c:\\programme\\microsoft visual studio\\vc98\\include\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleInputA(
    HANDLE hConsoleInput,
    const INPUT_RECORD *lpBuffer,
    DWORD nLength,
    LPDWORD lpNumberOfEventsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleInputW(
    HANDLE hConsoleInput,
    const INPUT_RECORD *lpBuffer,
    DWORD nLength,
    LPDWORD lpNumberOfEventsWritten
    );




#line 286 "c:\\programme\\microsoft visual studio\\vc98\\include\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputA(
    HANDLE hConsoleOutput,
    PCHAR_INFO lpBuffer,
    COORD dwBufferSize,
    COORD dwBufferCoord,
    PSMALL_RECT lpReadRegion
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputW(
    HANDLE hConsoleOutput,
    PCHAR_INFO lpBuffer,
    COORD dwBufferSize,
    COORD dwBufferCoord,
    PSMALL_RECT lpReadRegion
    );




#line 312 "c:\\programme\\microsoft visual studio\\vc98\\include\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputA(
    HANDLE hConsoleOutput,
    const CHAR_INFO *lpBuffer,
    COORD dwBufferSize,
    COORD dwBufferCoord,
    PSMALL_RECT lpWriteRegion
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputW(
    HANDLE hConsoleOutput,
    const CHAR_INFO *lpBuffer,
    COORD dwBufferSize,
    COORD dwBufferCoord,
    PSMALL_RECT lpWriteRegion
    );




#line 338 "c:\\programme\\microsoft visual studio\\vc98\\include\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputCharacterA(
    HANDLE hConsoleOutput,
    LPSTR lpCharacter,
    DWORD nLength,
    COORD dwReadCoord,
    LPDWORD lpNumberOfCharsRead
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputCharacterW(
    HANDLE hConsoleOutput,
    LPWSTR lpCharacter,
    DWORD nLength,
    COORD dwReadCoord,
    LPDWORD lpNumberOfCharsRead
    );




#line 364 "c:\\programme\\microsoft visual studio\\vc98\\include\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputAttribute(
    HANDLE hConsoleOutput,
    LPWORD lpAttribute,
    DWORD nLength,
    COORD dwReadCoord,
    LPDWORD lpNumberOfAttrsRead
    );

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputCharacterA(
    HANDLE hConsoleOutput,
    LPCSTR lpCharacter,
    DWORD nLength,
    COORD dwWriteCoord,
    LPDWORD lpNumberOfCharsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputCharacterW(
    HANDLE hConsoleOutput,
    LPCWSTR lpCharacter,
    DWORD nLength,
    COORD dwWriteCoord,
    LPDWORD lpNumberOfCharsWritten
    );




#line 401 "c:\\programme\\microsoft visual studio\\vc98\\include\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputAttribute(
    HANDLE hConsoleOutput,
    const WORD *lpAttribute,
    DWORD nLength,
    COORD dwWriteCoord,
    LPDWORD lpNumberOfAttrsWritten
    );

__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputCharacterA(
    HANDLE hConsoleOutput,
    CHAR  cCharacter,
    DWORD  nLength,
    COORD  dwWriteCoord,
    LPDWORD lpNumberOfCharsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputCharacterW(
    HANDLE hConsoleOutput,
    WCHAR  cCharacter,
    DWORD  nLength,
    COORD  dwWriteCoord,
    LPDWORD lpNumberOfCharsWritten
    );




#line 438 "c:\\programme\\microsoft visual studio\\vc98\\include\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputAttribute(
    HANDLE hConsoleOutput,
    WORD   wAttribute,
    DWORD  nLength,
    COORD  dwWriteCoord,
    LPDWORD lpNumberOfAttrsWritten
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleMode(
    HANDLE hConsoleHandle,
    LPDWORD lpMode
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumberOfConsoleInputEvents(
    HANDLE hConsoleInput,
    LPDWORD lpNumberOfEvents
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleScreenBufferInfo(
    HANDLE hConsoleOutput,
    PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo
    );

__declspec(dllimport)
COORD
__stdcall
GetLargestConsoleWindowSize(
    HANDLE hConsoleOutput
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleCursorInfo(
    HANDLE hConsoleOutput,
    PCONSOLE_CURSOR_INFO lpConsoleCursorInfo
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumberOfConsoleMouseButtons(
    LPDWORD lpNumberOfMouseButtons
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleMode(
    HANDLE hConsoleHandle,
    DWORD dwMode
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleActiveScreenBuffer(
    HANDLE hConsoleOutput
    );

__declspec(dllimport)
BOOL
__stdcall
FlushConsoleInputBuffer(
    HANDLE hConsoleInput
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleScreenBufferSize(
    HANDLE hConsoleOutput,
    COORD dwSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCursorPosition(
    HANDLE hConsoleOutput,
    COORD dwCursorPosition
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCursorInfo(
    HANDLE hConsoleOutput,
    const CONSOLE_CURSOR_INFO *lpConsoleCursorInfo
    );

__declspec(dllimport)
BOOL
__stdcall
ScrollConsoleScreenBufferA(
    HANDLE hConsoleOutput,
    const SMALL_RECT *lpScrollRectangle,
    const SMALL_RECT *lpClipRectangle,
    COORD dwDestinationOrigin,
    const CHAR_INFO *lpFill
    );
__declspec(dllimport)
BOOL
__stdcall
ScrollConsoleScreenBufferW(
    HANDLE hConsoleOutput,
    const SMALL_RECT *lpScrollRectangle,
    const SMALL_RECT *lpClipRectangle,
    COORD dwDestinationOrigin,
    const CHAR_INFO *lpFill
    );




#line 567 "c:\\programme\\microsoft visual studio\\vc98\\include\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
SetConsoleWindowInfo(
    HANDLE hConsoleOutput,
    BOOL bAbsolute,
    const SMALL_RECT *lpConsoleWindow
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleTextAttribute(
    HANDLE hConsoleOutput,
    WORD wAttributes
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCtrlHandler(
    PHANDLER_ROUTINE HandlerRoutine,
    BOOL Add
    );

__declspec(dllimport)
BOOL
__stdcall
GenerateConsoleCtrlEvent(
    DWORD dwCtrlEvent,
    DWORD dwProcessGroupId
    );

__declspec(dllimport)
BOOL
__stdcall
AllocConsole( void );

__declspec(dllimport)
BOOL
__stdcall
FreeConsole( void );


__declspec(dllimport)
DWORD
__stdcall
GetConsoleTitleA(
    LPSTR lpConsoleTitle,
    DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetConsoleTitleW(
    LPWSTR lpConsoleTitle,
    DWORD nSize
    );




#line 631 "c:\\programme\\microsoft visual studio\\vc98\\include\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
SetConsoleTitleA(
    LPCSTR lpConsoleTitle
    );
__declspec(dllimport)
BOOL
__stdcall
SetConsoleTitleW(
    LPCWSTR lpConsoleTitle
    );




#line 649 "c:\\programme\\microsoft visual studio\\vc98\\include\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
ReadConsoleA(
    HANDLE hConsoleInput,
    LPVOID lpBuffer,
    DWORD nNumberOfCharsToRead,
    LPDWORD lpNumberOfCharsRead,
    LPVOID lpReserved
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleW(
    HANDLE hConsoleInput,
    LPVOID lpBuffer,
    DWORD nNumberOfCharsToRead,
    LPDWORD lpNumberOfCharsRead,
    LPVOID lpReserved
    );




#line 675 "c:\\programme\\microsoft visual studio\\vc98\\include\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleA(
    HANDLE hConsoleOutput,
    const void *lpBuffer,
    DWORD nNumberOfCharsToWrite,
    LPDWORD lpNumberOfCharsWritten,
    LPVOID lpReserved
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleW(
    HANDLE hConsoleOutput,
    const void *lpBuffer,
    DWORD nNumberOfCharsToWrite,
    LPDWORD lpNumberOfCharsWritten,
    LPVOID lpReserved
    );




#line 701 "c:\\programme\\microsoft visual studio\\vc98\\include\\wincon.h"



__declspec(dllimport)
HANDLE
__stdcall
CreateConsoleScreenBuffer(
    DWORD dwDesiredAccess,
    DWORD dwShareMode,
    const SECURITY_ATTRIBUTES *lpSecurityAttributes,
    DWORD dwFlags,
    LPVOID lpScreenBufferData
    );

__declspec(dllimport)
UINT
__stdcall
GetConsoleCP( void );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCP(
    UINT wCodePageID
    );

__declspec(dllimport)
UINT
__stdcall
GetConsoleOutputCP( void );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleOutputCP(
    UINT wCodePageID
    );


}
#line 742 "c:\\programme\\microsoft visual studio\\vc98\\include\\wincon.h"

#line 744 "c:\\programme\\microsoft visual studio\\vc98\\include\\wincon.h"

#line 176 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\winver.h"
















extern "C" {
#line 19 "c:\\programme\\microsoft visual studio\\vc98\\include\\winver.h"











#line 31 "c:\\programme\\microsoft visual studio\\vc98\\include\\winver.h"

































































































typedef struct tagVS_FIXEDFILEINFO
{
    DWORD   dwSignature;            
    DWORD   dwStrucVersion;         
    DWORD   dwFileVersionMS;        
    DWORD   dwFileVersionLS;        
    DWORD   dwProductVersionMS;     
    DWORD   dwProductVersionLS;     
    DWORD   dwFileFlagsMask;        
    DWORD   dwFileFlags;            
    DWORD   dwFileOS;               
    DWORD   dwFileType;             
    DWORD   dwFileSubtype;          
    DWORD   dwFileDateMS;           
    DWORD   dwFileDateLS;           
} VS_FIXEDFILEINFO;



DWORD
__stdcall
VerFindFileA(
        DWORD uFlags,
        LPSTR szFileName,
        LPSTR szWinDir,
        LPSTR szAppDir,
        LPSTR szCurDir,
        PUINT lpuCurDirLen,
        LPSTR szDestDir,
        PUINT lpuDestDirLen
        );
DWORD
__stdcall
VerFindFileW(
        DWORD uFlags,
        LPWSTR szFileName,
        LPWSTR szWinDir,
        LPWSTR szAppDir,
        LPWSTR szCurDir,
        PUINT lpuCurDirLen,
        LPWSTR szDestDir,
        PUINT lpuDestDirLen
        );




#line 176 "c:\\programme\\microsoft visual studio\\vc98\\include\\winver.h"

DWORD
__stdcall
VerInstallFileA(
        DWORD uFlags,
        LPSTR szSrcFileName,
        LPSTR szDestFileName,
        LPSTR szSrcDir,
        LPSTR szDestDir,
        LPSTR szCurDir,
        LPSTR szTmpFile,
        PUINT lpuTmpFileLen
        );
DWORD
__stdcall
VerInstallFileW(
        DWORD uFlags,
        LPWSTR szSrcFileName,
        LPWSTR szDestFileName,
        LPWSTR szSrcDir,
        LPWSTR szDestDir,
        LPWSTR szCurDir,
        LPWSTR szTmpFile,
        PUINT lpuTmpFileLen
        );




#line 206 "c:\\programme\\microsoft visual studio\\vc98\\include\\winver.h"


DWORD
__stdcall
GetFileVersionInfoSizeA(
        LPSTR lptstrFilename, 
        LPDWORD lpdwHandle
        );                      

DWORD
__stdcall
GetFileVersionInfoSizeW(
        LPWSTR lptstrFilename, 
        LPDWORD lpdwHandle
        );                      




#line 226 "c:\\programme\\microsoft visual studio\\vc98\\include\\winver.h"


BOOL
__stdcall
GetFileVersionInfoA(
        LPSTR lptstrFilename, 
        DWORD dwHandle,         
        DWORD dwLen,            
        LPVOID lpData
        );                      

BOOL
__stdcall
GetFileVersionInfoW(
        LPWSTR lptstrFilename, 
        DWORD dwHandle,         
        DWORD dwLen,            
        LPVOID lpData
        );                      




#line 250 "c:\\programme\\microsoft visual studio\\vc98\\include\\winver.h"

DWORD
__stdcall
VerLanguageNameA(
        DWORD wLang,
        LPSTR szLang,
        DWORD nSize
        );
DWORD
__stdcall
VerLanguageNameW(
        DWORD wLang,
        LPWSTR szLang,
        DWORD nSize
        );




#line 270 "c:\\programme\\microsoft visual studio\\vc98\\include\\winver.h"

BOOL
__stdcall
VerQueryValueA(
        const LPVOID pBlock,
        LPSTR lpSubBlock,
        LPVOID * lplpBuffer,
        PUINT puLen
        );
BOOL
__stdcall
VerQueryValueW(
        const LPVOID pBlock,
        LPWSTR lpSubBlock,
        LPVOID * lplpBuffer,
        PUINT puLen
        );




#line 292 "c:\\programme\\microsoft visual studio\\vc98\\include\\winver.h"

#line 294 "c:\\programme\\microsoft visual studio\\vc98\\include\\winver.h"


}
#line 298 "c:\\programme\\microsoft visual studio\\vc98\\include\\winver.h"

#line 300 "c:\\programme\\microsoft visual studio\\vc98\\include\\winver.h"
#line 177 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"
#line 178 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"

#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\winreg.h"
























extern "C" {
#line 27 "c:\\programme\\microsoft visual studio\\vc98\\include\\winreg.h"









typedef ACCESS_MASK REGSAM;





struct HKEY__ { int unused; }; typedef struct HKEY__ *HKEY;
typedef HKEY *PHKEY;
#line 45 "c:\\programme\\microsoft visual studio\\vc98\\include\\winreg.h"



















struct val_context {
    int valuelen;       
    LPVOID value_context;   
    LPVOID val_buff_ptr;    
};

typedef struct val_context  *PVALCONTEXT;

typedef struct pvalueA {           
    LPSTR   pv_valuename;          
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
}PVALUEA,  *PPVALUEA;
typedef struct pvalueW {           
    LPWSTR  pv_valuename;          
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
}PVALUEW,  *PPVALUEW;




typedef PVALUEA PVALUE;
typedef PPVALUEA PPVALUE;
#line 91 "c:\\programme\\microsoft visual studio\\vc98\\include\\winreg.h"

typedef
DWORD _cdecl
QUERYHANDLER (LPVOID keycontext, PVALCONTEXT val_list, DWORD num_vals,
          LPVOID outputbuffer, DWORD  *total_outlen, DWORD input_blen);

typedef QUERYHANDLER  *PQUERYHANDLER;

typedef struct provider_info {
    PQUERYHANDLER pi_R0_1val;
    PQUERYHANDLER pi_R0_allvals;
    PQUERYHANDLER pi_R3_1val;
    PQUERYHANDLER pi_R3_allvals;
    DWORD pi_flags;    
    LPVOID pi_key_context;
}REG_PROVIDER;

typedef struct provider_info  *PPROVIDER;

typedef struct value_entA {
    LPSTR   ve_valuename;
    DWORD ve_valuelen;
    DWORD ve_valueptr;
    DWORD ve_type;
}VALENTA,  *PVALENTA;
typedef struct value_entW {
    LPWSTR  ve_valuename;
    DWORD ve_valuelen;
    DWORD ve_valueptr;
    DWORD ve_type;
}VALENTW,  *PVALENTW;




typedef VALENTA VALENT;
typedef PVALENTA PVALENT;
#line 129 "c:\\programme\\microsoft visual studio\\vc98\\include\\winreg.h"

#line 131 "c:\\programme\\microsoft visual studio\\vc98\\include\\winreg.h"


#line 134 "c:\\programme\\microsoft visual studio\\vc98\\include\\winreg.h"













__declspec(dllimport)
LONG
__stdcall
RegCloseKey (
    HKEY hKey
    );

__declspec(dllimport)
LONG
__stdcall
RegOverridePredefKey (
    HKEY hKey,
    HKEY hNewHKey
    );

__declspec(dllimport)
LONG
__stdcall
RegConnectRegistryA (
    LPCSTR lpMachineName,
    HKEY hKey,
    PHKEY phkResult
    );
__declspec(dllimport)
LONG
__stdcall
RegConnectRegistryW (
    LPCWSTR lpMachineName,
    HKEY hKey,
    PHKEY phkResult
    );




#line 183 "c:\\programme\\microsoft visual studio\\vc98\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegCreateKeyA (
    HKEY hKey,
    LPCSTR lpSubKey,
    PHKEY phkResult
    );
__declspec(dllimport)
LONG
__stdcall
RegCreateKeyW (
    HKEY hKey,
    LPCWSTR lpSubKey,
    PHKEY phkResult
    );




#line 205 "c:\\programme\\microsoft visual studio\\vc98\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegCreateKeyExA (
    HKEY hKey,
    LPCSTR lpSubKey,
    DWORD Reserved,
    LPSTR lpClass,
    DWORD dwOptions,
    REGSAM samDesired,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    PHKEY phkResult,
    LPDWORD lpdwDisposition
    );
__declspec(dllimport)
LONG
__stdcall
RegCreateKeyExW (
    HKEY hKey,
    LPCWSTR lpSubKey,
    DWORD Reserved,
    LPWSTR lpClass,
    DWORD dwOptions,
    REGSAM samDesired,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    PHKEY phkResult,
    LPDWORD lpdwDisposition
    );




#line 239 "c:\\programme\\microsoft visual studio\\vc98\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegDeleteKeyA (
    HKEY hKey,
    LPCSTR lpSubKey
    );
__declspec(dllimport)
LONG
__stdcall
RegDeleteKeyW (
    HKEY hKey,
    LPCWSTR lpSubKey
    );




#line 259 "c:\\programme\\microsoft visual studio\\vc98\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegDeleteValueA (
    HKEY hKey,
    LPCSTR lpValueName
    );
__declspec(dllimport)
LONG
__stdcall
RegDeleteValueW (
    HKEY hKey,
    LPCWSTR lpValueName
    );




#line 279 "c:\\programme\\microsoft visual studio\\vc98\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegEnumKeyA (
    HKEY hKey,
    DWORD dwIndex,
    LPSTR lpName,
    DWORD cbName
    );
__declspec(dllimport)
LONG
__stdcall
RegEnumKeyW (
    HKEY hKey,
    DWORD dwIndex,
    LPWSTR lpName,
    DWORD cbName
    );




#line 303 "c:\\programme\\microsoft visual studio\\vc98\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegEnumKeyExA (
    HKEY hKey,
    DWORD dwIndex,
    LPSTR lpName,
    LPDWORD lpcbName,
    LPDWORD lpReserved,
    LPSTR lpClass,
    LPDWORD lpcbClass,
    PFILETIME lpftLastWriteTime
    );
__declspec(dllimport)
LONG
__stdcall
RegEnumKeyExW (
    HKEY hKey,
    DWORD dwIndex,
    LPWSTR lpName,
    LPDWORD lpcbName,
    LPDWORD lpReserved,
    LPWSTR lpClass,
    LPDWORD lpcbClass,
    PFILETIME lpftLastWriteTime
    );




#line 335 "c:\\programme\\microsoft visual studio\\vc98\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegEnumValueA (
    HKEY hKey,
    DWORD dwIndex,
    LPSTR lpValueName,
    LPDWORD lpcbValueName,
    LPDWORD lpReserved,
    LPDWORD lpType,
    LPBYTE lpData,
    LPDWORD lpcbData
    );
__declspec(dllimport)
LONG
__stdcall
RegEnumValueW (
    HKEY hKey,
    DWORD dwIndex,
    LPWSTR lpValueName,
    LPDWORD lpcbValueName,
    LPDWORD lpReserved,
    LPDWORD lpType,
    LPBYTE lpData,
    LPDWORD lpcbData
    );




#line 367 "c:\\programme\\microsoft visual studio\\vc98\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegFlushKey (
    HKEY hKey
    );

__declspec(dllimport)
LONG
__stdcall
RegGetKeySecurity (
    HKEY hKey,
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    LPDWORD lpcbSecurityDescriptor
    );

__declspec(dllimport)
LONG
__stdcall
RegLoadKeyA (
    HKEY    hKey,
    LPCSTR  lpSubKey,
    LPCSTR  lpFile
    );
__declspec(dllimport)
LONG
__stdcall
RegLoadKeyW (
    HKEY    hKey,
    LPCWSTR  lpSubKey,
    LPCWSTR  lpFile
    );




#line 406 "c:\\programme\\microsoft visual studio\\vc98\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegNotifyChangeKeyValue (
    HKEY hKey,
    BOOL bWatchSubtree,
    DWORD dwNotifyFilter,
    HANDLE hEvent,
    BOOL fAsynchronus
    );

__declspec(dllimport)
LONG
__stdcall
RegOpenKeyA (
    HKEY hKey,
    LPCSTR lpSubKey,
    PHKEY phkResult
    );
__declspec(dllimport)
LONG
__stdcall
RegOpenKeyW (
    HKEY hKey,
    LPCWSTR lpSubKey,
    PHKEY phkResult
    );




#line 439 "c:\\programme\\microsoft visual studio\\vc98\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegOpenKeyExA (
    HKEY hKey,
    LPCSTR lpSubKey,
    DWORD ulOptions,
    REGSAM samDesired,
    PHKEY phkResult
    );
__declspec(dllimport)
LONG
__stdcall
RegOpenKeyExW (
    HKEY hKey,
    LPCWSTR lpSubKey,
    DWORD ulOptions,
    REGSAM samDesired,
    PHKEY phkResult
    );




#line 465 "c:\\programme\\microsoft visual studio\\vc98\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegQueryInfoKeyA (
    HKEY hKey,
    LPSTR lpClass,
    LPDWORD lpcbClass,
    LPDWORD lpReserved,
    LPDWORD lpcSubKeys,
    LPDWORD lpcbMaxSubKeyLen,
    LPDWORD lpcbMaxClassLen,
    LPDWORD lpcValues,
    LPDWORD lpcbMaxValueNameLen,
    LPDWORD lpcbMaxValueLen,
    LPDWORD lpcbSecurityDescriptor,
    PFILETIME lpftLastWriteTime
    );
__declspec(dllimport)
LONG
__stdcall
RegQueryInfoKeyW (
    HKEY hKey,
    LPWSTR lpClass,
    LPDWORD lpcbClass,
    LPDWORD lpReserved,
    LPDWORD lpcSubKeys,
    LPDWORD lpcbMaxSubKeyLen,
    LPDWORD lpcbMaxClassLen,
    LPDWORD lpcValues,
    LPDWORD lpcbMaxValueNameLen,
    LPDWORD lpcbMaxValueLen,
    LPDWORD lpcbSecurityDescriptor,
    PFILETIME lpftLastWriteTime
    );




#line 505 "c:\\programme\\microsoft visual studio\\vc98\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegQueryValueA (
    HKEY hKey,
    LPCSTR lpSubKey,
    LPSTR lpValue,
    PLONG   lpcbValue
    );
__declspec(dllimport)
LONG
__stdcall
RegQueryValueW (
    HKEY hKey,
    LPCWSTR lpSubKey,
    LPWSTR lpValue,
    PLONG   lpcbValue
    );




#line 529 "c:\\programme\\microsoft visual studio\\vc98\\include\\winreg.h"


__declspec(dllimport)
LONG
__stdcall
RegQueryMultipleValuesA (
    HKEY hKey,
    PVALENTA val_list,
    DWORD num_vals,
    LPSTR lpValueBuf,
    LPDWORD ldwTotsize
    );
__declspec(dllimport)
LONG
__stdcall
RegQueryMultipleValuesW (
    HKEY hKey,
    PVALENTW val_list,
    DWORD num_vals,
    LPWSTR lpValueBuf,
    LPDWORD ldwTotsize
    );




#line 556 "c:\\programme\\microsoft visual studio\\vc98\\include\\winreg.h"
#line 557 "c:\\programme\\microsoft visual studio\\vc98\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegQueryValueExA (
    HKEY hKey,
    LPCSTR lpValueName,
    LPDWORD lpReserved,
    LPDWORD lpType,
    LPBYTE lpData,
    LPDWORD lpcbData
    );
__declspec(dllimport)
LONG
__stdcall
RegQueryValueExW (
    HKEY hKey,
    LPCWSTR lpValueName,
    LPDWORD lpReserved,
    LPDWORD lpType,
    LPBYTE lpData,
    LPDWORD lpcbData
    );




#line 585 "c:\\programme\\microsoft visual studio\\vc98\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegReplaceKeyA (
    HKEY     hKey,
    LPCSTR  lpSubKey,
    LPCSTR  lpNewFile,
    LPCSTR  lpOldFile
    );
__declspec(dllimport)
LONG
__stdcall
RegReplaceKeyW (
    HKEY     hKey,
    LPCWSTR  lpSubKey,
    LPCWSTR  lpNewFile,
    LPCWSTR  lpOldFile
    );




#line 609 "c:\\programme\\microsoft visual studio\\vc98\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegRestoreKeyA (
    HKEY hKey,
    LPCSTR lpFile,
    DWORD   dwFlags
    );
__declspec(dllimport)
LONG
__stdcall
RegRestoreKeyW (
    HKEY hKey,
    LPCWSTR lpFile,
    DWORD   dwFlags
    );




#line 631 "c:\\programme\\microsoft visual studio\\vc98\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegSaveKeyA (
    HKEY hKey,
    LPCSTR lpFile,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
LONG
__stdcall
RegSaveKeyW (
    HKEY hKey,
    LPCWSTR lpFile,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );




#line 653 "c:\\programme\\microsoft visual studio\\vc98\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegSetKeySecurity (
    HKEY hKey,
    SECURITY_INFORMATION SecurityInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor
    );

__declspec(dllimport)
LONG
__stdcall
RegSetValueA (
    HKEY hKey,
    LPCSTR lpSubKey,
    DWORD dwType,
    LPCSTR lpData,
    DWORD cbData
    );
__declspec(dllimport)
LONG
__stdcall
RegSetValueW (
    HKEY hKey,
    LPCWSTR lpSubKey,
    DWORD dwType,
    LPCWSTR lpData,
    DWORD cbData
    );




#line 688 "c:\\programme\\microsoft visual studio\\vc98\\include\\winreg.h"


__declspec(dllimport)
LONG
__stdcall
RegSetValueExA (
    HKEY hKey,
    LPCSTR lpValueName,
    DWORD Reserved,
    DWORD dwType,
    const BYTE* lpData,
    DWORD cbData
    );
__declspec(dllimport)
LONG
__stdcall
RegSetValueExW (
    HKEY hKey,
    LPCWSTR lpValueName,
    DWORD Reserved,
    DWORD dwType,
    const BYTE* lpData,
    DWORD cbData
    );




#line 717 "c:\\programme\\microsoft visual studio\\vc98\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegUnLoadKeyA (
    HKEY    hKey,
    LPCSTR lpSubKey
    );
__declspec(dllimport)
LONG
__stdcall
RegUnLoadKeyW (
    HKEY    hKey,
    LPCWSTR lpSubKey
    );




#line 737 "c:\\programme\\microsoft visual studio\\vc98\\include\\winreg.h"





__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownA(
    LPSTR lpMachineName,
    LPSTR lpMessage,
    DWORD dwTimeout,
    BOOL bForceAppsClosed,
    BOOL bRebootAfterShutdown
    );
__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownW(
    LPWSTR lpMachineName,
    LPWSTR lpMessage,
    DWORD dwTimeout,
    BOOL bForceAppsClosed,
    BOOL bRebootAfterShutdown
    );




#line 767 "c:\\programme\\microsoft visual studio\\vc98\\include\\winreg.h"


__declspec(dllimport)
BOOL
__stdcall
AbortSystemShutdownA(
    LPSTR lpMachineName
    );
__declspec(dllimport)
BOOL
__stdcall
AbortSystemShutdownW(
    LPWSTR lpMachineName
    );




#line 786 "c:\\programme\\microsoft visual studio\\vc98\\include\\winreg.h"


}
#line 790 "c:\\programme\\microsoft visual studio\\vc98\\include\\winreg.h"


#line 793 "c:\\programme\\microsoft visual studio\\vc98\\include\\winreg.h"

#line 180 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"
#line 181 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"

#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"



























extern "C" {
#line 30 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"
















































#line 79 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"






#line 86 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"









#line 96 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"













#line 110 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"



#line 114 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"

typedef struct  _NETRESOURCEA {
    DWORD    dwScope;
    DWORD    dwType;
    DWORD    dwDisplayType;
    DWORD    dwUsage;
    LPSTR    lpLocalName;
    LPSTR    lpRemoteName;
    LPSTR    lpComment ;
    LPSTR    lpProvider;
}NETRESOURCEA, *LPNETRESOURCEA;
typedef struct  _NETRESOURCEW {
    DWORD    dwScope;
    DWORD    dwType;
    DWORD    dwDisplayType;
    DWORD    dwUsage;
    LPWSTR   lpLocalName;
    LPWSTR   lpRemoteName;
    LPWSTR   lpComment ;
    LPWSTR   lpProvider;
}NETRESOURCEW, *LPNETRESOURCEW;




typedef NETRESOURCEA NETRESOURCE;
typedef LPNETRESOURCEA LPNETRESOURCE;
#line 142 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"





















#line 164 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"

DWORD __stdcall
WNetAddConnectionA(
     LPCSTR   lpRemoteName,
     LPCSTR   lpPassword,
     LPCSTR   lpLocalName
    );
DWORD __stdcall
WNetAddConnectionW(
     LPCWSTR   lpRemoteName,
     LPCWSTR   lpPassword,
     LPCWSTR   lpLocalName
    );




#line 182 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"

DWORD __stdcall
WNetAddConnection2A(
     LPNETRESOURCEA lpNetResource,
     LPCSTR       lpPassword,
     LPCSTR       lpUserName,
     DWORD          dwFlags
    );
DWORD __stdcall
WNetAddConnection2W(
     LPNETRESOURCEW lpNetResource,
     LPCWSTR       lpPassword,
     LPCWSTR       lpUserName,
     DWORD          dwFlags
    );




#line 202 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"

DWORD __stdcall
WNetAddConnection3A(
     HWND           hwndOwner,
     LPNETRESOURCEA lpNetResource,
     LPCSTR       lpPassword,
     LPCSTR       lpUserName,
     DWORD          dwFlags
    );
DWORD __stdcall
WNetAddConnection3W(
     HWND           hwndOwner,
     LPNETRESOURCEW lpNetResource,
     LPCWSTR       lpPassword,
     LPCWSTR       lpUserName,
     DWORD          dwFlags
    );




#line 224 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"

DWORD __stdcall
WNetCancelConnectionA(
     LPCSTR lpName,
     BOOL     fForce
    );
DWORD __stdcall
WNetCancelConnectionW(
     LPCWSTR lpName,
     BOOL     fForce
    );




#line 240 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"

DWORD __stdcall
WNetCancelConnection2A(
     LPCSTR lpName,
     DWORD    dwFlags,
     BOOL     fForce
    );
DWORD __stdcall
WNetCancelConnection2W(
     LPCWSTR lpName,
     DWORD    dwFlags,
     BOOL     fForce
    );




#line 258 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"

DWORD __stdcall
WNetGetConnectionA(
     LPCSTR lpLocalName,
     LPSTR  lpRemoteName,
     LPDWORD  lpnLength
    );
DWORD __stdcall
WNetGetConnectionW(
     LPCWSTR lpLocalName,
     LPWSTR  lpRemoteName,
     LPDWORD  lpnLength
    );




#line 276 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"



DWORD __stdcall
WNetUseConnectionA(
    HWND            hwndOwner,
    LPNETRESOURCEA  lpNetResource,
    LPCSTR        lpUserID,
    LPCSTR        lpPassword,
    DWORD           dwFlags,
    LPSTR         lpAccessName,
    LPDWORD         lpBufferSize,
    LPDWORD         lpResult
    );
DWORD __stdcall
WNetUseConnectionW(
    HWND            hwndOwner,
    LPNETRESOURCEW  lpNetResource,
    LPCWSTR        lpUserID,
    LPCWSTR        lpPassword,
    DWORD           dwFlags,
    LPWSTR         lpAccessName,
    LPDWORD         lpBufferSize,
    LPDWORD         lpResult
    );




#line 306 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"
#line 307 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"






DWORD __stdcall
WNetConnectionDialog(
    HWND  hwnd,
    DWORD dwType
    );

DWORD __stdcall
WNetDisconnectDialog(
    HWND  hwnd,
    DWORD dwType
    );


typedef struct _CONNECTDLGSTRUCTA{
    DWORD cbStructure;       
    HWND hwndOwner;          
    LPNETRESOURCEA lpConnRes;
    DWORD dwFlags;           
    DWORD dwDevNum;          
} CONNECTDLGSTRUCTA,  *LPCONNECTDLGSTRUCTA;
typedef struct _CONNECTDLGSTRUCTW{
    DWORD cbStructure;       
    HWND hwndOwner;          
    LPNETRESOURCEW lpConnRes;
    DWORD dwFlags;           
    DWORD dwDevNum;          
} CONNECTDLGSTRUCTW,  *LPCONNECTDLGSTRUCTW;




typedef CONNECTDLGSTRUCTA CONNECTDLGSTRUCT;
typedef LPCONNECTDLGSTRUCTA LPCONNECTDLGSTRUCT;
#line 347 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"














DWORD __stdcall
WNetConnectionDialog1A(
    LPCONNECTDLGSTRUCTA lpConnDlgStruct
    );
DWORD __stdcall
WNetConnectionDialog1W(
    LPCONNECTDLGSTRUCTW lpConnDlgStruct
    );




#line 374 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"

typedef struct _DISCDLGSTRUCTA{
    DWORD           cbStructure;      
    HWND            hwndOwner;        
    LPSTR           lpLocalName;      
    LPSTR           lpRemoteName;     
    DWORD           dwFlags;          
} DISCDLGSTRUCTA,  *LPDISCDLGSTRUCTA;
typedef struct _DISCDLGSTRUCTW{
    DWORD           cbStructure;      
    HWND            hwndOwner;        
    LPWSTR          lpLocalName;      
    LPWSTR          lpRemoteName;     
    DWORD           dwFlags;          
} DISCDLGSTRUCTW,  *LPDISCDLGSTRUCTW;




typedef DISCDLGSTRUCTA DISCDLGSTRUCT;
typedef LPDISCDLGSTRUCTA LPDISCDLGSTRUCT;
#line 396 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"




DWORD __stdcall
WNetDisconnectDialog1A(
    LPDISCDLGSTRUCTA lpConnDlgStruct
    );
DWORD __stdcall
WNetDisconnectDialog1W(
    LPDISCDLGSTRUCTW lpConnDlgStruct
    );




#line 413 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"
#line 414 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"





DWORD __stdcall
WNetOpenEnumA(
     DWORD          dwScope,
     DWORD          dwType,
     DWORD          dwUsage,
     LPNETRESOURCEA lpNetResource,
     LPHANDLE       lphEnum
    );
DWORD __stdcall
WNetOpenEnumW(
     DWORD          dwScope,
     DWORD          dwType,
     DWORD          dwUsage,
     LPNETRESOURCEW lpNetResource,
     LPHANDLE       lphEnum
    );




#line 440 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"

DWORD __stdcall
WNetEnumResourceA(
     HANDLE  hEnum,
     LPDWORD lpcCount,
     LPVOID  lpBuffer,
     LPDWORD lpBufferSize
    );
DWORD __stdcall
WNetEnumResourceW(
     HANDLE  hEnum,
     LPDWORD lpcCount,
     LPVOID  lpBuffer,
     LPDWORD lpBufferSize
    );




#line 460 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"

DWORD __stdcall
WNetCloseEnum(
    HANDLE   hEnum
    );









typedef struct  _UNIVERSAL_NAME_INFOA {
    LPSTR    lpUniversalName;
}UNIVERSAL_NAME_INFOA, *LPUNIVERSAL_NAME_INFOA;
typedef struct  _UNIVERSAL_NAME_INFOW {
    LPWSTR   lpUniversalName;
}UNIVERSAL_NAME_INFOW, *LPUNIVERSAL_NAME_INFOW;




typedef UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFO;
typedef LPUNIVERSAL_NAME_INFOA LPUNIVERSAL_NAME_INFO;
#line 487 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"

typedef struct  _REMOTE_NAME_INFOA {
    LPSTR    lpUniversalName;
    LPSTR    lpConnectionName;
    LPSTR    lpRemainingPath;
}REMOTE_NAME_INFOA, *LPREMOTE_NAME_INFOA;
typedef struct  _REMOTE_NAME_INFOW {
    LPWSTR   lpUniversalName;
    LPWSTR   lpConnectionName;
    LPWSTR   lpRemainingPath;
}REMOTE_NAME_INFOW, *LPREMOTE_NAME_INFOW;




typedef REMOTE_NAME_INFOA REMOTE_NAME_INFO;
typedef LPREMOTE_NAME_INFOA LPREMOTE_NAME_INFO;
#line 505 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"

DWORD __stdcall
WNetGetUniversalNameA(
     LPCSTR lpLocalPath,
     DWORD    dwInfoLevel,
     LPVOID   lpBuffer,
     LPDWORD  lpBufferSize
     );
DWORD __stdcall
WNetGetUniversalNameW(
     LPCWSTR lpLocalPath,
     DWORD    dwInfoLevel,
     LPVOID   lpBuffer,
     LPDWORD  lpBufferSize
     );




#line 525 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"





DWORD __stdcall
WNetGetUserA(
     LPCSTR  lpName,
     LPSTR   lpUserName,
     LPDWORD   lpnLength
    );
DWORD __stdcall
WNetGetUserW(
     LPCWSTR  lpName,
     LPWSTR   lpUserName,
     LPDWORD   lpnLength
    );




#line 547 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"











#line 559 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"



DWORD __stdcall
WNetGetProviderNameA(
    DWORD   dwNetType,
    LPSTR lpProviderName,
    LPDWORD lpBufferSize
    );
DWORD __stdcall
WNetGetProviderNameW(
    DWORD   dwNetType,
    LPWSTR lpProviderName,
    LPDWORD lpBufferSize
    );




#line 579 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"

typedef struct _NETINFOSTRUCT{
    DWORD cbStructure;
    DWORD dwProviderVersion;
    DWORD dwStatus;
    DWORD dwCharacteristics;
    DWORD dwHandle;
    WORD  wNetType;
    DWORD dwPrinters;
    DWORD dwDrives;
} NETINFOSTRUCT,  *LPNETINFOSTRUCT;





DWORD __stdcall
WNetGetNetworkInformationA(
    LPCSTR          lpProvider,
    LPNETINFOSTRUCT   lpNetInfoStruct
    );
DWORD __stdcall
WNetGetNetworkInformationW(
    LPCWSTR          lpProvider,
    LPNETINFOSTRUCT   lpNetInfoStruct
    );




#line 610 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"





typedef UINT ( __stdcall *PFNGETPROFILEPATHA) (
    LPCSTR    pszUsername,
    LPSTR     pszBuffer,
    UINT        cbBuffer
    );
typedef UINT ( __stdcall *PFNGETPROFILEPATHW) (
    LPCWSTR    pszUsername,
    LPWSTR     pszBuffer,
    UINT        cbBuffer
    );




#line 630 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"

typedef UINT ( __stdcall *PFNRECONCILEPROFILEA) (
    LPCSTR    pszCentralFile,
    LPCSTR    pszLocalFile,
    DWORD       dwFlags
    );
typedef UINT ( __stdcall *PFNRECONCILEPROFILEW) (
    LPCWSTR    pszCentralFile,
    LPCWSTR    pszLocalFile,
    DWORD       dwFlags
    );




#line 646 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"









typedef BOOL ( __stdcall *PFNPROCESSPOLICIESA) (
    HWND        hwnd,
    LPCSTR    pszPath,
    LPCSTR    pszUsername,
    LPCSTR    pszComputerName,
    DWORD       dwFlags
    );
typedef BOOL ( __stdcall *PFNPROCESSPOLICIESW) (
    HWND        hwnd,
    LPCWSTR    pszPath,
    LPCWSTR    pszUsername,
    LPCWSTR    pszComputerName,
    DWORD       dwFlags
    );




#line 674 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"


#line 677 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"





DWORD __stdcall
WNetGetLastErrorA(
     LPDWORD    lpError,
     LPSTR    lpErrorBuf,
     DWORD      nErrorBufSize,
     LPSTR    lpNameBuf,
     DWORD      nNameBufSize
    );
DWORD __stdcall
WNetGetLastErrorW(
     LPDWORD    lpError,
     LPWSTR    lpErrorBuf,
     DWORD      nErrorBufSize,
     LPWSTR    lpNameBuf,
     DWORD      nNameBufSize
    );




#line 703 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"





























#line 733 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"






























#line 764 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"






typedef struct _NETCONNECTINFOSTRUCT{
    DWORD cbStructure;
    DWORD dwFlags;
    DWORD dwSpeed;
    DWORD dwDelay;
    DWORD dwOptDataSize;
} NETCONNECTINFOSTRUCT,  *LPNETCONNECTINFOSTRUCT;






DWORD __stdcall
MultinetGetConnectionPerformanceA(
        LPNETRESOURCEA lpNetResource,
        LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
        );
DWORD __stdcall
MultinetGetConnectionPerformanceW(
        LPNETRESOURCEW lpNetResource,
        LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
        );




#line 798 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"
#line 799 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"


}
#line 803 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"

#line 805 "c:\\programme\\microsoft visual studio\\vc98\\include\\winnetwk.h"

#line 183 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"
#line 184 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"


#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\cderr.h"

























































#line 59 "c:\\programme\\microsoft visual studio\\vc98\\include\\cderr.h"
#line 187 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\dde.h"















extern "C" {
#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\dde.h"




























typedef struct {

        unsigned short bAppReturnCode:8,
                 reserved:6,
                 fBusy:1,
		 fAck:1;


#line 55 "c:\\programme\\microsoft visual studio\\vc98\\include\\dde.h"
} DDEACK;









typedef struct {

        unsigned short reserved:14,
                 fDeferUpd:1,
		 fAckReq:1;


#line 73 "c:\\programme\\microsoft visual studio\\vc98\\include\\dde.h"
	short     cfFormat;
} DDEADVISE;











typedef struct {

	unsigned short unused:12,
                 fResponse:1,
                 fRelease:1,
                 reserved:1,
                 fAckReq:1;


#line 96 "c:\\programme\\microsoft visual studio\\vc98\\include\\dde.h"
	short	 cfFormat;
	BYTE	 Value[1];
} DDEDATA;











typedef struct {

	unsigned short unused:13,  
                             
		 fRelease:1,
		 fReserved:2;


#line 119 "c:\\programme\\microsoft visual studio\\vc98\\include\\dde.h"
	short    cfFormat;
	BYTE	 Value[1];  
                            

} DDEPOKE;











typedef struct {

        unsigned short unused:13,
                 fRelease:1,
                 fDeferUpd:1,
		 fAckReq:1;


#line 144 "c:\\programme\\microsoft visual studio\\vc98\\include\\dde.h"
	short	 cfFormat;
} DDELN;

typedef struct {

	unsigned short unused:12,
                 fAck:1,
                 fRelease:1,
                 fReserved:1,
                 fAckReq:1;


#line 157 "c:\\programme\\microsoft visual studio\\vc98\\include\\dde.h"
	short	 cfFormat;
	BYTE	 rgb[1];
} DDEUP;






BOOL
__stdcall
DdeSetQualityOfService(
    HWND hwndClient,
    const SECURITY_QUALITY_OF_SERVICE *pqosNew,
    PSECURITY_QUALITY_OF_SERVICE pqosPrev);

BOOL
__stdcall
ImpersonateDdeClientWindow(
    HWND hWndClient,
    HWND hWndServer);




LONG __stdcall PackDDElParam(UINT msg, UINT uiLo, UINT uiHi);
BOOL __stdcall UnpackDDElParam(UINT msg, LONG lParam, PUINT puiLo, PUINT puiHi);
BOOL __stdcall FreeDDElParam(UINT msg, LONG lParam);
LONG __stdcall ReuseDDElParam(LONG lParam, UINT msgIn, UINT msgOut, UINT uiLo, UINT uiHi);


}
#line 190 "c:\\programme\\microsoft visual studio\\vc98\\include\\dde.h"

#line 192 "c:\\programme\\microsoft visual studio\\vc98\\include\\dde.h"
#line 188 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\ddeml.h"
















extern "C" {
#line 19 "c:\\programme\\microsoft visual studio\\vc98\\include\\ddeml.h"



struct HCONVLIST__ { int unused; }; typedef struct HCONVLIST__ *HCONVLIST;
struct HCONV__ { int unused; }; typedef struct HCONV__ *HCONV;
struct HSZ__ { int unused; }; typedef struct HSZ__ *HSZ;
struct HDDEDATA__ { int unused; }; typedef struct HDDEDATA__ *HDDEDATA;




typedef struct tagHSZPAIR {
    HSZ hszSvc;
    HSZ hszTopic;
} HSZPAIR;
typedef HSZPAIR  *PHSZPAIR;




typedef struct tagCONVCONTEXT {
    UINT        cb;             
    UINT        wFlags;         
    UINT        wCountryID;     
    int         iCodePage;      
    DWORD       dwLangID;       
    DWORD       dwSecurity;     
    SECURITY_QUALITY_OF_SERVICE qos;  
} CONVCONTEXT;
typedef CONVCONTEXT  *PCONVCONTEXT;




typedef struct tagCONVINFO {
    DWORD   cb;            
    DWORD   hUser;         
    HCONV   hConvPartner;  
    HSZ     hszSvcPartner; 
    HSZ     hszServiceReq; 
    HSZ     hszTopic;      
    HSZ     hszItem;       
    UINT    wFmt;          
    UINT    wType;         
    UINT    wStatus;       
    UINT    wConvst;       
    UINT    wLastError;    
    HCONVLIST hConvList;   
    CONVCONTEXT ConvCtxt;  
    HWND    hwnd;          
    HWND    hwndPartner;   
} CONVINFO;
typedef CONVINFO  *PCONVINFO;
































































#line 137 "c:\\programme\\microsoft visual studio\\vc98\\include\\ddeml.h"




























































#line 198 "c:\\programme\\microsoft visual studio\\vc98\\include\\ddeml.h"




typedef HDDEDATA __stdcall FNCALLBACK(UINT wType, UINT wFmt, HCONV hConv,
        HSZ hsz1, HSZ hsz2, HDDEDATA hData, DWORD dwData1, DWORD dwData2);
typedef HDDEDATA (__stdcall *PFNCALLBACK)(UINT wType, UINT wFmt, HCONV hConv,
        HSZ hsz1, HSZ hsz2, HDDEDATA hData, DWORD dwData1, DWORD dwData2);





UINT __stdcall DdeInitializeA(LPDWORD pidInst, PFNCALLBACK pfnCallback,
        DWORD afCmd, DWORD ulRes);
UINT __stdcall DdeInitializeW(LPDWORD pidInst, PFNCALLBACK pfnCallback,
        DWORD afCmd, DWORD ulRes);




#line 220 "c:\\programme\\microsoft visual studio\\vc98\\include\\ddeml.h"
































BOOL __stdcall DdeUninitialize(DWORD idInst);





HCONVLIST __stdcall DdeConnectList(DWORD idInst, HSZ hszService, HSZ hszTopic,
        HCONVLIST hConvList, PCONVCONTEXT pCC);
HCONV __stdcall DdeQueryNextServer(HCONVLIST hConvList, HCONV hConvPrev);
BOOL __stdcall DdeDisconnectList(HCONVLIST hConvList);





HCONV __stdcall DdeConnect(DWORD idInst, HSZ hszService, HSZ hszTopic,
        PCONVCONTEXT pCC);
BOOL __stdcall DdeDisconnect(HCONV hConv);
HCONV __stdcall DdeReconnect(HCONV hConv);
UINT __stdcall DdeQueryConvInfo(HCONV hConv, DWORD idTransaction, PCONVINFO pConvInfo);
BOOL __stdcall DdeSetUserHandle(HCONV hConv, DWORD id, DWORD hUser);
BOOL __stdcall DdeAbandonTransaction(DWORD idInst, HCONV hConv, DWORD idTransaction);






BOOL __stdcall DdePostAdvise(DWORD idInst, HSZ hszTopic, HSZ hszItem);
BOOL __stdcall DdeEnableCallback(DWORD idInst, HCONV hConv, UINT wCmd);
BOOL __stdcall DdeImpersonateClient(HCONV hConv);






HDDEDATA __stdcall DdeNameService(DWORD idInst, HSZ hsz1, HSZ hsz2, UINT afCmd);










HDDEDATA __stdcall DdeClientTransaction(LPBYTE pData, DWORD cbData,
        HCONV hConv, HSZ hszItem, UINT wFmt, UINT wType,
        DWORD dwTimeout, LPDWORD pdwResult);





HDDEDATA __stdcall DdeCreateDataHandle(DWORD idInst, LPBYTE pSrc, DWORD cb,
        DWORD cbOff, HSZ hszItem, UINT wFmt, UINT afCmd);
HDDEDATA __stdcall DdeAddData(HDDEDATA hData, LPBYTE pSrc, DWORD cb, DWORD cbOff);
DWORD __stdcall DdeGetData(HDDEDATA hData, LPBYTE pDst, DWORD cbMax, DWORD cbOff);
LPBYTE __stdcall DdeAccessData(HDDEDATA hData, LPDWORD pcbDataSize);
BOOL __stdcall DdeUnaccessData(HDDEDATA hData);
BOOL __stdcall DdeFreeDataHandle(HDDEDATA hData);




UINT __stdcall DdeGetLastError(DWORD idInst);


























HSZ  __stdcall DdeCreateStringHandleA(DWORD idInst, LPCSTR psz, int iCodePage);
HSZ  __stdcall DdeCreateStringHandleW(DWORD idInst, LPCWSTR psz, int iCodePage);




#line 353 "c:\\programme\\microsoft visual studio\\vc98\\include\\ddeml.h"
DWORD __stdcall DdeQueryStringA(DWORD idInst, HSZ hsz, LPSTR psz, DWORD cchMax, int iCodePage);
DWORD __stdcall DdeQueryStringW(DWORD idInst, HSZ hsz, LPWSTR psz, DWORD cchMax, int iCodePage);




#line 360 "c:\\programme\\microsoft visual studio\\vc98\\include\\ddeml.h"
BOOL __stdcall DdeFreeStringHandle(DWORD idInst, HSZ hsz);
BOOL __stdcall DdeKeepStringHandle(DWORD idInst, HSZ hsz);
int __stdcall DdeCmpStringHandles(HSZ hsz1, HSZ hsz2);







typedef struct tagDDEML_MSG_HOOK_DATA {    
    UINT uiLo;      
    UINT uiHi;
    DWORD cbData;   
    DWORD Data[8];  
} DDEML_MSG_HOOK_DATA, *PDDEML_MSG_HOOK_DATA;


typedef struct tagMONMSGSTRUCT {
    UINT    cb;
    HWND    hwndTo;
    DWORD   dwTime;
    HANDLE  hTask;
    UINT    wMsg;
    WPARAM  wParam;
    LPARAM  lParam;
    DDEML_MSG_HOOK_DATA dmhd;       
} MONMSGSTRUCT, *PMONMSGSTRUCT;

typedef struct tagMONCBSTRUCT {
    UINT   cb;
    DWORD  dwTime;
    HANDLE hTask;
    DWORD  dwRet;
    UINT   wType;
    UINT   wFmt;
    HCONV  hConv;
    HSZ    hsz1;
    HSZ    hsz2;
    HDDEDATA hData;
    DWORD  dwData1;
    DWORD  dwData2;
    CONVCONTEXT cc;                 
    DWORD  cbData;                  
    DWORD  Data[8];                 
} MONCBSTRUCT, *PMONCBSTRUCT;

typedef struct tagMONHSZSTRUCTA {
    UINT   cb;
    BOOL   fsAction;    
    DWORD  dwTime;
    HSZ    hsz;
    HANDLE hTask;
    CHAR    str[1];
} MONHSZSTRUCTA, *PMONHSZSTRUCTA;
typedef struct tagMONHSZSTRUCTW {
    UINT   cb;
    BOOL   fsAction;    
    DWORD  dwTime;
    HSZ    hsz;
    HANDLE hTask;
    WCHAR   str[1];
} MONHSZSTRUCTW, *PMONHSZSTRUCTW;




typedef MONHSZSTRUCTA MONHSZSTRUCT;
typedef PMONHSZSTRUCTA PMONHSZSTRUCT;
#line 430 "c:\\programme\\microsoft visual studio\\vc98\\include\\ddeml.h"






typedef struct tagMONERRSTRUCT {
    UINT    cb;
    UINT    wLastError;
    DWORD   dwTime;
    HANDLE  hTask;
} MONERRSTRUCT, *PMONERRSTRUCT;

typedef struct tagMONLINKSTRUCT {
    UINT    cb;
    DWORD   dwTime;
    HANDLE  hTask;
    BOOL    fEstablished;
    BOOL    fNoData;
    HSZ     hszSvc;
    HSZ     hszTopic;
    HSZ     hszItem;
    UINT    wFmt;
    BOOL    fServer;
    HCONV   hConvServer;
    HCONV   hConvClient;
} MONLINKSTRUCT, *PMONLINKSTRUCT;

typedef struct tagMONCONVSTRUCT {
    UINT    cb;
    BOOL    fConnect;
    DWORD   dwTime;
    HANDLE  hTask;
    HSZ     hszSvc;
    HSZ     hszTopic;
    HCONV   hConvClient;        
    HCONV   hConvServer;        
} MONCONVSTRUCT, *PMONCONVSTRUCT;


















#line 487 "c:\\programme\\microsoft visual studio\\vc98\\include\\ddeml.h"


}
#line 491 "c:\\programme\\microsoft visual studio\\vc98\\include\\ddeml.h"

#line 493 "c:\\programme\\microsoft visual studio\\vc98\\include\\ddeml.h"


#line 189 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\dlgs.h"










































































































































































































































#line 236 "c:\\programme\\microsoft visual studio\\vc98\\include\\dlgs.h"







typedef struct tagCRGB
{
    BYTE    bRed;
    BYTE    bGreen;
    BYTE    bBlue;
    BYTE    bExtra;
} CRGB;           


#line 253 "c:\\programme\\microsoft visual studio\\vc98\\include\\dlgs.h"
#line 190 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"

#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\lzexpand.h"








extern "C" {
#line 11 "c:\\programme\\microsoft visual studio\\vc98\\include\\lzexpand.h"



















INT
__stdcall
LZStart(
	void
	);

void
__stdcall
LZDone(
	void
	);

LONG
__stdcall
CopyLZFile(
	INT,
	INT
	);

LONG
__stdcall
LZCopy(
	INT,
	INT
	);

INT
__stdcall
LZInit(
	INT
	);

INT
__stdcall
GetExpandedNameA(
	LPSTR,
	LPSTR
	);
INT
__stdcall
GetExpandedNameW(
	LPWSTR,
	LPWSTR
	);




#line 79 "c:\\programme\\microsoft visual studio\\vc98\\include\\lzexpand.h"

INT
__stdcall
LZOpenFileA(
	LPSTR,
	LPOFSTRUCT,
	WORD
	);
INT
__stdcall
LZOpenFileW(
	LPWSTR,
	LPOFSTRUCT,
	WORD
	);




#line 99 "c:\\programme\\microsoft visual studio\\vc98\\include\\lzexpand.h"

LONG
__stdcall
LZSeek(
	INT,
	LONG,
	INT
	);

INT
__stdcall
LZRead(
	INT,
	LPSTR,
	INT
	);

void
__stdcall
LZClose(
	INT
	);


}
#line 125 "c:\\programme\\microsoft visual studio\\vc98\\include\\lzexpand.h"


#line 128 "c:\\programme\\microsoft visual studio\\vc98\\include\\lzexpand.h"
#line 192 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"































#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push)
#line 28 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack1.h"
#pragma pack(1)


#line 32 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack1.h"
#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack1.h"
#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"




#line 38 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"


extern "C" {            
#line 42 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"






#line 49 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"




#line 54 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"






















































#line 109 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"




typedef UINT        MMVERSION;  


#line 117 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
typedef UINT        MMRESULT;   
				


typedef UINT    *LPUINT;


typedef struct mmtime_tag
{
    UINT            wType;      
    union
    {
	DWORD       ms;         
	DWORD       sample;     
	DWORD       cb;         
	DWORD       ticks;      

	
	struct
	{
	    BYTE    hour;       
	    BYTE    min;        
	    BYTE    sec;        
	    BYTE    frame;      
	    BYTE    fps;        
	    BYTE    dummy;      

	    BYTE    pad[2];
#line 146 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
	} smpte;

	
	struct
	{
	    DWORD songptrpos;   
	} midi;
    } u;
} MMTIME, *PMMTIME,  *NPMMTIME,  *LPMMTIME;























































 
 
 
 
#line 215 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"











 
#line 228 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"



#line 232 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"











































						   
						   











struct HDRVR__ { int unused; }; typedef struct HDRVR__ *HDRVR;
#line 290 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"










typedef struct DRVCONFIGINFOEX {
    DWORD   dwDCISize;
    LPCWSTR  lpszDCISectionName;
    LPCWSTR  lpszDCIAliasName;
    DWORD    dnDevNode;
} DRVCONFIGINFOEX, *PDRVCONFIGINFOEX,  *NPDRVCONFIGINFOEX,  *LPDRVCONFIGINFOEX;








#line 315 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"























typedef struct tagDRVCONFIGINFO {
    DWORD   dwDCISize;
    LPCWSTR  lpszDCISectionName;
    LPCWSTR  lpszDCIAliasName;
} DRVCONFIGINFO, *PDRVCONFIGINFO,  *NPDRVCONFIGINFO,  *LPDRVCONFIGINFO;






#line 350 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"








 

typedef LRESULT (__stdcall* DRIVERPROC)(DWORD, HDRVR, UINT, LPARAM, LPARAM);

__declspec(dllimport) LRESULT   __stdcall CloseDriver(HDRVR hDriver, LONG lParam1, LONG lParam2);
__declspec(dllimport) HDRVR     __stdcall OpenDriver(LPCWSTR szDriverName, LPCWSTR szSectionName, LONG lParam2);
__declspec(dllimport) LRESULT   __stdcall SendDriverMessage(HDRVR hDriver, UINT message, LONG lParam1, LONG lParam2);
__declspec(dllimport) HMODULE   __stdcall DrvGetModuleHandle(HDRVR hDriver);
__declspec(dllimport) HMODULE   __stdcall GetDriverModuleHandle(HDRVR hDriver);
__declspec(dllimport) LRESULT   __stdcall DefDriverProc(DWORD dwDriverIdentifier, HDRVR hdrvr, UINT uMsg, LPARAM lParam1, LPARAM lParam2);
 #line 369 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"







#line 377 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
#line 378 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
#line 379 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"







#line 387 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"




#line 392 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"


















#line 411 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"



typedef void (__stdcall DRVCALLBACK)(HDRVR hdrvr, UINT uMsg, DWORD dwUser, DWORD dw1, DWORD dw2);

typedef DRVCALLBACK  *LPDRVCALLBACK;

typedef DRVCALLBACK     *PDRVCALLBACK;
#line 420 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"

#line 422 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"











#line 434 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"




#line 439 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"

#line 441 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
#line 442 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"











__declspec(dllimport) BOOL __stdcall sndPlaySoundA(LPCSTR pszSound, UINT fuSound);
__declspec(dllimport) BOOL __stdcall sndPlaySoundW(LPCWSTR pszSound, UINT fuSound);




#line 460 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"



#line 464 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"



















#line 484 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"















__declspec(dllimport) BOOL __stdcall PlaySoundA(LPCSTR pszSound, HMODULE hmod, DWORD fdwSound);
__declspec(dllimport) BOOL __stdcall PlaySoundW(LPCWSTR pszSound, HMODULE hmod, DWORD fdwSound);




#line 506 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"



#line 510 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"

#line 512 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
#line 513 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
















struct HWAVE__ { int unused; }; typedef struct HWAVE__ *HWAVE;
struct HWAVEIN__ { int unused; }; typedef struct HWAVEIN__ *HWAVEIN;
struct HWAVEOUT__ { int unused; }; typedef struct HWAVEOUT__ *HWAVEOUT;

typedef HWAVEIN  *LPHWAVEIN;
typedef HWAVEOUT  *LPHWAVEOUT;
typedef DRVCALLBACK WAVECALLBACK;
typedef WAVECALLBACK  *LPWAVECALLBACK;
#line 538 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"



















#line 558 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"


typedef struct wavehdr_tag {
    LPSTR       lpData;                 
    DWORD       dwBufferLength;         
    DWORD       dwBytesRecorded;        
    DWORD       dwUser;                 
    DWORD       dwFlags;                
    DWORD       dwLoops;                
    struct wavehdr_tag  *lpNext;     
    DWORD       reserved;               
} WAVEHDR, *PWAVEHDR,  *NPWAVEHDR,  *LPWAVEHDR;











typedef struct tagWAVEOUTCAPSA {
    WORD    wMid;                  
    WORD    wPid;                  
    MMVERSION vDriverVersion;      
    CHAR    szPname[32];  
    DWORD   dwFormats;             
    WORD    wChannels;             
    WORD    wReserved1;            
    DWORD   dwSupport;             
} WAVEOUTCAPSA, *PWAVEOUTCAPSA, *NPWAVEOUTCAPSA, *LPWAVEOUTCAPSA;
typedef struct tagWAVEOUTCAPSW {
    WORD    wMid;                  
    WORD    wPid;                  
    MMVERSION vDriverVersion;      
    WCHAR   szPname[32];  
    DWORD   dwFormats;             
    WORD    wChannels;             
    WORD    wReserved1;            
    DWORD   dwSupport;             
} WAVEOUTCAPSW, *PWAVEOUTCAPSW, *NPWAVEOUTCAPSW, *LPWAVEOUTCAPSW;






typedef WAVEOUTCAPSA WAVEOUTCAPS;
typedef PWAVEOUTCAPSA PWAVEOUTCAPS;
typedef NPWAVEOUTCAPSA NPWAVEOUTCAPS;
typedef LPWAVEOUTCAPSA LPWAVEOUTCAPS;
#line 612 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"











#line 624 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"













typedef struct tagWAVEINCAPSA {
    WORD    wMid;                    
    WORD    wPid;                    
    MMVERSION vDriverVersion;        
    CHAR    szPname[32];    
    DWORD   dwFormats;               
    WORD    wChannels;               
    WORD    wReserved1;              
} WAVEINCAPSA, *PWAVEINCAPSA, *NPWAVEINCAPSA, *LPWAVEINCAPSA;
typedef struct tagWAVEINCAPSW {
    WORD    wMid;                    
    WORD    wPid;                    
    MMVERSION vDriverVersion;        
    WCHAR   szPname[32];    
    DWORD   dwFormats;               
    WORD    wChannels;               
    WORD    wReserved1;              
} WAVEINCAPSW, *PWAVEINCAPSW, *NPWAVEINCAPSW, *LPWAVEINCAPSW;






typedef WAVEINCAPSA WAVEINCAPS;
typedef PWAVEINCAPSA PWAVEINCAPS;
typedef NPWAVEINCAPSA NPWAVEINCAPS;
typedef LPWAVEINCAPSA LPWAVEINCAPS;
#line 666 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"










#line 677 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"

















typedef struct waveformat_tag {
    WORD    wFormatTag;        
    WORD    nChannels;         
    DWORD   nSamplesPerSec;    
    DWORD   nAvgBytesPerSec;   
    WORD    nBlockAlign;       
} WAVEFORMAT, *PWAVEFORMAT,  *NPWAVEFORMAT,  *LPWAVEFORMAT;





typedef struct pcmwaveformat_tag {
    WAVEFORMAT  wf;
    WORD        wBitsPerSample;
} PCMWAVEFORMAT, *PPCMWAVEFORMAT,  *NPPCMWAVEFORMAT,  *LPPCMWAVEFORMAT;








typedef struct tWAVEFORMATEX
{
    WORD        wFormatTag;         
    WORD        nChannels;          
    DWORD       nSamplesPerSec;     
    DWORD       nAvgBytesPerSec;    
    WORD        nBlockAlign;        
    WORD        wBitsPerSample;     
    WORD        cbSize;             
				    
} WAVEFORMATEX, *PWAVEFORMATEX,  *NPWAVEFORMATEX,  *LPWAVEFORMATEX;
typedef const WAVEFORMATEX  *LPCWAVEFORMATEX;

#line 732 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"



__declspec(dllimport) UINT __stdcall waveOutGetNumDevs(void);



__declspec(dllimport) MMRESULT __stdcall waveOutGetDevCapsA(UINT uDeviceID, LPWAVEOUTCAPSA pwoc, UINT cbwoc);
__declspec(dllimport) MMRESULT __stdcall waveOutGetDevCapsW(UINT uDeviceID, LPWAVEOUTCAPSW pwoc, UINT cbwoc);




#line 746 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"



#line 750 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"


__declspec(dllimport) MMRESULT __stdcall waveOutGetVolume(HWAVEOUT hwo, LPDWORD pdwVolume);
__declspec(dllimport) MMRESULT __stdcall waveOutSetVolume(HWAVEOUT hwo, DWORD dwVolume);



#line 758 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"



__declspec(dllimport) MMRESULT __stdcall waveOutGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText);
__declspec(dllimport) MMRESULT __stdcall waveOutGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText);




#line 768 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"



#line 772 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"

__declspec(dllimport) MMRESULT __stdcall waveOutOpen(LPHWAVEOUT phwo, UINT uDeviceID,
    LPCWAVEFORMATEX pwfx, DWORD dwCallback, DWORD dwInstance, DWORD fdwOpen);

__declspec(dllimport) MMRESULT __stdcall waveOutClose(HWAVEOUT hwo);
__declspec(dllimport) MMRESULT __stdcall waveOutPrepareHeader(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh);
__declspec(dllimport) MMRESULT __stdcall waveOutUnprepareHeader(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh);
__declspec(dllimport) MMRESULT __stdcall waveOutWrite(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh);
__declspec(dllimport) MMRESULT __stdcall waveOutPause(HWAVEOUT hwo);
__declspec(dllimport) MMRESULT __stdcall waveOutRestart(HWAVEOUT hwo);
__declspec(dllimport) MMRESULT __stdcall waveOutReset(HWAVEOUT hwo);
__declspec(dllimport) MMRESULT __stdcall waveOutBreakLoop(HWAVEOUT hwo);
__declspec(dllimport) MMRESULT __stdcall waveOutGetPosition(HWAVEOUT hwo, LPMMTIME pmmt, UINT cbmmt);
__declspec(dllimport) MMRESULT __stdcall waveOutGetPitch(HWAVEOUT hwo, LPDWORD pdwPitch);
__declspec(dllimport) MMRESULT __stdcall waveOutSetPitch(HWAVEOUT hwo, DWORD dwPitch);
__declspec(dllimport) MMRESULT __stdcall waveOutGetPlaybackRate(HWAVEOUT hwo, LPDWORD pdwRate);
__declspec(dllimport) MMRESULT __stdcall waveOutSetPlaybackRate(HWAVEOUT hwo, DWORD dwRate);
__declspec(dllimport) MMRESULT __stdcall waveOutGetID(HWAVEOUT hwo, LPUINT puDeviceID);



__declspec(dllimport) MMRESULT __stdcall waveOutMessage(HWAVEOUT hwo, UINT uMsg, DWORD dw1, DWORD dw2);


#line 797 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
#line 798 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"

__declspec(dllimport) UINT __stdcall waveInGetNumDevs(void);



__declspec(dllimport) MMRESULT __stdcall waveInGetDevCapsA(UINT uDeviceID, LPWAVEINCAPSA pwic, UINT cbwic);
__declspec(dllimport) MMRESULT __stdcall waveInGetDevCapsW(UINT uDeviceID, LPWAVEINCAPSW pwic, UINT cbwic);




#line 810 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"



#line 814 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"



__declspec(dllimport) MMRESULT __stdcall waveInGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText);
__declspec(dllimport) MMRESULT __stdcall waveInGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText);




#line 824 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"



#line 828 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"

__declspec(dllimport) MMRESULT __stdcall waveInOpen(LPHWAVEIN phwi, UINT uDeviceID,
    LPCWAVEFORMATEX pwfx, DWORD dwCallback, DWORD dwInstance, DWORD fdwOpen);

__declspec(dllimport) MMRESULT __stdcall waveInClose(HWAVEIN hwi);
__declspec(dllimport) MMRESULT __stdcall waveInPrepareHeader(HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh);
__declspec(dllimport) MMRESULT __stdcall waveInUnprepareHeader(HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh);
__declspec(dllimport) MMRESULT __stdcall waveInAddBuffer(HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh);
__declspec(dllimport) MMRESULT __stdcall waveInStart(HWAVEIN hwi);
__declspec(dllimport) MMRESULT __stdcall waveInStop(HWAVEIN hwi);
__declspec(dllimport) MMRESULT __stdcall waveInReset(HWAVEIN hwi);
__declspec(dllimport) MMRESULT __stdcall waveInGetPosition(HWAVEIN hwi, LPMMTIME pmmt, UINT cbmmt);
__declspec(dllimport) MMRESULT __stdcall waveInGetID(HWAVEIN hwi, LPUINT puDeviceID);



__declspec(dllimport) MMRESULT __stdcall waveInMessage(HWAVEIN hwi, UINT uMsg, DWORD dw1, DWORD dw2);


#line 848 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
#line 849 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"

#line 851 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"

#line 853 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"




















struct HMIDI__ { int unused; }; typedef struct HMIDI__ *HMIDI;
struct HMIDIIN__ { int unused; }; typedef struct HMIDIIN__ *HMIDIIN;
struct HMIDIOUT__ { int unused; }; typedef struct HMIDIOUT__ *HMIDIOUT;
struct HMIDISTRM__ { int unused; }; typedef struct HMIDISTRM__ *HMIDISTRM;

typedef HMIDI  *LPHMIDI;
typedef HMIDIIN  *LPHMIDIIN;
typedef HMIDIOUT  *LPHMIDIOUT;
typedef HMIDISTRM  *LPHMIDISTRM;
typedef DRVCALLBACK MIDICALLBACK;
typedef MIDICALLBACK  *LPMIDICALLBACK;

typedef WORD PATCHARRAY[128];
typedef WORD  *LPPATCHARRAY;
typedef WORD KEYARRAY[128];
typedef WORD  *LPKEYARRAY;
#line 890 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"















#line 906 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"








#line 915 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"










typedef struct tagMIDIOUTCAPSA {
    WORD    wMid;                  
    WORD    wPid;                  
    MMVERSION vDriverVersion;      
    CHAR    szPname[32];  
    WORD    wTechnology;           
    WORD    wVoices;               
    WORD    wNotes;                
    WORD    wChannelMask;          
    DWORD   dwSupport;             
} MIDIOUTCAPSA, *PMIDIOUTCAPSA, *NPMIDIOUTCAPSA, *LPMIDIOUTCAPSA;
typedef struct tagMIDIOUTCAPSW {
    WORD    wMid;                  
    WORD    wPid;                  
    MMVERSION vDriverVersion;      
    WCHAR   szPname[32];  
    WORD    wTechnology;           
    WORD    wVoices;               
    WORD    wNotes;                
    WORD    wChannelMask;          
    DWORD   dwSupport;             
} MIDIOUTCAPSW, *PMIDIOUTCAPSW, *NPMIDIOUTCAPSW, *LPMIDIOUTCAPSW;






typedef MIDIOUTCAPSA MIDIOUTCAPS;
typedef PMIDIOUTCAPSA PMIDIOUTCAPS;
typedef NPMIDIOUTCAPSA NPMIDIOUTCAPS;
typedef LPMIDIOUTCAPSA LPMIDIOUTCAPS;
#line 958 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"













#line 972 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"














#line 987 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"




typedef struct tagMIDIINCAPSA {
    WORD        wMid;                   
    WORD        wPid;                   
    MMVERSION   vDriverVersion;         
    CHAR        szPname[32];   

    DWORD   dwSupport;             
#line 999 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
} MIDIINCAPSA, *PMIDIINCAPSA, *NPMIDIINCAPSA, *LPMIDIINCAPSA;
typedef struct tagMIDIINCAPSW {
    WORD        wMid;                   
    WORD        wPid;                   
    MMVERSION   vDriverVersion;         
    WCHAR       szPname[32];   

    DWORD   dwSupport;             
#line 1008 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
} MIDIINCAPSW, *PMIDIINCAPSW, *NPMIDIINCAPSW, *LPMIDIINCAPSW;






typedef MIDIINCAPSA MIDIINCAPS;
typedef PMIDIINCAPSA PMIDIINCAPS;
typedef NPMIDIINCAPSA NPMIDIINCAPS;
typedef LPMIDIINCAPSA LPMIDIINCAPS;
#line 1020 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"











#line 1032 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"


typedef struct midihdr_tag {
    LPSTR       lpData;               
    DWORD       dwBufferLength;       
    DWORD       dwBytesRecorded;      
    DWORD       dwUser;               
    DWORD       dwFlags;              
    struct midihdr_tag  *lpNext;   
    DWORD       reserved;             

    DWORD       dwOffset;             
    DWORD       dwReserved[8];        
#line 1046 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
} MIDIHDR, *PMIDIHDR,  *NPMIDIHDR,  *LPMIDIHDR;


typedef struct midievent_tag
{
    DWORD       dwDeltaTime;          
    DWORD       dwStreamID;           
    DWORD       dwEvent;              
    DWORD       dwParms[1];           
} MIDIEVENT;

typedef struct midistrmbuffver_tag
{
    DWORD       dwVersion;                  
    DWORD       dwMid;                      
    DWORD       dwOEMVersion;               
} MIDISTRMBUFFVER;
#line 1064 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"




















































typedef struct midiproptimediv_tag
{
    DWORD       cbStruct;
    DWORD       dwTimeDiv;
} MIDIPROPTIMEDIV,  *LPMIDIPROPTIMEDIV;

typedef struct midiproptempo_tag
{
    DWORD       cbStruct;
    DWORD       dwTempo;
} MIDIPROPTEMPO,  *LPMIDIPROPTEMPO;

#line 1129 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"




__declspec(dllimport) UINT __stdcall midiOutGetNumDevs(void);

__declspec(dllimport) MMRESULT __stdcall midiStreamOpen(LPHMIDISTRM phms, LPUINT puDeviceID, DWORD cMidi, DWORD dwCallback, DWORD dwInstance, DWORD fdwOpen);
__declspec(dllimport) MMRESULT __stdcall midiStreamClose(HMIDISTRM hms);

__declspec(dllimport) MMRESULT __stdcall midiStreamProperty(HMIDISTRM hms, LPBYTE lppropdata, DWORD dwProperty);
__declspec(dllimport) MMRESULT __stdcall midiStreamPosition(HMIDISTRM hms, LPMMTIME lpmmt, UINT cbmmt);

__declspec(dllimport) MMRESULT __stdcall midiStreamOut(HMIDISTRM hms, LPMIDIHDR pmh, UINT cbmh);
__declspec(dllimport) MMRESULT __stdcall midiStreamPause(HMIDISTRM hms);
__declspec(dllimport) MMRESULT __stdcall midiStreamRestart(HMIDISTRM hms);
__declspec(dllimport) MMRESULT __stdcall midiStreamStop(HMIDISTRM hms);


__declspec(dllimport) MMRESULT __stdcall midiConnect(HMIDI hmi, HMIDIOUT hmo, LPVOID pReserved);
__declspec(dllimport) MMRESULT __stdcall midiDisconnect(HMIDI hmi, HMIDIOUT hmo, LPVOID pReserved);
#line 1150 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
#line 1151 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"



__declspec(dllimport) MMRESULT __stdcall midiOutGetDevCapsA(UINT uDeviceID, LPMIDIOUTCAPSA pmoc, UINT cbmoc);
__declspec(dllimport) MMRESULT __stdcall midiOutGetDevCapsW(UINT uDeviceID, LPMIDIOUTCAPSW pmoc, UINT cbmoc);




#line 1161 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"



#line 1165 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"


__declspec(dllimport) MMRESULT __stdcall midiOutGetVolume(HMIDIOUT hmo, LPDWORD pdwVolume);
__declspec(dllimport) MMRESULT __stdcall midiOutSetVolume(HMIDIOUT hmo, DWORD dwVolume);



#line 1173 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"



__declspec(dllimport) MMRESULT __stdcall midiOutGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText);
__declspec(dllimport) MMRESULT __stdcall midiOutGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText);




#line 1183 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"



#line 1187 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"

__declspec(dllimport) MMRESULT __stdcall midiOutOpen(LPHMIDIOUT phmo, UINT uDeviceID,
    DWORD dwCallback, DWORD dwInstance, DWORD fdwOpen);
__declspec(dllimport) MMRESULT __stdcall midiOutClose(HMIDIOUT hmo);
__declspec(dllimport) MMRESULT __stdcall midiOutPrepareHeader(HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh);
__declspec(dllimport) MMRESULT __stdcall midiOutUnprepareHeader(HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh);
__declspec(dllimport) MMRESULT __stdcall midiOutShortMsg(HMIDIOUT hmo, DWORD dwMsg);
__declspec(dllimport) MMRESULT __stdcall midiOutLongMsg(HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh);
__declspec(dllimport) MMRESULT __stdcall midiOutReset(HMIDIOUT hmo);
__declspec(dllimport) MMRESULT __stdcall midiOutCachePatches(HMIDIOUT hmo, UINT uBank, LPWORD pwpa, UINT fuCache);
__declspec(dllimport) MMRESULT __stdcall midiOutCacheDrumPatches(HMIDIOUT hmo, UINT uPatch, LPWORD pwkya, UINT fuCache);
__declspec(dllimport) MMRESULT __stdcall midiOutGetID(HMIDIOUT hmo, LPUINT puDeviceID);



__declspec(dllimport) MMRESULT __stdcall midiOutMessage(HMIDIOUT hmo, UINT uMsg, DWORD dw1, DWORD dw2);


#line 1206 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
#line 1207 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"

__declspec(dllimport) UINT __stdcall midiInGetNumDevs(void);



__declspec(dllimport) MMRESULT __stdcall midiInGetDevCapsA(UINT uDeviceID, LPMIDIINCAPSA pmic, UINT cbmic);
__declspec(dllimport) MMRESULT __stdcall midiInGetDevCapsW(UINT uDeviceID, LPMIDIINCAPSW pmic, UINT cbmic);




#line 1219 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
__declspec(dllimport) MMRESULT __stdcall midiInGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText);
__declspec(dllimport) MMRESULT __stdcall midiInGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText);




#line 1226 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"




#line 1231 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"

__declspec(dllimport) MMRESULT __stdcall midiInOpen(LPHMIDIIN phmi, UINT uDeviceID,
	DWORD dwCallback, DWORD dwInstance, DWORD fdwOpen);
__declspec(dllimport) MMRESULT __stdcall midiInClose(HMIDIIN hmi);
__declspec(dllimport) MMRESULT __stdcall midiInPrepareHeader(HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh);
__declspec(dllimport) MMRESULT __stdcall midiInUnprepareHeader(HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh);
__declspec(dllimport) MMRESULT __stdcall midiInAddBuffer(HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh);
__declspec(dllimport) MMRESULT __stdcall midiInStart(HMIDIIN hmi);
__declspec(dllimport) MMRESULT __stdcall midiInStop(HMIDIIN hmi);
__declspec(dllimport) MMRESULT __stdcall midiInReset(HMIDIIN hmi);
__declspec(dllimport) MMRESULT __stdcall midiInGetID(HMIDIIN hmi, LPUINT puDeviceID);



__declspec(dllimport) MMRESULT __stdcall midiInMessage(HMIDIIN hmi, UINT uMsg, DWORD dw1, DWORD dw2);


#line 1249 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
#line 1250 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"

#line 1252 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"

#line 1254 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"














typedef struct tagAUXCAPSA {
    WORD        wMid;                
    WORD        wPid;                
    MMVERSION   vDriverVersion;      
    CHAR        szPname[32];
    WORD        wTechnology;         
    WORD        wReserved1;          
    DWORD       dwSupport;           
} AUXCAPSA, *PAUXCAPSA, *NPAUXCAPSA, *LPAUXCAPSA;
typedef struct tagAUXCAPSW {
    WORD        wMid;                
    WORD        wPid;                
    MMVERSION   vDriverVersion;      
    WCHAR       szPname[32];
    WORD        wTechnology;         
    WORD        wReserved1;          
    DWORD       dwSupport;           
} AUXCAPSW, *PAUXCAPSW, *NPAUXCAPSW, *LPAUXCAPSW;






typedef AUXCAPSA AUXCAPS;
typedef PAUXCAPSA PAUXCAPS;
typedef NPAUXCAPSA NPAUXCAPS;
typedef LPAUXCAPSA LPAUXCAPS;
#line 1297 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"










#line 1308 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"












__declspec(dllimport) UINT __stdcall auxGetNumDevs(void);


__declspec(dllimport) MMRESULT __stdcall auxGetDevCapsA(UINT uDeviceID, LPAUXCAPSA pac, UINT cbac);
__declspec(dllimport) MMRESULT __stdcall auxGetDevCapsW(UINT uDeviceID, LPAUXCAPSW pac, UINT cbac);




#line 1330 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"



#line 1334 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
__declspec(dllimport) MMRESULT __stdcall auxSetVolume(UINT uDeviceID, DWORD dwVolume);
__declspec(dllimport) MMRESULT __stdcall auxGetVolume(UINT uDeviceID, LPDWORD pdwVolume);



__declspec(dllimport) MMRESULT __stdcall auxOutMessage(UINT uDeviceID, UINT uMsg, DWORD dw1, DWORD dw2);


#line 1343 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
#line 1344 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"

#line 1346 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"

#line 1348 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"









struct HMIXEROBJ__ { int unused; }; typedef struct HMIXEROBJ__ *HMIXEROBJ;
typedef HMIXEROBJ  *LPHMIXEROBJ;

struct HMIXER__ { int unused; }; typedef struct HMIXER__ *HMIXER;
typedef HMIXER      *LPHMIXER;


























__declspec(dllimport) UINT __stdcall mixerGetNumDevs(void);



typedef struct tagMIXERCAPSA {
    WORD            wMid;                   
    WORD            wPid;                   
    MMVERSION       vDriverVersion;         
    CHAR            szPname[32];   
    DWORD           fdwSupport;             
    DWORD           cDestinations;          
} MIXERCAPSA, *PMIXERCAPSA, *LPMIXERCAPSA;
typedef struct tagMIXERCAPSW {
    WORD            wMid;                   
    WORD            wPid;                   
    MMVERSION       vDriverVersion;         
    WCHAR           szPname[32];   
    DWORD           fdwSupport;             
    DWORD           cDestinations;          
} MIXERCAPSW, *PMIXERCAPSW, *LPMIXERCAPSW;





typedef MIXERCAPSA MIXERCAPS;
typedef PMIXERCAPSA PMIXERCAPS;
typedef LPMIXERCAPSA LPMIXERCAPS;
#line 1417 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"










#line 1428 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"



__declspec(dllimport) MMRESULT __stdcall mixerGetDevCapsA(UINT uMxId, LPMIXERCAPSA pmxcaps, UINT cbmxcaps);
__declspec(dllimport) MMRESULT __stdcall mixerGetDevCapsW(UINT uMxId, LPMIXERCAPSW pmxcaps, UINT cbmxcaps);




#line 1438 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"



#line 1442 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"

__declspec(dllimport) MMRESULT __stdcall mixerOpen(LPHMIXER phmx, UINT uMxId, DWORD dwCallback, DWORD dwInstance, DWORD fdwOpen);

__declspec(dllimport) MMRESULT __stdcall mixerClose(HMIXER hmx);

__declspec(dllimport) DWORD __stdcall mixerMessage(HMIXER hmx, UINT uMsg, DWORD dwParam1, DWORD dwParam2);



typedef struct tagMIXERLINEA {
    DWORD       cbStruct;               
    DWORD       dwDestination;          
    DWORD       dwSource;               
    DWORD       dwLineID;               
    DWORD       fdwLine;                
    DWORD       dwUser;                 
    DWORD       dwComponentType;        
    DWORD       cChannels;              
    DWORD       cConnections;           
    DWORD       cControls;              
    CHAR        szShortName[16];
    CHAR        szName[64];
    struct {
	DWORD   dwType;                 
	DWORD   dwDeviceID;             
	WORD    wMid;                   
	WORD    wPid;                   
	MMVERSION vDriverVersion;       
	CHAR    szPname[32];   
    } Target;
} MIXERLINEA, *PMIXERLINEA, *LPMIXERLINEA;
typedef struct tagMIXERLINEW {
    DWORD       cbStruct;               
    DWORD       dwDestination;          
    DWORD       dwSource;               
    DWORD       dwLineID;               
    DWORD       fdwLine;                
    DWORD       dwUser;                 
    DWORD       dwComponentType;        
    DWORD       cChannels;              
    DWORD       cConnections;           
    DWORD       cControls;              
    WCHAR       szShortName[16];
    WCHAR       szName[64];
    struct {
	DWORD   dwType;                 
	DWORD   dwDeviceID;             
	WORD    wMid;                   
	WORD    wPid;                   
	MMVERSION vDriverVersion;       
	WCHAR   szPname[32];   
    } Target;
} MIXERLINEW, *PMIXERLINEW, *LPMIXERLINEW;





typedef MIXERLINEA MIXERLINE;
typedef PMIXERLINEA PMIXERLINE;
typedef LPMIXERLINEA LPMIXERLINE;
#line 1504 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
























#line 1529 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"






















































__declspec(dllimport) MMRESULT __stdcall mixerGetLineInfoA(HMIXEROBJ hmxobj, LPMIXERLINEA pmxl, DWORD fdwInfo);
__declspec(dllimport) MMRESULT __stdcall mixerGetLineInfoW(HMIXEROBJ hmxobj, LPMIXERLINEW pmxl, DWORD fdwInfo);




#line 1590 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"



#line 1594 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"









__declspec(dllimport) MMRESULT __stdcall mixerGetID(HMIXEROBJ hmxobj, UINT  *puMxId, DWORD fdwId);







typedef struct tagMIXERCONTROLA {
    DWORD           cbStruct;           
    DWORD           dwControlID;        
    DWORD           dwControlType;      
    DWORD           fdwControl;         
    DWORD           cMultipleItems;     
    CHAR            szShortName[16];
    CHAR            szName[64];
    union {
	struct {
	    LONG    lMinimum;           
	    LONG    lMaximum;           
	};
	struct {
	    DWORD   dwMinimum;          
	    DWORD   dwMaximum;          
	};
	DWORD       dwReserved[6];
    } Bounds;
    union {
	DWORD       cSteps;             
	DWORD       cbCustomData;       
	DWORD       dwReserved[6];      
    } Metrics;
} MIXERCONTROLA, *PMIXERCONTROLA, *LPMIXERCONTROLA;
typedef struct tagMIXERCONTROLW {
    DWORD           cbStruct;           
    DWORD           dwControlID;        
    DWORD           dwControlType;      
    DWORD           fdwControl;         
    DWORD           cMultipleItems;     
    WCHAR           szShortName[16];
    WCHAR           szName[64];
    union {
	struct {
	    LONG    lMinimum;           
	    LONG    lMaximum;           
	};
	struct {
	    DWORD   dwMinimum;          
	    DWORD   dwMaximum;          
	};
	DWORD       dwReserved[6];
    } Bounds;
    union {
	DWORD       cSteps;             
	DWORD       cbCustomData;       
	DWORD       dwReserved[6];      
    } Metrics;
} MIXERCONTROLW, *PMIXERCONTROLW, *LPMIXERCONTROLW;





typedef MIXERCONTROLA MIXERCONTROL;
typedef PMIXERCONTROLA PMIXERCONTROL;
typedef LPMIXERCONTROLA LPMIXERCONTROL;
#line 1670 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"



























#line 1698 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"




















































































typedef struct tagMIXERLINECONTROLSA {
    DWORD           cbStruct;       
    DWORD           dwLineID;       
    union {
	DWORD       dwControlID;    
	DWORD       dwControlType;  
    };
    DWORD           cControls;      
    DWORD           cbmxctrl;       
    LPMIXERCONTROLA pamxctrl;       
} MIXERLINECONTROLSA, *PMIXERLINECONTROLSA, *LPMIXERLINECONTROLSA;
typedef struct tagMIXERLINECONTROLSW {
    DWORD           cbStruct;       
    DWORD           dwLineID;       
    union {
	DWORD       dwControlID;    
	DWORD       dwControlType;  
    };
    DWORD           cControls;      
    DWORD           cbmxctrl;       
    LPMIXERCONTROLW pamxctrl;       
} MIXERLINECONTROLSW, *PMIXERLINECONTROLSW, *LPMIXERLINECONTROLSW;





typedef MIXERLINECONTROLSA MIXERLINECONTROLS;
typedef PMIXERLINECONTROLSA PMIXERLINECONTROLS;
typedef LPMIXERLINECONTROLSA LPMIXERLINECONTROLS;
#line 1813 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"













#line 1827 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"






__declspec(dllimport) MMRESULT __stdcall mixerGetLineControlsA(HMIXEROBJ hmxobj, LPMIXERLINECONTROLSA pmxlc, DWORD fdwControls);
__declspec(dllimport) MMRESULT __stdcall mixerGetLineControlsW(HMIXEROBJ hmxobj, LPMIXERLINECONTROLSW pmxlc, DWORD fdwControls);




#line 1840 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"



#line 1844 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"







typedef struct tMIXERCONTROLDETAILS {
    DWORD           cbStruct;       
    DWORD           dwControlID;    
    DWORD           cChannels;      
    union {
	HWND        hwndOwner;      
	DWORD       cMultipleItems; 
    };
    DWORD           cbDetails;      
    LPVOID          paDetails;      
} MIXERCONTROLDETAILS, *PMIXERCONTROLDETAILS,  *LPMIXERCONTROLDETAILS;







typedef struct tagMIXERCONTROLDETAILS_LISTTEXTA {
    DWORD           dwParam1;
    DWORD           dwParam2;
    CHAR            szName[64];
} MIXERCONTROLDETAILS_LISTTEXTA, *PMIXERCONTROLDETAILS_LISTTEXTA, *LPMIXERCONTROLDETAILS_LISTTEXTA;
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTW {
    DWORD           dwParam1;
    DWORD           dwParam2;
    WCHAR           szName[64];
} MIXERCONTROLDETAILS_LISTTEXTW, *PMIXERCONTROLDETAILS_LISTTEXTW, *LPMIXERCONTROLDETAILS_LISTTEXTW;





typedef MIXERCONTROLDETAILS_LISTTEXTA MIXERCONTROLDETAILS_LISTTEXT;
typedef PMIXERCONTROLDETAILS_LISTTEXTA PMIXERCONTROLDETAILS_LISTTEXT;
typedef LPMIXERCONTROLDETAILS_LISTTEXTA LPMIXERCONTROLDETAILS_LISTTEXT;
#line 1888 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"







#line 1896 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"





typedef struct tMIXERCONTROLDETAILS_BOOLEAN {
    LONG            fValue;
}       MIXERCONTROLDETAILS_BOOLEAN,
      *PMIXERCONTROLDETAILS_BOOLEAN,
  *LPMIXERCONTROLDETAILS_BOOLEAN;

typedef struct tMIXERCONTROLDETAILS_SIGNED {
    LONG            lValue;
}       MIXERCONTROLDETAILS_SIGNED,
      *PMIXERCONTROLDETAILS_SIGNED,
  *LPMIXERCONTROLDETAILS_SIGNED;

typedef struct tMIXERCONTROLDETAILS_UNSIGNED {
    DWORD           dwValue;
}       MIXERCONTROLDETAILS_UNSIGNED,
      *PMIXERCONTROLDETAILS_UNSIGNED,
  *LPMIXERCONTROLDETAILS_UNSIGNED;



__declspec(dllimport) MMRESULT __stdcall mixerGetControlDetailsA(HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails);
__declspec(dllimport) MMRESULT __stdcall mixerGetControlDetailsW(HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails);




#line 1928 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"



#line 1932 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"






__declspec(dllimport) MMRESULT __stdcall mixerSetControlDetails(HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails);






#line 1946 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
#line 1947 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"















typedef void (__stdcall TIMECALLBACK)(UINT uTimerID, UINT uMsg, DWORD dwUser, DWORD dw1, DWORD dw2);

typedef TIMECALLBACK  *LPTIMECALLBACK;









#line 1975 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"


typedef struct timecaps_tag {
    UINT    wPeriodMin;     
    UINT    wPeriodMax;     
} TIMECAPS, *PTIMECAPS,  *NPTIMECAPS,  *LPTIMECAPS;


__declspec(dllimport) MMRESULT __stdcall timeGetSystemTime(LPMMTIME pmmt, UINT cbmmt);
__declspec(dllimport) DWORD __stdcall timeGetTime(void);
__declspec(dllimport) MMRESULT __stdcall timeSetEvent(UINT uDelay, UINT uResolution,
    LPTIMECALLBACK fptc, DWORD dwUser, UINT fuEvent);
__declspec(dllimport) MMRESULT __stdcall timeKillEvent(UINT uTimerID);
__declspec(dllimport) MMRESULT __stdcall timeGetDevCaps(LPTIMECAPS ptc, UINT cbtc);
__declspec(dllimport) MMRESULT __stdcall timeBeginPeriod(UINT uPeriod);
__declspec(dllimport) MMRESULT __stdcall timeEndPeriod(UINT uPeriod);

#line 1993 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
#line 1994 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"









































































































typedef struct tagJOYCAPSA {
    WORD    wMid;                
    WORD    wPid;                
    CHAR    szPname[32];
    UINT    wXmin;               
    UINT    wXmax;               
    UINT    wYmin;               
    UINT    wYmax;               
    UINT    wZmin;               
    UINT    wZmax;               
    UINT    wNumButtons;         
    UINT    wPeriodMin;          
    UINT    wPeriodMax;          

    UINT    wRmin;               
    UINT    wRmax;               
    UINT    wUmin;               
    UINT    wUmax;               
    UINT    wVmin;               
    UINT    wVmax;               
    UINT    wCaps;	 	 
    UINT    wMaxAxes;	 	 
    UINT    wNumAxes;	 	 
    UINT    wMaxButtons;	 
    CHAR    szRegKey[32];
    CHAR    szOEMVxD[260]; 
#line 2126 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
} JOYCAPSA, *PJOYCAPSA, *NPJOYCAPSA, *LPJOYCAPSA;
typedef struct tagJOYCAPSW {
    WORD    wMid;                
    WORD    wPid;                
    WCHAR   szPname[32];
    UINT    wXmin;               
    UINT    wXmax;               
    UINT    wYmin;               
    UINT    wYmax;               
    UINT    wZmin;               
    UINT    wZmax;               
    UINT    wNumButtons;         
    UINT    wPeriodMin;          
    UINT    wPeriodMax;          

    UINT    wRmin;               
    UINT    wRmax;               
    UINT    wUmin;               
    UINT    wUmax;               
    UINT    wVmin;               
    UINT    wVmax;               
    UINT    wCaps;	 	 
    UINT    wMaxAxes;	 	 
    UINT    wNumAxes;	 	 
    UINT    wMaxButtons;	 
    WCHAR   szRegKey[32];
    WCHAR   szOEMVxD[260]; 
#line 2154 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
} JOYCAPSW, *PJOYCAPSW, *NPJOYCAPSW, *LPJOYCAPSW;






typedef JOYCAPSA JOYCAPS;
typedef PJOYCAPSA PJOYCAPS;
typedef NPJOYCAPSA NPJOYCAPS;
typedef LPJOYCAPSA LPJOYCAPS;
#line 2166 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"






























#line 2197 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"


typedef struct joyinfo_tag {
    UINT wXpos;                 
    UINT wYpos;                 
    UINT wZpos;                 
    UINT wButtons;              
} JOYINFO, *PJOYINFO,  *NPJOYINFO,  *LPJOYINFO;


typedef struct joyinfoex_tag {
    DWORD dwSize;		 
    DWORD dwFlags;		 
    DWORD dwXpos;                
    DWORD dwYpos;                
    DWORD dwZpos;                
    DWORD dwRpos;		 
    DWORD dwUpos;		 
    DWORD dwVpos;		 
    DWORD dwButtons;             
    DWORD dwButtonNumber;        
    DWORD dwPOV;                 
    DWORD dwReserved1;		 
    DWORD dwReserved2;		 
} JOYINFOEX, *PJOYINFOEX,  *NPJOYINFOEX,  *LPJOYINFOEX;
#line 2223 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"




__declspec(dllimport) UINT __stdcall joyGetNumDevs(void);


__declspec(dllimport) MMRESULT __stdcall joyGetDevCapsA(UINT uJoyID, LPJOYCAPSA pjc, UINT cbjc);
__declspec(dllimport) MMRESULT __stdcall joyGetDevCapsW(UINT uJoyID, LPJOYCAPSW pjc, UINT cbjc);




#line 2237 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"



#line 2241 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
__declspec(dllimport) MMRESULT __stdcall joyGetPos(UINT uJoyID, LPJOYINFO pji);


__declspec(dllimport) MMRESULT __stdcall joyGetPosEx(UINT uJoyID, LPJOYINFOEX pji);
#line 2246 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"

__declspec(dllimport) MMRESULT __stdcall joyGetThreshold(UINT uJoyID, LPUINT puThreshold);
__declspec(dllimport) MMRESULT __stdcall joyReleaseCapture(UINT uJoyID);
__declspec(dllimport) MMRESULT __stdcall joySetCapture(HWND hwnd, UINT uJoyID, UINT uPeriod,
    BOOL fChanged);
__declspec(dllimport) MMRESULT __stdcall joySetThreshold(UINT uJoyID, UINT uThreshold);

#line 2254 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"

#line 2256 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
































typedef DWORD           FOURCC;         
typedef char  *    HPSTR;          
struct HMMIO__ { int unused; }; typedef struct HMMIO__ *HMMIO;                  
typedef LRESULT (__stdcall MMIOPROC)(LPSTR lpmmioinfo, UINT uMsg,
	    LPARAM lParam1, LPARAM lParam2);
typedef MMIOPROC  *LPMMIOPROC;


typedef struct _MMIOINFO
{
	
	DWORD           dwFlags;        
	FOURCC          fccIOProc;      
	LPMMIOPROC      pIOProc;        
	UINT            wErrorRet;      
	HTASK           htask;          

	
	LONG            cchBuffer;      
	HPSTR           pchBuffer;      
	HPSTR           pchNext;        
	HPSTR           pchEndRead;     
	HPSTR           pchEndWrite;    
	LONG            lBufOffset;     

	
	LONG            lDiskOffset;    
	DWORD           adwInfo[3];     

	
	DWORD           dwReserved1;    
	DWORD           dwReserved2;    
	HMMIO           hmmio;          
} MMIOINFO, *PMMIOINFO,  *NPMMIOINFO,  *LPMMIOINFO;
typedef const MMIOINFO  *LPCMMIOINFO;


typedef struct _MMCKINFO
{
	FOURCC          ckid;           
	DWORD           cksize;         
	FOURCC          fccType;        
	DWORD           dwDataOffset;   
	DWORD           dwFlags;        
} MMCKINFO, *PMMCKINFO,  *NPMMCKINFO,  *LPMMCKINFO;
typedef const MMCKINFO *LPCMMCKINFO;




















































#line 2387 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
















#line 2404 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"










__declspec(dllimport) FOURCC __stdcall mmioStringToFOURCCA(LPCSTR sz, UINT uFlags);
__declspec(dllimport) FOURCC __stdcall mmioStringToFOURCCW(LPCWSTR sz, UINT uFlags);




#line 2421 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
__declspec(dllimport) LPMMIOPROC __stdcall mmioInstallIOProcA(FOURCC fccIOProc, LPMMIOPROC pIOProc, DWORD dwFlags);
__declspec(dllimport) LPMMIOPROC __stdcall mmioInstallIOProcW(FOURCC fccIOProc, LPMMIOPROC pIOProc, DWORD dwFlags);




#line 2428 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
__declspec(dllimport) HMMIO __stdcall mmioOpenA(LPSTR pszFileName, LPMMIOINFO pmmioinfo, DWORD fdwOpen);
__declspec(dllimport) HMMIO __stdcall mmioOpenW(LPWSTR pszFileName, LPMMIOINFO pmmioinfo, DWORD fdwOpen);




#line 2435 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
__declspec(dllimport) MMRESULT __stdcall mmioRenameA(LPCSTR pszFileName, LPCSTR pszNewFileName, LPCMMIOINFO pmmioinfo, DWORD fdwRename);
__declspec(dllimport) MMRESULT __stdcall mmioRenameW(LPCWSTR pszFileName, LPCWSTR pszNewFileName, LPCMMIOINFO pmmioinfo, DWORD fdwRename);




#line 2442 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"







#line 2450 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"

__declspec(dllimport) MMRESULT __stdcall mmioClose(HMMIO hmmio, UINT fuClose);
__declspec(dllimport) LONG __stdcall mmioRead(HMMIO hmmio, HPSTR pch, LONG cch);
__declspec(dllimport) LONG __stdcall mmioWrite(HMMIO hmmio, const char * pch, LONG cch);
__declspec(dllimport) LONG __stdcall mmioSeek(HMMIO hmmio, LONG lOffset, int iOrigin);
__declspec(dllimport) MMRESULT __stdcall mmioGetInfo(HMMIO hmmio, LPMMIOINFO pmmioinfo, UINT fuInfo);
__declspec(dllimport) MMRESULT __stdcall mmioSetInfo(HMMIO hmmio, LPCMMIOINFO pmmioinfo, UINT fuInfo);
__declspec(dllimport) MMRESULT __stdcall mmioSetBuffer(HMMIO hmmio, LPSTR pchBuffer, LONG cchBuffer,
    UINT fuBuffer);
__declspec(dllimport) MMRESULT __stdcall mmioFlush(HMMIO hmmio, UINT fuFlush);
__declspec(dllimport) MMRESULT __stdcall mmioAdvance(HMMIO hmmio, LPMMIOINFO pmmioinfo, UINT fuAdvance);
__declspec(dllimport) LRESULT __stdcall mmioSendMessage(HMMIO hmmio, UINT uMsg,
    LPARAM lParam1, LPARAM lParam2);
__declspec(dllimport) MMRESULT __stdcall mmioDescend(HMMIO hmmio, LPMMCKINFO pmmcki,
    const MMCKINFO * pmmckiParent, UINT fuDescend);
__declspec(dllimport) MMRESULT __stdcall mmioAscend(HMMIO hmmio, LPMMCKINFO pmmcki, UINT fuAscend);
__declspec(dllimport) MMRESULT __stdcall mmioCreateChunk(HMMIO hmmio, LPMMCKINFO pmmcki, UINT fuCreate);

#line 2469 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
#line 2470 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"











typedef DWORD   MCIERROR;       
#line 2483 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"



typedef UINT    MCIDEVICEID;    
#line 2488 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"

typedef UINT (__stdcall *YIELDPROC)(MCIDEVICEID mciId, DWORD dwYieldData);




__declspec(dllimport) MCIERROR __stdcall mciSendCommandA(MCIDEVICEID mciId, UINT uMsg, DWORD dwParam1, DWORD dwParam2);
__declspec(dllimport) MCIERROR __stdcall mciSendCommandW(MCIDEVICEID mciId, UINT uMsg, DWORD dwParam1, DWORD dwParam2);




#line 2501 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
__declspec(dllimport) MCIERROR  __stdcall mciSendStringA(LPCSTR lpstrCommand, LPSTR lpstrReturnString, UINT uReturnLength, HWND hwndCallback);
__declspec(dllimport) MCIERROR  __stdcall mciSendStringW(LPCWSTR lpstrCommand, LPWSTR lpstrReturnString, UINT uReturnLength, HWND hwndCallback);




#line 2508 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
__declspec(dllimport) MCIDEVICEID __stdcall mciGetDeviceIDA(LPCSTR pszDevice);
__declspec(dllimport) MCIDEVICEID __stdcall mciGetDeviceIDW(LPCWSTR pszDevice);




#line 2515 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
__declspec(dllimport) MCIDEVICEID __stdcall mciGetDeviceIDFromElementIDA(DWORD dwElementID, LPCSTR lpstrType );
__declspec(dllimport) MCIDEVICEID __stdcall mciGetDeviceIDFromElementIDW(DWORD dwElementID, LPCWSTR lpstrType );




#line 2522 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
__declspec(dllimport) BOOL __stdcall mciGetErrorStringA(MCIERROR mcierr, LPSTR pszText, UINT cchText);
__declspec(dllimport) BOOL __stdcall mciGetErrorStringW(MCIERROR mcierr, LPWSTR pszText, UINT cchText);




#line 2529 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"






#line 2536 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"

__declspec(dllimport) BOOL __stdcall mciSetYieldProc(MCIDEVICEID mciId, YIELDPROC fpYieldProc,
    DWORD dwYieldData);


__declspec(dllimport) HTASK __stdcall mciGetCreatorTask(MCIDEVICEID mciId);
__declspec(dllimport) YIELDPROC __stdcall mciGetYieldProc(MCIDEVICEID mciId, LPDWORD pdwYieldData);
#line 2544 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"



#line 2548 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"

































































































































































































































































































typedef struct tagMCI_GENERIC_PARMS {
    DWORD   dwCallback;
} MCI_GENERIC_PARMS, *PMCI_GENERIC_PARMS,  *LPMCI_GENERIC_PARMS;




typedef struct tagMCI_OPEN_PARMSA {
    DWORD   dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR     lpstrDeviceType;
    LPCSTR     lpstrElementName;
    LPCSTR     lpstrAlias;
} MCI_OPEN_PARMSA, *PMCI_OPEN_PARMSA, *LPMCI_OPEN_PARMSA;
typedef struct tagMCI_OPEN_PARMSW {
    DWORD   dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR    lpstrDeviceType;
    LPCWSTR    lpstrElementName;
    LPCWSTR    lpstrAlias;
} MCI_OPEN_PARMSW, *PMCI_OPEN_PARMSW, *LPMCI_OPEN_PARMSW;





typedef MCI_OPEN_PARMSA MCI_OPEN_PARMS;
typedef PMCI_OPEN_PARMSA PMCI_OPEN_PARMS;
typedef LPMCI_OPEN_PARMSA LPMCI_OPEN_PARMS;
#line 2867 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"










#line 2878 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"


typedef struct tagMCI_PLAY_PARMS {
    DWORD   dwCallback;
    DWORD   dwFrom;
    DWORD   dwTo;
} MCI_PLAY_PARMS, *PMCI_PLAY_PARMS,  *LPMCI_PLAY_PARMS;


typedef struct tagMCI_SEEK_PARMS {
    DWORD   dwCallback;
    DWORD   dwTo;
} MCI_SEEK_PARMS, *PMCI_SEEK_PARMS,  *LPMCI_SEEK_PARMS;


typedef struct tagMCI_STATUS_PARMS {
    DWORD   dwCallback;
    DWORD   dwReturn;
    DWORD   dwItem;
    DWORD   dwTrack;
} MCI_STATUS_PARMS, *PMCI_STATUS_PARMS,  * LPMCI_STATUS_PARMS;




typedef struct tagMCI_INFO_PARMSA {
    DWORD   dwCallback;
    LPSTR   lpstrReturn;
    DWORD   dwRetSize;
} MCI_INFO_PARMSA, * LPMCI_INFO_PARMSA;
typedef struct tagMCI_INFO_PARMSW {
    DWORD   dwCallback;
    LPWSTR  lpstrReturn;
    DWORD   dwRetSize;
} MCI_INFO_PARMSW, * LPMCI_INFO_PARMSW;




typedef MCI_INFO_PARMSA MCI_INFO_PARMS;
typedef LPMCI_INFO_PARMSA LPMCI_INFO_PARMS;
#line 2920 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"







#line 2928 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"


typedef struct tagMCI_GETDEVCAPS_PARMS {
    DWORD   dwCallback;
    DWORD   dwReturn;
    DWORD   dwItem;
} MCI_GETDEVCAPS_PARMS, *PMCI_GETDEVCAPS_PARMS,  * LPMCI_GETDEVCAPS_PARMS;




typedef struct tagMCI_SYSINFO_PARMSA {
    DWORD   dwCallback;
    LPSTR   lpstrReturn;
    DWORD   dwRetSize;
    DWORD   dwNumber;
    UINT    wDeviceType;
} MCI_SYSINFO_PARMSA, *PMCI_SYSINFO_PARMSA, * LPMCI_SYSINFO_PARMSA;
typedef struct tagMCI_SYSINFO_PARMSW {
    DWORD   dwCallback;
    LPWSTR  lpstrReturn;
    DWORD   dwRetSize;
    DWORD   dwNumber;
    UINT    wDeviceType;
} MCI_SYSINFO_PARMSW, *PMCI_SYSINFO_PARMSW, * LPMCI_SYSINFO_PARMSW;





typedef MCI_SYSINFO_PARMSA MCI_SYSINFO_PARMS;
typedef PMCI_SYSINFO_PARMSA PMCI_SYSINFO_PARMS;
typedef LPMCI_SYSINFO_PARMSA LPMCI_SYSINFO_PARMS;
#line 2962 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"









#line 2972 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"


typedef struct tagMCI_SET_PARMS {
    DWORD   dwCallback;
    DWORD   dwTimeFormat;
    DWORD   dwAudio;
} MCI_SET_PARMS, *PMCI_SET_PARMS,  *LPMCI_SET_PARMS;


typedef struct tagMCI_BREAK_PARMS {
    DWORD   dwCallback;

    int     nVirtKey;
    HWND    hwndBreak;





#line 2992 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
} MCI_BREAK_PARMS, *PMCI_BREAK_PARMS,  * LPMCI_BREAK_PARMS;




typedef struct tagMCI_SAVE_PARMSA {
    DWORD    dwCallback;
    LPCSTR    lpfilename;
} MCI_SAVE_PARMSA, *PMCI_SAVE_PARMSA, * LPMCI_SAVE_PARMSA;
typedef struct tagMCI_SAVE_PARMSW {
    DWORD    dwCallback;
    LPCWSTR   lpfilename;
} MCI_SAVE_PARMSW, *PMCI_SAVE_PARMSW, * LPMCI_SAVE_PARMSW;





typedef MCI_SAVE_PARMSA MCI_SAVE_PARMS;
typedef PMCI_SAVE_PARMSA PMCI_SAVE_PARMS;
typedef LPMCI_SAVE_PARMSA LPMCI_SAVE_PARMS;
#line 3014 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"






#line 3021 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"




typedef struct tagMCI_LOAD_PARMSA {
    DWORD    dwCallback;
    LPCSTR      lpfilename;
} MCI_LOAD_PARMSA, *PMCI_LOAD_PARMSA, * LPMCI_LOAD_PARMSA;
typedef struct tagMCI_LOAD_PARMSW {
    DWORD    dwCallback;
    LPCWSTR     lpfilename;
} MCI_LOAD_PARMSW, *PMCI_LOAD_PARMSW, * LPMCI_LOAD_PARMSW;





typedef MCI_LOAD_PARMSA MCI_LOAD_PARMS;
typedef PMCI_LOAD_PARMSA PMCI_LOAD_PARMS;
typedef LPMCI_LOAD_PARMSA LPMCI_LOAD_PARMS;
#line 3042 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"






#line 3049 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"


typedef struct tagMCI_RECORD_PARMS {
    DWORD   dwCallback;
    DWORD   dwFrom;
    DWORD   dwTo;
} MCI_RECORD_PARMS,  *LPMCI_RECORD_PARMS;





















































typedef struct tagMCI_VD_PLAY_PARMS {
    DWORD   dwCallback;
    DWORD   dwFrom;
    DWORD   dwTo;
    DWORD   dwSpeed;
} MCI_VD_PLAY_PARMS, *PMCI_VD_PLAY_PARMS,  *LPMCI_VD_PLAY_PARMS;


typedef struct tagMCI_VD_STEP_PARMS {
    DWORD   dwCallback;
    DWORD   dwFrames;
} MCI_VD_STEP_PARMS, *PMCI_VD_STEP_PARMS,  *LPMCI_VD_STEP_PARMS;




typedef struct tagMCI_VD_ESCAPE_PARMSA {
    DWORD   dwCallback;
    LPCSTR      lpstrCommand;
} MCI_VD_ESCAPE_PARMSA, *PMCI_VD_ESCAPE_PARMSA, *LPMCI_VD_ESCAPE_PARMSA;
typedef struct tagMCI_VD_ESCAPE_PARMSW {
    DWORD   dwCallback;
    LPCWSTR     lpstrCommand;
} MCI_VD_ESCAPE_PARMSW, *PMCI_VD_ESCAPE_PARMSW, *LPMCI_VD_ESCAPE_PARMSW;





typedef MCI_VD_ESCAPE_PARMSA MCI_VD_ESCAPE_PARMS;
typedef PMCI_VD_ESCAPE_PARMSA PMCI_VD_ESCAPE_PARMS;
typedef LPMCI_VD_ESCAPE_PARMSA LPMCI_VD_ESCAPE_PARMS;
#line 3142 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"






#line 3149 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"



















































typedef struct tagMCI_WAVE_OPEN_PARMSA {
    DWORD   dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR      lpstrDeviceType;
    LPCSTR      lpstrElementName;
    LPCSTR      lpstrAlias;
    DWORD   dwBufferSeconds;
} MCI_WAVE_OPEN_PARMSA, *PMCI_WAVE_OPEN_PARMSA, *LPMCI_WAVE_OPEN_PARMSA;
typedef struct tagMCI_WAVE_OPEN_PARMSW {
    DWORD   dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR     lpstrDeviceType;
    LPCWSTR     lpstrElementName;
    LPCWSTR     lpstrAlias;
    DWORD   dwBufferSeconds;
} MCI_WAVE_OPEN_PARMSW, *PMCI_WAVE_OPEN_PARMSW, *LPMCI_WAVE_OPEN_PARMSW;





typedef MCI_WAVE_OPEN_PARMSA MCI_WAVE_OPEN_PARMS;
typedef PMCI_WAVE_OPEN_PARMSA PMCI_WAVE_OPEN_PARMS;
typedef LPMCI_WAVE_OPEN_PARMSA LPMCI_WAVE_OPEN_PARMS;
#line 3225 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"











#line 3237 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"


typedef struct tagMCI_WAVE_DELETE_PARMS {
    DWORD   dwCallback;
    DWORD   dwFrom;
    DWORD   dwTo;
} MCI_WAVE_DELETE_PARMS, *PMCI_WAVE_DELETE_PARMS,  *LPMCI_WAVE_DELETE_PARMS;


typedef struct tagMCI_WAVE_SET_PARMS {
    DWORD   dwCallback;
    DWORD   dwTimeFormat;
    DWORD   dwAudio;

    UINT    wInput;
    UINT    wOutput;





#line 3259 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
    WORD    wFormatTag;
    WORD    wReserved2;
    WORD    nChannels;
    WORD    wReserved3;
    DWORD   nSamplesPerSec;
    DWORD   nAvgBytesPerSec;
    WORD    nBlockAlign;
    WORD    wReserved4;
    WORD    wBitsPerSample;
    WORD    wReserved5;
} MCI_WAVE_SET_PARMS, *PMCI_WAVE_SET_PARMS,  * LPMCI_WAVE_SET_PARMS;






































typedef struct tagMCI_SEQ_SET_PARMS {
    DWORD   dwCallback;
    DWORD   dwTimeFormat;
    DWORD   dwAudio;
    DWORD   dwTempo;
    DWORD   dwPort;
    DWORD   dwSlave;
    DWORD   dwMaster;
    DWORD   dwOffset;
} MCI_SEQ_SET_PARMS, *PMCI_SEQ_SET_PARMS,  * LPMCI_SEQ_SET_PARMS;




































































typedef struct tagMCI_ANIM_OPEN_PARMSA {
    DWORD   dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR      lpstrDeviceType;
    LPCSTR      lpstrElementName;
    LPCSTR      lpstrAlias;
    DWORD   dwStyle;
    HWND    hWndParent;
} MCI_ANIM_OPEN_PARMSA, *PMCI_ANIM_OPEN_PARMSA, *LPMCI_ANIM_OPEN_PARMSA;
typedef struct tagMCI_ANIM_OPEN_PARMSW {
    DWORD   dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR     lpstrDeviceType;
    LPCWSTR     lpstrElementName;
    LPCWSTR     lpstrAlias;
    DWORD   dwStyle;
    HWND    hWndParent;
} MCI_ANIM_OPEN_PARMSW, *PMCI_ANIM_OPEN_PARMSW, *LPMCI_ANIM_OPEN_PARMSW;





typedef MCI_ANIM_OPEN_PARMSA MCI_ANIM_OPEN_PARMS;
typedef PMCI_ANIM_OPEN_PARMSA PMCI_ANIM_OPEN_PARMS;
typedef LPMCI_ANIM_OPEN_PARMSA LPMCI_ANIM_OPEN_PARMS;
#line 3413 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"













#line 3427 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"


typedef struct tagMCI_ANIM_PLAY_PARMS {
    DWORD   dwCallback;
    DWORD   dwFrom;
    DWORD   dwTo;
    DWORD   dwSpeed;
} MCI_ANIM_PLAY_PARMS, *PMCI_ANIM_PLAY_PARMS,  *LPMCI_ANIM_PLAY_PARMS;


typedef struct tagMCI_ANIM_STEP_PARMS {
    DWORD   dwCallback;
    DWORD   dwFrames;
} MCI_ANIM_STEP_PARMS, *PMCI_ANIM_STEP_PARMS,  *LPMCI_ANIM_STEP_PARMS;




typedef struct tagMCI_ANIM_WINDOW_PARMSA {
    DWORD   dwCallback;
    HWND    hWnd;
    UINT    nCmdShow;
    LPCSTR     lpstrText;
} MCI_ANIM_WINDOW_PARMSA, *PMCI_ANIM_WINDOW_PARMSA, * LPMCI_ANIM_WINDOW_PARMSA;
typedef struct tagMCI_ANIM_WINDOW_PARMSW {
    DWORD   dwCallback;
    HWND    hWnd;
    UINT    nCmdShow;
    LPCWSTR    lpstrText;
} MCI_ANIM_WINDOW_PARMSW, *PMCI_ANIM_WINDOW_PARMSW, * LPMCI_ANIM_WINDOW_PARMSW;





typedef MCI_ANIM_WINDOW_PARMSA MCI_ANIM_WINDOW_PARMS;
typedef PMCI_ANIM_WINDOW_PARMSA PMCI_ANIM_WINDOW_PARMS;
typedef LPMCI_ANIM_WINDOW_PARMSA LPMCI_ANIM_WINDOW_PARMS;
#line 3466 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"










#line 3477 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"


typedef struct tagMCI_ANIM_RECT_PARMS {
    DWORD   dwCallback;




    RECT    rc;
#line 3487 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
} MCI_ANIM_RECT_PARMS;
typedef MCI_ANIM_RECT_PARMS * PMCI_ANIM_RECT_PARMS;
typedef MCI_ANIM_RECT_PARMS  * LPMCI_ANIM_RECT_PARMS;


typedef struct tagMCI_ANIM_UPDATE_PARMS {
    DWORD   dwCallback;
    RECT    rc;
    HDC     hDC;
} MCI_ANIM_UPDATE_PARMS, *PMCI_ANIM_UPDATE_PARMS,  * LPMCI_ANIM_UPDATE_PARMS;













































typedef struct tagMCI_OVLY_OPEN_PARMSA {
    DWORD   dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR      lpstrDeviceType;
    LPCSTR      lpstrElementName;
    LPCSTR      lpstrAlias;
    DWORD   dwStyle;
    HWND    hWndParent;
} MCI_OVLY_OPEN_PARMSA, *PMCI_OVLY_OPEN_PARMSA, *LPMCI_OVLY_OPEN_PARMSA;
typedef struct tagMCI_OVLY_OPEN_PARMSW {
    DWORD   dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR     lpstrDeviceType;
    LPCWSTR     lpstrElementName;
    LPCWSTR     lpstrAlias;
    DWORD   dwStyle;
    HWND    hWndParent;
} MCI_OVLY_OPEN_PARMSW, *PMCI_OVLY_OPEN_PARMSW, *LPMCI_OVLY_OPEN_PARMSW;





typedef MCI_OVLY_OPEN_PARMSA MCI_OVLY_OPEN_PARMS;
typedef PMCI_OVLY_OPEN_PARMSA PMCI_OVLY_OPEN_PARMS;
typedef LPMCI_OVLY_OPEN_PARMSA LPMCI_OVLY_OPEN_PARMS;
#line 3569 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"













#line 3583 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"




typedef struct tagMCI_OVLY_WINDOW_PARMSA {
    DWORD   dwCallback;
    HWND    hWnd;
    UINT    nCmdShow;
    LPCSTR      lpstrText;
} MCI_OVLY_WINDOW_PARMSA, *PMCI_OVLY_WINDOW_PARMSA, * LPMCI_OVLY_WINDOW_PARMSA;
typedef struct tagMCI_OVLY_WINDOW_PARMSW {
    DWORD   dwCallback;
    HWND    hWnd;
    UINT    nCmdShow;
    LPCWSTR     lpstrText;
} MCI_OVLY_WINDOW_PARMSW, *PMCI_OVLY_WINDOW_PARMSW, * LPMCI_OVLY_WINDOW_PARMSW;





typedef MCI_OVLY_WINDOW_PARMSA MCI_OVLY_WINDOW_PARMS;
typedef PMCI_OVLY_WINDOW_PARMSA PMCI_OVLY_WINDOW_PARMS;
typedef LPMCI_OVLY_WINDOW_PARMSA LPMCI_OVLY_WINDOW_PARMS;
#line 3608 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"









#line 3618 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"


typedef struct tagMCI_OVLY_RECT_PARMS {
    DWORD   dwCallback;




    RECT    rc;
#line 3628 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
} MCI_OVLY_RECT_PARMS, *PMCI_OVLY_RECT_PARMS,  * LPMCI_OVLY_RECT_PARMS;




typedef struct tagMCI_OVLY_SAVE_PARMSA {
    DWORD   dwCallback;
    LPCSTR      lpfilename;
    RECT    rc;
} MCI_OVLY_SAVE_PARMSA, *PMCI_OVLY_SAVE_PARMSA, * LPMCI_OVLY_SAVE_PARMSA;
typedef struct tagMCI_OVLY_SAVE_PARMSW {
    DWORD   dwCallback;
    LPCWSTR     lpfilename;
    RECT    rc;
} MCI_OVLY_SAVE_PARMSW, *PMCI_OVLY_SAVE_PARMSW, * LPMCI_OVLY_SAVE_PARMSW;





typedef MCI_OVLY_SAVE_PARMSA MCI_OVLY_SAVE_PARMS;
typedef PMCI_OVLY_SAVE_PARMSA PMCI_OVLY_SAVE_PARMS;
typedef LPMCI_OVLY_SAVE_PARMSA LPMCI_OVLY_SAVE_PARMS;
#line 3652 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"






#line 3659 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"




typedef struct tagMCI_OVLY_LOAD_PARMSA {
    DWORD   dwCallback;
    LPCSTR      lpfilename;
    RECT    rc;
} MCI_OVLY_LOAD_PARMSA, *PMCI_OVLY_LOAD_PARMSA, * LPMCI_OVLY_LOAD_PARMSA;
typedef struct tagMCI_OVLY_LOAD_PARMSW {
    DWORD   dwCallback;
    LPCWSTR     lpfilename;
    RECT    rc;
} MCI_OVLY_LOAD_PARMSW, *PMCI_OVLY_LOAD_PARMSW, * LPMCI_OVLY_LOAD_PARMSW;





typedef MCI_OVLY_LOAD_PARMSA MCI_OVLY_LOAD_PARMS;
typedef PMCI_OVLY_LOAD_PARMSA PMCI_OVLY_LOAD_PARMS;
typedef LPMCI_OVLY_LOAD_PARMSA LPMCI_OVLY_LOAD_PARMS;
#line 3682 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"






#line 3689 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"

#line 3691 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
#line 3692 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"








    

    
#line 3704 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"



























}                       
#line 3733 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"


#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"


#line 36 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"
#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"
#line 3736 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"




#line 3741 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"

#line 3743 "c:\\programme\\microsoft visual studio\\vc98\\include\\mmsystem.h"
#line 193 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\nb30.h"



















extern "C" {
#line 22 "c:\\programme\\microsoft visual studio\\vc98\\include\\nb30.h"














typedef struct _NCB {
    UCHAR   ncb_command;            
    UCHAR   ncb_retcode;            
    UCHAR   ncb_lsn;                
    UCHAR   ncb_num;                
    PUCHAR  ncb_buffer;             
    WORD    ncb_length;             
    UCHAR   ncb_callname[16]; 
    UCHAR   ncb_name[16];     
    UCHAR   ncb_rto;                
    UCHAR   ncb_sto;                
    void (__stdcall *ncb_post)( struct _NCB * ); 
    UCHAR   ncb_lana_num;           
    UCHAR   ncb_cmd_cplt;           
    UCHAR   ncb_reserve[10];        
    HANDLE  ncb_event;              
                                    
                                    
                                    
} NCB, *PNCB;






typedef struct _ADAPTER_STATUS {
    UCHAR   adapter_address[6];
    UCHAR   rev_major;
    UCHAR   reserved0;
    UCHAR   adapter_type;
    UCHAR   rev_minor;
    WORD    duration;
    WORD    frmr_recv;
    WORD    frmr_xmit;

    WORD    iframe_recv_err;

    WORD    xmit_aborts;
    DWORD   xmit_success;
    DWORD   recv_success;

    WORD    iframe_xmit_err;

    WORD    recv_buff_unavail;
    WORD    t1_timeouts;
    WORD    ti_timeouts;
    DWORD   reserved1;
    WORD    free_ncbs;
    WORD    max_cfg_ncbs;
    WORD    max_ncbs;
    WORD    xmit_buf_unavail;
    WORD    max_dgram_size;
    WORD    pending_sess;
    WORD    max_cfg_sess;
    WORD    max_sess;
    WORD    max_sess_pkt_size;
    WORD    name_count;
} ADAPTER_STATUS, *PADAPTER_STATUS;

typedef struct _NAME_BUFFER {
    UCHAR   name[16];
    UCHAR   name_num;
    UCHAR   name_flags;
} NAME_BUFFER, *PNAME_BUFFER;





















typedef struct _SESSION_HEADER {
    UCHAR   sess_name;
    UCHAR   num_sess;
    UCHAR   rcv_dg_outstanding;
    UCHAR   rcv_any_outstanding;
} SESSION_HEADER, *PSESSION_HEADER;

typedef struct _SESSION_BUFFER {
    UCHAR   lsn;
    UCHAR   state;
    UCHAR   local_name[16];
    UCHAR   remote_name[16];
    UCHAR   rcvs_outstanding;
    UCHAR   sends_outstanding;
} SESSION_BUFFER, *PSESSION_BUFFER;

















typedef struct _LANA_ENUM {
    UCHAR   length;         
    UCHAR   lana[254+1];
} LANA_ENUM, *PLANA_ENUM;






typedef struct _FIND_NAME_HEADER {
    WORD    node_count;
    UCHAR   reserved;
    UCHAR   unique_group;
} FIND_NAME_HEADER, *PFIND_NAME_HEADER;

typedef struct _FIND_NAME_BUFFER {
    UCHAR   length;
    UCHAR   access_control;
    UCHAR   frame_control;
    UCHAR   destination_addr[6];
    UCHAR   source_addr[6];
    UCHAR   routing_info[18];
} FIND_NAME_BUFFER, *PFIND_NAME_BUFFER;






typedef struct _ACTION_HEADER {
    ULONG   transport_id;
    USHORT  action_code;
    USHORT  reserved;
} ACTION_HEADER, *PACTION_HEADER;




















































                                















































UCHAR
__stdcall
Netbios(
    PNCB pncb
    );











}
#line 307 "c:\\programme\\microsoft visual studio\\vc98\\include\\nb30.h"

#line 309 "c:\\programme\\microsoft visual studio\\vc98\\include\\nb30.h"
#line 194 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"
















#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"





extern "C" {
#line 25 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"














#line 40 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"



#line 44 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"






#line 51 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"

typedef void * I_RPC_HANDLE;
typedef long RPC_STATUS;



#line 58 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"



















#line 78 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"








#line 87 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"





#line 93 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"





#line 99 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"





#line 105 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"



























#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"


















extern "C" {
#line 21 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"









typedef I_RPC_HANDLE RPC_BINDING_HANDLE;
typedef RPC_BINDING_HANDLE handle_t;















typedef GUID UUID;


#line 51 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"
#line 52 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"

typedef struct _RPC_BINDING_VECTOR
{
    unsigned long Count;
    RPC_BINDING_HANDLE BindingH[1];
} RPC_BINDING_VECTOR;


#line 61 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"

typedef struct _UUID_VECTOR
{
  unsigned long Count;
  UUID *Uuid[1];
} UUID_VECTOR;


#line 70 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"

typedef void  * RPC_IF_HANDLE;



typedef struct _RPC_IF_ID
{
    UUID Uuid;
    unsigned short VersMajor;
    unsigned short VersMinor;
} RPC_IF_ID;
#line 82 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"














































typedef struct _RPC_PROTSEQ_VECTORA
{
    unsigned int Count;
    unsigned char  * Protseq[1];
} RPC_PROTSEQ_VECTORA;

typedef struct _RPC_PROTSEQ_VECTORW
{
    unsigned int Count;
    unsigned short  * Protseq[1];
} RPC_PROTSEQ_VECTORW;





#line 145 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"









#line 155 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"
typedef struct _RPC_POLICY {
    unsigned int Length ;
    unsigned long EndpointFlags ;
    unsigned long NICFlags ;
    } RPC_POLICY,   *PRPC_POLICY ;

typedef void __stdcall
RPC_OBJECT_INQ_FN (
     UUID  * ObjectUuid,
     UUID  * TypeUuid,
     RPC_STATUS  * Status
    );

typedef RPC_STATUS __stdcall
RPC_IF_CALLBACK_FN (
     RPC_IF_HANDLE  InterfaceUuid,
     void *Context
    ) ;



typedef struct
{
    unsigned int Count;
    unsigned long Stats[1];
} RPC_STATS_VECTOR;






typedef struct
{
  unsigned long Count;
  RPC_IF_ID  * IfId[1];
} RPC_IF_ID_VECTOR;


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingCopy (
     RPC_BINDING_HANDLE SourceBinding,
     RPC_BINDING_HANDLE  * DestinationBinding
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingFree (
      RPC_BINDING_HANDLE  * Binding
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingSetOption(  RPC_BINDING_HANDLE hBinding,
                      unsigned long      option,
                      unsigned long      optionValue );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqOption(   RPC_BINDING_HANDLE hBinding,
                       unsigned long      option,
                      unsigned long     *pOptionValue );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingFromStringBindingA (
     unsigned char  * StringBinding,
     RPC_BINDING_HANDLE  * Binding
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingFromStringBindingW (
     unsigned short  * StringBinding,
     RPC_BINDING_HANDLE  * Binding
    );





#line 251 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"











#line 263 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqObject (
     RPC_BINDING_HANDLE Binding,
     UUID  * ObjectUuid
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingReset (
     RPC_BINDING_HANDLE Binding
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingSetObject (
     RPC_BINDING_HANDLE Binding,
     UUID  * ObjectUuid
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtInqDefaultProtectLevel(
      unsigned long AuthnSvc,
     unsigned long  *AuthnLevel
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingToStringBindingA (
     RPC_BINDING_HANDLE Binding,
     unsigned char  *  * StringBinding
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingToStringBindingW (
     RPC_BINDING_HANDLE Binding,
     unsigned short  *  * StringBinding
    );





#line 327 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"











#line 339 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingVectorFree (
      RPC_BINDING_VECTOR  *  * BindingVector
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcStringBindingComposeA (
     unsigned char  * ObjUuid ,
     unsigned char  * Protseq ,
     unsigned char  * NetworkAddr ,
     unsigned char  * Endpoint ,
     unsigned char  * Options ,
     unsigned char  *  * StringBinding 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcStringBindingComposeW (
     unsigned short  * ObjUuid ,
     unsigned short  * Protseq ,
     unsigned short  * NetworkAddr ,
     unsigned short  * Endpoint ,
     unsigned short  * Options ,
     unsigned short  *  * StringBinding 
    );





#line 381 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"















#line 397 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcStringBindingParseA (
     unsigned char  * StringBinding,
     unsigned char  *  * ObjUuid ,
     unsigned char  *  * Protseq ,
     unsigned char  *  * NetworkAddr ,
     unsigned char  *  * Endpoint ,
     unsigned char  *  * NetworkOptions 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcStringBindingParseW (
     unsigned short  * StringBinding,
     unsigned short  *  * ObjUuid ,
     unsigned short  *  * Protseq ,
     unsigned short  *  * NetworkAddr ,
     unsigned short  *  * Endpoint ,
     unsigned short  *  * NetworkOptions 
    );





#line 431 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"















#line 447 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcStringFreeA (
      unsigned char  *  * String
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcStringFreeW (
      unsigned short  *  * String
    );





#line 471 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"










#line 482 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcIfInqId (
     RPC_IF_HANDLE RpcIfHandle,
     RPC_IF_ID  * RpcIfId
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcNetworkIsProtseqValidA (
     unsigned char  * Protseq
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcNetworkIsProtseqValidW (
     unsigned short  * Protseq
    );





#line 515 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"










#line 526 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtInqComTimeout (
     RPC_BINDING_HANDLE Binding,
     unsigned int  * Timeout
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtSetComTimeout (
     RPC_BINDING_HANDLE Binding,
     unsigned int Timeout
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtSetCancelTimeout(
    long Timeout
    );






__declspec(dllimport)
RPC_STATUS
__stdcall
RpcNetworkInqProtseqsA (
     RPC_PROTSEQ_VECTORA  *  * ProtseqVector
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcNetworkInqProtseqsW (
     RPC_PROTSEQ_VECTORW  *  * ProtseqVector
    );





#line 577 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"










#line 588 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcObjectInqType (
     UUID  * ObjUuid,
     UUID  * TypeUuid 
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcObjectSetInqFn (
     RPC_OBJECT_INQ_FN  * InquiryFn
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcObjectSetType (
     UUID  * ObjUuid,
     UUID  * TypeUuid 
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcProtseqVectorFreeA (
      RPC_PROTSEQ_VECTORA  *  * ProtseqVector
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcProtseqVectorFreeW (
      RPC_PROTSEQ_VECTORW  *  * ProtseqVector
    );





#line 638 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"










#line 649 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqBindings (
     RPC_BINDING_VECTOR  *  * BindingVector
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqIf (
     RPC_IF_HANDLE IfSpec,
     UUID  * MgrTypeUuid, 
     void  *  * MgrEpv
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerListen (
     unsigned int MinimumCallThreads,
     unsigned int MaxCalls,
     unsigned int DontWait
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerRegisterIf (
     RPC_IF_HANDLE IfSpec,
     UUID  * MgrTypeUuid ,
     void  * MgrEpv 
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerRegisterIfEx (
     RPC_IF_HANDLE IfSpec,
     UUID  * MgrTypeUuid,
     void  * MgrEpv,
     unsigned int Flags,
     unsigned int MaxCalls,
     RPC_IF_CALLBACK_FN  *IfCallback
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUnregisterIf (
     RPC_IF_HANDLE IfSpec,
     UUID  * MgrTypeUuid, 
     unsigned int WaitForCallsToComplete
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseAllProtseqs (
     unsigned int MaxCalls,
     void  * SecurityDescriptor 
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseAllProtseqsEx (
     unsigned int MaxCalls,
     void  * SecurityDescriptor,
     PRPC_POLICY Policy
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseAllProtseqsIf (
     unsigned int MaxCalls,
     RPC_IF_HANDLE IfSpec,
     void  * SecurityDescriptor 
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseAllProtseqsIfEx (
     unsigned int MaxCalls,
     RPC_IF_HANDLE IfSpec,
     void  * SecurityDescriptor,
     PRPC_POLICY Policy
    );






__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqA (
     unsigned char  * Protseq,
     unsigned int MaxCalls,
     void  * SecurityDescriptor 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqExA (
     unsigned char  * Protseq,
     unsigned int MaxCalls,
     void  * SecurityDescriptor,
     PRPC_POLICY Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqW (
     unsigned short  * Protseq,
     unsigned int MaxCalls,
     void  * SecurityDescriptor 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqExW (
     unsigned short  * Protseq,
     unsigned int MaxCalls,
     void  * SecurityDescriptor,
     PRPC_POLICY Policy
    );







#line 801 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"






















#line 824 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqEpA (
     unsigned char  * Protseq,
     unsigned int MaxCalls,
     unsigned char  * Endpoint,
     void  * SecurityDescriptor 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqEpExA (
     unsigned char  * Protseq,
     unsigned int MaxCalls,
     unsigned char  * Endpoint,
     void  * SecurityDescriptor,
     PRPC_POLICY Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqEpW (
     unsigned short  * Protseq,
     unsigned int MaxCalls,
     unsigned short  * Endpoint,
     void  * SecurityDescriptor 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqEpExW (
     unsigned short  * Protseq,
     unsigned int MaxCalls,
     unsigned short  * Endpoint,
     void  * SecurityDescriptor,
     PRPC_POLICY Policy
    );







#line 878 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"
























#line 903 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqIfA (
     unsigned char  * Protseq,
     unsigned int MaxCalls,
     RPC_IF_HANDLE IfSpec,
     void  * SecurityDescriptor 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqIfExA (
     unsigned char  * Protseq,
     unsigned int MaxCalls,
     RPC_IF_HANDLE IfSpec,
     void  * SecurityDescriptor,
     PRPC_POLICY Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqIfW (
     unsigned short  * Protseq,
     unsigned int MaxCalls,
     RPC_IF_HANDLE IfSpec,
     void  * SecurityDescriptor 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqIfExW (
     unsigned short  * Protseq,
     unsigned int MaxCalls,
     RPC_IF_HANDLE IfSpec,
     void  * SecurityDescriptor,
     PRPC_POLICY Policy
    );







#line 957 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"
























#line 982 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtStatsVectorFree (
     RPC_STATS_VECTOR ** StatsVector
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtInqStats (
     RPC_BINDING_HANDLE Binding,
     RPC_STATS_VECTOR ** Statistics
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtIsServerListening (
     RPC_BINDING_HANDLE Binding
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtStopServerListening (
     RPC_BINDING_HANDLE Binding
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtWaitServerListen (
    void
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtSetServerStackSize (
     unsigned long ThreadStackSize
    );


__declspec(dllimport)
void
__stdcall
RpcSsDontSerializeContext (
    void
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtEnableIdleCleanup (
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtInqIfIds (
     RPC_BINDING_HANDLE Binding,
     RPC_IF_ID_VECTOR  *  * IfIdVector
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcIfIdVectorFree (
      RPC_IF_ID_VECTOR  *  * IfIdVector
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtInqServerPrincNameA (
     RPC_BINDING_HANDLE Binding,
     unsigned long AuthnSvc,
     unsigned char  *  * ServerPrincName
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtInqServerPrincNameW (
     RPC_BINDING_HANDLE Binding,
     unsigned long AuthnSvc,
     unsigned short  *  * ServerPrincName
    );





#line 1088 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"












#line 1101 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqDefaultPrincNameA (
     unsigned long AuthnSvc,
     unsigned char  *  * PrincName
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqDefaultPrincNameW (
     unsigned long AuthnSvc,
     unsigned short  *  * PrincName
    );





#line 1125 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"











#line 1137 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcEpResolveBinding (
     RPC_BINDING_HANDLE Binding,
     RPC_IF_HANDLE IfSpec
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcNsBindingInqEntryNameA (
     RPC_BINDING_HANDLE Binding,
     unsigned long EntryNameSyntax,
     unsigned char  *  * EntryName
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcNsBindingInqEntryNameW (
     RPC_BINDING_HANDLE Binding,
     unsigned long EntryNameSyntax,
     unsigned short  *  * EntryName
    );





#line 1174 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"












#line 1187 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"

typedef void  * RPC_AUTH_IDENTITY_HANDLE;
typedef void  * RPC_AUTHZ_HANDLE;









































typedef struct _RPC_SECURITY_QOS {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
} RPC_SECURITY_QOS, *PRPC_SECURITY_QOS;








#line 1246 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"





typedef struct _SEC_WINNT_AUTH_IDENTITY_W {
  unsigned short  *User;
  unsigned long UserLength;
  unsigned short  *Domain;
  unsigned long DomainLength;
  unsigned short  *Password;
  unsigned long PasswordLength;
  unsigned long Flags;
} SEC_WINNT_AUTH_IDENTITY_W, *PSEC_WINNT_AUTH_IDENTITY_W;

typedef struct _SEC_WINNT_AUTH_IDENTITY_A {
  unsigned char  *User;
  unsigned long UserLength;
  unsigned char  *Domain;
  unsigned long DomainLength;
  unsigned char  *Password;
  unsigned long PasswordLength;
  unsigned long Flags;
} SEC_WINNT_AUTH_IDENTITY_A, *PSEC_WINNT_AUTH_IDENTITY_A;










#line 1281 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"
#line 1282 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"







__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthClientA (
     RPC_BINDING_HANDLE ClientBinding, 
     RPC_AUTHZ_HANDLE  * Privs,
     unsigned char  *  * ServerPrincName, 
     unsigned long  * AuthnLevel, 
     unsigned long  * AuthnSvc, 
     unsigned long  * AuthzSvc 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthClientW (
     RPC_BINDING_HANDLE ClientBinding, 
     RPC_AUTHZ_HANDLE  * Privs,
     unsigned short  *  * ServerPrincName, 
     unsigned long  * AuthnLevel, 
     unsigned long  * AuthnSvc, 
     unsigned long  * AuthzSvc 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthInfoA (
     RPC_BINDING_HANDLE Binding,
     unsigned char  *  * ServerPrincName, 
     unsigned long  * AuthnLevel, 
     unsigned long  * AuthnSvc, 
     RPC_AUTH_IDENTITY_HANDLE  * AuthIdentity, 
     unsigned long  * AuthzSvc 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthInfoW (
     RPC_BINDING_HANDLE Binding,
     unsigned short  *  * ServerPrincName, 
     unsigned long  * AuthnLevel, 
     unsigned long  * AuthnSvc, 
     RPC_AUTH_IDENTITY_HANDLE  * AuthIdentity, 
     unsigned long  * AuthzSvc 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingSetAuthInfoA (
     RPC_BINDING_HANDLE Binding,
     unsigned char  * ServerPrincName,
     unsigned long AuthnLevel,
     unsigned long AuthnSvc,
     RPC_AUTH_IDENTITY_HANDLE AuthIdentity, 
     unsigned long AuthzSvc
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingSetAuthInfoExA (
     RPC_BINDING_HANDLE Binding,
     unsigned char  * ServerPrincName,
     unsigned long AuthnLevel,
     unsigned long AuthnSvc,
     RPC_AUTH_IDENTITY_HANDLE AuthIdentity, 
     unsigned long AuthzSvc,
     RPC_SECURITY_QOS *SecurityQos 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingSetAuthInfoW (
     RPC_BINDING_HANDLE Binding,
     unsigned short  * ServerPrincName,
     unsigned long AuthnLevel,
     unsigned long AuthnSvc,
     RPC_AUTH_IDENTITY_HANDLE AuthIdentity, 
     unsigned long AuthzSvc
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingSetAuthInfoExW (
     RPC_BINDING_HANDLE Binding,
     unsigned short  * ServerPrincName,
     unsigned long AuthnLevel,
     unsigned long AuthnSvc,
     RPC_AUTH_IDENTITY_HANDLE AuthIdentity, 
     unsigned long AuthzSvc, 
     RPC_SECURITY_QOS *SecurityQOS
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthInfoExA (
     RPC_BINDING_HANDLE Binding,
     unsigned char  *  * ServerPrincName, 
     unsigned long  * AuthnLevel, 
     unsigned long  * AuthnSvc, 
     RPC_AUTH_IDENTITY_HANDLE  * AuthIdentity, 
     unsigned long  * AuthzSvc, 
      unsigned long RpcQosVersion,
     RPC_SECURITY_QOS *SecurityQOS
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthInfoExW (
     RPC_BINDING_HANDLE Binding,
     unsigned short  *  * ServerPrincName, 
     unsigned long  * AuthnLevel, 
     unsigned long  * AuthnSvc, 
     RPC_AUTH_IDENTITY_HANDLE  * AuthIdentity, 
     unsigned long  * AuthzSvc ,
      unsigned long RpcQosVersion,
     RPC_SECURITY_QOS *SecurityQOS
    );

typedef void
(__stdcall * RPC_AUTH_KEY_RETRIEVAL_FN) (
     void  * Arg,
     unsigned short  * ServerPrincName,
     unsigned long KeyVer,
     void  *  * Key,
     RPC_STATUS  * Status
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerRegisterAuthInfoA (
     unsigned char  * ServerPrincName,
     unsigned long AuthnSvc,
     RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn ,
     void  * Arg 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerRegisterAuthInfoW (
     unsigned short  * ServerPrincName,
     unsigned long AuthnSvc,
     RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn ,
     void  * Arg 
    );















#line 1459 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"


























































#line 1518 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"

typedef struct {
    unsigned char  * UserName;
    unsigned char  * ComputerName;
    unsigned short Privilege;
    unsigned long AuthFlags;
} RPC_CLIENT_INFORMATION1,  * PRPC_CLIENT_INFORMATION1;

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingServerFromClient (
     RPC_BINDING_HANDLE ClientBinding,
     RPC_BINDING_HANDLE  * ServerBinding
    );

__declspec(dllimport)
void
__stdcall
RpcRaiseException (
     RPC_STATUS exception
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcTestCancel(
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerTestCancel (
     RPC_BINDING_HANDLE BindingHandle 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcCancelThread(
     void * Thread
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
UuidCreate (
     UUID  * Uuid
    );




__declspec(dllimport)
RPC_STATUS
__stdcall
UuidToStringA (
     UUID  * Uuid,
     unsigned char  *  * StringUuid
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
UuidFromStringA (
     unsigned char  * StringUuid,
     UUID  * Uuid
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
UuidToStringW (
     UUID  * Uuid,
     unsigned short  *  * StringUuid
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
UuidFromStringW (
     unsigned short  * StringUuid,
     UUID  * Uuid
    );







#line 1614 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"





















#line 1636 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"

__declspec(dllimport)
signed int
__stdcall
UuidCompare (
     UUID  * Uuid1,
     UUID  * Uuid2,
     RPC_STATUS  * Status
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
UuidCreateNil (
     UUID  * NilUuid
    );

__declspec(dllimport)
int
__stdcall
UuidEqual (
     UUID  * Uuid1,
     UUID  * Uuid2,
     RPC_STATUS  * Status
    );

__declspec(dllimport)
unsigned short
__stdcall
UuidHash (
     UUID  * Uuid,
     RPC_STATUS  * Status
    );

__declspec(dllimport)
int
__stdcall
UuidIsNil (
     UUID  * Uuid,
     RPC_STATUS  * Status
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcEpRegisterNoReplaceA (
     RPC_IF_HANDLE IfSpec,
     RPC_BINDING_VECTOR * BindingVector,
     UUID_VECTOR * UuidVector ,
     unsigned char * Annotation
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcEpRegisterNoReplaceW (
     RPC_IF_HANDLE IfSpec,
     RPC_BINDING_VECTOR * BindingVector,
     UUID_VECTOR * UuidVector ,
     unsigned short  * Annotation
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcEpRegisterA (
     RPC_IF_HANDLE IfSpec,
     RPC_BINDING_VECTOR * BindingVector,
     UUID_VECTOR * UuidVector ,
     unsigned char * Annotation
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcEpRegisterW (
     RPC_IF_HANDLE IfSpec,
     RPC_BINDING_VECTOR * BindingVector,
     UUID_VECTOR * UuidVector ,
     unsigned short * Annotation
    );







#line 1727 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"























#line 1751 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcEpUnregister(
     RPC_IF_HANDLE IfSpec,
     RPC_BINDING_VECTOR * BindingVector,
     UUID_VECTOR * UuidVector
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
DceErrorInqTextA (
     RPC_STATUS RpcStatus,
     unsigned char  * ErrorText
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
DceErrorInqTextW (
     RPC_STATUS RpcStatus,
     unsigned short  * ErrorText
    );





#line 1785 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"











#line 1797 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"



typedef I_RPC_HANDLE * RPC_EP_INQ_HANDLE;












__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtEpEltInqBegin (
     RPC_BINDING_HANDLE EpBinding ,
     unsigned long InquiryType,
     RPC_IF_ID  * IfId ,
     unsigned long VersOption ,
     UUID  * ObjectUuid ,
     RPC_EP_INQ_HANDLE  * InquiryContext
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtEpEltInqDone (
      RPC_EP_INQ_HANDLE  * InquiryContext
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtEpEltInqNextA (
     RPC_EP_INQ_HANDLE InquiryContext,
     RPC_IF_ID  * IfId,
     RPC_BINDING_HANDLE  * Binding ,
     UUID  * ObjectUuid ,
     unsigned char  *  * Annotation 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtEpEltInqNextW (
     RPC_EP_INQ_HANDLE InquiryContext,
     RPC_IF_ID  * IfId,
     RPC_BINDING_HANDLE  * Binding ,
     UUID  * ObjectUuid ,
     unsigned short  *  * Annotation 
    );





#line 1861 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"













#line 1875 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtEpUnregister (
     RPC_BINDING_HANDLE EpBinding ,
     RPC_IF_ID  * IfId,
     RPC_BINDING_HANDLE Binding,
     UUID  * ObjectUuid 
    );

typedef int
(__stdcall * RPC_MGMT_AUTHORIZATION_FN) (
     RPC_BINDING_HANDLE ClientBinding,
     unsigned long RequestedMgmtOperation,
     RPC_STATUS  * Status
    );







__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtSetAuthorizationFn (
     RPC_MGMT_AUTHORIZATION_FN AuthorizationFn
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtInqParameter (
     unsigned Parameter,
     unsigned long  * Value
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtSetParameter (
     unsigned Parameter,
     unsigned long Value
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtBindingInqParameter (
     RPC_BINDING_HANDLE Handle,
     unsigned Parameter,
     unsigned long  * Value
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtBindingSetParameter (
     RPC_BINDING_HANDLE Handle,
     unsigned Parameter,
     unsigned long Value
    );




#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdcep.h"























#line 25 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdcep.h"


extern "C" {
#line 29 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdcep.h"

typedef struct _RPC_VERSION {
    unsigned short MajorVersion;
    unsigned short MinorVersion;
} RPC_VERSION;

typedef struct _RPC_SYNTAX_IDENTIFIER {
    GUID SyntaxGUID;
    RPC_VERSION SyntaxVersion;
} RPC_SYNTAX_IDENTIFIER,  * PRPC_SYNTAX_IDENTIFIER;

typedef struct _RPC_MESSAGE
{
    RPC_BINDING_HANDLE Handle;
    unsigned long DataRepresentation;
    void  * Buffer;
    unsigned int BufferLength;
    unsigned int ProcNum;
    PRPC_SYNTAX_IDENTIFIER TransferSyntax;
    void  * RpcInterfaceInformation;
    void  * ReservedForRuntime;
    void  * ManagerEpv;
    void  * ImportContext;
    unsigned long RpcFlags;
} RPC_MESSAGE,  * PRPC_MESSAGE;


typedef RPC_STATUS
__stdcall RPC_FORWARD_FUNCTION(
                        UUID              * InterfaceId,
                        RPC_VERSION       * InterfaceVersion,
                        UUID              * ObjectId,
                        unsigned char          * Rpcpro,
                        void  *  * ppDestEndpoint);


























#line 90 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdcep.h"



#line 94 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdcep.h"

typedef
void
(__stdcall  * RPC_DISPATCH_FUNCTION) (
      PRPC_MESSAGE Message
    );

typedef struct {
    unsigned int DispatchTableCount;
    RPC_DISPATCH_FUNCTION  * DispatchTable;
    int Reserved;
} RPC_DISPATCH_TABLE,  * PRPC_DISPATCH_TABLE;

typedef struct _RPC_PROTSEQ_ENDPOINT
{
    unsigned char  * RpcProtocolSequence;
    unsigned char  * Endpoint;
} RPC_PROTSEQ_ENDPOINT,  * PRPC_PROTSEQ_ENDPOINT;








typedef struct _RPC_SERVER_INTERFACE
{
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    unsigned int RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    void  *DefaultManagerEpv;
    void const  *InterpreterInfo;
    unsigned int Flags ;
} RPC_SERVER_INTERFACE,  * PRPC_SERVER_INTERFACE;

typedef struct _RPC_CLIENT_INTERFACE
{
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    unsigned int RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    unsigned long Reserved;
    void const  * InterpreterInfo;
    unsigned int Flags ;
} RPC_CLIENT_INTERFACE,  * PRPC_CLIENT_INTERFACE;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcGetBuffer (
      RPC_MESSAGE  * Message
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcSendReceive (
      RPC_MESSAGE  * Message
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcFreeBuffer (
      RPC_MESSAGE  * Message
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcSend (
      PRPC_MESSAGE Message
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcReceive (
      PRPC_MESSAGE Message,
     unsigned int Size
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcFreePipeBuffer (
      RPC_MESSAGE  * Message
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcReallocPipeBuffer (
     PRPC_MESSAGE Message,
     unsigned int NewSize
    ) ;

typedef void * I_RPC_MUTEX;

__declspec(dllimport)
void
__stdcall
I_RpcRequestMutex (
      I_RPC_MUTEX * Mutex
    );

__declspec(dllimport)
void
__stdcall
I_RpcClearMutex (
     I_RPC_MUTEX Mutex
    );

__declspec(dllimport)
void
__stdcall
I_RpcDeleteMutex (
     I_RPC_MUTEX Mutex
    );

__declspec(dllimport)
void  *
__stdcall
I_RpcAllocate (
     unsigned int Size
    );

__declspec(dllimport)
void
__stdcall
I_RpcFree (
     void  * Object
    );

__declspec(dllimport)
void
__stdcall
I_RpcPauseExecution (
     unsigned long Milliseconds
    );

typedef
void
(__stdcall  * PRPC_RUNDOWN) (
    void  * AssociationContext
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcMonitorAssociation (
     RPC_BINDING_HANDLE Handle,
     PRPC_RUNDOWN RundownRoutine,
     void * Context
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcStopMonitorAssociation (
     RPC_BINDING_HANDLE Handle
    );

__declspec(dllimport)
RPC_BINDING_HANDLE
__stdcall
I_RpcGetCurrentCallHandle(
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcGetAssociationContext (
     RPC_BINDING_HANDLE BindingHandle,
     void  *  * AssociationContext
    );

__declspec(dllimport)
void *
__stdcall
I_RpcGetServerContextList (
     RPC_BINDING_HANDLE BindingHandle
    );

__declspec(dllimport)
void
__stdcall
I_RpcSetServerContextList (
     RPC_BINDING_HANDLE BindingHandle,
     void * ServerContextList
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsBindingSetEntryNameW (
     RPC_BINDING_HANDLE Binding,
     unsigned long EntryNameSyntax,
     unsigned short  * EntryName
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsBindingSetEntryNameA (
     RPC_BINDING_HANDLE Binding,
     unsigned long EntryNameSyntax,
     unsigned char  * EntryName
    );





#line 318 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdcep.h"












#line 331 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdcep.h"



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqDynamicEndpointW (
     RPC_BINDING_HANDLE Binding,
     unsigned short  *  * DynamicEndpoint
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqDynamicEndpointA (
     RPC_BINDING_HANDLE Binding,
     unsigned char  *  * DynamicEndpoint
    );





#line 355 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdcep.h"











#line 367 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdcep.h"






__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqTransportType (
     RPC_BINDING_HANDLE Binding,
     unsigned int  * Type
    );

typedef struct _RPC_TRANSFER_SYNTAX
{
    UUID Uuid;
    unsigned short VersMajor;
    unsigned short VersMinor;
} RPC_TRANSFER_SYNTAX;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcIfInqTransferSyntaxes (
     RPC_IF_HANDLE RpcIfHandle,
     RPC_TRANSFER_SYNTAX  * TransferSyntaxes,
     unsigned int TransferSyntaxSize,
     unsigned int  * TransferSyntaxCount
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_UuidCreate (
     UUID  * Uuid
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingCopy (
     RPC_BINDING_HANDLE SourceBinding,
     RPC_BINDING_HANDLE  * DestinationBinding
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingIsClientLocal (
     RPC_BINDING_HANDLE BindingHandle ,
     unsigned int  * ClientLocalFlag
    );

__declspec(dllimport)
void
__stdcall
I_RpcSsDontSerializeContext (
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcLaunchDatagramReceiveThread(
    void  * pAddress
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerRegisterForwardFunction (
     RPC_FORWARD_FUNCTION  * pForwardFunction
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcConnectionInqSockBuffSize(
   unsigned long  * RecvBuffSize,
   unsigned long  * SendBuffSize
  );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcConnectionSetSockBuffSize(
    unsigned long RecvBuffSize,
    unsigned long SendBuffSize
   );


































































__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerStartListening(
    void * hWnd
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerStopListening(
    ) ;

typedef RPC_STATUS (*RPC_BLOCKING_FN) (
     void * hWnd,
     void * Context,
      void * hSyncEvent
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingSetAsync(
     RPC_BINDING_HANDLE Binding,
     RPC_BLOCKING_FN BlockingFn,
     unsigned long ServerTid
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcSetThreadParams(
     int fClientFree,
      void *Context,
      void * hWndClient
    );

__declspec(dllimport)
unsigned int
__stdcall
I_RpcWindowProc(
     void * hWnd,
     unsigned int Message,
     unsigned int wParam,
     unsigned long lParam
    ) ;
#line 571 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdcep.h"


__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUnregisterEndpointA (
     unsigned char * Protseq,
     unsigned char * Endpoint
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUnregisterEndpointW (
     unsigned short * Protseq,
     unsigned short * Endpoint
    );





#line 594 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdcep.h"
#line 595 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdcep.h"

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerInqTransportType(
     unsigned int  * Type
    ) ;


}
#line 606 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdcep.h"





#line 612 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdcep.h"

#line 614 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdcep.h"
#line 1948 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"


}
#line 1952 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"

#line 1954 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcdce.h"
#line 133 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcnsi.h"


















typedef void  * RPC_NS_HANDLE;















__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingExportA(
     unsigned long EntryNameSyntax ,
     unsigned char  * EntryName,
     RPC_IF_HANDLE IfSpec ,
     RPC_BINDING_VECTOR  * BindingVec ,
     UUID_VECTOR  * ObjectUuidVec 
    );


__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingUnexportA(
     unsigned long EntryNameSyntax ,
     unsigned char  * EntryName,
     RPC_IF_HANDLE IfSpec ,
     UUID_VECTOR  * ObjectUuidVec 
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingExportW(
     unsigned long EntryNameSyntax ,
     unsigned short  * EntryName,
     RPC_IF_HANDLE IfSpec ,
     RPC_BINDING_VECTOR  * BindingVec ,
     UUID_VECTOR  * ObjectUuidVec 
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingUnexportW(
     unsigned long EntryNameSyntax ,
     unsigned short  * EntryName,
     RPC_IF_HANDLE IfSpec ,
     UUID_VECTOR  * ObjectUuidVec 
    );

#line 73 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcnsi.h"



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupBeginA(
     unsigned long EntryNameSyntax ,
     unsigned char  * EntryName ,
     RPC_IF_HANDLE IfSpec ,
     UUID  * ObjUuid ,
     unsigned long BindingMaxCount ,
     RPC_NS_HANDLE  * LookupContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupBeginW(
     unsigned long EntryNameSyntax ,
     unsigned short  * EntryName ,
     RPC_IF_HANDLE IfSpec ,
     UUID  * ObjUuid ,
     unsigned long BindingMaxCount ,
     RPC_NS_HANDLE  * LookupContext
    );
#line 98 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcnsi.h"

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupNext(
      RPC_NS_HANDLE LookupContext,
     RPC_BINDING_VECTOR  *  * BindingVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupDone(
      RPC_NS_HANDLE  * LookupContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupDeleteA(
     unsigned long GroupNameSyntax ,
     unsigned char  * GroupName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrAddA(
     unsigned long GroupNameSyntax ,
     unsigned char  * GroupName,
     unsigned long MemberNameSyntax ,
     unsigned char  * MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrRemoveA(
     unsigned long GroupNameSyntax ,
     unsigned char  * GroupName,
     unsigned long MemberNameSyntax ,
     unsigned char  * MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqBeginA(
     unsigned long GroupNameSyntax ,
     unsigned char  * GroupName,
     unsigned long MemberNameSyntax ,
     RPC_NS_HANDLE  * InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqNextA(
      RPC_NS_HANDLE InquiryContext,
     unsigned char  *  * MemberName
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupDeleteW(
     unsigned long GroupNameSyntax ,
     unsigned short  * GroupName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrAddW(
     unsigned long GroupNameSyntax ,
     unsigned short  * GroupName,
     unsigned long MemberNameSyntax ,
     unsigned short  * MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrRemoveW(
     unsigned long GroupNameSyntax ,
     unsigned short  * GroupName,
     unsigned long MemberNameSyntax ,
     unsigned short  * MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqBeginW(
     unsigned long GroupNameSyntax ,
     unsigned short  * GroupName,
     unsigned long MemberNameSyntax ,
     RPC_NS_HANDLE  * InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqNextW(
      RPC_NS_HANDLE InquiryContext,
     unsigned short  *  * MemberName
    );

#line 187 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcnsi.h"

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqDone(
      RPC_NS_HANDLE  * InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileDeleteA(
     unsigned long ProfileNameSyntax ,
     unsigned char  * ProfileName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltAddA(
     unsigned long ProfileNameSyntax ,
     unsigned char  * ProfileName,
     RPC_IF_ID  * IfId ,
     unsigned long MemberNameSyntax ,
     unsigned char  * MemberName,
     unsigned long Priority,
     unsigned char  * Annotation 
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltRemoveA(
     unsigned long ProfileNameSyntax ,
     unsigned char  * ProfileName,
     RPC_IF_ID  * IfId ,
     unsigned long MemberNameSyntax ,
     unsigned char  * MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqBeginA(
     unsigned long ProfileNameSyntax ,
     unsigned char  * ProfileName,
     unsigned long InquiryType,
     RPC_IF_ID  * IfId ,
     unsigned long VersOption,
     unsigned long MemberNameSyntax ,
     unsigned char  * MemberName ,
     RPC_NS_HANDLE  * InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqNextA(
     RPC_NS_HANDLE InquiryContext,
     RPC_IF_ID  * IfId,
     unsigned char  *  * MemberName,
     unsigned long  * Priority,
     unsigned char  *  * Annotation
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileDeleteW(
     unsigned long ProfileNameSyntax ,
     unsigned short  * ProfileName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltAddW(
     unsigned long ProfileNameSyntax ,
     unsigned short  * ProfileName,
     RPC_IF_ID  * IfId ,
     unsigned long MemberNameSyntax ,
     unsigned short  * MemberName,
     unsigned long Priority,
     unsigned short  * Annotation 
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltRemoveW(
     unsigned long ProfileNameSyntax ,
     unsigned short  * ProfileName,
     RPC_IF_ID  * IfId ,
     unsigned long MemberNameSyntax ,
     unsigned short  * MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqBeginW(
     unsigned long ProfileNameSyntax ,
     unsigned short  * ProfileName,
     unsigned long InquiryType,
     RPC_IF_ID  * IfId ,
     unsigned long VersOption,
     unsigned long MemberNameSyntax ,
     unsigned short  * MemberName ,
     RPC_NS_HANDLE  * InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqNextW(
     RPC_NS_HANDLE InquiryContext,
     RPC_IF_ID  * IfId,
     unsigned short  *  * MemberName,
     unsigned long  * Priority,
     unsigned short  *  * Annotation
    );

#line 292 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcnsi.h"

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqDone(
      RPC_NS_HANDLE  * InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqBeginA(
     unsigned long EntryNameSyntax ,
     unsigned char  * EntryName,
     RPC_NS_HANDLE  * InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqBeginW(
     unsigned long EntryNameSyntax ,
     unsigned short  * EntryName,
     RPC_NS_HANDLE  * InquiryContext
    );

#line 317 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcnsi.h"

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqNext(
      RPC_NS_HANDLE InquiryContext,
     UUID  * ObjUuid
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqDone(
      RPC_NS_HANDLE  * InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryExpandNameA(
     unsigned long EntryNameSyntax ,
     unsigned char  * EntryName,
     unsigned char  *  * ExpandedName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtBindingUnexportA(
     unsigned long EntryNameSyntax ,
     unsigned char  * EntryName,
     RPC_IF_ID  * IfId ,
     unsigned long VersOption,
     UUID_VECTOR  * ObjectUuidVec 
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryCreateA(
     unsigned long EntryNameSyntax ,
     unsigned char  * EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryDeleteA(
     unsigned long EntryNameSyntax ,
     unsigned char  * EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryInqIfIdsA(
     unsigned long EntryNameSyntax ,
     unsigned char  * EntryName,
     RPC_IF_ID_VECTOR  *  * IfIdVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtHandleSetExpAge(
     RPC_NS_HANDLE NsHandle,
     unsigned long ExpirationAge
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtInqExpAge(
     unsigned long  * ExpirationAge
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtSetExpAge(
     unsigned long ExpirationAge
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryExpandNameW(
     unsigned long EntryNameSyntax ,
     unsigned short  * EntryName,
     unsigned short  *  * ExpandedName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtBindingUnexportW(
     unsigned long EntryNameSyntax ,
     unsigned short  * EntryName,
     RPC_IF_ID  * IfId ,
     unsigned long VersOption,
     UUID_VECTOR  * ObjectUuidVec 
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryCreateW(
     unsigned long EntryNameSyntax ,
     unsigned short  * EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryDeleteW(
     unsigned long EntryNameSyntax ,
     unsigned short  * EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryInqIfIdsW(
     unsigned long EntryNameSyntax ,
     unsigned short  * EntryName,
     RPC_IF_ID_VECTOR  *  * IfIdVec
    );

#line 420 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcnsi.h"



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportBeginA(
     unsigned long EntryNameSyntax ,
     unsigned char  * EntryName ,
     RPC_IF_HANDLE IfSpec ,
     UUID  * ObjUuid ,
     RPC_NS_HANDLE  * ImportContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportBeginW(
     unsigned long EntryNameSyntax ,
     unsigned short  * EntryName ,
     RPC_IF_HANDLE IfSpec ,
     UUID  * ObjUuid ,
     RPC_NS_HANDLE  * ImportContext
    );

#line 444 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcnsi.h"

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportNext(
     RPC_NS_HANDLE ImportContext,
     RPC_BINDING_HANDLE   * Binding
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportDone(
      RPC_NS_HANDLE  * ImportContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingSelect(
      RPC_BINDING_VECTOR  * BindingVec,
     RPC_BINDING_HANDLE   * Binding
    );















































#line 509 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcnsi.h"

#line 511 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcnsi.h"
#line 134 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcnterr.h"



































#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcnterr.h"
#line 135 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"

#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\winerror.h"








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 137 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"




































__declspec(dllimport)
RPC_STATUS
__stdcall
RpcImpersonateClient (
     RPC_BINDING_HANDLE BindingHandle 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcRevertToSelfEx (
     RPC_BINDING_HANDLE BindingHandle 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcRevertToSelf (
    );

__declspec(dllimport)
long
__stdcall
I_RpcMapWin32Status (
     RPC_STATUS Status
    );

#line 201 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"




#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcasync.h"



















extern "C" {
#line 22 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcasync.h"



typedef
enum _RPC_NOTIFICATION_TYPES
{
    RpcNotificationTypeNone,
    RpcNotificationTypeEvent,
    RpcNotificationTypeApc, 
    RpcNotificationTypeIoc,
    RpcNotificationTypeHwnd,
    RpcNotificationTypeCallback
} RPC_NOTIFICATION_TYPES;

typedef
enum _RPC_ASYNC_EVENT {
    RpcCallComplete,
    RpcSendComplete,
    RpcReceiveComplete
    } RPC_ASYNC_EVENT;

typedef void __stdcall
RPCNOTIFICATION_ROUTINE (
                  struct _RPC_ASYNC_STATE *pAsync,
                  void *Context,                              
                  RPC_ASYNC_EVENT Event);
typedef RPCNOTIFICATION_ROUTINE *PFN_RPCNOTIFICATION_ROUTINE;
    
typedef struct _RPC_ASYNC_STATE {
    unsigned int    Size; 
    unsigned long   Signature;
    long   Lock;
    unsigned long   Flags;
    void           *StubInfo;
    void           *UserInfo;
    void           *RuntimeInfo;
    RPC_ASYNC_EVENT Event;

    RPC_NOTIFICATION_TYPES NotificationType;
    union {
        
        
        
        struct {
            PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
            HANDLE hThread;
            } APC;

        
        
        
        struct {
            HANDLE hIOPort;
            DWORD dwNumberOfBytesTransferred;
            DWORD dwCompletionKey;
            LPOVERLAPPED lpOverlapped;
            } IOC;

        
        
        
        struct {
            HWND hWnd;
            UINT Msg;
            } HWND;


        
        
        
        HANDLE hEvent;

        
        
        
        
        
        PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
        } u;

    long Reserved[4]; 
    } RPC_ASYNC_STATE, *PRPC_ASYNC_STATE;







__declspec(dllimport)
RPC_STATUS
__stdcall
RpcAsyncInitializeHandle (
    PRPC_ASYNC_STATE pAsync,
    unsigned int     Size
    );
                      
__declspec(dllimport)
RPC_STATUS
__stdcall
RpcAsyncRegisterInfo (
    PRPC_ASYNC_STATE pAsync
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcAsyncGetCallStatus (
    PRPC_ASYNC_STATE pAsync
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcAsyncCompleteCall (
    PRPC_ASYNC_STATE pAsync,
    void *Reply
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcAsyncAbortCall (
    PRPC_ASYNC_STATE pAsync,
    unsigned long ExceptionCode
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcAsyncCancelCall (
     PRPC_ASYNC_STATE pAsync,
     BOOL fAbort
    ) ;




RPC_STATUS __stdcall
I_RpcAsyncSetHandle (
      PRPC_MESSAGE Message,
      PRPC_ASYNC_STATE pAsync
    );

RPC_STATUS __stdcall
I_RpcAsyncAbortCall (
     PRPC_ASYNC_STATE pAsync,
     unsigned long ExceptionCode
    ) ;


}
#line 175 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcasync.h"

#line 177 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcasync.h"

#line 206 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"

#line 208 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"


}
#line 212 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"

#line 214 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"

#line 195 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"
#line 196 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"




















#line 22 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"
#line 23 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"








#line 32 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"
#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"








#line 42 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"
#line 43 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"


#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push)
#line 28 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack1.h"
#pragma pack(1)


#line 32 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack1.h"
#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack1.h"
#line 46 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"


extern "C" {            
#line 50 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"



struct HDROP__ { int unused; }; typedef struct HDROP__ *HDROP;

__declspec(dllimport) UINT __stdcall DragQueryFileA(HDROP,UINT,LPSTR,UINT);
__declspec(dllimport) UINT __stdcall DragQueryFileW(HDROP,UINT,LPWSTR,UINT);




#line 62 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"
__declspec(dllimport) BOOL __stdcall DragQueryPoint(HDROP,LPPOINT);
__declspec(dllimport) void __stdcall DragFinish(HDROP);
__declspec(dllimport) void __stdcall DragAcceptFiles(HWND,BOOL);

__declspec(dllimport) HINSTANCE __stdcall ShellExecuteA(HWND hwnd, LPCSTR lpOperation, LPCSTR lpFile, LPCSTR lpParameters, LPCSTR lpDirectory, INT nShowCmd);
__declspec(dllimport) HINSTANCE __stdcall ShellExecuteW(HWND hwnd, LPCWSTR lpOperation, LPCWSTR lpFile, LPCWSTR lpParameters, LPCWSTR lpDirectory, INT nShowCmd);




#line 73 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"
__declspec(dllimport) HINSTANCE __stdcall FindExecutableA(LPCSTR lpFile, LPCSTR lpDirectory, LPSTR lpResult);
__declspec(dllimport) HINSTANCE __stdcall FindExecutableW(LPCWSTR lpFile, LPCWSTR lpDirectory, LPWSTR lpResult);




#line 80 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"
__declspec(dllimport) LPWSTR *  __stdcall CommandLineToArgvW(LPCWSTR lpCmdLine, int*pNumArgs);

__declspec(dllimport) INT       __stdcall ShellAboutA(HWND hWnd, LPCSTR szApp, LPCSTR szOtherStuff, HICON hIcon);
__declspec(dllimport) INT       __stdcall ShellAboutW(HWND hWnd, LPCWSTR szApp, LPCWSTR szOtherStuff, HICON hIcon);




#line 89 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"
__declspec(dllimport) HICON     __stdcall DuplicateIcon(HINSTANCE hInst, HICON hIcon);
__declspec(dllimport) HICON     __stdcall ExtractAssociatedIconA(HINSTANCE hInst, LPSTR lpIconPath, LPWORD lpiIcon);
__declspec(dllimport) HICON     __stdcall ExtractAssociatedIconW(HINSTANCE hInst, LPWSTR lpIconPath, LPWORD lpiIcon);




#line 97 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"

__declspec(dllimport) HICON     __stdcall ExtractIconA(HINSTANCE hInst, LPCSTR lpszExeFileName, UINT nIconIndex);
__declspec(dllimport) HICON     __stdcall ExtractIconW(HINSTANCE hInst, LPCWSTR lpszExeFileName, UINT nIconIndex);




#line 105 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"


typedef struct _DRAGINFOA {
    UINT uSize;                 
    POINT pt;
    BOOL fNC;
    LPSTR   lpFileList;
    DWORD grfKeyState;
} DRAGINFOA, * LPDRAGINFOA;
typedef struct _DRAGINFOW {
    UINT uSize;                 
    POINT pt;
    BOOL fNC;
    LPWSTR  lpFileList;
    DWORD grfKeyState;
} DRAGINFOW, * LPDRAGINFOW;




typedef DRAGINFOA DRAGINFO;
typedef LPDRAGINFOA LPDRAGINFO;
#line 128 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"














                                        
                                        


















typedef struct _AppBarData
{
    DWORD cbSize;
    HWND hWnd;
    UINT uCallbackMessage;
    UINT uEdge;
    RECT rc;
    LPARAM lParam; 
} APPBARDATA, *PAPPBARDATA;

__declspec(dllimport) UINT __stdcall SHAppBarMessage(DWORD dwMessage, PAPPBARDATA pData);






__declspec(dllimport) DWORD   __stdcall DoEnvironmentSubstA(LPSTR szString, UINT cbString);
__declspec(dllimport) DWORD   __stdcall DoEnvironmentSubstW(LPWSTR szString, UINT cbString);




#line 186 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"
__declspec(dllimport) LPSTR __stdcall FindEnvironmentStringA(LPSTR szEnvVar);
__declspec(dllimport) LPWSTR __stdcall FindEnvironmentStringW(LPWSTR szEnvVar);




#line 193 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"


__declspec(dllimport) UINT __stdcall ExtractIconExA(LPCSTR lpszFile, int nIconIndex, HICON  *phiconLarge, HICON  *phiconSmall, UINT nIcons);
__declspec(dllimport) UINT __stdcall ExtractIconExW(LPCWSTR lpszFile, int nIconIndex, HICON  *phiconLarge, HICON  *phiconSmall, UINT nIcons);




#line 202 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"




















                                      







typedef WORD FILEOP_FLAGS;




                                
                                
                                
                                




typedef WORD PRINTEROP_FLAGS;

#line 246 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"








typedef struct _SHFILEOPSTRUCTA
{
        HWND            hwnd;
        UINT            wFunc;
        LPCSTR          pFrom;
        LPCSTR          pTo;
        FILEOP_FLAGS    fFlags;
        BOOL            fAnyOperationsAborted;
        LPVOID          hNameMappings;
        LPCSTR           lpszProgressTitle; 
} SHFILEOPSTRUCTA,  *LPSHFILEOPSTRUCTA;
typedef struct _SHFILEOPSTRUCTW
{
        HWND            hwnd;
        UINT            wFunc;
        LPCWSTR         pFrom;
        LPCWSTR         pTo;
        FILEOP_FLAGS    fFlags;
        BOOL            fAnyOperationsAborted;
        LPVOID          hNameMappings;
        LPCWSTR          lpszProgressTitle; 
} SHFILEOPSTRUCTW,  *LPSHFILEOPSTRUCTW;




typedef SHFILEOPSTRUCTA SHFILEOPSTRUCT;
typedef LPSHFILEOPSTRUCTA LPSHFILEOPSTRUCT;
#line 283 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"

__declspec(dllimport) int __stdcall SHFileOperationA(LPSHFILEOPSTRUCTA lpFileOp);
__declspec(dllimport) int __stdcall SHFileOperationW(LPSHFILEOPSTRUCTW lpFileOp);




#line 291 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"

__declspec(dllimport) void __stdcall SHFreeNameMappings(HANDLE hNameMappings);

typedef struct _SHNAMEMAPPINGA
{
    LPSTR   pszOldPath;
    LPSTR   pszNewPath;
    int   cchOldPath;
    int   cchNewPath;
} SHNAMEMAPPINGA,  *LPSHNAMEMAPPINGA;
typedef struct _SHNAMEMAPPINGW
{
    LPWSTR  pszOldPath;
    LPWSTR  pszNewPath;
    int   cchOldPath;
    int   cchNewPath;
} SHNAMEMAPPINGW,  *LPSHNAMEMAPPINGW;




typedef SHNAMEMAPPINGA SHNAMEMAPPING;
typedef LPSHNAMEMAPPINGA LPSHNAMEMAPPING;
#line 315 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"




















#line 336 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"




























typedef struct _SHELLEXECUTEINFOA
{
        DWORD cbSize;
        ULONG fMask;
        HWND hwnd;
        LPCSTR   lpVerb;
        LPCSTR   lpFile;
        LPCSTR   lpParameters;
        LPCSTR   lpDirectory;
        int nShow;
        HINSTANCE hInstApp;
        
        LPVOID lpIDList;
        LPCSTR   lpClass;
        HKEY hkeyClass;
        DWORD dwHotKey;
        union {
        HANDLE hIcon;
        HANDLE hMonitor;
        };
        HANDLE hProcess;
} SHELLEXECUTEINFOA,  *LPSHELLEXECUTEINFOA;

















typedef struct _SHELLEXECUTEINFOW
{
        DWORD cbSize;
        ULONG fMask;
        HWND hwnd;
        LPCWSTR  lpVerb;
        LPCWSTR  lpFile;
        LPCWSTR  lpParameters;
        LPCWSTR  lpDirectory;
        int nShow;
        HINSTANCE hInstApp;
        
        LPVOID lpIDList;
        LPCWSTR  lpClass;
        HKEY hkeyClass;
        DWORD dwHotKey;
        union {
        HANDLE hIcon;
        HANDLE hMonitor;
        };
        HANDLE hProcess;
} SHELLEXECUTEINFOW,  *LPSHELLEXECUTEINFOW;




typedef SHELLEXECUTEINFOA SHELLEXECUTEINFO;
typedef LPSHELLEXECUTEINFOA LPSHELLEXECUTEINFO;
#line 432 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"

__declspec(dllimport) BOOL __stdcall ShellExecuteExA(LPSHELLEXECUTEINFOA lpExecInfo);
__declspec(dllimport) BOOL __stdcall ShellExecuteExW(LPSHELLEXECUTEINFOW lpExecInfo);




#line 440 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"
__declspec(dllimport) void __stdcall WinExecErrorA(HWND hwnd, int error, LPCSTR lpstrFileName, LPCSTR lpstrTitle);
__declspec(dllimport) void __stdcall WinExecErrorW(HWND hwnd, int error, LPCWSTR lpstrFileName, LPCWSTR lpstrTitle);




#line 447 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"











typedef struct _SHQUERYRBINFO {
    DWORD   cbSize;

    __int64 i64Size;
    __int64 i64NumItems;



#line 467 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"
} SHQUERYRBINFO,  *LPSHQUERYRBINFO;









extern "C" __declspec(dllimport) HRESULT __stdcall SHQueryRecycleBinA(LPCSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo );
extern "C" __declspec(dllimport) HRESULT __stdcall SHQueryRecycleBinW(LPCWSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo );




#line 484 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"
extern "C" __declspec(dllimport) HRESULT __stdcall SHEmptyRecycleBinA(HWND hwnd, LPCSTR pszRootPath, DWORD dwFlags );
extern "C" __declspec(dllimport) HRESULT __stdcall SHEmptyRecycleBinW(HWND hwnd, LPCWSTR pszRootPath, DWORD dwFlags );




#line 491 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"









typedef struct _NOTIFYICONDATAA {
        DWORD cbSize;
        HWND hWnd;
        UINT uID;
        UINT uFlags;
        UINT uCallbackMessage;
        HICON hIcon;
        CHAR   szTip[64];
} NOTIFYICONDATAA, *PNOTIFYICONDATAA;
typedef struct _NOTIFYICONDATAW {
        DWORD cbSize;
        HWND hWnd;
        UINT uID;
        UINT uFlags;
        UINT uCallbackMessage;
        HICON hIcon;
        WCHAR  szTip[64];
} NOTIFYICONDATAW, *PNOTIFYICONDATAW;




typedef NOTIFYICONDATAA NOTIFYICONDATA;
typedef PNOTIFYICONDATAA PNOTIFYICONDATA;
#line 525 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"










__declspec(dllimport) BOOL __stdcall Shell_NotifyIconA(DWORD dwMessage, PNOTIFYICONDATAA lpData);
__declspec(dllimport) BOOL __stdcall Shell_NotifyIconW(DWORD dwMessage, PNOTIFYICONDATAW lpData);




#line 542 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"



























typedef struct _SHFILEINFOA
{
        HICON       hIcon;                      
        int         iIcon;                      
        DWORD       dwAttributes;               
        CHAR        szDisplayName[260];    
        CHAR        szTypeName[80];             
} SHFILEINFOA;
typedef struct _SHFILEINFOW
{
        HICON       hIcon;                      
        int         iIcon;                      
        DWORD       dwAttributes;               
        WCHAR       szDisplayName[260];    
        WCHAR       szTypeName[80];             
} SHFILEINFOW;



typedef SHFILEINFOA SHFILEINFO;
#line 590 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"


















extern "C" __declspec(dllimport) DWORD __stdcall SHGetFileInfoA(LPCSTR pszPath, DWORD dwFileAttributes, SHFILEINFOA  *psfi, UINT cbFileInfo, UINT uFlags);
extern "C" __declspec(dllimport) DWORD __stdcall SHGetFileInfoW(LPCWSTR pszPath, DWORD dwFileAttributes, SHFILEINFOW  *psfi, UINT cbFileInfo, UINT uFlags);




#line 615 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"
extern "C" __declspec(dllimport) BOOL __stdcall  SHGetDiskFreeSpaceA(LPCSTR pszVolume, ULARGE_INTEGER *pqwFreeCaller, ULARGE_INTEGER *pqwTot, ULARGE_INTEGER *pqwFree);
extern "C" __declspec(dllimport) BOOL __stdcall  SHGetDiskFreeSpaceW(LPCWSTR pszVolume, ULARGE_INTEGER *pqwFreeCaller, ULARGE_INTEGER *pqwTot, ULARGE_INTEGER *pqwFree);




#line 622 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"
extern "C" __declspec(dllimport) BOOL __stdcall  SHGetNewLinkInfoA(LPCSTR pszLinkTo, LPCSTR pszDir, LPSTR pszName, BOOL *pfMustCopy, UINT uFlags);
extern "C" __declspec(dllimport) BOOL __stdcall  SHGetNewLinkInfoW(LPCWSTR pszLinkTo, LPCWSTR pszDir, LPWSTR pszName, BOOL *pfMustCopy, UINT uFlags);




#line 629 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"






















extern "C" __declspec(dllimport) BOOL __stdcall  SHInvokePrinterCommandA(HWND hwnd, UINT uAction, LPCSTR lpBuf1, LPCSTR lpBuf2, BOOL fModal);
extern "C" __declspec(dllimport) BOOL __stdcall  SHInvokePrinterCommandW(HWND hwnd, UINT uAction, LPCWSTR lpBuf1, LPCWSTR lpBuf2, BOOL fModal);




#line 658 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"



#line 662 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"



}
#line 667 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"

#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"


#line 36 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"
#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"
#line 669 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"

#line 671 "c:\\programme\\microsoft visual studio\\vc98\\include\\shellapi.h"

#line 197 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"

#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\winperf.h"



















































typedef struct _PERF_DATA_BLOCK {
    WCHAR           Signature[4];       
    DWORD           LittleEndian;       
    DWORD           Version;            
                                        
    DWORD           Revision;           
                                        
    DWORD           TotalByteLength;    
    DWORD           HeaderLength;       
    DWORD           NumObjectTypes;     
                                        
    LONG            DefaultObject;      
                                        
                                        
                                        
                                        
    SYSTEMTIME      SystemTime;         
                                        
    LARGE_INTEGER   PerfTime;           
                                        
    LARGE_INTEGER   PerfFreq;           
                                        
    LARGE_INTEGER   PerfTime100nSec;    
                                        
    DWORD           SystemNameLength;   
    DWORD           SystemNameOffset;   
                                        
                                        
} PERF_DATA_BLOCK, *PPERF_DATA_BLOCK;









typedef struct _PERF_OBJECT_TYPE {
    DWORD           TotalByteLength;    
                                        
                                        
                                        
                                        
                                        
                                        
                                        
    DWORD           DefinitionLength;   
                                        
                                        
                                        
                                        
                                        
                                        
                                        
    DWORD           HeaderLength;       
                                        
                                        
                                        
    DWORD           ObjectNameTitleIndex;
                                        
    LPWSTR          ObjectNameTitle;    
                                        
                                        
    DWORD           ObjectHelpTitleIndex;
                                        
    LPWSTR          ObjectHelpTitle;    
                                        
                                        
    DWORD           DetailLevel;        
                                        
                                        
                                        
    DWORD           NumCounters;        
                                        
                                        
    LONG            DefaultCounter;     
                                        
                                        
                                        
    LONG            NumInstances;       
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
    DWORD           CodePage;           
                                        
                                        
    LARGE_INTEGER   PerfTime;           
                                        
    LARGE_INTEGER   PerfFreq;           
                                        
} PERF_OBJECT_TYPE, *PPERF_OBJECT_TYPE;


























                                            




























































































































































































































































                                        
































typedef struct _PERF_COUNTER_DEFINITION {
    DWORD           ByteLength;         
    DWORD           CounterNameTitleIndex;
                                        
                                        
    LPWSTR          CounterNameTitle;   
                                        
                                        
    DWORD           CounterHelpTitleIndex;
                                        
                                        
    LPWSTR          CounterHelpTitle;   
                                        
                                        
    LONG            DefaultScale;       
                                        
                                        
    DWORD           DetailLevel;        
                                        
    DWORD           CounterType;        
    DWORD           CounterSize;        
    DWORD           CounterOffset;      
                                        
                                        
} PERF_COUNTER_DEFINITION, *PPERF_COUNTER_DEFINITION;














typedef struct _PERF_INSTANCE_DEFINITION {
    DWORD           ByteLength;         
                                        
    DWORD           ParentObjectTitleIndex;
                                        
                                        
                                        
                                        
                                        
    DWORD           ParentObjectInstance;
                                        
                                        
                                        
    LONG            UniqueID;           
                                        
                                        
    DWORD           NameOffset;         
                                        
                                        
    DWORD           NameLength;         
                                        
                                        
                                        
                                        
                                        
} PERF_INSTANCE_DEFINITION, *PPERF_INSTANCE_DEFINITION;













typedef struct _PERF_COUNTER_BLOCK {
    DWORD           ByteLength;         
                                        
} PERF_COUNTER_BLOCK, *PPERF_COUNTER_BLOCK;
















typedef DWORD (__stdcall PM_OPEN_PROC) (LPWSTR);
typedef DWORD (__stdcall PM_COLLECT_PROC) (LPWSTR, LPVOID *, LPDWORD, LPDWORD);
typedef DWORD (__stdcall PM_CLOSE_PROC) (void);
typedef DWORD (__stdcall PM_QUERY_PROC) (LPDWORD, LPVOID *, LPDWORD, LPDWORD);


#line 569 "c:\\programme\\microsoft visual studio\\vc98\\include\\winperf.h"



#line 199 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"




#line 204 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsock.h"































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 205 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"
#line 206 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"

#line 208 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"

#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\wincrypt.h"

















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 7891 "c:\\programme\\microsoft visual studio\\vc98\\include\\wincrypt.h"


#line 7894 "c:\\programme\\microsoft visual studio\\vc98\\include\\wincrypt.h"
#line 210 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"
#line 211 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"


#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"











#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push)
#line 28 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack1.h"
#pragma pack(1)


#line 32 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack1.h"
#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack1.h"
#line 13 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"


extern "C" {            
#line 17 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"








#line 26 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"






#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"
#line 34 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"
#line 35 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"
















typedef UINT (__stdcall *LPOFNHOOKPROC) (HWND, UINT, WPARAM, LPARAM);


#line 55 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"

typedef struct tagOFNA {
   DWORD        lStructSize;
   HWND         hwndOwner;
   HINSTANCE    hInstance;
   LPCSTR       lpstrFilter;
   LPSTR        lpstrCustomFilter;
   DWORD        nMaxCustFilter;
   DWORD        nFilterIndex;
   LPSTR        lpstrFile;
   DWORD        nMaxFile;
   LPSTR        lpstrFileTitle;
   DWORD        nMaxFileTitle;
   LPCSTR       lpstrInitialDir;
   LPCSTR       lpstrTitle;
   DWORD        Flags;
   WORD         nFileOffset;
   WORD         nFileExtension;
   LPCSTR       lpstrDefExt;
   LPARAM       lCustData;
   LPOFNHOOKPROC lpfnHook;
   LPCSTR       lpTemplateName;




} OPENFILENAMEA, *LPOPENFILENAMEA;
typedef struct tagOFNW {
   DWORD        lStructSize;
   HWND         hwndOwner;
   HINSTANCE    hInstance;
   LPCWSTR      lpstrFilter;
   LPWSTR       lpstrCustomFilter;
   DWORD        nMaxCustFilter;
   DWORD        nFilterIndex;
   LPWSTR       lpstrFile;
   DWORD        nMaxFile;
   LPWSTR       lpstrFileTitle;
   DWORD        nMaxFileTitle;
   LPCWSTR      lpstrInitialDir;
   LPCWSTR      lpstrTitle;
   DWORD        Flags;
   WORD         nFileOffset;
   WORD         nFileExtension;
   LPCWSTR      lpstrDefExt;
   LPARAM       lCustData;
   LPOFNHOOKPROC lpfnHook;
   LPCWSTR      lpTemplateName;




} OPENFILENAMEW, *LPOPENFILENAMEW;




typedef OPENFILENAMEA OPENFILENAME;
typedef LPOPENFILENAMEA LPOPENFILENAME;
#line 115 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"

BOOL  __stdcall     GetOpenFileNameA(LPOPENFILENAMEA);
BOOL  __stdcall     GetOpenFileNameW(LPOPENFILENAMEW);




#line 123 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"
BOOL  __stdcall     GetSaveFileNameA(LPOPENFILENAMEA);
BOOL  __stdcall     GetSaveFileNameW(LPOPENFILENAMEW);




#line 130 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"
short __stdcall     GetFileTitleA(LPCSTR, LPSTR, WORD);
short __stdcall     GetFileTitleW(LPCWSTR, LPWSTR, WORD);




#line 137 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"


























#line 164 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"
















typedef UINT (__stdcall *LPCCHOOKPROC) (HWND, UINT, WPARAM, LPARAM);


#line 184 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"



typedef struct _OFNOTIFYA
{
        NMHDR           hdr;
        LPOPENFILENAMEA lpOFN;
        LPSTR           pszFile;        
} OFNOTIFYA,  *LPOFNOTIFYA;

typedef struct _OFNOTIFYW
{
        NMHDR           hdr;
        LPOPENFILENAMEW lpOFN;
        LPWSTR          pszFile;        
} OFNOTIFYW,  *LPOFNOTIFYW;




typedef OFNOTIFYA OFNOTIFY;
typedef LPOFNOTIFYA LPOFNOTIFY;
#line 207 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"



typedef struct _OFNOTIFYEXA
{
        NMHDR           hdr;
        LPOPENFILENAMEA lpOFN;
        LPVOID          psf;
        LPVOID          pidl;          
} OFNOTIFYEXA,  *LPOFNOTIFYEXA;

typedef struct _OFNOTIFYEXW
{
        NMHDR           hdr;
        LPOPENFILENAMEW lpOFN;
        LPVOID          psf;
        LPVOID          pidl;          
} OFNOTIFYEXW,  *LPOFNOTIFYEXW;




typedef OFNOTIFYEXA OFNOTIFYEX;
typedef LPOFNOTIFYEXA LPOFNOTIFYEX;
#line 232 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"
































#line 265 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"













#line 279 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"













#line 293 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"




























#line 322 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"


typedef struct tagCHOOSECOLORA {
   DWORD        lStructSize;
   HWND         hwndOwner;
   HWND         hInstance;
   COLORREF     rgbResult;
   COLORREF*    lpCustColors;
   DWORD        Flags;
   LPARAM       lCustData;
   LPCCHOOKPROC lpfnHook;
   LPCSTR       lpTemplateName;
} CHOOSECOLORA, *LPCHOOSECOLORA;
typedef struct tagCHOOSECOLORW {
   DWORD        lStructSize;
   HWND         hwndOwner;
   HWND         hInstance;
   COLORREF     rgbResult;
   COLORREF*    lpCustColors;
   DWORD        Flags;
   LPARAM       lCustData;
   LPCCHOOKPROC lpfnHook;
   LPCWSTR      lpTemplateName;
} CHOOSECOLORW, *LPCHOOSECOLORW;




typedef CHOOSECOLORA CHOOSECOLOR;
typedef LPCHOOSECOLORA LPCHOOSECOLOR;
#line 353 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"
































#line 386 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"

BOOL  __stdcall ChooseColorA(LPCHOOSECOLORA);
BOOL  __stdcall ChooseColorW(LPCHOOSECOLORW);




#line 394 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"











#line 406 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"


typedef UINT (__stdcall *LPFRHOOKPROC) (HWND, UINT, WPARAM, LPARAM);


#line 412 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"

typedef struct tagFINDREPLACEA {
   DWORD        lStructSize;        
   HWND         hwndOwner;          
   HINSTANCE    hInstance;          
                                    
   DWORD        Flags;              
   LPSTR        lpstrFindWhat;      
   LPSTR        lpstrReplaceWith;   
   WORD         wFindWhatLen;       
   WORD         wReplaceWithLen;    
   LPARAM       lCustData;          
   LPFRHOOKPROC lpfnHook;           
   LPCSTR       lpTemplateName;     
} FINDREPLACEA, *LPFINDREPLACEA;
typedef struct tagFINDREPLACEW {
   DWORD        lStructSize;        
   HWND         hwndOwner;          
   HINSTANCE    hInstance;          
                                    
   DWORD        Flags;              
   LPWSTR       lpstrFindWhat;      
   LPWSTR       lpstrReplaceWith;   
   WORD         wFindWhatLen;       
   WORD         wReplaceWithLen;    
   LPARAM       lCustData;          
   LPFRHOOKPROC lpfnHook;           
   LPCWSTR      lpTemplateName;     
} FINDREPLACEW, *LPFINDREPLACEW;




typedef FINDREPLACEA FINDREPLACE;
typedef LPFINDREPLACEA LPFINDREPLACE;
#line 448 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"



















HWND  __stdcall    FindTextA(LPFINDREPLACEA);
HWND  __stdcall    FindTextW(LPFINDREPLACEW);




#line 474 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"

HWND  __stdcall    ReplaceTextA(LPFINDREPLACEA);
HWND  __stdcall    ReplaceTextW(LPFINDREPLACEW);




#line 482 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"








#line 491 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"


typedef UINT (__stdcall *LPCFHOOKPROC) (HWND, UINT, WPARAM, LPARAM);


#line 497 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"

typedef struct tagCHOOSEFONTA {
   DWORD           lStructSize;
   HWND            hwndOwner;          
   HDC             hDC;                
   LPLOGFONTA      lpLogFont;          
   INT             iPointSize;         
   DWORD           Flags;              
   COLORREF        rgbColors;          
   LPARAM          lCustData;          
   LPCFHOOKPROC    lpfnHook;           
   LPCSTR          lpTemplateName;     
   HINSTANCE       hInstance;          
                                       
   LPSTR           lpszStyle;          
                                       
   WORD            nFontType;          
                                       
                                       
   WORD            ___MISSING_ALIGNMENT__;
   INT             nSizeMin;           
   INT             nSizeMax;           
                                       
} CHOOSEFONTA, *LPCHOOSEFONTA;
typedef struct tagCHOOSEFONTW {
   DWORD           lStructSize;
   HWND            hwndOwner;          
   HDC             hDC;                
   LPLOGFONTW      lpLogFont;          
   INT             iPointSize;         
   DWORD           Flags;              
   COLORREF        rgbColors;          
   LPARAM          lCustData;          
   LPCFHOOKPROC    lpfnHook;           
   LPCWSTR         lpTemplateName;     
   HINSTANCE       hInstance;          
                                       
   LPWSTR          lpszStyle;          
                                       
   WORD            nFontType;          
                                       
                                       
   WORD            ___MISSING_ALIGNMENT__;
   INT             nSizeMin;           
   INT             nSizeMax;           
                                       
} CHOOSEFONTW, *LPCHOOSEFONTW;




typedef CHOOSEFONTA CHOOSEFONT;
typedef LPCHOOSEFONTA LPCHOOSEFONT;
#line 551 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"

BOOL __stdcall ChooseFontA(LPCHOOSEFONTA);
BOOL __stdcall ChooseFontW(LPCHOOSEFONTW);




#line 559 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"















#line 575 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"
















#line 592 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"






























































#line 655 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"








typedef UINT (__stdcall *LPPRINTHOOKPROC) (HWND, UINT, WPARAM, LPARAM);
typedef UINT (__stdcall *LPSETUPHOOKPROC) (HWND, UINT, WPARAM, LPARAM);



#line 669 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"

typedef struct tagPDA {
   DWORD            lStructSize;
   HWND             hwndOwner;
   HGLOBAL          hDevMode;
   HGLOBAL          hDevNames;
   HDC              hDC;
   DWORD            Flags;
   WORD             nFromPage;
   WORD             nToPage;
   WORD             nMinPage;
   WORD             nMaxPage;
   WORD             nCopies;
   HINSTANCE        hInstance;
   LPARAM           lCustData;
   LPPRINTHOOKPROC  lpfnPrintHook;
   LPSETUPHOOKPROC  lpfnSetupHook;
   LPCSTR           lpPrintTemplateName;
   LPCSTR           lpSetupTemplateName;
   HGLOBAL          hPrintTemplate;
   HGLOBAL          hSetupTemplate;
} PRINTDLGA, *LPPRINTDLGA;
typedef struct tagPDW {
   DWORD            lStructSize;
   HWND             hwndOwner;
   HGLOBAL          hDevMode;
   HGLOBAL          hDevNames;
   HDC              hDC;
   DWORD            Flags;
   WORD             nFromPage;
   WORD             nToPage;
   WORD             nMinPage;
   WORD             nMaxPage;
   WORD             nCopies;
   HINSTANCE        hInstance;
   LPARAM           lCustData;
   LPPRINTHOOKPROC  lpfnPrintHook;
   LPSETUPHOOKPROC  lpfnSetupHook;
   LPCWSTR          lpPrintTemplateName;
   LPCWSTR          lpSetupTemplateName;
   HGLOBAL          hPrintTemplate;
   HGLOBAL          hSetupTemplate;
} PRINTDLGW, *LPPRINTDLGW;




typedef PRINTDLGA PRINTDLG;
typedef LPPRINTDLGA LPPRINTDLG;
#line 719 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"

BOOL  __stdcall     PrintDlgA(LPPRINTDLGA);
BOOL  __stdcall     PrintDlgW(LPPRINTDLGW);




#line 727 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"


























typedef struct tagDEVNAMES {
   WORD wDriverOffset;
   WORD wDeviceOffset;
   WORD wOutputOffset;
   WORD wDefault;
} DEVNAMES;

typedef DEVNAMES * LPDEVNAMES;




DWORD __stdcall     CommDlgExtendedError(void);










typedef UINT (__stdcall* LPPAGEPAINTHOOK)( HWND, UINT, WPARAM, LPARAM );
typedef UINT (__stdcall* LPPAGESETUPHOOK)( HWND, UINT, WPARAM, LPARAM );

typedef struct tagPSDA
{
    DWORD           lStructSize;
    HWND            hwndOwner;
    HGLOBAL         hDevMode;
    HGLOBAL         hDevNames;
    DWORD           Flags;
    POINT           ptPaperSize;
    RECT            rtMinMargin;
    RECT            rtMargin;
    HINSTANCE       hInstance;
    LPARAM          lCustData;
    LPPAGESETUPHOOK lpfnPageSetupHook;
    LPPAGEPAINTHOOK lpfnPagePaintHook;
    LPCSTR          lpPageSetupTemplateName;
    HGLOBAL         hPageSetupTemplate;
} PAGESETUPDLGA, * LPPAGESETUPDLGA;
typedef struct tagPSDW
{
    DWORD           lStructSize;
    HWND            hwndOwner;
    HGLOBAL         hDevMode;
    HGLOBAL         hDevNames;
    DWORD           Flags;
    POINT           ptPaperSize;
    RECT            rtMinMargin;
    RECT            rtMargin;
    HINSTANCE       hInstance;
    LPARAM          lCustData;
    LPPAGESETUPHOOK lpfnPageSetupHook;
    LPPAGEPAINTHOOK lpfnPagePaintHook;
    LPCWSTR         lpPageSetupTemplateName;
    HGLOBAL         hPageSetupTemplate;
} PAGESETUPDLGW, * LPPAGESETUPDLGW;




typedef PAGESETUPDLGA PAGESETUPDLG;
typedef LPPAGESETUPDLGA LPPAGESETUPDLG;
#line 820 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"

BOOL __stdcall PageSetupDlgA( LPPAGESETUPDLGA );
BOOL __stdcall PageSetupDlgW( LPPAGESETUPDLGW );




#line 828 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"





















#line 850 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"


}
#line 854 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"

#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"


#line 36 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"
#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"
#line 856 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"
#line 857 "c:\\programme\\microsoft visual studio\\vc98\\include\\commdlg.h"
#line 214 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"

#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"




















extern "C" {
#line 23 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"


#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\prsht.h"




















#line 22 "c:\\programme\\microsoft visual studio\\vc98\\include\\prsht.h"









#line 32 "c:\\programme\\microsoft visual studio\\vc98\\include\\prsht.h"
#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\prsht.h"



#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\prsht.h"

















#line 55 "c:\\programme\\microsoft visual studio\\vc98\\include\\prsht.h"
#line 56 "c:\\programme\\microsoft visual studio\\vc98\\include\\prsht.h"


extern "C" {
#line 60 "c:\\programme\\microsoft visual studio\\vc98\\include\\prsht.h"




















struct _PSP;
typedef struct _PSP * HPROPSHEETPAGE;


struct _PROPSHEETPAGEA;
struct _PROPSHEETPAGEW;
#line 87 "c:\\programme\\microsoft visual studio\\vc98\\include\\prsht.h"

typedef UINT (__stdcall  * LPFNPSPCALLBACKA)(HWND hwnd, UINT uMsg, struct _PROPSHEETPAGEA  *ppsp);
typedef UINT (__stdcall  * LPFNPSPCALLBACKW)(HWND hwnd, UINT uMsg, struct _PROPSHEETPAGEW  *ppsp);





#line 96 "c:\\programme\\microsoft visual studio\\vc98\\include\\prsht.h"



















#line 116 "c:\\programme\\microsoft visual studio\\vc98\\include\\prsht.h"








typedef struct _PROPSHEETPAGEA {
        DWORD           dwSize;
        DWORD           dwFlags;
        HINSTANCE       hInstance;
        union {
            LPCSTR          pszTemplate;

            LPCDLGTEMPLATE  pResource;


#line 135 "c:\\programme\\microsoft visual studio\\vc98\\include\\prsht.h"
        } ;
        union {
            HICON       hIcon;
            LPCSTR      pszIcon;
        } ;
        LPCSTR          pszTitle;
        DLGPROC         pfnDlgProc;
        LPARAM          lParam;
        LPFNPSPCALLBACKA pfnCallback;
        UINT  * pcRefParent;


        LPCSTR pszHeaderTitle;    
        LPCSTR pszHeaderSubTitle; 
#line 150 "c:\\programme\\microsoft visual studio\\vc98\\include\\prsht.h"
} PROPSHEETPAGEA,  *LPPROPSHEETPAGEA;
typedef const PROPSHEETPAGEA  *LPCPROPSHEETPAGEA;

typedef struct _PROPSHEETPAGEW {
        DWORD           dwSize;
        DWORD           dwFlags;
        HINSTANCE       hInstance;
        union {
            LPCWSTR          pszTemplate;

            LPCDLGTEMPLATE  pResource;


#line 164 "c:\\programme\\microsoft visual studio\\vc98\\include\\prsht.h"
        };
        union {
            HICON       hIcon;
            LPCWSTR      pszIcon;
        };
        LPCWSTR          pszTitle;
        DLGPROC         pfnDlgProc;
        LPARAM          lParam;
        LPFNPSPCALLBACKW pfnCallback;
        UINT  * pcRefParent;
        

        LPCWSTR pszHeaderTitle;    
        LPCWSTR pszHeaderSubTitle; 
#line 179 "c:\\programme\\microsoft visual studio\\vc98\\include\\prsht.h"
} PROPSHEETPAGEW,  *LPPROPSHEETPAGEW;
typedef const PROPSHEETPAGEW  *LPCPROPSHEETPAGEW;











#line 193 "c:\\programme\\microsoft visual studio\\vc98\\include\\prsht.h"





























#line 223 "c:\\programme\\microsoft visual studio\\vc98\\include\\prsht.h"


typedef int (__stdcall *PFNPROPSHEETCALLBACK)(HWND, UINT, LPARAM);




typedef struct _PROPSHEETHEADERA {
        DWORD           dwSize;
        DWORD           dwFlags;
        HWND            hwndParent;
        HINSTANCE       hInstance;
        union {
            HICON       hIcon;
            LPCSTR      pszIcon;
        };
        LPCSTR          pszCaption;

        UINT            nPages;
        union {
            UINT        nStartPage;
            LPCSTR      pStartPage;
        };
        union {
            LPCPROPSHEETPAGEA ppsp;
            HPROPSHEETPAGE  *phpage;
        };
        PFNPROPSHEETCALLBACK pfnCallback;


        union {
            HBITMAP hbmWatermark;
            LPCSTR pszbmWatermark;
        } ;
        HPALETTE hplWatermark;
        union {
            HBITMAP hbmHeader;     
            LPCSTR pszbmHeader;
        } ;
#line 263 "c:\\programme\\microsoft visual studio\\vc98\\include\\prsht.h"
} PROPSHEETHEADERA,  *LPPROPSHEETHEADERA;

typedef const PROPSHEETHEADERA  *LPCPROPSHEETHEADERA;

typedef struct _PROPSHEETHEADERW {
        DWORD           dwSize;
        DWORD           dwFlags;
        HWND            hwndParent;
        HINSTANCE       hInstance;
        union {
            HICON       hIcon;
            LPCWSTR     pszIcon;
        };
        LPCWSTR         pszCaption;


        UINT            nPages;
        union {
            UINT        nStartPage;
            LPCWSTR     pStartPage;
        };
        union {
            LPCPROPSHEETPAGEW ppsp;
            HPROPSHEETPAGE  *phpage;
        };
        PFNPROPSHEETCALLBACK pfnCallback;


        union {
            HBITMAP hbmWatermark;
            LPCWSTR pszbmWatermark;
        } ;
        HPALETTE hplWatermark;
        union {
            HBITMAP hbmHeader;
            LPCWSTR pszbmHeader;
        } ;
#line 301 "c:\\programme\\microsoft visual studio\\vc98\\include\\prsht.h"
} PROPSHEETHEADERW,  *LPPROPSHEETHEADERW;
typedef const PROPSHEETHEADERW  *LPCPROPSHEETHEADERW;











#line 315 "c:\\programme\\microsoft visual studio\\vc98\\include\\prsht.h"





__declspec(dllimport) HPROPSHEETPAGE __stdcall CreatePropertySheetPageA(LPCPROPSHEETPAGEA);
__declspec(dllimport) HPROPSHEETPAGE __stdcall CreatePropertySheetPageW(LPCPROPSHEETPAGEW);
__declspec(dllimport) BOOL           __stdcall DestroyPropertySheetPage(HPROPSHEETPAGE);
__declspec(dllimport) int            __stdcall PropertySheetA(LPCPROPSHEETHEADERA);
__declspec(dllimport) int            __stdcall PropertySheetW(LPCPROPSHEETHEADERW);







#line 333 "c:\\programme\\microsoft visual studio\\vc98\\include\\prsht.h"



typedef BOOL (__stdcall  * LPFNADDPROPSHEETPAGE)(HPROPSHEETPAGE, LPARAM);
typedef BOOL (__stdcall  * LPFNADDPROPSHEETPAGES)(LPVOID, LPFNADDPROPSHEETPAGE, LPARAM);


typedef struct _PSHNOTIFY
{
    NMHDR hdr;
    LPARAM lParam;
} PSHNOTIFY,  *LPPSHNOTIFY;


















#line 364 "c:\\programme\\microsoft visual studio\\vc98\\include\\prsht.h"































































#line 428 "c:\\programme\\microsoft visual studio\\vc98\\include\\prsht.h"












































#line 473 "c:\\programme\\microsoft visual studio\\vc98\\include\\prsht.h"









































}
#line 516 "c:\\programme\\microsoft visual studio\\vc98\\include\\prsht.h"


#line 519 "c:\\programme\\microsoft visual studio\\vc98\\include\\prsht.h"

#line 26 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"
#line 27 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

typedef struct _PRINTER_INFO_1A {
    DWORD   Flags;
    LPSTR   pDescription;
    LPSTR   pName;
    LPSTR   pComment;
} PRINTER_INFO_1A, *PPRINTER_INFO_1A, *LPPRINTER_INFO_1A;
typedef struct _PRINTER_INFO_1W {
    DWORD   Flags;
    LPWSTR  pDescription;
    LPWSTR  pName;
    LPWSTR  pComment;
} PRINTER_INFO_1W, *PPRINTER_INFO_1W, *LPPRINTER_INFO_1W;





typedef PRINTER_INFO_1A PRINTER_INFO_1;
typedef PPRINTER_INFO_1A PPRINTER_INFO_1;
typedef LPPRINTER_INFO_1A LPPRINTER_INFO_1;
#line 49 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

typedef struct _PRINTER_INFO_2A {
    LPSTR     pServerName;
    LPSTR     pPrinterName;
    LPSTR     pShareName;
    LPSTR     pPortName;
    LPSTR     pDriverName;
    LPSTR     pComment;
    LPSTR     pLocation;
    LPDEVMODEA pDevMode;
    LPSTR     pSepFile;
    LPSTR     pPrintProcessor;
    LPSTR     pDatatype;
    LPSTR     pParameters;
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
    DWORD   Attributes;
    DWORD   Priority;
    DWORD   DefaultPriority;
    DWORD   StartTime;
    DWORD   UntilTime;
    DWORD   Status;
    DWORD   cJobs;
    DWORD   AveragePPM;
} PRINTER_INFO_2A, *PPRINTER_INFO_2A, *LPPRINTER_INFO_2A;
typedef struct _PRINTER_INFO_2W {
    LPWSTR    pServerName;
    LPWSTR    pPrinterName;
    LPWSTR    pShareName;
    LPWSTR    pPortName;
    LPWSTR    pDriverName;
    LPWSTR    pComment;
    LPWSTR    pLocation;
    LPDEVMODEW pDevMode;
    LPWSTR    pSepFile;
    LPWSTR    pPrintProcessor;
    LPWSTR    pDatatype;
    LPWSTR    pParameters;
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
    DWORD   Attributes;
    DWORD   Priority;
    DWORD   DefaultPriority;
    DWORD   StartTime;
    DWORD   UntilTime;
    DWORD   Status;
    DWORD   cJobs;
    DWORD   AveragePPM;
} PRINTER_INFO_2W, *PPRINTER_INFO_2W, *LPPRINTER_INFO_2W;





typedef PRINTER_INFO_2A PRINTER_INFO_2;
typedef PPRINTER_INFO_2A PPRINTER_INFO_2;
typedef LPPRINTER_INFO_2A LPPRINTER_INFO_2;
#line 105 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

typedef struct _PRINTER_INFO_3 {
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
} PRINTER_INFO_3, *PPRINTER_INFO_3, *LPPRINTER_INFO_3;

typedef struct _PRINTER_INFO_4A {
    LPSTR   pPrinterName;
    LPSTR   pServerName;
    DWORD   Attributes;
} PRINTER_INFO_4A, *PPRINTER_INFO_4A, *LPPRINTER_INFO_4A;
typedef struct _PRINTER_INFO_4W {
    LPWSTR  pPrinterName;
    LPWSTR  pServerName;
    DWORD   Attributes;
} PRINTER_INFO_4W, *PPRINTER_INFO_4W, *LPPRINTER_INFO_4W;





typedef PRINTER_INFO_4A PRINTER_INFO_4;
typedef PPRINTER_INFO_4A PPRINTER_INFO_4;
typedef LPPRINTER_INFO_4A LPPRINTER_INFO_4;
#line 129 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

typedef struct _PRINTER_INFO_5A {
    LPSTR   pPrinterName;
    LPSTR   pPortName;
    DWORD   Attributes;
    DWORD   DeviceNotSelectedTimeout;
    DWORD   TransmissionRetryTimeout;
} PRINTER_INFO_5A, *PPRINTER_INFO_5A, *LPPRINTER_INFO_5A;
typedef struct _PRINTER_INFO_5W {
    LPWSTR  pPrinterName;
    LPWSTR  pPortName;
    DWORD   Attributes;
    DWORD   DeviceNotSelectedTimeout;
    DWORD   TransmissionRetryTimeout;
} PRINTER_INFO_5W, *PPRINTER_INFO_5W, *LPPRINTER_INFO_5W;





typedef PRINTER_INFO_5A PRINTER_INFO_5;
typedef PPRINTER_INFO_5A PPRINTER_INFO_5;
typedef LPPRINTER_INFO_5A LPPRINTER_INFO_5;
#line 153 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

typedef struct _PRINTER_INFO_6 {
    DWORD   dwStatus;
} PRINTER_INFO_6, *PPRINTER_INFO_6, *LPPRINTER_INFO_6;


typedef struct _PRINTER_INFO_7A {
    LPSTR    pszObjectGUID;
    DWORD    dwAction;
} PRINTER_INFO_7A, *PPRINTER_INFO_7A, *LPPRINTER_INFO_7A;
typedef struct _PRINTER_INFO_7W {
    LPWSTR   pszObjectGUID;
    DWORD    dwAction;
} PRINTER_INFO_7W, *PPRINTER_INFO_7W, *LPPRINTER_INFO_7W;





typedef PRINTER_INFO_7A PRINTER_INFO_7;
typedef PPRINTER_INFO_7A PPRINTER_INFO_7;
typedef LPPRINTER_INFO_7A LPPRINTER_INFO_7;
#line 176 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"






























































typedef struct _JOB_INFO_1A {
   DWORD    JobId;
   LPSTR      pPrinterName;
   LPSTR      pMachineName;
   LPSTR      pUserName;
   LPSTR      pDocument;
   LPSTR      pDatatype;
   LPSTR      pStatus;
   DWORD    Status;
   DWORD    Priority;
   DWORD    Position;
   DWORD    TotalPages;
   DWORD    PagesPrinted;
   SYSTEMTIME Submitted;
} JOB_INFO_1A, *PJOB_INFO_1A, *LPJOB_INFO_1A;
typedef struct _JOB_INFO_1W {
   DWORD    JobId;
   LPWSTR     pPrinterName;
   LPWSTR     pMachineName;
   LPWSTR     pUserName;
   LPWSTR     pDocument;
   LPWSTR     pDatatype;
   LPWSTR     pStatus;
   DWORD    Status;
   DWORD    Priority;
   DWORD    Position;
   DWORD    TotalPages;
   DWORD    PagesPrinted;
   SYSTEMTIME Submitted;
} JOB_INFO_1W, *PJOB_INFO_1W, *LPJOB_INFO_1W;





typedef JOB_INFO_1A JOB_INFO_1;
typedef PJOB_INFO_1A PJOB_INFO_1;
typedef LPJOB_INFO_1A LPJOB_INFO_1;
#line 277 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

typedef struct _JOB_INFO_2A {
   DWORD    JobId;
   LPSTR      pPrinterName;
   LPSTR      pMachineName;
   LPSTR      pUserName;
   LPSTR      pDocument;
   LPSTR      pNotifyName;
   LPSTR      pDatatype;
   LPSTR      pPrintProcessor;
   LPSTR      pParameters;
   LPSTR      pDriverName;
   LPDEVMODEA pDevMode;
   LPSTR      pStatus;
   PSECURITY_DESCRIPTOR pSecurityDescriptor;
   DWORD    Status;
   DWORD    Priority;
   DWORD    Position;
   DWORD    StartTime;
   DWORD    UntilTime;
   DWORD    TotalPages;
   DWORD    Size;
   SYSTEMTIME Submitted;    
   DWORD    Time;           
   DWORD    PagesPrinted;
} JOB_INFO_2A, *PJOB_INFO_2A, *LPJOB_INFO_2A;
typedef struct _JOB_INFO_2W {
   DWORD    JobId;
   LPWSTR     pPrinterName;
   LPWSTR     pMachineName;
   LPWSTR     pUserName;
   LPWSTR     pDocument;
   LPWSTR     pNotifyName;
   LPWSTR     pDatatype;
   LPWSTR     pPrintProcessor;
   LPWSTR     pParameters;
   LPWSTR     pDriverName;
   LPDEVMODEW pDevMode;
   LPWSTR     pStatus;
   PSECURITY_DESCRIPTOR pSecurityDescriptor;
   DWORD    Status;
   DWORD    Priority;
   DWORD    Position;
   DWORD    StartTime;
   DWORD    UntilTime;
   DWORD    TotalPages;
   DWORD    Size;
   SYSTEMTIME Submitted;    
   DWORD    Time;           
   DWORD    PagesPrinted;
} JOB_INFO_2W, *PJOB_INFO_2W, *LPJOB_INFO_2W;





typedef JOB_INFO_2A JOB_INFO_2;
typedef PJOB_INFO_2A PJOB_INFO_2;
typedef LPJOB_INFO_2A LPJOB_INFO_2;
#line 337 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

typedef struct _JOB_INFO_3 {
    DWORD   JobId;
    DWORD   NextJobId;
    DWORD   Reserved;
} JOB_INFO_3, *PJOB_INFO_3, *LPJOB_INFO_3;
























typedef struct _ADDJOB_INFO_1A {
    LPSTR     Path;
    DWORD   JobId;
} ADDJOB_INFO_1A, *PADDJOB_INFO_1A, *LPADDJOB_INFO_1A;
typedef struct _ADDJOB_INFO_1W {
    LPWSTR    Path;
    DWORD   JobId;
} ADDJOB_INFO_1W, *PADDJOB_INFO_1W, *LPADDJOB_INFO_1W;





typedef ADDJOB_INFO_1A ADDJOB_INFO_1;
typedef PADDJOB_INFO_1A PADDJOB_INFO_1;
typedef LPADDJOB_INFO_1A LPADDJOB_INFO_1;
#line 384 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

typedef struct _DRIVER_INFO_1A {
    LPSTR     pName;              
} DRIVER_INFO_1A, *PDRIVER_INFO_1A, *LPDRIVER_INFO_1A;
typedef struct _DRIVER_INFO_1W {
    LPWSTR    pName;              
} DRIVER_INFO_1W, *PDRIVER_INFO_1W, *LPDRIVER_INFO_1W;





typedef DRIVER_INFO_1A DRIVER_INFO_1;
typedef PDRIVER_INFO_1A PDRIVER_INFO_1;
typedef LPDRIVER_INFO_1A LPDRIVER_INFO_1;
#line 400 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

typedef struct _DRIVER_INFO_2A {
    DWORD   cVersion;
    LPSTR     pName;              
    LPSTR     pEnvironment;       
    LPSTR     pDriverPath;        
    LPSTR     pDataFile;          
    LPSTR     pConfigFile;        
} DRIVER_INFO_2A, *PDRIVER_INFO_2A, *LPDRIVER_INFO_2A;
typedef struct _DRIVER_INFO_2W {
    DWORD   cVersion;
    LPWSTR    pName;              
    LPWSTR    pEnvironment;       
    LPWSTR    pDriverPath;        
    LPWSTR    pDataFile;          
    LPWSTR    pConfigFile;        
} DRIVER_INFO_2W, *PDRIVER_INFO_2W, *LPDRIVER_INFO_2W;





typedef DRIVER_INFO_2A DRIVER_INFO_2;
typedef PDRIVER_INFO_2A PDRIVER_INFO_2;
typedef LPDRIVER_INFO_2A LPDRIVER_INFO_2;
#line 426 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

typedef struct _DRIVER_INFO_3A {
    DWORD   cVersion;
    LPSTR     pName;                    
    LPSTR     pEnvironment;             
    LPSTR     pDriverPath;              
    LPSTR     pDataFile;                
    LPSTR     pConfigFile;              
    LPSTR     pHelpFile;                
    LPSTR     pDependentFiles;          
    LPSTR     pMonitorName;             
    LPSTR     pDefaultDataType;         
} DRIVER_INFO_3A, *PDRIVER_INFO_3A, *LPDRIVER_INFO_3A;
typedef struct _DRIVER_INFO_3W {
    DWORD   cVersion;
    LPWSTR    pName;                    
    LPWSTR    pEnvironment;             
    LPWSTR    pDriverPath;              
    LPWSTR    pDataFile;                
    LPWSTR    pConfigFile;              
    LPWSTR    pHelpFile;                
    LPWSTR    pDependentFiles;          
    LPWSTR    pMonitorName;             
    LPWSTR    pDefaultDataType;         
} DRIVER_INFO_3W, *PDRIVER_INFO_3W, *LPDRIVER_INFO_3W;





typedef DRIVER_INFO_3A DRIVER_INFO_3;
typedef PDRIVER_INFO_3A PDRIVER_INFO_3;
typedef LPDRIVER_INFO_3A LPDRIVER_INFO_3;
#line 460 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"












typedef struct _DOC_INFO_1A {
    LPSTR     pDocName;
    LPSTR     pOutputFile;
    LPSTR     pDatatype;
} DOC_INFO_1A, *PDOC_INFO_1A, *LPDOC_INFO_1A;
typedef struct _DOC_INFO_1W {
    LPWSTR    pDocName;
    LPWSTR    pOutputFile;
    LPWSTR    pDatatype;
} DOC_INFO_1W, *PDOC_INFO_1W, *LPDOC_INFO_1W;





typedef DOC_INFO_1A DOC_INFO_1;
typedef PDOC_INFO_1A PDOC_INFO_1;
typedef LPDOC_INFO_1A LPDOC_INFO_1;
#line 491 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

typedef struct _FORM_INFO_1A {
    DWORD   Flags;
    LPSTR     pName;
    SIZEL   Size;
    RECTL   ImageableArea;
} FORM_INFO_1A, *PFORM_INFO_1A, *LPFORM_INFO_1A;
typedef struct _FORM_INFO_1W {
    DWORD   Flags;
    LPWSTR    pName;
    SIZEL   Size;
    RECTL   ImageableArea;
} FORM_INFO_1W, *PFORM_INFO_1W, *LPFORM_INFO_1W;





typedef FORM_INFO_1A FORM_INFO_1;
typedef PFORM_INFO_1A PFORM_INFO_1;
typedef LPFORM_INFO_1A LPFORM_INFO_1;
#line 513 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

typedef struct _DOC_INFO_2A {
    LPSTR     pDocName;
    LPSTR     pOutputFile;
    LPSTR     pDatatype;
    DWORD   dwMode;
    DWORD   JobId;
} DOC_INFO_2A, *PDOC_INFO_2A, *LPDOC_INFO_2A;
typedef struct _DOC_INFO_2W {
    LPWSTR    pDocName;
    LPWSTR    pOutputFile;
    LPWSTR    pDatatype;
    DWORD   dwMode;
    DWORD   JobId;
} DOC_INFO_2W, *PDOC_INFO_2W, *LPDOC_INFO_2W;





typedef DOC_INFO_2A DOC_INFO_2;
typedef PDOC_INFO_2A PDOC_INFO_2;
typedef LPDOC_INFO_2A LPDOC_INFO_2;
#line 537 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"











typedef struct _PRINTPROCESSOR_INFO_1A {
    LPSTR     pName;
} PRINTPROCESSOR_INFO_1A, *PPRINTPROCESSOR_INFO_1A, *LPPRINTPROCESSOR_INFO_1A;
typedef struct _PRINTPROCESSOR_INFO_1W {
    LPWSTR    pName;
} PRINTPROCESSOR_INFO_1W, *PPRINTPROCESSOR_INFO_1W, *LPPRINTPROCESSOR_INFO_1W;





typedef PRINTPROCESSOR_INFO_1A PRINTPROCESSOR_INFO_1;
typedef PPRINTPROCESSOR_INFO_1A PPRINTPROCESSOR_INFO_1;
typedef LPPRINTPROCESSOR_INFO_1A LPPRINTPROCESSOR_INFO_1;
#line 563 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

typedef struct _PRINTPROCESSOR_CAPS_1 {
    DWORD     dwLevel;
    DWORD     dwNupOptions;
    DWORD     dwPageOrderFlags;
    DWORD     dwNumberOfCopies;
} PRINTPROCESSOR_CAPS_1, *PPRINTPROCESSOR_CAPS_1;

typedef struct _PORT_INFO_1A {
    LPSTR     pName;
} PORT_INFO_1A, *PPORT_INFO_1A, *LPPORT_INFO_1A;
typedef struct _PORT_INFO_1W {
    LPWSTR    pName;
} PORT_INFO_1W, *PPORT_INFO_1W, *LPPORT_INFO_1W;





typedef PORT_INFO_1A PORT_INFO_1;
typedef PPORT_INFO_1A PPORT_INFO_1;
typedef LPPORT_INFO_1A LPPORT_INFO_1;
#line 586 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

typedef struct _PORT_INFO_2A {
    LPSTR     pPortName;
    LPSTR     pMonitorName;
    LPSTR     pDescription;
    DWORD     fPortType;
    DWORD     Reserved;
} PORT_INFO_2A, *PPORT_INFO_2A, *LPPORT_INFO_2A;
typedef struct _PORT_INFO_2W {
    LPWSTR    pPortName;
    LPWSTR    pMonitorName;
    LPWSTR    pDescription;
    DWORD     fPortType;
    DWORD     Reserved;
} PORT_INFO_2W, *PPORT_INFO_2W, *LPPORT_INFO_2W;





typedef PORT_INFO_2A PORT_INFO_2;
typedef PPORT_INFO_2A PPORT_INFO_2;
typedef LPPORT_INFO_2A LPPORT_INFO_2;
#line 610 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"






typedef struct _PORT_INFO_3A {
    DWORD   dwStatus;
    LPSTR   pszStatus;
    DWORD   dwSeverity;
} PORT_INFO_3A, *PPORT_INFO_3A, *LPPORT_INFO_3A;
typedef struct _PORT_INFO_3W {
    DWORD   dwStatus;
    LPWSTR  pszStatus;
    DWORD   dwSeverity;
} PORT_INFO_3W, *PPORT_INFO_3W, *LPPORT_INFO_3W;





typedef PORT_INFO_3A PORT_INFO_3;
typedef PPORT_INFO_3A PPORT_INFO_3;
typedef LPPORT_INFO_3A LPPORT_INFO_3;
#line 635 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"





















typedef struct _MONITOR_INFO_1A{
    LPSTR     pName;
} MONITOR_INFO_1A, *PMONITOR_INFO_1A, *LPMONITOR_INFO_1A;
typedef struct _MONITOR_INFO_1W{
    LPWSTR    pName;
} MONITOR_INFO_1W, *PMONITOR_INFO_1W, *LPMONITOR_INFO_1W;





typedef MONITOR_INFO_1A MONITOR_INFO_1;
typedef PMONITOR_INFO_1A PMONITOR_INFO_1;
typedef LPMONITOR_INFO_1A LPMONITOR_INFO_1;
#line 671 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

typedef struct _MONITOR_INFO_2A{
    LPSTR     pName;
    LPSTR     pEnvironment;
    LPSTR     pDLLName;
} MONITOR_INFO_2A, *PMONITOR_INFO_2A, *LPMONITOR_INFO_2A;
typedef struct _MONITOR_INFO_2W{
    LPWSTR    pName;
    LPWSTR    pEnvironment;
    LPWSTR    pDLLName;
} MONITOR_INFO_2W, *PMONITOR_INFO_2W, *LPMONITOR_INFO_2W;





typedef MONITOR_INFO_2A MONITOR_INFO_2;
typedef PMONITOR_INFO_2A PMONITOR_INFO_2;
typedef LPMONITOR_INFO_2A LPMONITOR_INFO_2;
#line 691 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

typedef struct _DATATYPES_INFO_1A{
    LPSTR     pName;
} DATATYPES_INFO_1A, *PDATATYPES_INFO_1A, *LPDATATYPES_INFO_1A;
typedef struct _DATATYPES_INFO_1W{
    LPWSTR    pName;
} DATATYPES_INFO_1W, *PDATATYPES_INFO_1W, *LPDATATYPES_INFO_1W;





typedef DATATYPES_INFO_1A DATATYPES_INFO_1;
typedef PDATATYPES_INFO_1A PDATATYPES_INFO_1;
typedef LPDATATYPES_INFO_1A LPDATATYPES_INFO_1;
#line 707 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

typedef struct _PRINTER_DEFAULTSA{
    LPSTR         pDatatype;
    LPDEVMODEA pDevMode;
    ACCESS_MASK DesiredAccess;
} PRINTER_DEFAULTSA, *PPRINTER_DEFAULTSA, *LPPRINTER_DEFAULTSA;
typedef struct _PRINTER_DEFAULTSW{
    LPWSTR        pDatatype;
    LPDEVMODEW pDevMode;
    ACCESS_MASK DesiredAccess;
} PRINTER_DEFAULTSW, *PPRINTER_DEFAULTSW, *LPPRINTER_DEFAULTSW;





typedef PRINTER_DEFAULTSA PRINTER_DEFAULTS;
typedef PPRINTER_DEFAULTSA PPRINTER_DEFAULTS;
typedef LPPRINTER_DEFAULTSA LPPRINTER_DEFAULTS;
#line 727 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

typedef struct _PRINTER_ENUM_VALUESA {
    LPSTR   pValueName;
    DWORD   cbValueName;
    DWORD   dwType;
    LPBYTE  pData;
    DWORD   cbData;
} PRINTER_ENUM_VALUESA, *PPRINTER_ENUM_VALUESA, *LPPRINTER_ENUM_VALUESA;
typedef struct _PRINTER_ENUM_VALUESW {
    LPWSTR  pValueName;
    DWORD   cbValueName;
    DWORD   dwType;
    LPBYTE  pData;
    DWORD   cbData;
} PRINTER_ENUM_VALUESW, *PPRINTER_ENUM_VALUESW, *LPPRINTER_ENUM_VALUESW;





typedef PRINTER_ENUM_VALUESA PRINTER_ENUM_VALUES;
typedef PPRINTER_ENUM_VALUESA PPRINTER_ENUM_VALUES;
typedef LPPRINTER_ENUM_VALUESA LPPRINTER_ENUM_VALUES;
#line 751 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

BOOL
__stdcall
EnumPrintersA(
    DWORD   Flags,
    LPSTR Name,
    DWORD   Level,
    LPBYTE  pPrinterEnum,
    DWORD   cbBuf,
    LPDWORD pcbNeeded,
    LPDWORD pcReturned
);
BOOL
__stdcall
EnumPrintersW(
    DWORD   Flags,
    LPWSTR Name,
    DWORD   Level,
    LPBYTE  pPrinterEnum,
    DWORD   cbBuf,
    LPDWORD pcbNeeded,
    LPDWORD pcReturned
);




#line 779 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"























BOOL
__stdcall
OpenPrinterA(
   LPSTR    pPrinterName,
   LPHANDLE phPrinter,
   LPPRINTER_DEFAULTSA pDefault
);
BOOL
__stdcall
OpenPrinterW(
   LPWSTR    pPrinterName,
   LPHANDLE phPrinter,
   LPPRINTER_DEFAULTSW pDefault
);




#line 821 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

BOOL
__stdcall
ResetPrinterA(
   HANDLE   hPrinter,
   LPPRINTER_DEFAULTSA pDefault
);
BOOL
__stdcall
ResetPrinterW(
   HANDLE   hPrinter,
   LPPRINTER_DEFAULTSW pDefault
);




#line 839 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

BOOL
__stdcall
SetJobA(
    HANDLE  hPrinter,
    DWORD   JobId,
    DWORD   Level,
    LPBYTE  pJob,
    DWORD   Command
);
BOOL
__stdcall
SetJobW(
    HANDLE  hPrinter,
    DWORD   JobId,
    DWORD   Level,
    LPBYTE  pJob,
    DWORD   Command
);




#line 863 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

BOOL
__stdcall
GetJobA(
   HANDLE   hPrinter,
   DWORD    JobId,
   DWORD    Level,
   LPBYTE   pJob,
   DWORD    cbBuf,
   LPDWORD  pcbNeeded
);
BOOL
__stdcall
GetJobW(
   HANDLE   hPrinter,
   DWORD    JobId,
   DWORD    Level,
   LPBYTE   pJob,
   DWORD    cbBuf,
   LPDWORD  pcbNeeded
);




#line 889 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

BOOL
__stdcall
EnumJobsA(
    HANDLE  hPrinter,
    DWORD   FirstJob,
    DWORD   NoJobs,
    DWORD   Level,
    LPBYTE  pJob,
    DWORD   cbBuf,
    LPDWORD pcbNeeded,
    LPDWORD pcReturned
);
BOOL
__stdcall
EnumJobsW(
    HANDLE  hPrinter,
    DWORD   FirstJob,
    DWORD   NoJobs,
    DWORD   Level,
    LPBYTE  pJob,
    DWORD   cbBuf,
    LPDWORD pcbNeeded,
    LPDWORD pcReturned
);




#line 919 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

HANDLE
__stdcall
AddPrinterA(
    LPSTR   pName,
    DWORD   Level,
    LPBYTE  pPrinter
);
HANDLE
__stdcall
AddPrinterW(
    LPWSTR   pName,
    DWORD   Level,
    LPBYTE  pPrinter
);




#line 939 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

BOOL
__stdcall
DeletePrinter(
   HANDLE   hPrinter
);

BOOL
__stdcall
SetPrinterA(
    HANDLE  hPrinter,
    DWORD   Level,
    LPBYTE  pPrinter,
    DWORD   Command
);
BOOL
__stdcall
SetPrinterW(
    HANDLE  hPrinter,
    DWORD   Level,
    LPBYTE  pPrinter,
    DWORD   Command
);




#line 967 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

BOOL
__stdcall
GetPrinterA(
    HANDLE  hPrinter,
    DWORD   Level,
    LPBYTE  pPrinter,
    DWORD   cbBuf,
    LPDWORD pcbNeeded
);
BOOL
__stdcall
GetPrinterW(
    HANDLE  hPrinter,
    DWORD   Level,
    LPBYTE  pPrinter,
    DWORD   cbBuf,
    LPDWORD pcbNeeded
);




#line 991 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

BOOL
__stdcall
AddPrinterDriverA(
    LPSTR   pName,
    DWORD   Level,
    LPBYTE  pDriverInfo
);
BOOL
__stdcall
AddPrinterDriverW(
    LPWSTR   pName,
    DWORD   Level,
    LPBYTE  pDriverInfo
);




#line 1011 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

BOOL
__stdcall
AddPrinterDriverExA(
    LPSTR   pName,
    DWORD     Level,
    LPBYTE    pDriverInfo,
    DWORD     dwFileCopyFlags
);
BOOL
__stdcall
AddPrinterDriverExW(
    LPWSTR   pName,
    DWORD     Level,
    LPBYTE    pDriverInfo,
    DWORD     dwFileCopyFlags
);




#line 1033 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

BOOL
__stdcall
EnumPrinterDriversA(
    LPSTR   pName,
    LPSTR   pEnvironment,
    DWORD   Level,
    LPBYTE  pDriverInfo,
    DWORD   cbBuf,
    LPDWORD pcbNeeded,
    LPDWORD pcReturned
);
BOOL
__stdcall
EnumPrinterDriversW(
    LPWSTR   pName,
    LPWSTR   pEnvironment,
    DWORD   Level,
    LPBYTE  pDriverInfo,
    DWORD   cbBuf,
    LPDWORD pcbNeeded,
    LPDWORD pcReturned
);




#line 1061 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

BOOL
__stdcall
GetPrinterDriverA(
    HANDLE  hPrinter,
    LPSTR   pEnvironment,
    DWORD   Level,
    LPBYTE  pDriverInfo,
    DWORD   cbBuf,
    LPDWORD pcbNeeded
);
BOOL
__stdcall
GetPrinterDriverW(
    HANDLE  hPrinter,
    LPWSTR   pEnvironment,
    DWORD   Level,
    LPBYTE  pDriverInfo,
    DWORD   cbBuf,
    LPDWORD pcbNeeded
);




#line 1087 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

BOOL
__stdcall
GetPrinterDriverDirectoryA(
    LPSTR   pName,
    LPSTR   pEnvironment,
    DWORD   Level,
    LPBYTE  pDriverDirectory,
    DWORD   cbBuf,
    LPDWORD pcbNeeded
);
BOOL
__stdcall
GetPrinterDriverDirectoryW(
    LPWSTR   pName,
    LPWSTR   pEnvironment,
    DWORD   Level,
    LPBYTE  pDriverDirectory,
    DWORD   cbBuf,
    LPDWORD pcbNeeded
);




#line 1113 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

BOOL
__stdcall
DeletePrinterDriverA(
   LPSTR    pName,
   LPSTR    pEnvironment,
   LPSTR    pDriverName
);
BOOL
__stdcall
DeletePrinterDriverW(
   LPWSTR    pName,
   LPWSTR    pEnvironment,
   LPWSTR    pDriverName
);




#line 1133 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

BOOL
__stdcall
DeletePrinterDriverExA(
   LPSTR    pName,
   LPSTR    pEnvironment,
   LPSTR    pDriverName,
   DWORD      dwDeleteFlag,
   DWORD      dwVersionFlag
);
BOOL
__stdcall
DeletePrinterDriverExW(
   LPWSTR    pName,
   LPWSTR    pEnvironment,
   LPWSTR    pDriverName,
   DWORD      dwDeleteFlag,
   DWORD      dwVersionFlag
);




#line 1157 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

BOOL
__stdcall
AddPerMachineConnectionA(
   LPCSTR    pServer,
   LPCSTR    pPrinterName,
   LPCSTR    pPrintServer,
   LPCSTR    pProvider
);
BOOL
__stdcall
AddPerMachineConnectionW(
   LPCWSTR    pServer,
   LPCWSTR    pPrinterName,
   LPCWSTR    pPrintServer,
   LPCWSTR    pProvider
);




#line 1179 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

BOOL
__stdcall
DeletePerMachineConnectionA(
   LPCSTR    pServer,
   LPCSTR    pPrinterName
);
BOOL
__stdcall
DeletePerMachineConnectionW(
   LPCWSTR    pServer,
   LPCWSTR    pPrinterName
);




#line 1197 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

BOOL
__stdcall
EnumPerMachineConnectionsA(
    LPCSTR   pServer,
    LPBYTE  pPrinterEnum,
    DWORD   cbBuf,
    LPDWORD pcbNeeded,
    LPDWORD pcReturned
);
BOOL
__stdcall
EnumPerMachineConnectionsW(
    LPCWSTR   pServer,
    LPBYTE  pPrinterEnum,
    DWORD   cbBuf,
    LPDWORD pcbNeeded,
    LPDWORD pcReturned
);




#line 1221 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

BOOL
__stdcall
AddPrintProcessorA(
    LPSTR   pName,
    LPSTR   pEnvironment,
    LPSTR   pPathName,
    LPSTR   pPrintProcessorName
);
BOOL
__stdcall
AddPrintProcessorW(
    LPWSTR   pName,
    LPWSTR   pEnvironment,
    LPWSTR   pPathName,
    LPWSTR   pPrintProcessorName
);




#line 1243 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

BOOL
__stdcall
EnumPrintProcessorsA(
    LPSTR   pName,
    LPSTR   pEnvironment,
    DWORD   Level,
    LPBYTE  pPrintProcessorInfo,
    DWORD   cbBuf,
    LPDWORD pcbNeeded,
    LPDWORD pcReturned
);
BOOL
__stdcall
EnumPrintProcessorsW(
    LPWSTR   pName,
    LPWSTR   pEnvironment,
    DWORD   Level,
    LPBYTE  pPrintProcessorInfo,
    DWORD   cbBuf,
    LPDWORD pcbNeeded,
    LPDWORD pcReturned
);




#line 1271 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"



BOOL
__stdcall
GetPrintProcessorDirectoryA(
    LPSTR   pName,
    LPSTR   pEnvironment,
    DWORD   Level,
    LPBYTE  pPrintProcessorInfo,
    DWORD   cbBuf,
    LPDWORD pcbNeeded
);
BOOL
__stdcall
GetPrintProcessorDirectoryW(
    LPWSTR   pName,
    LPWSTR   pEnvironment,
    DWORD   Level,
    LPBYTE  pPrintProcessorInfo,
    DWORD   cbBuf,
    LPDWORD pcbNeeded
);




#line 1299 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

BOOL
__stdcall
EnumPrintProcessorDatatypesA(
    LPSTR   pName,
    LPSTR   pPrintProcessorName,
    DWORD   Level,
    LPBYTE  pDatatypes,
    DWORD   cbBuf,
    LPDWORD pcbNeeded,
    LPDWORD pcReturned
);
BOOL
__stdcall
EnumPrintProcessorDatatypesW(
    LPWSTR   pName,
    LPWSTR   pPrintProcessorName,
    DWORD   Level,
    LPBYTE  pDatatypes,
    DWORD   cbBuf,
    LPDWORD pcbNeeded,
    LPDWORD pcReturned
);




#line 1327 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

BOOL
__stdcall
DeletePrintProcessorA(
    LPSTR   pName,
    LPSTR   pEnvironment,
    LPSTR   pPrintProcessorName
);
BOOL
__stdcall
DeletePrintProcessorW(
    LPWSTR   pName,
    LPWSTR   pEnvironment,
    LPWSTR   pPrintProcessorName
);




#line 1347 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

DWORD
__stdcall
StartDocPrinterA(
    HANDLE  hPrinter,
    DWORD   Level,
    LPBYTE  pDocInfo
);
DWORD
__stdcall
StartDocPrinterW(
    HANDLE  hPrinter,
    DWORD   Level,
    LPBYTE  pDocInfo
);




#line 1367 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

BOOL
__stdcall
StartPagePrinter(
    HANDLE  hPrinter
);

BOOL
__stdcall
WritePrinter(
    HANDLE  hPrinter,
    LPVOID  pBuf,
    DWORD   cbBuf,
    LPDWORD pcWritten
);


BOOL
__stdcall
EndPagePrinter(
   HANDLE   hPrinter
);

BOOL
__stdcall
AbortPrinter(
   HANDLE   hPrinter
);

BOOL
__stdcall
ReadPrinter(
    HANDLE  hPrinter,
    LPVOID  pBuf,
    DWORD   cbBuf,
    LPDWORD pNoBytesRead
);

BOOL
__stdcall
EndDocPrinter(
   HANDLE   hPrinter
);

BOOL
__stdcall
AddJobA(
    HANDLE  hPrinter,
    DWORD   Level,
    LPBYTE  pData,
    DWORD   cbBuf,
    LPDWORD pcbNeeded
);
BOOL
__stdcall
AddJobW(
    HANDLE  hPrinter,
    DWORD   Level,
    LPBYTE  pData,
    DWORD   cbBuf,
    LPDWORD pcbNeeded
);




#line 1434 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

BOOL
__stdcall
ScheduleJob(
    HANDLE  hPrinter,
    DWORD   JobId
);

BOOL
__stdcall
PrinterProperties(
    HWND    hWnd,
    HANDLE  hPrinter
);

LONG
__stdcall
DocumentPropertiesA(
    HWND      hWnd,
    HANDLE    hPrinter,
    LPSTR   pDeviceName,
    PDEVMODEA pDevModeOutput,
    PDEVMODEA pDevModeInput,
    DWORD     fMode
);
LONG
__stdcall
DocumentPropertiesW(
    HWND      hWnd,
    HANDLE    hPrinter,
    LPWSTR   pDeviceName,
    PDEVMODEW pDevModeOutput,
    PDEVMODEW pDevModeInput,
    DWORD     fMode
);




#line 1474 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

LONG
__stdcall
AdvancedDocumentPropertiesA(
    HWND    hWnd,
    HANDLE  hPrinter,
    LPSTR   pDeviceName,
    PDEVMODEA pDevModeOutput,
    PDEVMODEA pDevModeInput
);
LONG
__stdcall
AdvancedDocumentPropertiesW(
    HWND    hWnd,
    HANDLE  hPrinter,
    LPWSTR   pDeviceName,
    PDEVMODEW pDevModeOutput,
    PDEVMODEW pDevModeInput
);




#line 1498 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"


DWORD
__stdcall
GetPrinterDataA(
    HANDLE   hPrinter,
    LPSTR  pValueName,
    LPDWORD  pType,
    LPBYTE   pData,
    DWORD    nSize,
    LPDWORD  pcbNeeded
);
DWORD
__stdcall
GetPrinterDataW(
    HANDLE   hPrinter,
    LPWSTR  pValueName,
    LPDWORD  pType,
    LPBYTE   pData,
    DWORD    nSize,
    LPDWORD  pcbNeeded
);




#line 1525 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

DWORD
__stdcall
GetPrinterDataExA(
    HANDLE   hPrinter,
    LPCSTR pKeyName,
    LPCSTR pValueName,
    LPDWORD  pType,
    LPBYTE   pData,
    DWORD    nSize,
    LPDWORD  pcbNeeded
);
DWORD
__stdcall
GetPrinterDataExW(
    HANDLE   hPrinter,
    LPCWSTR pKeyName,
    LPCWSTR pValueName,
    LPDWORD  pType,
    LPBYTE   pData,
    DWORD    nSize,
    LPDWORD  pcbNeeded
);




#line 1553 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

DWORD
__stdcall
EnumPrinterDataA(
    HANDLE   hPrinter,
    DWORD    dwIndex,
    LPSTR  pValueName,
    DWORD    cbValueName,
    LPDWORD  pcbValueName,
    LPDWORD  pType,
    LPBYTE   pData,
    DWORD    cbData,
    LPDWORD  pcbData
);
DWORD
__stdcall
EnumPrinterDataW(
    HANDLE   hPrinter,
    DWORD    dwIndex,
    LPWSTR  pValueName,
    DWORD    cbValueName,
    LPDWORD  pcbValueName,
    LPDWORD  pType,
    LPBYTE   pData,
    DWORD    cbData,
    LPDWORD  pcbData
);




#line 1585 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

DWORD
__stdcall
EnumPrinterDataExA(
    HANDLE   hPrinter,
    LPCSTR pKeyName,
    LPBYTE   pEnumValues,
    DWORD    cbEnumValues,
    LPDWORD  pcbEnumValues,
    LPDWORD  pnEnumValues
);
DWORD
__stdcall
EnumPrinterDataExW(
    HANDLE   hPrinter,
    LPCWSTR pKeyName,
    LPBYTE   pEnumValues,
    DWORD    cbEnumValues,
    LPDWORD  pcbEnumValues,
    LPDWORD  pnEnumValues
);




#line 1611 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

DWORD
__stdcall
EnumPrinterKeyA(
    HANDLE   hPrinter,
    LPCSTR pKeyName,
    LPSTR  pSubkey,
    DWORD    cbSubkey,
    LPDWORD  pcbSubkey
);
DWORD
__stdcall
EnumPrinterKeyW(
    HANDLE   hPrinter,
    LPCWSTR pKeyName,
    LPWSTR  pSubkey,
    DWORD    cbSubkey,
    LPDWORD  pcbSubkey
);




#line 1635 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"


DWORD
__stdcall
SetPrinterDataA(
    HANDLE  hPrinter,
    LPSTR pValueName,
    DWORD   Type,
    LPBYTE  pData,
    DWORD   cbData
);
DWORD
__stdcall
SetPrinterDataW(
    HANDLE  hPrinter,
    LPWSTR pValueName,
    DWORD   Type,
    LPBYTE  pData,
    DWORD   cbData
);




#line 1660 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"


DWORD
__stdcall
SetPrinterDataExA(
    HANDLE   hPrinter,
    LPCSTR pKeyName,
    LPCSTR pValueName,
    DWORD    Type,
    LPBYTE   pData,
    DWORD    cbData
);
DWORD
__stdcall
SetPrinterDataExW(
    HANDLE   hPrinter,
    LPCWSTR pKeyName,
    LPCWSTR pValueName,
    DWORD    Type,
    LPBYTE   pData,
    DWORD    cbData
);




#line 1687 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"



DWORD
__stdcall
DeletePrinterDataA(
    HANDLE  hPrinter,
    LPSTR pValueName
);
DWORD
__stdcall
DeletePrinterDataW(
    HANDLE  hPrinter,
    LPWSTR pValueName
);




#line 1707 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"


DWORD
__stdcall
DeletePrinterDataExA(
    HANDLE   hPrinter,
    LPCSTR pKeyName,
    LPCSTR pValueName
);
DWORD
__stdcall
DeletePrinterDataExW(
    HANDLE   hPrinter,
    LPCWSTR pKeyName,
    LPCWSTR pValueName
);




#line 1728 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"


DWORD
__stdcall
DeletePrinterKeyA(
    HANDLE   hPrinter,
    LPCSTR pKeyName
);
DWORD
__stdcall
DeletePrinterKeyW(
    HANDLE   hPrinter,
    LPCWSTR pKeyName
);




#line 1747 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"



























































typedef struct _PRINTER_NOTIFY_OPTIONS_TYPE {
    WORD Type;
    WORD Reserved0;
    DWORD Reserved1;
    DWORD Reserved2;
    DWORD Count;
    PWORD pFields;
} PRINTER_NOTIFY_OPTIONS_TYPE, *PPRINTER_NOTIFY_OPTIONS_TYPE, *LPPRINTER_NOTIFY_OPTIONS_TYPE;




typedef struct _PRINTER_NOTIFY_OPTIONS {
    DWORD Version;
    DWORD Flags;
    DWORD Count;
    PPRINTER_NOTIFY_OPTIONS_TYPE pTypes;
} PRINTER_NOTIFY_OPTIONS, *PPRINTER_NOTIFY_OPTIONS, *LPPRINTER_NOTIFY_OPTIONS;





typedef struct _PRINTER_NOTIFY_INFO_DATA {
    WORD Type;
    WORD Field;
    DWORD Reserved;
    DWORD Id;
    union {
        DWORD adwData[2];
        struct {
            DWORD  cbBuf;
            LPVOID pBuf;
        } Data;
    } NotifyData;
} PRINTER_NOTIFY_INFO_DATA, *PPRINTER_NOTIFY_INFO_DATA, *LPPRINTER_NOTIFY_INFO_DATA;

typedef struct _PRINTER_NOTIFY_INFO {
    DWORD Version;
    DWORD Flags;
    DWORD Count;
    PRINTER_NOTIFY_INFO_DATA aData[1];
} PRINTER_NOTIFY_INFO, *PPRINTER_NOTIFY_INFO, *LPPRINTER_NOTIFY_INFO;

DWORD
__stdcall
WaitForPrinterChange(
    HANDLE  hPrinter,
    DWORD   Flags
);

HANDLE
__stdcall
FindFirstPrinterChangeNotification(
    HANDLE  hPrinter,
    DWORD   fdwFlags,
    DWORD   fdwOptions,
    LPVOID  pPrinterNotifyOptions
);


BOOL
__stdcall
FindNextPrinterChangeNotification(
    HANDLE hChange,
    PDWORD pdwChange,
    LPVOID pvReserved,
    LPVOID *ppPrinterNotifyInfo
);

BOOL
__stdcall
FreePrinterNotifyInfo(
    PPRINTER_NOTIFY_INFO pPrinterNotifyInfo
);

BOOL
__stdcall
FindClosePrinterChangeNotification(
    HANDLE hChange
);





























DWORD
__stdcall
PrinterMessageBoxA(
    HANDLE  hPrinter,
    DWORD   Error,
    HWND    hWnd,
    LPSTR   pText,
    LPSTR   pCaption,
    DWORD   dwType
);
DWORD
__stdcall
PrinterMessageBoxW(
    HANDLE  hPrinter,
    DWORD   Error,
    HWND    hWnd,
    LPWSTR   pText,
    LPWSTR   pCaption,
    DWORD   dwType
);




#line 1941 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"











BOOL
__stdcall
ClosePrinter(
    HANDLE hPrinter
);

BOOL
__stdcall
AddFormA(
    HANDLE  hPrinter,
    DWORD   Level,
    LPBYTE  pForm
);
BOOL
__stdcall
AddFormW(
    HANDLE  hPrinter,
    DWORD   Level,
    LPBYTE  pForm
);




#line 1977 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"



BOOL
__stdcall
DeleteFormA(
    HANDLE  hPrinter,
    LPSTR   pFormName
);
BOOL
__stdcall
DeleteFormW(
    HANDLE  hPrinter,
    LPWSTR   pFormName
);




#line 1997 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"



BOOL
__stdcall
GetFormA(
    HANDLE  hPrinter,
    LPSTR   pFormName,
    DWORD   Level,
    LPBYTE  pForm,
    DWORD   cbBuf,
    LPDWORD pcbNeeded
);
BOOL
__stdcall
GetFormW(
    HANDLE  hPrinter,
    LPWSTR   pFormName,
    DWORD   Level,
    LPBYTE  pForm,
    DWORD   cbBuf,
    LPDWORD pcbNeeded
);




#line 2025 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"



BOOL
__stdcall
SetFormA(
    HANDLE  hPrinter,
    LPSTR   pFormName,
    DWORD   Level,
    LPBYTE  pForm
);
BOOL
__stdcall
SetFormW(
    HANDLE  hPrinter,
    LPWSTR   pFormName,
    DWORD   Level,
    LPBYTE  pForm
);




#line 2049 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"



BOOL
__stdcall
EnumFormsA(
    HANDLE  hPrinter,
    DWORD   Level,
    LPBYTE  pForm,
    DWORD   cbBuf,
    LPDWORD pcbNeeded,
    LPDWORD pcReturned
);
BOOL
__stdcall
EnumFormsW(
    HANDLE  hPrinter,
    DWORD   Level,
    LPBYTE  pForm,
    DWORD   cbBuf,
    LPDWORD pcbNeeded,
    LPDWORD pcReturned
);




#line 2077 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"



BOOL
__stdcall
EnumMonitorsA(
    LPSTR   pName,
    DWORD   Level,
    LPBYTE  pMonitors,
    DWORD   cbBuf,
    LPDWORD pcbNeeded,
    LPDWORD pcReturned
);
BOOL
__stdcall
EnumMonitorsW(
    LPWSTR   pName,
    DWORD   Level,
    LPBYTE  pMonitors,
    DWORD   cbBuf,
    LPDWORD pcbNeeded,
    LPDWORD pcReturned
);




#line 2105 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"



BOOL
__stdcall
AddMonitorA(
    LPSTR   pName,
    DWORD   Level,
    LPBYTE  pMonitors
);
BOOL
__stdcall
AddMonitorW(
    LPWSTR   pName,
    DWORD   Level,
    LPBYTE  pMonitors
);




#line 2127 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"



BOOL
__stdcall
DeleteMonitorA(
    LPSTR   pName,
    LPSTR   pEnvironment,
    LPSTR   pMonitorName
);
BOOL
__stdcall
DeleteMonitorW(
    LPWSTR   pName,
    LPWSTR   pEnvironment,
    LPWSTR   pMonitorName
);




#line 2149 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"



BOOL
__stdcall
EnumPortsA(
    LPSTR   pName,
    DWORD   Level,
    LPBYTE  pPorts,
    DWORD   cbBuf,
    LPDWORD pcbNeeded,
    LPDWORD pcReturned
);
BOOL
__stdcall
EnumPortsW(
    LPWSTR   pName,
    DWORD   Level,
    LPBYTE  pPorts,
    DWORD   cbBuf,
    LPDWORD pcbNeeded,
    LPDWORD pcReturned
);




#line 2177 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"



BOOL
__stdcall
AddPortA(
    LPSTR   pName,
    HWND    hWnd,
    LPSTR   pMonitorName
);
BOOL
__stdcall
AddPortW(
    LPWSTR   pName,
    HWND    hWnd,
    LPWSTR   pMonitorName
);




#line 2199 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"



BOOL
__stdcall
ConfigurePortA(
    LPSTR   pName,
    HWND    hWnd,
    LPSTR   pPortName
);
BOOL
__stdcall
ConfigurePortW(
    LPWSTR   pName,
    HWND    hWnd,
    LPWSTR   pPortName
);




#line 2221 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

BOOL
__stdcall
DeletePortA(
    LPSTR pName,
    HWND    hWnd,
    LPSTR pPortName
);
BOOL
__stdcall
DeletePortW(
    LPWSTR pName,
    HWND    hWnd,
    LPWSTR pPortName
);




#line 2241 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

BOOL
__stdcall
XcvDataW(
    HANDLE  hXcv,
    PCWSTR  pszDataName,
    PBYTE   pInputData,
    DWORD   cbInputData,
    PBYTE   pOutputData,
    DWORD   cbOutputData,
    PDWORD  pcbOutputNeeded,
    PDWORD  pdwStatus
);



BOOL
__stdcall
SetPortA(
    LPSTR     pName,
    LPSTR     pPortName,
    DWORD       dwLevel,
    LPBYTE      pPortInfo
);
BOOL
__stdcall
SetPortW(
    LPWSTR     pName,
    LPWSTR     pPortName,
    DWORD       dwLevel,
    LPBYTE      pPortInfo
);




#line 2278 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"



BOOL
__stdcall
AddPrinterConnectionA(
    LPSTR   pName
);
BOOL
__stdcall
AddPrinterConnectionW(
    LPWSTR   pName
);




#line 2296 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"



BOOL
__stdcall
DeletePrinterConnectionA(
    LPSTR   pName
);
BOOL
__stdcall
DeletePrinterConnectionW(
    LPWSTR   pName
);




#line 2314 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"



HANDLE
__stdcall
ConnectToPrinterDlg(
    HWND    hwnd,
    DWORD   Flags
);

typedef struct _PROVIDOR_INFO_1A{
    LPSTR     pName;
    LPSTR     pEnvironment;
    LPSTR     pDLLName;
} PROVIDOR_INFO_1A, *PPROVIDOR_INFO_1A, *LPPROVIDOR_INFO_1A;
typedef struct _PROVIDOR_INFO_1W{
    LPWSTR    pName;
    LPWSTR    pEnvironment;
    LPWSTR    pDLLName;
} PROVIDOR_INFO_1W, *PPROVIDOR_INFO_1W, *LPPROVIDOR_INFO_1W;





typedef PROVIDOR_INFO_1A PROVIDOR_INFO_1;
typedef PPROVIDOR_INFO_1A PPROVIDOR_INFO_1;
typedef LPPROVIDOR_INFO_1A LPPROVIDOR_INFO_1;
#line 2343 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"



BOOL
__stdcall
AddPrintProvidorA(
    LPSTR  pName,
    DWORD    level,
    LPBYTE   pProvidorInfo
);
BOOL
__stdcall
AddPrintProvidorW(
    LPWSTR  pName,
    DWORD    level,
    LPBYTE   pProvidorInfo
);




#line 2365 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

BOOL
__stdcall
DeletePrintProvidorA(
    LPSTR   pName,
    LPSTR   pEnvironment,
    LPSTR   pPrintProvidorName
);
BOOL
__stdcall
DeletePrintProvidorW(
    LPWSTR   pName,
    LPWSTR   pEnvironment,
    LPWSTR   pPrintProvidorName
);




#line 2385 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

































































































































































DWORD
__stdcall
SetPrinterHTMLViewA(
    HANDLE hPrinter,
    DWORD dwView,
    LPCSTR lpszPath
);
DWORD
__stdcall
SetPrinterHTMLViewW(
    HANDLE hPrinter,
    DWORD dwView,
    LPCWSTR lpszPath
);




#line 2565 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

DWORD
__stdcall
GetPrinterHTMLViewA(
    HANDLE hPrinter,
    DWORD dwView,
    LPSTR lpszPath,
    DWORD nSize,
    LPDWORD pcbNeeded
);
DWORD
__stdcall
GetPrinterHTMLViewW(
    HANDLE hPrinter,
    DWORD dwView,
    LPWSTR lpszPath,
    DWORD nSize,
    LPDWORD pcbNeeded
);




#line 2589 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"


}
#line 2593 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"

#line 2595 "c:\\programme\\microsoft visual studio\\vc98\\include\\winspool.h"
#line 216 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"



#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"















#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push)
#line 28 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack8.h"
#pragma pack(8)


#line 32 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack8.h"
#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack8.h"
#line 17 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"









#line 27 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"






#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\winerror.h"








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 34 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"







#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"











#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"
















#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"





































































































































































































#line 13 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"

















































#line 51 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"


















#line 70 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"



#line 74 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"

#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcnsip.h"



















extern "C" {
#line 22 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcnsip.h"

typedef struct
{
   RPC_NS_HANDLE        LookupContext;
   RPC_BINDING_HANDLE   ProposedHandle;
   RPC_BINDING_VECTOR * Bindings;

} RPC_IMPORT_CONTEXT_P, * PRPC_IMPORT_CONTEXT_P;




RPC_STATUS __stdcall
I_RpcNsGetBuffer(
     PRPC_MESSAGE Message
    );

RPC_STATUS __stdcall
I_RpcNsSendReceive(
     PRPC_MESSAGE Message,
     RPC_BINDING_HANDLE  * Handle
    );

void __stdcall
I_RpcNsRaiseException(
     PRPC_MESSAGE Message,
     RPC_STATUS Status
    );

RPC_STATUS __stdcall
I_RpcReBindBuffer(
     PRPC_MESSAGE Message
    );

RPC_STATUS __stdcall
I_NsServerBindSearch(
    );

RPC_STATUS __stdcall
I_NsClientBindSearch(
    );

void __stdcall
I_NsClientBindDone(
    );


}
#line 71 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcnsip.h"

#line 73 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcnsip.h"
#line 76 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"


extern "C" {
#line 80 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"



























































#line 140 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"


#line 143 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"








#line 152 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"

#line 154 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"



#line 158 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"

#line 160 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"





#line 166 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"






typedef unsigned char byte;
typedef unsigned char boolean;










#line 185 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"

#line 187 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"
























#line 212 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"
#line 213 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"











void  * __stdcall MIDL_user_allocate(size_t);
void             __stdcall MIDL_user_free( void  * );





#line 232 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"









#line 242 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"











typedef void  * NDR_CCONTEXT;

typedef struct
    {
    void  * pad[2];
    void  * userContext;
    }  * NDR_SCONTEXT;





typedef void (__stdcall  * NDR_RUNDOWN)(void  * context);

typedef struct _SCONTEXT_QUEUE {
    unsigned long   NumberOfObjects;
    NDR_SCONTEXT  * ArrayOfObjects;
    } SCONTEXT_QUEUE,  * PSCONTEXT_QUEUE;

__declspec(dllimport)
RPC_BINDING_HANDLE
__stdcall
NDRCContextBinding (
     NDR_CCONTEXT     CContext
    );

__declspec(dllimport)
void
__stdcall
NDRCContextMarshall (
      NDR_CCONTEXT    CContext,
     void  *pBuff
    );

__declspec(dllimport)
void
__stdcall
NDRCContextUnmarshall (
     NDR_CCONTEXT  *pCContext,
      RPC_BINDING_HANDLE      hBinding,
      void  *        pBuff,
      unsigned long           DataRepresentation
    );

__declspec(dllimport)
void
__stdcall
NDRSContextMarshall (
      NDR_SCONTEXT    CContext,
     void  *pBuff,
      NDR_RUNDOWN     userRunDownIn
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NDRSContextUnmarshall (
      void  *pBuff,
      unsigned long   DataRepresentation
    );

__declspec(dllimport)
void 
__stdcall
NDRSContextMarshallEx (
      RPC_BINDING_HANDLE  BindingHandle, 
      NDR_SCONTEXT        CContext,
     void      *pBuff,
      NDR_RUNDOWN         userRunDownIn
    );

__declspec(dllimport)
NDR_SCONTEXT 
__stdcall
NDRSContextUnmarshallEx (
      RPC_BINDING_HANDLE  BindingHandle, 
      void      *pBuff,
      unsigned long       DataRepresentation
    );

__declspec(dllimport)
void
__stdcall
RpcSsDestroyClientContext (
     void  *  * ContextHandle
    );


















































































#line 422 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"





__declspec(dllimport)
void
__stdcall
NDRcopy (
     void  *pTarget,
     void  *pSource,
     unsigned int size
    );

__declspec(dllimport)
size_t
__stdcall
MIDL_wchar_strlen (
     wchar_t  *   s
    );

__declspec(dllimport)
void
__stdcall
MIDL_wchar_strcpy (
     void  *     t,
     wchar_t  *   s
    );

__declspec(dllimport)
void
__stdcall
char_from_ndr (
      PRPC_MESSAGE                           SourceMessage,
     unsigned char  *                 Target
    );

__declspec(dllimport)
void
__stdcall
char_array_from_ndr (
      PRPC_MESSAGE                           SourceMessage,
     unsigned long                              LowerIndex,
     unsigned long                              UpperIndex,
     unsigned char  *                 Target
    );

__declspec(dllimport)
void
__stdcall
short_from_ndr (
      PRPC_MESSAGE                           source,
     unsigned short  *                target
    );

__declspec(dllimport)
void
__stdcall
short_array_from_ndr(
      PRPC_MESSAGE                           SourceMessage,
     unsigned long                              LowerIndex,
     unsigned long                              UpperIndex,
     unsigned short  *                Target
    );

__declspec(dllimport)
void
__stdcall
short_from_ndr_temp (
      unsigned char  *  *  source,
     unsigned short  *                target,
     unsigned long                              format
    );

__declspec(dllimport)
void
__stdcall
long_from_ndr (
      PRPC_MESSAGE                           source,
     unsigned long  *                 target
    );

__declspec(dllimport)
void
__stdcall
long_array_from_ndr(
      PRPC_MESSAGE                           SourceMessage,
     unsigned long                              LowerIndex,
     unsigned long                              UpperIndex,
     unsigned long  *                 Target
    );

__declspec(dllimport)
void
__stdcall
long_from_ndr_temp (
      unsigned char  *  *  source,
     unsigned long  *                 target,
     unsigned long                              format
    );

__declspec(dllimport)
void
__stdcall
enum_from_ndr(
      PRPC_MESSAGE                           SourceMessage,
     unsigned int  *                  Target
    );

__declspec(dllimport)
void
__stdcall
float_from_ndr (
      PRPC_MESSAGE                           SourceMessage,
     void  *                          Target
    );

__declspec(dllimport)
void
__stdcall
float_array_from_ndr (
      PRPC_MESSAGE                           SourceMessage,
     unsigned long                              LowerIndex,
     unsigned long                              UpperIndex,
     void  *                          Target
    );

__declspec(dllimport)
void
__stdcall
double_from_ndr (
      PRPC_MESSAGE                           SourceMessage,
     void  *                          Target
    );

__declspec(dllimport)
void
__stdcall
double_array_from_ndr (
      PRPC_MESSAGE                           SourceMessage,
     unsigned long                              LowerIndex,
     unsigned long                              UpperIndex,
     void  *                          Target
    );

__declspec(dllimport)
void
__stdcall
hyper_from_ndr (
      PRPC_MESSAGE                           source,
        __int64  *                      target
    );

__declspec(dllimport)
void
__stdcall
hyper_array_from_ndr(
      PRPC_MESSAGE                           SourceMessage,
     unsigned long                              LowerIndex,
     unsigned long                              UpperIndex,
              __int64  *                Target
    );

__declspec(dllimport)
void
__stdcall
hyper_from_ndr_temp (
      unsigned char  *  *  source,
                 __int64  *             target,
       unsigned   long                          format
    );

__declspec(dllimport)
void
__stdcall
data_from_ndr (
    PRPC_MESSAGE                                  source,
    void  *                              target,
    char  *                              format,
    unsigned char                                 MscPak
    );

__declspec(dllimport)
void
__stdcall
data_into_ndr (
    void  *                              source,
    PRPC_MESSAGE                                  target,
    char  *                              format,
    unsigned char                                 MscPak
    );

__declspec(dllimport)
void
__stdcall
tree_into_ndr (
    void  *                              source,
    PRPC_MESSAGE                                  target,
    char  *                              format,
    unsigned char                                 MscPak
    );

__declspec(dllimport)
void
__stdcall
data_size_ndr (
    void  *                              source,
    PRPC_MESSAGE                                  target,
    char  *                              format,
    unsigned char                                 MscPak
    );

__declspec(dllimport)
void
__stdcall
tree_size_ndr (
    void  *                              source,
    PRPC_MESSAGE                                  target,
    char  *                              format,
    unsigned char                                 MscPak
    );

__declspec(dllimport)
void
__stdcall
tree_peek_ndr (
    PRPC_MESSAGE                                  source,
    unsigned char  *  *         buffer,
    char  *                              format,
    unsigned char                                 MscPak
    );

__declspec(dllimport)
void  *
__stdcall
midl_allocate (
    size_t      size
    );





typedef unsigned long error_status_t;

























































#line 724 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"



#line 728 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"



















struct _MIDL_STUB_MESSAGE;
struct _MIDL_STUB_DESC;
struct _FULL_PTR_XLAT_TABLES;

typedef unsigned char  * RPC_BUFPTR;
typedef unsigned long             RPC_LENGTH;


typedef void (__stdcall  * EXPR_EVAL)( struct _MIDL_STUB_MESSAGE  * );

typedef const unsigned char  * PFORMAT_STRING;




typedef struct
    {
    long                            Dimension;

    
    unsigned long  *       BufferConformanceMark;
    unsigned long  *       BufferVarianceMark;

    
    unsigned long  *       MaxCountArray;
    unsigned long  *       OffsetArray;
    unsigned long  *       ActualCountArray;
    } ARRAY_INFO,  *PARRAY_INFO;





typedef struct _NDR_PIPE_DESC *       PNDR_PIPE_DESC;
typedef struct _NDR_PIPE_MESSAGE *    PNDR_PIPE_MESSAGE;

typedef struct _NDR_ASYNC_MESSAGE *   PNDR_ASYNC_MESSAGE;





#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push)
#line 28 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack4.h"
#pragma pack(4)


#line 32 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack4.h"
#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack4.h"
#line 790 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"
#line 791 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"

typedef struct _MIDL_STUB_MESSAGE
    {
    
    PRPC_MESSAGE                RpcMsg;

    
    unsigned char  *   Buffer;

    



    unsigned char  *   BufferStart;
    unsigned char  *   BufferEnd;

    






    unsigned char  *   BufferMark;

    
    unsigned long               BufferLength;

    
    unsigned long               MemorySize;

    
    unsigned char  *   Memory;

    
    int                         IsClient;

    
    int                         ReuseBuffer;

    
    unsigned char  *   AllocAllNodesMemory;

    
    unsigned char  *   AllocAllNodesMemoryEnd;

    



    
    int                         IgnoreEmbeddedPointers;

    



    unsigned char  *   PointerBufferMark;

    


    unsigned char               fBufferValid;

    


    unsigned char               Unused;

    



    unsigned long               MaxCount;

    



    unsigned long               Offset;

    



    unsigned long               ActualCount;

    
    void  *    ( __stdcall * pfnAllocate)(size_t);
    void                ( __stdcall * pfnFree)(void  *);

    





    unsigned char  *       StackTop;

    



    unsigned char  *       pPresentedType;
    unsigned char  *       pTransmitType;

    







    handle_t                        SavedHandle;

    


    const struct _MIDL_STUB_DESC  *    StubDesc;

    


    struct _FULL_PTR_XLAT_TABLES  *    FullPtrXlatTables;

    unsigned long                   FullPtrRefId;

    



    int                             fCheckBounds;

    int                             fInDontFree       :1;
    int                             fDontCallFreeInst :1;
    int                             fInOnlyParam      :1;
    int                             fHasReturn        :1;

    unsigned long                   dwDestContext;
    void  *                pvDestContext;

    NDR_SCONTEXT *                  SavedContextHandles;

    long                            ParamNumber;

    struct IRpcChannelBuffer  *    pRpcChannelBuffer;

    PARRAY_INFO                     pArrayInfo;

    



    unsigned long  *       SizePtrCountArray;
    unsigned long  *       SizePtrOffsetArray;
    unsigned long  *       SizePtrLengthArray;

    


    void  *                pArgQueue;

    unsigned long                   dwStubPhase;

    


    PNDR_PIPE_DESC                  pPipeDesc;

    


    PNDR_ASYNC_MESSAGE              pAsyncMsg;

    unsigned long                   Reserved[3];

    



    } MIDL_STUB_MESSAGE,  *PMIDL_STUB_MESSAGE;


#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"


#line 36 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"
#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"
#line 976 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"
#line 977 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"




typedef void  *
        ( __stdcall * GENERIC_BINDING_ROUTINE)
        (void  *);
typedef void
        ( __stdcall * GENERIC_UNBIND_ROUTINE)
        (void  *, unsigned char  *);

typedef struct _GENERIC_BINDING_ROUTINE_PAIR
    {
    GENERIC_BINDING_ROUTINE     pfnBind;
    GENERIC_UNBIND_ROUTINE      pfnUnbind;
    } GENERIC_BINDING_ROUTINE_PAIR,  *PGENERIC_BINDING_ROUTINE_PAIR;

typedef struct __GENERIC_BINDING_INFO
    {
    void  *            pObj;
    unsigned int                Size;
    GENERIC_BINDING_ROUTINE     pfnBind;
    GENERIC_UNBIND_ROUTINE      pfnUnbind;
    } GENERIC_BINDING_INFO,  *PGENERIC_BINDING_INFO;









#line 1011 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"


typedef void ( __stdcall * XMIT_HELPER_ROUTINE)
    ( PMIDL_STUB_MESSAGE );

typedef struct _XMIT_ROUTINE_QUINTUPLE
    {
    XMIT_HELPER_ROUTINE     pfnTranslateToXmit;
    XMIT_HELPER_ROUTINE     pfnTranslateFromXmit;
    XMIT_HELPER_ROUTINE     pfnFreeXmit;
    XMIT_HELPER_ROUTINE     pfnFreeInst;
    } XMIT_ROUTINE_QUINTUPLE,  *PXMIT_ROUTINE_QUINTUPLE;

typedef unsigned long
( __stdcall * USER_MARSHAL_SIZING_ROUTINE)
    (unsigned long  *,
     unsigned long,
     void  * );

typedef unsigned char  *
( __stdcall * USER_MARSHAL_MARSHALLING_ROUTINE)
    (unsigned long  *,
     unsigned char   * ,
     void  * );

typedef unsigned char  *
( __stdcall * USER_MARSHAL_UNMARSHALLING_ROUTINE)
    (unsigned long  *,
     unsigned char   * ,
     void  * );

typedef void ( __stdcall * USER_MARSHAL_FREEING_ROUTINE)
    (unsigned long  *,
     void  * );

typedef struct _USER_MARSHAL_ROUTINE_QUADRUPLE
    {
    USER_MARSHAL_SIZING_ROUTINE          pfnBufferSize;
    USER_MARSHAL_MARSHALLING_ROUTINE     pfnMarshall;
    USER_MARSHAL_UNMARSHALLING_ROUTINE   pfnUnmarshall;
    USER_MARSHAL_FREEING_ROUTINE         pfnFree;
    } USER_MARSHAL_ROUTINE_QUADRUPLE;

typedef struct _USER_MARSHAL_CB
{
    unsigned long       Flags;
    PMIDL_STUB_MESSAGE  pStubMsg;
    PFORMAT_STRING      pReserve;
} USER_MARSHAL_CB;









typedef struct _MALLOC_FREE_STRUCT
    {
    void  *    ( __stdcall * pfnAllocate)(size_t);
    void                ( __stdcall * pfnFree)(void  *);
    } MALLOC_FREE_STRUCT;

typedef struct _COMM_FAULT_OFFSETS
    {
    short       CommOffset;
    short       FaultOffset;
    } COMM_FAULT_OFFSETS;





typedef struct _MIDL_STUB_DESC
    {

    void  *    RpcInterfaceInformation;

    void  *    ( __stdcall * pfnAllocate)(size_t);
    void                ( __stdcall * pfnFree)(void  *);

    union
        {
        handle_t  *            pAutoHandle;
        handle_t  *            pPrimitiveHandle;
        PGENERIC_BINDING_INFO           pGenericBindingInfo;
        } IMPLICIT_HANDLE_INFO;

    const NDR_RUNDOWN  *                   apfnNdrRundownRoutines;
    const GENERIC_BINDING_ROUTINE_PAIR  *  aGenericBindingRoutinePairs;

    const EXPR_EVAL  *                     apfnExprEval;

    const XMIT_ROUTINE_QUINTUPLE  *        aXmitQuintuple;

    const unsigned char  *                 pFormatTypes;

    int                                             fCheckBounds;

    
    unsigned long                                   Version;

    



    MALLOC_FREE_STRUCT  *                  pMallocFreeStruct;

    long                                MIDLVersion;

    const COMM_FAULT_OFFSETS  *    CommFaultOffsets;

    

    const USER_MARSHAL_ROUTINE_QUADRUPLE  * aUserMarshalQuadruple;

    long                                    Reserved1;
    long                                    Reserved2;
    long                                    Reserved3;
    long                                    Reserved4;
    long                                    Reserved5;

    } MIDL_STUB_DESC;

typedef const MIDL_STUB_DESC  * PMIDL_STUB_DESC;

typedef void  * PMIDL_XMIT_TYPE;





#pragma warning( disable:4200 )
#line 1146 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"
typedef struct _MIDL_FORMAT_STRING
    {
    short               Pad;
    unsigned char       Format[];
    } MIDL_FORMAT_STRING;

#pragma warning( default:4200 )
#line 1154 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"




typedef void ( __stdcall * STUB_THUNK)( PMIDL_STUB_MESSAGE );

typedef long ( __stdcall * SERVER_ROUTINE)();




typedef struct  _MIDL_SERVER_INFO_
    {
    PMIDL_STUB_DESC             pStubDesc;
    const SERVER_ROUTINE *      DispatchTable;
    PFORMAT_STRING              ProcString;
    const unsigned short *      FmtStringOffset;
    const STUB_THUNK *          ThunkTable;
    PFORMAT_STRING              LocalFormatTypes;
    PFORMAT_STRING              LocalProcString;
    const unsigned short *      LocalFmtStringOffset;
    } MIDL_SERVER_INFO, *PMIDL_SERVER_INFO;




typedef struct _MIDL_STUBLESS_PROXY_INFO
    {
    PMIDL_STUB_DESC                     pStubDesc;
    PFORMAT_STRING                      ProcFormatString;
    const unsigned short  *    FormatStringOffset;
    PFORMAT_STRING                      LocalFormatTypes;
    PFORMAT_STRING                      LocalProcString;
    const unsigned short  *    LocalFmtStringOffset;
    } MIDL_STUBLESS_PROXY_INFO;

typedef MIDL_STUBLESS_PROXY_INFO  * PMIDL_STUBLESS_PROXY_INFO;




typedef union _CLIENT_CALL_RETURN
    {
    void  *        Pointer;
    long                    Simple;
    } CLIENT_CALL_RETURN;





typedef enum
        {
        XLAT_SERVER = 1,
        XLAT_CLIENT
        } XLAT_SIDE;





typedef struct _FULL_PTR_TO_REFID_ELEMENT
    {
    struct _FULL_PTR_TO_REFID_ELEMENT  *  Next;

    void  *            Pointer;
    unsigned long       RefId;
    unsigned char       State;
    } FULL_PTR_TO_REFID_ELEMENT,  *PFULL_PTR_TO_REFID_ELEMENT;




typedef struct _FULL_PTR_XLAT_TABLES
    {
    


    struct
        {
        void  * *             XlatTable;
        unsigned char  *     StateTable;
        unsigned long       NumberOfEntries;
        } RefIdToPointer;

    


    struct
        {
        PFULL_PTR_TO_REFID_ELEMENT  *  XlatTable;
        unsigned long                   NumberOfBuckets;
        unsigned long                   HashMask;
        } PointerToRefId;

    


    unsigned long           NextRefId;

    






    XLAT_SIDE               XlatSide;
    } FULL_PTR_XLAT_TABLES,  *PFULL_PTR_XLAT_TABLES;









__declspec(dllimport)
void
__stdcall
NdrSimpleTypeMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    unsigned char                       FormatChar
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrPointerMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrSimpleStructMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantStructMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantVaryingStructMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrHardStructMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrComplexStructMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrFixedArrayMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantArrayMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantVaryingArrayMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrVaryingArrayMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrComplexArrayMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrNonConformantStringMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantStringMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrEncapsulatedUnionMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrNonEncapsulatedUnionMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrByteCountPointerMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrXmitOrRepAsMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrUserMarshalMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrInterfacePointerMarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrClientContextMarshall(
    PMIDL_STUB_MESSAGE    pStubMsg,
    NDR_CCONTEXT          ContextHandle,
    int                   fCheck
    );

__declspec(dllimport)
void
__stdcall
NdrServerContextMarshall(
    PMIDL_STUB_MESSAGE    pStubMsg,
    NDR_SCONTEXT          ContextHandle,
    NDR_RUNDOWN           RundownRoutine
    );





__declspec(dllimport)
void
__stdcall
NdrSimpleTypeUnmarshall(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    unsigned char                       FormatChar
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrPointerUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrSimpleStructUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantStructUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantVaryingStructUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrHardStructUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrComplexStructUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrFixedArrayUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantArrayUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantVaryingArrayUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrVaryingArrayUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrComplexArrayUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrNonConformantStringUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantStringUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrEncapsulatedUnionUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrNonEncapsulatedUnionUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrByteCountPointerUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrXmitOrRepAsUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrUserMarshalUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrInterfacePointerUnmarshall(
    PMIDL_STUB_MESSAGE                      pStubMsg,
    unsigned char  *  *   ppMemory,
    PFORMAT_STRING                          pFormat,
    unsigned char                           fMustAlloc
    );



__declspec(dllimport)
void
__stdcall
NdrClientContextUnmarshall(
    PMIDL_STUB_MESSAGE          pStubMsg,
    NDR_CCONTEXT  *    pContextHandle,
    RPC_BINDING_HANDLE          BindHandle
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NdrServerContextUnmarshall(
    PMIDL_STUB_MESSAGE          pStubMsg
    );





__declspec(dllimport)
void
__stdcall
NdrPointerBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrSimpleStructBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantStructBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantVaryingStructBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrHardStructBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrComplexStructBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrFixedArrayBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantArrayBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantVaryingArrayBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrVaryingArrayBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrComplexArrayBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrConformantStringBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrNonConformantStringBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrEncapsulatedUnionBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrNonEncapsulatedUnionBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrByteCountPointerBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrXmitOrRepAsBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrUserMarshalBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrInterfacePointerBufferSize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrContextHandleSize(
    PMIDL_STUB_MESSAGE          pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );





__declspec(dllimport)
unsigned long
__stdcall
NdrPointerMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrSimpleStructMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrConformantStructMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrConformantVaryingStructMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrHardStructMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrComplexStructMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrFixedArrayMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrConformantArrayMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrConformantVaryingArrayMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrVaryingArrayMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrComplexArrayMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrConformantStringMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrNonConformantStringMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrEncapsulatedUnionMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrNonEncapsulatedUnionMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrXmitOrRepAsMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrUserMarshalMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrInterfacePointerMemorySize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );





__declspec(dllimport)
void
__stdcall
NdrPointerFree(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrSimpleStructFree(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantStructFree(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantVaryingStructFree(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrHardStructFree(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrComplexStructFree(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrFixedArrayFree(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantArrayFree(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantVaryingArrayFree(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrVaryingArrayFree(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrComplexArrayFree(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrEncapsulatedUnionFree(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrNonEncapsulatedUnionFree(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrByteCountPointerFree(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrXmitOrRepAsFree(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrUserMarshalFree(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrInterfacePointerFree(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pMemory,
    PFORMAT_STRING                      pFormat
    );





__declspec(dllimport)
void
__stdcall
NdrConvert2(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat,
    long                                NumberParams
    );

__declspec(dllimport)
void
__stdcall
NdrConvert(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pFormat
    );














__declspec(dllimport)
unsigned char  *
__stdcall
NdrUserMarshalSimpleTypeConvert(
    unsigned long * pFlags,
    unsigned char * pBuffer,
    unsigned char   FormatChar
    );





__declspec(dllimport)
void
__stdcall
NdrClientInitializeNew(
    PRPC_MESSAGE                        pRpcMsg,
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PMIDL_STUB_DESC                     pStubDescriptor,
    unsigned int                        ProcNum
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrServerInitializeNew(
    PRPC_MESSAGE                        pRpcMsg,
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PMIDL_STUB_DESC                     pStubDescriptor
    );

__declspec(dllimport)
void
__stdcall
NdrServerInitializePartial(
    PRPC_MESSAGE                        pRpcMsg,
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PMIDL_STUB_DESC                     pStubDescriptor,
    unsigned long                       RequestedBufferSize
    );

__declspec(dllimport)
void
__stdcall
NdrClientInitialize(
    PRPC_MESSAGE                        pRpcMsg,
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PMIDL_STUB_DESC                     pStubDescriptor,
    unsigned int                        ProcNum
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrServerInitialize(
    PRPC_MESSAGE                        pRpcMsg,
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PMIDL_STUB_DESC                     pStubDescriptor
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrServerInitializeUnmarshall (
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PMIDL_STUB_DESC                     pStubDescriptor,
    PRPC_MESSAGE                        pRpcMsg
    );

__declspec(dllimport)
void
__stdcall
NdrServerInitializeMarshall (
    PRPC_MESSAGE                        pRpcMsg,
    PMIDL_STUB_MESSAGE                  pStubMsg
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrGetBuffer(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned long                       BufferLength,
    RPC_BINDING_HANDLE                  Handle
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrNsGetBuffer(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned long                       BufferLength,
    RPC_BINDING_HANDLE                  Handle
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrGetPipeBuffer(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned long                       BufferLength,
    RPC_BINDING_HANDLE                  Handle );

__declspec(dllimport)
void
__stdcall
NdrGetPartialBuffer(
    PMIDL_STUB_MESSAGE                  pStubMsg );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrSendReceive(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char *            pBufferEnd
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrNsSendReceive(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char  *           pBufferEnd,
    RPC_BINDING_HANDLE  *      pAutoHandle
    );

__declspec(dllimport)
void
__stdcall
NdrPipeSendReceive(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PNDR_PIPE_DESC                      pPipeDesc
    );

__declspec(dllimport)
void
__stdcall
NdrFreeBuffer(
    PMIDL_STUB_MESSAGE                  pStubMsg
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
NdrGetDcomProtocolVersion( 
    PMIDL_STUB_MESSAGE   pStubMsg,
    RPC_VERSION *        pVersion );






__declspec(dllimport)
void
__stdcall
NdrPipesInitialize(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    PFORMAT_STRING                      pParamDesc,
    PNDR_PIPE_DESC                      pPipeDesc,
    PNDR_PIPE_MESSAGE                   pPipeMsg,
    char              *        pStackTop,
    unsigned long                       NumberParams );

__declspec(dllimport)
void
__stdcall
NdrPipePull(
    char           *           pState,
    void           *           buf,
    unsigned long                       esize,
    unsigned long  *           ecount );

__declspec(dllimport)
void
__stdcall
NdrPipePush(
    char           *           pState,
    void           *           buf,
    unsigned long                       ecount );

__declspec(dllimport)
void
__stdcall
NdrIsAppDoneWithPipes(
    PNDR_PIPE_DESC                      pPipeDesc
    );

__declspec(dllimport)
void
__stdcall
NdrPipesDone(
    PMIDL_STUB_MESSAGE                  pStubMsg
    );








CLIENT_CALL_RETURN __cdecl
NdrClientCall2(
    PMIDL_STUB_DESC                     pStubDescriptor,
    PFORMAT_STRING                      pFormat,
    ...
    );

CLIENT_CALL_RETURN __cdecl
NdrClientCall(
    PMIDL_STUB_DESC                     pStubDescriptor,
    PFORMAT_STRING                      pFormat,
    ...
    );

CLIENT_CALL_RETURN __cdecl
NdrAsyncClientCall(
    PMIDL_STUB_DESC     pStubDescriptor,
    PFORMAT_STRING      pFormat,
    ...
    );


typedef enum {
    STUB_UNMARSHAL,
    STUB_CALL_SERVER,
    STUB_MARSHAL,
    STUB_CALL_SERVER_NO_HRESULT
}STUB_PHASE;

typedef enum {
    PROXY_CALCSIZE,
    PROXY_GETBUFFER,
    PROXY_MARSHAL,
    PROXY_SENDRECEIVE,
    PROXY_UNMARSHAL
}PROXY_PHASE;

struct IRpcStubBuffer;      

__declspec(dllimport)
long
__stdcall
NdrAsyncStubCall(
    struct IRpcStubBuffer *             pThis,
    struct IRpcChannelBuffer *          pChannel,
    PRPC_MESSAGE                        pRpcMsg,
    unsigned long *                     pdwStubPhase
    );

__declspec(dllimport)
void
__stdcall
NdrAsyncServerCall(
    PRPC_MESSAGE                        pRpcMsg
    );

__declspec(dllimport)
long
__stdcall
NdrStubCall2(
    struct IRpcStubBuffer  *    pThis,
    struct IRpcChannelBuffer  * pChannel,
    PRPC_MESSAGE                         pRpcMsg,
    unsigned long  *            pdwStubPhase
    );

__declspec(dllimport)
void
__stdcall
NdrServerCall2(
    PRPC_MESSAGE                        pRpcMsg
    );

__declspec(dllimport)
long
__stdcall
NdrStubCall (
    struct IRpcStubBuffer  *    pThis,
    struct IRpcChannelBuffer  * pChannel,
    PRPC_MESSAGE                         pRpcMsg,
    unsigned long  *            pdwStubPhase
    );

__declspec(dllimport)
void
__stdcall
NdrServerCall(
    PRPC_MESSAGE                        pRpcMsg
    );

__declspec(dllimport)
int
__stdcall
NdrServerUnmarshall(
    struct IRpcChannelBuffer  * pChannel,
    PRPC_MESSAGE                         pRpcMsg,
    PMIDL_STUB_MESSAGE                   pStubMsg,
    PMIDL_STUB_DESC                      pStubDescriptor,
    PFORMAT_STRING                       pFormat,
    void  *                     pParamList
    );

__declspec(dllimport)
void
__stdcall
NdrServerMarshall(
    struct IRpcStubBuffer  *    pThis,
    struct IRpcChannelBuffer  * pChannel,
    PMIDL_STUB_MESSAGE                   pStubMsg,
    PFORMAT_STRING                       pFormat
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
NdrMapCommAndFaultStatus(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned long  *                       pCommStatus,
    unsigned long  *                       pFaultStatus,
    RPC_STATUS                          Status
    );



__declspec(dllimport)
int
__stdcall
NdrSH_UPDecision(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char            * *          pPtrInMem,
    RPC_BUFPTR                          pBuffer
    );

__declspec(dllimport)
int
__stdcall
NdrSH_TLUPDecision(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char            * *          pPtrInMem
    );

__declspec(dllimport)
int
__stdcall
NdrSH_TLUPDecisionBuffer(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char            * *          pPtrInMem
    );

__declspec(dllimport)
int
__stdcall
NdrSH_IfAlloc(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char            * *          pPtrInMem,
    unsigned long                       Count
    );

__declspec(dllimport)
int
__stdcall
NdrSH_IfAllocRef(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char            * *          pPtrInMem,
    unsigned long                       Count
    );

__declspec(dllimport)
int
__stdcall
NdrSH_IfAllocSet(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char            * *          pPtrInMem,
    unsigned long                       Count
    );

__declspec(dllimport)
RPC_BUFPTR
__stdcall
NdrSH_IfCopy(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char            * *          pPtrInMem,
    unsigned long                       Count
    );

__declspec(dllimport)
RPC_BUFPTR
__stdcall
NdrSH_IfAllocCopy(
    PMIDL_STUB_MESSAGE                  pStubMsg,
    unsigned char            * *          pPtrInMem,
    unsigned long                       Count
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrSH_Copy(
    unsigned char            *         pStubMsg,
    unsigned char            *         pPtrInMem,
    unsigned long                       Count
    );

__declspec(dllimport)
void
__stdcall
NdrSH_IfFree(
    PMIDL_STUB_MESSAGE                  pMessage,
    unsigned char            *         pPtr );


__declspec(dllimport)
RPC_BUFPTR
__stdcall
NdrSH_StringMarshall(
    PMIDL_STUB_MESSAGE                  pMessage,
    unsigned char            *         pMemory,
    unsigned long                       Count,
    int                                 Size );

__declspec(dllimport)
RPC_BUFPTR
__stdcall
NdrSH_StringUnMarshall(
    PMIDL_STUB_MESSAGE                  pMessage,
    unsigned char            * *          pMemory,
    int                                 Size );





typedef void  * RPC_SS_THREAD_HANDLE;

typedef void  * __stdcall
RPC_CLIENT_ALLOC (
     size_t Size
    );

typedef void __stdcall
RPC_CLIENT_FREE (
     void  * Ptr
    );





__declspec(dllimport)
void  *
__stdcall
RpcSsAllocate (
     size_t Size
    );

__declspec(dllimport)
void
__stdcall
RpcSsDisableAllocate (
    void
    );

__declspec(dllimport)
void
__stdcall
RpcSsEnableAllocate (
    void
    );

__declspec(dllimport)
void
__stdcall
RpcSsFree (
     void  * NodeToFree
    );

__declspec(dllimport)
RPC_SS_THREAD_HANDLE
__stdcall
RpcSsGetThreadHandle (
    void
    );

__declspec(dllimport)
void
__stdcall
RpcSsSetClientAllocFree (
     RPC_CLIENT_ALLOC  * ClientAlloc,
     RPC_CLIENT_FREE  * ClientFree
    );

__declspec(dllimport)
void
__stdcall
RpcSsSetThreadHandle (
     RPC_SS_THREAD_HANDLE Id
    );

__declspec(dllimport)
void
__stdcall
RpcSsSwapClientAllocFree (
     RPC_CLIENT_ALLOC  * ClientAlloc,
     RPC_CLIENT_FREE  * ClientFree,
     RPC_CLIENT_ALLOC  *  * OldClientAlloc,
     RPC_CLIENT_FREE  *  * OldClientFree
    );





__declspec(dllimport)
void  *
__stdcall
RpcSmAllocate (
      size_t          Size,
     RPC_STATUS  *    pStatus
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmClientFree (
      void  * pNodeToFree
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmDestroyClientContext (
     void  *  * ContextHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmDisableAllocate (
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmEnableAllocate (
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmFree (
     void  * NodeToFree
    );

__declspec(dllimport)
RPC_SS_THREAD_HANDLE
__stdcall
RpcSmGetThreadHandle (
     RPC_STATUS  *    pStatus
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmSetClientAllocFree (
     RPC_CLIENT_ALLOC  * ClientAlloc,
     RPC_CLIENT_FREE  * ClientFree
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmSetThreadHandle (
     RPC_SS_THREAD_HANDLE Id
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmSwapClientAllocFree (
     RPC_CLIENT_ALLOC  * ClientAlloc,
     RPC_CLIENT_FREE  * ClientFree,
     RPC_CLIENT_ALLOC  *  * OldClientAlloc,
     RPC_CLIENT_FREE  *  * OldClientFree
    );





__declspec(dllimport)
void
__stdcall
NdrRpcSsEnableAllocate(
    PMIDL_STUB_MESSAGE      pMessage );

__declspec(dllimport)
void
__stdcall
NdrRpcSsDisableAllocate(
    PMIDL_STUB_MESSAGE      pMessage );

__declspec(dllimport)
void
__stdcall
NdrRpcSmSetClientToOsf(
    PMIDL_STUB_MESSAGE      pMessage );

__declspec(dllimport)
void  *
__stdcall
NdrRpcSmClientAllocate (
     size_t Size
    );

__declspec(dllimport)
void
__stdcall
NdrRpcSmClientFree (
     void  * NodeToFree
    );

__declspec(dllimport)
void  *
__stdcall
NdrRpcSsDefaultAllocate (
     size_t Size
    );

__declspec(dllimport)
void
__stdcall
NdrRpcSsDefaultFree (
     void  * NodeToFree
    );









__declspec(dllimport)
PFULL_PTR_XLAT_TABLES
__stdcall
NdrFullPointerXlatInit(
    unsigned long           NumberOfPointers,
    XLAT_SIDE               XlatSide
    );

__declspec(dllimport)
void
__stdcall
NdrFullPointerXlatFree(
    PFULL_PTR_XLAT_TABLES   pXlatTables
    );

__declspec(dllimport)
int
__stdcall
NdrFullPointerQueryPointer(
    PFULL_PTR_XLAT_TABLES   pXlatTables,
    void  *                    pPointer,
    unsigned char           QueryType,
    unsigned long  *           pRefId
    );

__declspec(dllimport)
int
__stdcall
NdrFullPointerQueryRefId(
    PFULL_PTR_XLAT_TABLES   pXlatTables,
    unsigned long           RefId,
    unsigned char           QueryType,
    void  * *                 ppPointer
    );

__declspec(dllimport)
void
__stdcall
NdrFullPointerInsertRefId(
    PFULL_PTR_XLAT_TABLES   pXlatTables,
    unsigned long           RefId,
    void  *                    pPointer
    );

__declspec(dllimport)
int
__stdcall
NdrFullPointerFree(
    PFULL_PTR_XLAT_TABLES   pXlatTables,
    void  *                    Pointer
    );

__declspec(dllimport)
void  *
__stdcall
NdrAllocate(
    PMIDL_STUB_MESSAGE      pStubMsg,
    size_t                  Len
    );

__declspec(dllimport)
void
__stdcall
NdrClearOutParameters(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat,
    void  *        ArgAddr
    );






__declspec(dllimport)
void  *
__stdcall
NdrOleAllocate (
     size_t Size
    );

__declspec(dllimport)
void
__stdcall
NdrOleFree (
     void  * NodeToFree
    );





#line 3037 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"











#line 3049 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"






#line 3056 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"




}
#line 3062 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"





#line 3068 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"

#line 3070 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"






#line 14 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"




#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push)
#line 28 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack8.h"
#pragma pack(8)


#line 32 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack8.h"
#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack8.h"
#line 19 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"






















































#line 74 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"

#line 76 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"










































































































#line 185 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"
   
   
#line 188 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"
#line 189 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"









































#line 231 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"












#line 244 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"
#line 245 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"








#line 254 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"
#line 255 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"








#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"
















#pragma once
#line 19 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"






#line 26 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"







#pragma pack(push,8)
#line 35 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"


extern "C" {
#line 39 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"


















#line 58 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"










































typedef int (__cdecl * _onexit_t)(void);



#line 105 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"

#line 107 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"






typedef struct _div_t {
        int quot;
        int rem;
} div_t;

typedef struct _ldiv_t {
        long quot;
        long rem;
} ldiv_t;


#line 125 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"



































#line 161 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"













__declspec(dllimport) int * __cdecl _errno(void);
__declspec(dllimport) unsigned long * __cdecl __doserrno(void);





#line 182 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"







__declspec(dllimport) extern char * _sys_errlist[];   
__declspec(dllimport) extern int _sys_nerr;           













#line 205 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"
#line 206 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"



#line 210 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"

__declspec(dllimport) int *          __cdecl __p___argc(void);
__declspec(dllimport) char ***       __cdecl __p___argv(void);
__declspec(dllimport) wchar_t ***    __cdecl __p___wargv(void);
__declspec(dllimport) char ***       __cdecl __p__environ(void);
__declspec(dllimport) wchar_t ***    __cdecl __p__wenviron(void);
__declspec(dllimport) char **        __cdecl __p__pgmptr(void);
__declspec(dllimport) wchar_t **     __cdecl __p__wpgmptr(void);
























#line 243 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"


__declspec(dllimport) extern int _fmode;          
__declspec(dllimport) extern int _fileinfo;       




__declspec(dllimport) extern unsigned int _osver;
__declspec(dllimport) extern unsigned int _winver;
__declspec(dllimport) extern unsigned int _winmajor;
__declspec(dllimport) extern unsigned int _winminor;





__declspec(dllimport) __declspec(noreturn) void   __cdecl abort(void);
__declspec(dllimport) __declspec(noreturn) void   __cdecl exit(int);



#line 266 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"



#line 270 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"
        int    __cdecl abs(int);
#line 272 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"
        int    __cdecl atexit(void (__cdecl *)(void));
__declspec(dllimport) double __cdecl atof(const char *);
__declspec(dllimport) int    __cdecl atoi(const char *);
__declspec(dllimport) long   __cdecl atol(const char *);



__declspec(dllimport) void * __cdecl bsearch(const void *, const void *, size_t, size_t,
        int (__cdecl *)(const void *, const void *));
__declspec(dllimport) void * __cdecl calloc(size_t, size_t);
__declspec(dllimport) div_t  __cdecl div(int, int);
__declspec(dllimport) void   __cdecl free(void *);
__declspec(dllimport) char * __cdecl getenv(const char *);
__declspec(dllimport) char * __cdecl _itoa(int, char *, int);

__declspec(dllimport) char * __cdecl _i64toa(__int64, char *, int);
__declspec(dllimport) char * __cdecl _ui64toa(unsigned __int64, char *, int);
__declspec(dllimport) __int64 __cdecl _atoi64(const char *);
#line 291 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"


#line 294 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"
        long __cdecl labs(long);
#line 296 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"
__declspec(dllimport) ldiv_t __cdecl ldiv(long, long);
__declspec(dllimport) char * __cdecl _ltoa(long, char *, int);
__declspec(dllimport) void * __cdecl malloc(size_t);
__declspec(dllimport) int    __cdecl mblen(const char *, size_t);
__declspec(dllimport) size_t __cdecl _mbstrlen(const char *s);
__declspec(dllimport) int    __cdecl mbtowc(wchar_t *, const char *, size_t);
__declspec(dllimport) size_t __cdecl mbstowcs(wchar_t *, const char *, size_t);
__declspec(dllimport) void   __cdecl qsort(void *, size_t, size_t, int (__cdecl *)
        (const void *, const void *));
__declspec(dllimport) int    __cdecl rand(void);
__declspec(dllimport) void * __cdecl realloc(void *, size_t);
__declspec(dllimport) int    __cdecl _set_error_mode(int);
__declspec(dllimport) void   __cdecl srand(unsigned int);
__declspec(dllimport) double __cdecl strtod(const char *, char **);
__declspec(dllimport) long   __cdecl strtol(const char *, char **, int);



__declspec(dllimport) unsigned long __cdecl strtoul(const char *, char **, int);

__declspec(dllimport) int    __cdecl system(const char *);
#line 318 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"
__declspec(dllimport) char * __cdecl _ultoa(unsigned long, char *, int);
__declspec(dllimport) int    __cdecl wctomb(char *, wchar_t);
__declspec(dllimport) size_t __cdecl wcstombs(char *, const wchar_t *, size_t);







__declspec(dllimport) wchar_t * __cdecl _itow (int, wchar_t *, int);
__declspec(dllimport) wchar_t * __cdecl _ltow (long, wchar_t *, int);
__declspec(dllimport) wchar_t * __cdecl _ultow (unsigned long, wchar_t *, int);
__declspec(dllimport) double __cdecl wcstod(const wchar_t *, wchar_t **);
__declspec(dllimport) long   __cdecl wcstol(const wchar_t *, wchar_t **, int);
__declspec(dllimport) unsigned long __cdecl wcstoul(const wchar_t *, wchar_t **, int);
__declspec(dllimport) wchar_t * __cdecl _wgetenv(const wchar_t *);
__declspec(dllimport) int    __cdecl _wsystem(const wchar_t *);
__declspec(dllimport) int __cdecl _wtoi(const wchar_t *);
__declspec(dllimport) long __cdecl _wtol(const wchar_t *);

__declspec(dllimport) wchar_t * __cdecl _i64tow(__int64, wchar_t *, int);
__declspec(dllimport) wchar_t * __cdecl _ui64tow(unsigned __int64, wchar_t *, int);
__declspec(dllimport) __int64   __cdecl _wtoi64(const wchar_t *);
#line 343 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"


#line 346 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"
#line 347 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"




__declspec(dllimport) char * __cdecl _ecvt(double, int, int *, int *);

__declspec(dllimport) __declspec(noreturn) void   __cdecl _exit(int);


#line 357 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"
__declspec(dllimport) char * __cdecl _fcvt(double, int, int *, int *);
__declspec(dllimport) char * __cdecl _fullpath(char *, const char *, size_t);
__declspec(dllimport) char * __cdecl _gcvt(double, int, char *);
        unsigned long __cdecl _lrotl(unsigned long, int);
        unsigned long __cdecl _lrotr(unsigned long, int);

__declspec(dllimport) void   __cdecl _makepath(char *, const char *, const char *, const char *,
        const char *);
#line 366 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"
        _onexit_t __cdecl _onexit(_onexit_t);
__declspec(dllimport) void   __cdecl perror(const char *);
__declspec(dllimport) int    __cdecl _putenv(const char *);
        unsigned int __cdecl _rotl(unsigned int, int);
        unsigned int __cdecl _rotr(unsigned int, int);
__declspec(dllimport) void   __cdecl _searchenv(const char *, const char *, char *);

__declspec(dllimport) void   __cdecl _splitpath(const char *, char *, char *, char *, char *);
#line 375 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"
__declspec(dllimport) void   __cdecl _swab(char *, char *, int);






__declspec(dllimport) wchar_t * __cdecl _wfullpath(wchar_t *, const wchar_t *, size_t);
__declspec(dllimport) void   __cdecl _wmakepath(wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *,
        const wchar_t *);
__declspec(dllimport) void   __cdecl _wperror(const wchar_t *);
__declspec(dllimport) int    __cdecl _wputenv(const wchar_t *);
__declspec(dllimport) void   __cdecl _wsearchenv(const wchar_t *, const wchar_t *, wchar_t *);
__declspec(dllimport) void   __cdecl _wsplitpath(const wchar_t *, wchar_t *, wchar_t *, wchar_t *, wchar_t *);


#line 392 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"
#line 393 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"




__declspec(dllimport) void __cdecl _seterrormode(int);
__declspec(dllimport) void __cdecl _beep(unsigned, unsigned);
__declspec(dllimport) void __cdecl _sleep(unsigned long);
#line 401 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"


#line 404 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"







__declspec(dllimport) int __cdecl tolower(int);
#line 413 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"

__declspec(dllimport) int __cdecl toupper(int);
#line 416 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"

#line 418 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"

















__declspec(dllimport) char * __cdecl ecvt(double, int, int *, int *);
__declspec(dllimport) char * __cdecl fcvt(double, int, int *, int *);
__declspec(dllimport) char * __cdecl gcvt(double, int, char *);
__declspec(dllimport) char * __cdecl itoa(int, char *, int);
__declspec(dllimport) char * __cdecl ltoa(long, char *, int);
        _onexit_t __cdecl onexit(_onexit_t);
__declspec(dllimport) int    __cdecl putenv(const char *);
__declspec(dllimport) void   __cdecl swab(char *, char *, int);
__declspec(dllimport) char * __cdecl ultoa(unsigned long, char *, int);

#line 446 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"

#line 448 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"


}

#line 453 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"


#pragma pack(pop)
#line 457 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"

#line 459 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdlib.h"
#line 264 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"




















#line 285 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"





#line 291 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"



typedef enum tagREGCLS
{
    REGCLS_SINGLEUSE = 0,       
    REGCLS_MULTIPLEUSE = 1,     
                                
    REGCLS_MULTI_SEPARATE = 2,  
                                
    REGCLS_SUSPENDED      = 4,  
                                
    REGCLS_SURROGATE      = 8   
                                
                                
} REGCLS;
































#line 340 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"



























typedef struct    IRpcStubBuffer     IRpcStubBuffer;
typedef struct    IRpcChannelBuffer  IRpcChannelBuffer;

#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"
















#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"

#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"
















#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"





































































































































































































#line 20 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"





extern "C"{
#line 28 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"

 

void  * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void  * ); 






 










extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_v0_0_s_ifspec;









 


typedef struct  tagRemHGLOBAL
    {
    long fNullHGlobal;
    unsigned long cbData;
     byte data[ 1 ];
    }	RemHGLOBAL;

typedef struct  tagRemHMETAFILEPICT
    {
    long mm;
    long xExt;
    long yExt;
    unsigned long cbData;
     byte data[ 1 ];
    }	RemHMETAFILEPICT;

typedef struct  tagRemHENHMETAFILE
    {
    unsigned long cbData;
     byte data[ 1 ];
    }	RemHENHMETAFILE;

typedef struct  tagRemHBITMAP
    {
    unsigned long cbData;
     byte data[ 1 ];
    }	RemHBITMAP;

typedef struct  tagRemHPALETTE
    {
    unsigned long cbData;
     byte data[ 1 ];
    }	RemHPALETTE;

typedef struct  tagRemBRUSH
    {
    unsigned long cbData;
     byte data[ 1 ];
    }	RemHBRUSH;

































































































































































































































#line 329 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"

typedef WCHAR OLECHAR;

typedef  OLECHAR  *LPOLESTR;

typedef  const OLECHAR  *LPCOLESTR;









#line 345 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"
























typedef unsigned char UCHAR;

typedef short SHORT;

typedef unsigned short USHORT;

typedef DWORD ULONG;

typedef double DOUBLE;






























#line 409 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"
















































































typedef struct  _COAUTHIDENTITY
    {
     USHORT  *User;
    ULONG UserLength;
     USHORT  *Domain;
    ULONG DomainLength;
     USHORT  *Password;
    ULONG PasswordLength;
    ULONG Flags;
    }	COAUTHIDENTITY;

typedef struct  _COAUTHINFO
    {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    LPWSTR pwszServerPrincName;
    DWORD dwAuthnLevel;
    DWORD dwImpersonationLevel;
    COAUTHIDENTITY  *pAuthIdentityData;
    DWORD dwCapabilities;
    }	COAUTHINFO;

typedef LONG SCODE;






typedef SCODE  *PSCODE;














typedef GUID  *LPGUID;

#line 536 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"












typedef GUID IID;

typedef IID  *LPIID;



typedef GUID CLSID;

typedef CLSID  *LPCLSID;



typedef GUID FMTID;

typedef FMTID  *LPFMTID;












#line 576 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"




#line 581 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"



#line 585 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"



#line 589 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"



#line 593 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"

















#line 611 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"
#line 612 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"
typedef 
enum tagMEMCTX
    {	MEMCTX_TASK	= 1,
	MEMCTX_SHARED	= 2,
	MEMCTX_MACSYSTEM	= 3,
	MEMCTX_UNKNOWN	= -1,
	MEMCTX_SAME	= -2
    }	MEMCTX;





#line 626 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"



#line 630 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"
typedef 
enum tagCLSCTX
    {	CLSCTX_INPROC_SERVER	= 0x1,
	CLSCTX_INPROC_HANDLER	= 0x2,
	CLSCTX_LOCAL_SERVER	= 0x4,
	CLSCTX_INPROC_SERVER16	= 0x8,
	CLSCTX_REMOTE_SERVER	= 0x10,
	CLSCTX_INPROC_HANDLER16	= 0x20,
	CLSCTX_INPROC_SERVERX86	= 0x40,
	CLSCTX_INPROC_HANDLERX86	= 0x80,
	CLSCTX_ESERVER_HANDLER	= 0x100
    }	CLSCTX;

typedef 
enum tagMSHLFLAGS
    {	MSHLFLAGS_NORMAL	= 0,
	MSHLFLAGS_TABLESTRONG	= 1,
	MSHLFLAGS_TABLEWEAK	= 2,
	MSHLFLAGS_NOPING	= 4
    }	MSHLFLAGS;

typedef 
enum tagMSHCTX
    {	MSHCTX_LOCAL	= 0,
	MSHCTX_NOSHAREDMEM	= 1,
	MSHCTX_DIFFERENTMACHINE	= 2,
	MSHCTX_INPROC	= 3
    }	MSHCTX;

typedef 
enum tagDVASPECT
    {	DVASPECT_CONTENT	= 1,
	DVASPECT_THUMBNAIL	= 2,
	DVASPECT_ICON	= 4,
	DVASPECT_DOCPRINT	= 8
    }	DVASPECT;

typedef 
enum tagSTGC
    {	STGC_DEFAULT	= 0,
	STGC_OVERWRITE	= 1,
	STGC_ONLYIFCURRENT	= 2,
	STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE	= 4,
	STGC_CONSOLIDATE	= 8
    }	STGC;

typedef 
enum tagSTGMOVE
    {	STGMOVE_MOVE	= 0,
	STGMOVE_COPY	= 1,
	STGMOVE_SHALLOWCOPY	= 2
    }	STGMOVE;

typedef 
enum tagSTATFLAG
    {	STATFLAG_DEFAULT	= 0,
	STATFLAG_NONAME	= 1,
	STATFLAG_NOOPEN	= 2
    }	STATFLAG;

typedef  void  *HCONTEXT;



typedef DWORD LCID;

#line 697 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"
typedef struct  _BYTE_BLOB
    {
    unsigned long clSize;
     byte abData[ 1 ];
    }	BYTE_BLOB;

typedef  BYTE_BLOB  *UP_BYTE_BLOB;

typedef struct  _WORD_BLOB
    {
    unsigned long clSize;
     unsigned short asData[ 1 ];
    }	WORD_BLOB;

typedef  WORD_BLOB  *UP_WORD_BLOB;

typedef struct  _DWORD_BLOB
    {
    unsigned long clSize;
     unsigned long alData[ 1 ];
    }	DWORD_BLOB;

typedef  DWORD_BLOB  *UP_DWORD_BLOB;

typedef struct  _FLAGGED_BYTE_BLOB
    {
    unsigned long fFlags;
    unsigned long clSize;
     byte abData[ 1 ];
    }	FLAGGED_BYTE_BLOB;

typedef  FLAGGED_BYTE_BLOB  *UP_FLAGGED_BYTE_BLOB;

typedef struct  _FLAGGED_WORD_BLOB
    {
    unsigned long fFlags;
    unsigned long clSize;
     unsigned short asData[ 1 ];
    }	FLAGGED_WORD_BLOB;

typedef  FLAGGED_WORD_BLOB  *UP_FLAGGED_WORD_BLOB;

typedef struct  _BYTE_SIZEDARR
    {
    unsigned long clSize;
     byte  *pData;
    }	BYTE_SIZEDARR;

typedef struct  _SHORT_SIZEDARR
    {
    unsigned long clSize;
     unsigned short  *pData;
    }	WORD_SIZEDARR;

typedef struct  _LONG_SIZEDARR
    {
    unsigned long clSize;
     unsigned long  *pData;
    }	DWORD_SIZEDARR;

typedef struct  _HYPER_SIZEDARR
    {
    unsigned long clSize;
     __int64  *pData;
    }	HYPER_SIZEDARR;





typedef struct  _userCLIPFORMAT
    {
    long fContext;
      union __MIDL_IWinTypes_0001
        {
         DWORD dwValue;
         wchar_t  *pwszName;
        }	u;
    }	userCLIPFORMAT;

typedef  userCLIPFORMAT  *wireCLIPFORMAT;

typedef  WORD CLIPFORMAT;

typedef struct  _GDI_NONREMOTE
    {
    long fContext;
      union __MIDL_IWinTypes_0002
        {
         long hInproc;
         DWORD_BLOB  *hRemote;
        }	u;
    }	GDI_NONREMOTE;

typedef struct  _userHGLOBAL
    {
    long fContext;
      union __MIDL_IWinTypes_0003
        {
         long hInproc;
         FLAGGED_BYTE_BLOB  *hRemote;
         long hGlobal;
        }	u;
    }	userHGLOBAL;

typedef  userHGLOBAL  *wireHGLOBAL;

typedef struct  _userHMETAFILE
    {
    long fContext;
      union __MIDL_IWinTypes_0004
        {
         long hInproc;
         BYTE_BLOB  *hRemote;
         long hGlobal;
        }	u;
    }	userHMETAFILE;

typedef struct  _remoteMETAFILEPICT
    {
    long mm;
    long xExt;
    long yExt;
    userHMETAFILE  *hMF;
    }	remoteMETAFILEPICT;

typedef struct  _userHMETAFILEPICT
    {
    long fContext;
      union __MIDL_IWinTypes_0005
        {
         long hInproc;
         remoteMETAFILEPICT  *hRemote;
         long hGlobal;
        }	u;
    }	userHMETAFILEPICT;

typedef struct  _userHENHMETAFILE
    {
    long fContext;
      union __MIDL_IWinTypes_0006
        {
         long hInproc;
         BYTE_BLOB  *hRemote;
         long hGlobal;
        }	u;
    }	userHENHMETAFILE;

typedef struct  _userBITMAP
    {
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    ULONG cbSize;
     byte pBuffer[ 1 ];
    }	userBITMAP;

typedef struct  _userHBITMAP
    {
    long fContext;
      union __MIDL_IWinTypes_0007
        {
         long hInproc;
         userBITMAP  *hRemote;
         long hGlobal;
        }	u;
    }	userHBITMAP;

typedef struct  tagrpcLOGPALETTE
    {
    WORD palVersion;
    WORD palNumEntries;
     PALETTEENTRY palPalEntry[ 1 ];
    }	rpcLOGPALETTE;

typedef struct  _userHPALETTE
    {
    long fContext;
      union __MIDL_IWinTypes_0008
        {
         long hInproc;
         rpcLOGPALETTE  *hRemote;
         long hGlobal;
        }	u;
    }	userHPALETTE;

typedef struct  _RemotableHandle
    {
    long fContext;
      union __MIDL_IWinTypes_0009
        {
         long hInproc;
         long hRemote;
        }	u;
    }	RemotableHandle;

typedef  RemotableHandle  *wireHWND;

typedef  RemotableHandle  *wireHMENU;

typedef  RemotableHandle  *wireHACCEL;

typedef  RemotableHandle  *wireHBRUSH;

typedef  RemotableHandle  *wireHFONT;

typedef  RemotableHandle  *wireHDC;

typedef  RemotableHandle  *wireHICON;














































#line 956 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"




















typedef  userHBITMAP  *wireHBITMAP;

typedef  userHPALETTE  *wireHPALETTE;

typedef  userHENHMETAFILE  *wireHENHMETAFILE;

typedef  userHMETAFILE  *wireHMETAFILE;

typedef  userHMETAFILEPICT  *wireHMETAFILEPICT;














#line 1000 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"
typedef  void  *HMETAFILEPICT;



extern RPC_IF_HANDLE IWinTypes_v0_1_c_ifspec;
extern RPC_IF_HANDLE IWinTypes_v0_1_s_ifspec;
#line 1007 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"






 



#pragma warning(disable:4201)
#line 1019 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"
typedef double DATE;












#line 1033 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"

typedef union tagCY {
    struct {




        unsigned long Lo;
        long      Hi;
#line 1043 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"
    };
    LONGLONG int64;
} CY;
#line 1047 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"
#line 1048 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"
typedef CY  *LPCY;













#line 1063 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"

typedef struct tagDEC {
    USHORT wReserved;
    union {
        struct {
            BYTE scale;
            BYTE sign;
        };
        USHORT signscale;
    };
    ULONG Hi32;
    union {
        struct {




            ULONG Lo32;
            ULONG Mid32;
#line 1083 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"
        };
        ULONGLONG Lo64;
    };
} DECIMAL;



#line 1091 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"
typedef DECIMAL  *LPDECIMAL;


#pragma warning(default:4201)
#line 1096 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"
typedef  FLAGGED_WORD_BLOB  *wireBSTR;

typedef  OLECHAR  *BSTR;

typedef BSTR  *LPBSTR;


typedef short VARIANT_BOOL;





#line 1110 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"


#line 1113 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"
typedef boolean BOOLEAN;






typedef struct  tagBSTRBLOB
    {
    ULONG cbSize;
     BYTE  *pData;
    }	BSTRBLOB;

typedef struct tagBSTRBLOB  *LPBSTRBLOB;

#line 1129 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"






typedef struct  tagBLOB
    {
    ULONG cbSize;
     BYTE  *pBlobData;
    }	BLOB;

typedef struct tagBLOB  *LPBLOB;

#line 1144 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"
typedef struct  tagCLIPDATA
    {
    ULONG cbSize;
    long ulClipFmt;
     BYTE  *pClipData;
    }	CLIPDATA;



typedef unsigned short VARTYPE;

























































enum VARENUM
    {	VT_EMPTY	= 0,
	VT_NULL	= 1,
	VT_I2	= 2,
	VT_I4	= 3,
	VT_R4	= 4,
	VT_R8	= 5,
	VT_CY	= 6,
	VT_DATE	= 7,
	VT_BSTR	= 8,
	VT_DISPATCH	= 9,
	VT_ERROR	= 10,
	VT_BOOL	= 11,
	VT_VARIANT	= 12,
	VT_UNKNOWN	= 13,
	VT_DECIMAL	= 14,
	VT_I1	= 16,
	VT_UI1	= 17,
	VT_UI2	= 18,
	VT_UI4	= 19,
	VT_I8	= 20,
	VT_UI8	= 21,
	VT_INT	= 22,
	VT_UINT	= 23,
	VT_VOID	= 24,
	VT_HRESULT	= 25,
	VT_PTR	= 26,
	VT_SAFEARRAY	= 27,
	VT_CARRAY	= 28,
	VT_USERDEFINED	= 29,
	VT_LPSTR	= 30,
	VT_LPWSTR	= 31,
	VT_RECORD	= 36,
	VT_FILETIME	= 64,
	VT_BLOB	= 65,
	VT_STREAM	= 66,
	VT_STORAGE	= 67,
	VT_STREAMED_OBJECT	= 68,
	VT_STORED_OBJECT	= 69,
	VT_BLOB_OBJECT	= 70,
	VT_CF	= 71,
	VT_CLSID	= 72,
	VT_BSTR_BLOB	= 0xfff,
	VT_VECTOR	= 0x1000,
	VT_ARRAY	= 0x2000,
	VT_BYREF	= 0x4000,
	VT_RESERVED	= 0x8000,
	VT_ILLEGAL	= 0xffff,
	VT_ILLEGALMASKED	= 0xfff,
	VT_TYPEMASK	= 0xfff
    };
typedef ULONG PROPID;
























typedef GUID APPID;

typedef struct  tagCSPLATFORM
    {
    DWORD dwPlatformId;
    DWORD dwVersionHi;
    DWORD dwVersionLo;
    DWORD dwProcessorArch;
    }	CSPLATFORM;

typedef struct  tagQUERYCONTEXT
    {
    DWORD dwContext;
    CSPLATFORM Platform;
    LCID Locale;
    DWORD dwVersionHi;
    DWORD dwVersionLo;
    }	QUERYCONTEXT;

typedef  
enum tagTYSPEC
    {	TYSPEC_CLSID	= 0,
	TYSPEC_FILEEXT	= TYSPEC_CLSID + 1,
	TYSPEC_MIMETYPE	= TYSPEC_FILEEXT + 1,
	TYSPEC_PROGID	= TYSPEC_MIMETYPE + 1,
	TYSPEC_IID	= TYSPEC_PROGID + 1,
	TYSPEC_TYPELIB	= TYSPEC_IID + 1,
	TYSPEC_FILENAME	= TYSPEC_TYPELIB + 1,
	TYSPEC_JAVACLASS	= TYSPEC_FILENAME + 1,
	TYSPEC_PACKAGENAME	= TYSPEC_JAVACLASS + 1
    }	TYSPEC;

typedef  struct  __MIDL___MIDL_itf_wtypes_0001_0001
    {
    DWORD tyspec;
      union __MIDL___MIDL_itf_wtypes_0001_0003
        {
         CLSID clsid;
         IID iid;
         GUID typelibID;
         LPOLESTR pFileExt;
         LPOLESTR pMimeType;
         LPOLESTR pProgId;
         LPOLESTR pFileName;
         LPOLESTR pJavaClassName;
         LPOLESTR pPackageName;
        }	tagged_union;
    }	uCLSSPEC;

typedef struct  _PUBLISHEDAPPINFO
    {
    LPOLESTR pwszFileExtension;
    LPOLESTR pwszDisplayName;
    LPOLESTR pwszPackagePath;
    }	PUBLISHEDAPPINFO;

typedef  
enum tagAPPINFOTYPE
    {	APPINFO_PUBLISHED	= 1,
	APPINFO_SHELLNEW	= APPINFO_PUBLISHED + 1,
	APPINFO_INSERTABLE	= APPINFO_SHELLNEW + 1
    }	APPINFOTYPE;













typedef  
enum _CLASSPATHTYPE
    {	ExeNamePath	= 0,
	DllNamePath	= ExeNamePath + 1,
	TlbNamePath	= DllNamePath + 1,
	CabFilePath	= TlbNamePath + 1,
	InfFilePath	= CabFilePath + 1,
	DrwFilePath	= InfFilePath + 1,
	SetupNamePath	= DrwFilePath + 1
    }	CLASSPATHTYPE;

typedef struct  tagAPPDETAIL
    {
    GUID AppID;
    DWORD cClasses;
     CLSID  *prgClsIdList;
    DWORD cTypeLibIds;
     CLSID  *prgTypeLibIdList;
    DWORD cServers;
     LPOLESTR  *prgServerNames;
    }	APPDETAIL;

typedef struct  tagPACKAGEDETAIL
    {
    CLASSPATHTYPE PathType;
    LPOLESTR pszPath;
    LPOLESTR pszIconPath;
    LPOLESTR pszSetupCommand;
    DWORD dwActFlags;
    LPOLESTR pszVendor;
    LPOLESTR pszPackageName;
    LPOLESTR pszProductName;
    DWORD dwContext;
    CSPLATFORM Platform;
    LCID Locale;
    DWORD dwVersionHi;
    DWORD dwVersionLo;
    ULONGLONG Usn;
    DWORD cApps;
     APPDETAIL  *pAppDetail;
    }	PACKAGEDETAIL;

typedef struct  tagPACKAGEINFO
    {
    LPOLESTR pszClassIconPath;
    CLSID  *pTreatAsClsid;
    DWORD cPackages;
     PACKAGEDETAIL  *pPackageDetail;
    }	PACKAGEINFO;



extern RPC_IF_HANDLE __MIDL_itf_wtypes_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtypes_0001_v0_0_s_ifspec;






}
#line 1424 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"

#line 1426 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"
#line 371 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\unknwn.h"


















#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"
















#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"





































































































































































































#line 20 "c:\\programme\\microsoft visual studio\\vc98\\include\\unknwn.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21 "c:\\programme\\microsoft visual studio\\vc98\\include\\unknwn.h"







#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"







































































































































































































































































































































































































































#line 425 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"

#line 29 "c:\\programme\\microsoft visual studio\\vc98\\include\\unknwn.h"
#line 30 "c:\\programme\\microsoft visual studio\\vc98\\include\\unknwn.h"





extern "C"{
#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\unknwn.h"

 



typedef struct IUnknown IUnknown;
#line 44 "c:\\programme\\microsoft visual studio\\vc98\\include\\unknwn.h"




typedef struct IClassFactory IClassFactory;
#line 50 "c:\\programme\\microsoft visual studio\\vc98\\include\\unknwn.h"



#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"


















#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"
















#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"





































































































































































































#line 20 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21 "c:\\programme\\microsoft visual studio\\vc98\\include\\wtypes.h"





























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 54 "c:\\programme\\microsoft visual studio\\vc98\\include\\unknwn.h"

void  * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void  * ); 






 










extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_v0_0_s_ifspec;









 


typedef  IUnknown  *LPUNKNOWN;






extern "C" const IID IID_IUnknown;




extern "C++"
{
#line 103 "c:\\programme\\microsoft visual studio\\vc98\\include\\unknwn.h"

    struct __declspec(uuid("00000000-0000-0000-C000-000000000046")) __declspec(novtable)
	IUnknown
    {
    public:
        
        virtual HRESULT __stdcall QueryInterface( 
             const IID & riid,
             void  * *ppvObject) = 0;
        
        virtual ULONG __stdcall AddRef( void) = 0;
        
        virtual ULONG __stdcall Release( void) = 0;


		template <class Q>
		HRESULT __stdcall QueryInterface(Q** pp)
		{
			return QueryInterface(__uuidof(Q), (void**)pp);
		}
#line 124 "c:\\programme\\microsoft visual studio\\vc98\\include\\unknwn.h"

        
    };


} 
#line 131 "c:\\programme\\microsoft visual studio\\vc98\\include\\unknwn.h"
    










































#line 175 "c:\\programme\\microsoft visual studio\\vc98\\include\\unknwn.h"

HRESULT __stdcall IUnknown_QueryInterface_Proxy( 
    IUnknown  * This,
     const IID & riid,
     void  * *ppvObject);


void __stdcall IUnknown_QueryInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


ULONG __stdcall IUnknown_AddRef_Proxy( 
    IUnknown  * This);


void __stdcall IUnknown_AddRef_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


ULONG __stdcall IUnknown_Release_Proxy( 
    IUnknown  * This);


void __stdcall IUnknown_Release_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 213 "c:\\programme\\microsoft visual studio\\vc98\\include\\unknwn.h"










 


typedef  IClassFactory  *LPCLASSFACTORY;


extern "C" const IID IID_IClassFactory;


    
    struct __declspec(uuid("00000001-0000-0000-C000-000000000046")) __declspec(novtable)
    IClassFactory : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall CreateInstance( 
             IUnknown  *pUnkOuter,
             const IID & riid,
             void  * *ppvObject) = 0;
        
        virtual  HRESULT __stdcall LockServer( 
             BOOL fLock) = 0;
        
    };
    



























































#line 307 "c:\\programme\\microsoft visual studio\\vc98\\include\\unknwn.h"



 HRESULT __stdcall IClassFactory_RemoteCreateInstance_Proxy( 
    IClassFactory  * This,
     const IID & riid,
     IUnknown  * *ppvObject);


void __stdcall IClassFactory_RemoteCreateInstance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IClassFactory_RemoteLockServer_Proxy( 
    IClassFactory  * This,
     BOOL fLock);


void __stdcall IClassFactory_RemoteLockServer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 337 "c:\\programme\\microsoft visual studio\\vc98\\include\\unknwn.h"




 HRESULT __stdcall IClassFactory_CreateInstance_Proxy( 
    IClassFactory  * This,
     IUnknown  *pUnkOuter,
     const IID & riid,
     void  * *ppvObject);


 HRESULT __stdcall IClassFactory_CreateInstance_Stub( 
    IClassFactory  * This,
     const IID & riid,
     IUnknown  * *ppvObject);

 HRESULT __stdcall IClassFactory_LockServer_Proxy( 
    IClassFactory  * This,
     BOOL fLock);


 HRESULT __stdcall IClassFactory_LockServer_Stub( 
    IClassFactory  * This,
     BOOL fLock);






}
#line 369 "c:\\programme\\microsoft visual studio\\vc98\\include\\unknwn.h"

#line 371 "c:\\programme\\microsoft visual studio\\vc98\\include\\unknwn.h"
#line 372 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"


















#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"
















#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"





































































































































































































#line 20 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"







#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"







































































































































































































































































































































































































































#line 425 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"

#line 29 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"
#line 30 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"





extern "C"{
#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"

 



typedef struct IMarshal IMarshal;
#line 44 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IMalloc IMalloc;
#line 50 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IMallocSpy IMallocSpy;
#line 56 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IStdMarshalInfo IStdMarshalInfo;
#line 62 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IExternalConnection IExternalConnection;
#line 68 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IMultiQI IMultiQI;
#line 74 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IEnumUnknown IEnumUnknown;
#line 80 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IBindCtx IBindCtx;
#line 86 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IEnumMoniker IEnumMoniker;
#line 92 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IRunnableObject IRunnableObject;
#line 98 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IRunningObjectTable IRunningObjectTable;
#line 104 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IPersist IPersist;
#line 110 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IPersistStream IPersistStream;
#line 116 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IMoniker IMoniker;
#line 122 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IROTData IROTData;
#line 128 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IEnumString IEnumString;
#line 134 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct ISequentialStream ISequentialStream;
#line 140 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IStream IStream;
#line 146 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IEnumSTATSTG IEnumSTATSTG;
#line 152 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IStorage IStorage;
#line 158 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IPersistFile IPersistFile;
#line 164 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IPersistStorage IPersistStorage;
#line 170 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct ILockBytes ILockBytes;
#line 176 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IEnumFORMATETC IEnumFORMATETC;
#line 182 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IEnumSTATDATA IEnumSTATDATA;
#line 188 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IRootStorage IRootStorage;
#line 194 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IAdviseSink IAdviseSink;
#line 200 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IAdviseSink2 IAdviseSink2;
#line 206 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IDataObject IDataObject;
#line 212 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IDataAdviseHolder IDataAdviseHolder;
#line 218 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IMessageFilter IMessageFilter;
#line 224 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IRpcChannelBuffer IRpcChannelBuffer;
#line 230 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IRpcChannelBuffer2 IRpcChannelBuffer2;
#line 236 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IRpcChannelBuffer3 IRpcChannelBuffer3;
#line 242 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IRpcProxyBuffer IRpcProxyBuffer;
#line 248 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IRpcStubBuffer IRpcStubBuffer;
#line 254 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IPSFactoryBuffer IPSFactoryBuffer;
#line 260 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IChannelHook IChannelHook;
#line 266 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IPropertyStorage IPropertyStorage;
#line 272 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IPropertySetStorage IPropertySetStorage;
#line 278 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IEnumSTATPROPSTG IEnumSTATPROPSTG;
#line 284 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IEnumSTATPROPSETSTG IEnumSTATPROPSETSTG;
#line 290 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IClientSecurity IClientSecurity;
#line 296 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IServerSecurity IServerSecurity;
#line 302 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IClassActivator IClassActivator;
#line 308 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IRpcOptions IRpcOptions;
#line 314 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IComBinding IComBinding;
#line 320 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IFillLockBytes IFillLockBytes;
#line 326 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IProgressNotify IProgressNotify;
#line 332 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct ILayoutStorage ILayoutStorage;
#line 338 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct ISurrogate ISurrogate;
#line 344 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IGlobalInterfaceTable IGlobalInterfaceTable;
#line 350 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IDirectWriterLock IDirectWriterLock;
#line 356 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct ISynchronize ISynchronize;
#line 362 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct ISynchronizeMutex ISynchronizeMutex;
#line 368 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IAsyncSetup IAsyncSetup;
#line 374 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct ICancelMethodCalls ICancelMethodCalls;
#line 380 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IAsyncManager IAsyncManager;
#line 386 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IWaitMultiple IWaitMultiple;
#line 392 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct ISynchronizeEvent ISynchronizeEvent;
#line 398 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IUrlMon IUrlMon;
#line 404 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IClassAccess IClassAccess;
#line 410 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IClassRefresh IClassRefresh;
#line 416 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IEnumPackage IEnumPackage;
#line 422 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IEnumClass IEnumClass;
#line 428 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"




typedef struct IClassAdmin IClassAdmin;
#line 434 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\unknwn.h"


















#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"
















#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"





































































































































































































#line 20 "c:\\programme\\microsoft visual studio\\vc98\\include\\unknwn.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21 "c:\\programme\\microsoft visual studio\\vc98\\include\\unknwn.h"







#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"







































































































































































































































































































































































































































#line 425 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"

#line 29 "c:\\programme\\microsoft visual studio\\vc98\\include\\unknwn.h"
#line 30 "c:\\programme\\microsoft visual studio\\vc98\\include\\unknwn.h"





















































































































































































































































































































































#line 438 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"

void  * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void  * ); 






 









#pragma warning(disable:4201)
#line 459 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"











typedef 
enum _SRVINFO
    {	SRVINFO_F_COSERVERINFO	= 0,
	SRVINFO_F_COSERVERINFO2	= 1
    }	SRVINFO;

typedef struct  _COSERVERINFO
    {
    DWORD dwReserved1;
    LPWSTR pwszName;
    COAUTHINFO  *pAuthInfo;
    DWORD dwReserved2;
    }	COSERVERINFO;

typedef struct  _COSERVERINFO2
    {
    DWORD dwFlags;
    LPWSTR pwszName;
    COAUTHINFO  *pAuthInfo;
    IUnknown  * *ppCall;
    LPWSTR pwszCodeURL;
    DWORD dwFileVersionMS;
    DWORD dwFileVersionLS;
    LPWSTR pwszContentType;
    }	COSERVERINFO2;



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_v0_0_s_ifspec;









 


typedef  IMarshal  *LPMARSHAL;


extern "C" const IID IID_IMarshal;


    
    struct __declspec(uuid("00000003-0000-0000-C000-000000000046")) __declspec(novtable)
    IMarshal : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetUnmarshalClass( 
             const IID & riid,
             void  *pv,
             DWORD dwDestContext,
             void  *pvDestContext,
             DWORD mshlflags,
             CLSID  *pCid) = 0;
        
        virtual HRESULT __stdcall GetMarshalSizeMax( 
             const IID & riid,
             void  *pv,
             DWORD dwDestContext,
             void  *pvDestContext,
             DWORD mshlflags,
             DWORD  *pSize) = 0;
        
        virtual HRESULT __stdcall MarshalInterface( 
             IStream  *pStm,
             const IID & riid,
             void  *pv,
             DWORD dwDestContext,
             void  *pvDestContext,
             DWORD mshlflags) = 0;
        
        virtual HRESULT __stdcall UnmarshalInterface( 
             IStream  *pStm,
             const IID & riid,
             void  * *ppv) = 0;
        
        virtual HRESULT __stdcall ReleaseMarshalData( 
             IStream  *pStm) = 0;
        
        virtual HRESULT __stdcall DisconnectObject( 
             DWORD dwReserved) = 0;
        
    };
    






































































































#line 663 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall IMarshal_GetUnmarshalClass_Proxy( 
    IMarshal  * This,
     const IID & riid,
     void  *pv,
     DWORD dwDestContext,
     void  *pvDestContext,
     DWORD mshlflags,
     CLSID  *pCid);


void __stdcall IMarshal_GetUnmarshalClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMarshal_GetMarshalSizeMax_Proxy( 
    IMarshal  * This,
     const IID & riid,
     void  *pv,
     DWORD dwDestContext,
     void  *pvDestContext,
     DWORD mshlflags,
     DWORD  *pSize);


void __stdcall IMarshal_GetMarshalSizeMax_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMarshal_MarshalInterface_Proxy( 
    IMarshal  * This,
     IStream  *pStm,
     const IID & riid,
     void  *pv,
     DWORD dwDestContext,
     void  *pvDestContext,
     DWORD mshlflags);


void __stdcall IMarshal_MarshalInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMarshal_UnmarshalInterface_Proxy( 
    IMarshal  * This,
     IStream  *pStm,
     const IID & riid,
     void  * *ppv);


void __stdcall IMarshal_UnmarshalInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMarshal_ReleaseMarshalData_Proxy( 
    IMarshal  * This,
     IStream  *pStm);


void __stdcall IMarshal_ReleaseMarshalData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMarshal_DisconnectObject_Proxy( 
    IMarshal  * This,
     DWORD dwReserved);


void __stdcall IMarshal_DisconnectObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 757 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef  IMalloc  *LPMALLOC;


extern "C" const IID IID_IMalloc;


    
    struct __declspec(uuid("00000002-0000-0000-C000-000000000046")) __declspec(novtable)
    IMalloc : public IUnknown
    {
    public:
        virtual void  *__stdcall Alloc( 
             ULONG cb) = 0;
        
        virtual void  *__stdcall Realloc( 
             void  *pv,
             ULONG cb) = 0;
        
        virtual void __stdcall Free( 
             void  *pv) = 0;
        
        virtual ULONG __stdcall GetSize( 
             void  *pv) = 0;
        
        virtual int __stdcall DidAlloc( 
            void  *pv) = 0;
        
        virtual void __stdcall HeapMinimize( void) = 0;
        
    };
    





















































































#line 887 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



void  *__stdcall IMalloc_Alloc_Proxy( 
    IMalloc  * This,
     ULONG cb);


void __stdcall IMalloc_Alloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void  *__stdcall IMalloc_Realloc_Proxy( 
    IMalloc  * This,
     void  *pv,
     ULONG cb);


void __stdcall IMalloc_Realloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IMalloc_Free_Proxy( 
    IMalloc  * This,
     void  *pv);


void __stdcall IMalloc_Free_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


ULONG __stdcall IMalloc_GetSize_Proxy( 
    IMalloc  * This,
     void  *pv);


void __stdcall IMalloc_GetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


int __stdcall IMalloc_DidAlloc_Proxy( 
    IMalloc  * This,
    void  *pv);


void __stdcall IMalloc_DidAlloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IMalloc_HeapMinimize_Proxy( 
    IMalloc  * This);


void __stdcall IMalloc_HeapMinimize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 964 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef  IMallocSpy  *LPMALLOCSPY;


extern "C" const IID IID_IMallocSpy;


    
    struct __declspec(uuid("0000001d-0000-0000-C000-000000000046")) __declspec(novtable)
    IMallocSpy : public IUnknown
    {
    public:
        virtual ULONG __stdcall PreAlloc( 
             ULONG cbRequest) = 0;
        
        virtual void  *__stdcall PostAlloc( 
             void  *pActual) = 0;
        
        virtual void  *__stdcall PreFree( 
             void  *pRequest,
             BOOL fSpyed) = 0;
        
        virtual void __stdcall PostFree( 
             BOOL fSpyed) = 0;
        
        virtual ULONG __stdcall PreRealloc( 
             void  *pRequest,
             ULONG cbRequest,
             void  * *ppNewRequest,
             BOOL fSpyed) = 0;
        
        virtual void  *__stdcall PostRealloc( 
             void  *pActual,
             BOOL fSpyed) = 0;
        
        virtual void  *__stdcall PreGetSize( 
             void  *pRequest,
             BOOL fSpyed) = 0;
        
        virtual ULONG __stdcall PostGetSize( 
             ULONG cbActual,
             BOOL fSpyed) = 0;
        
        virtual void  *__stdcall PreDidAlloc( 
             void  *pRequest,
             BOOL fSpyed) = 0;
        
        virtual int __stdcall PostDidAlloc( 
             void  *pRequest,
             BOOL fSpyed,
             int fActual) = 0;
        
        virtual void __stdcall PreHeapMinimize( void) = 0;
        
        virtual void __stdcall PostHeapMinimize( void) = 0;
        
    };
    







































































































































#line 1170 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



ULONG __stdcall IMallocSpy_PreAlloc_Proxy( 
    IMallocSpy  * This,
     ULONG cbRequest);


void __stdcall IMallocSpy_PreAlloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void  *__stdcall IMallocSpy_PostAlloc_Proxy( 
    IMallocSpy  * This,
     void  *pActual);


void __stdcall IMallocSpy_PostAlloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void  *__stdcall IMallocSpy_PreFree_Proxy( 
    IMallocSpy  * This,
     void  *pRequest,
     BOOL fSpyed);


void __stdcall IMallocSpy_PreFree_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IMallocSpy_PostFree_Proxy( 
    IMallocSpy  * This,
     BOOL fSpyed);


void __stdcall IMallocSpy_PostFree_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


ULONG __stdcall IMallocSpy_PreRealloc_Proxy( 
    IMallocSpy  * This,
     void  *pRequest,
     ULONG cbRequest,
     void  * *ppNewRequest,
     BOOL fSpyed);


void __stdcall IMallocSpy_PreRealloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void  *__stdcall IMallocSpy_PostRealloc_Proxy( 
    IMallocSpy  * This,
     void  *pActual,
     BOOL fSpyed);


void __stdcall IMallocSpy_PostRealloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void  *__stdcall IMallocSpy_PreGetSize_Proxy( 
    IMallocSpy  * This,
     void  *pRequest,
     BOOL fSpyed);


void __stdcall IMallocSpy_PreGetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


ULONG __stdcall IMallocSpy_PostGetSize_Proxy( 
    IMallocSpy  * This,
     ULONG cbActual,
     BOOL fSpyed);


void __stdcall IMallocSpy_PostGetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void  *__stdcall IMallocSpy_PreDidAlloc_Proxy( 
    IMallocSpy  * This,
     void  *pRequest,
     BOOL fSpyed);


void __stdcall IMallocSpy_PreDidAlloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


int __stdcall IMallocSpy_PostDidAlloc_Proxy( 
    IMallocSpy  * This,
     void  *pRequest,
     BOOL fSpyed,
     int fActual);


void __stdcall IMallocSpy_PostDidAlloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IMallocSpy_PreHeapMinimize_Proxy( 
    IMallocSpy  * This);


void __stdcall IMallocSpy_PreHeapMinimize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IMallocSpy_PostHeapMinimize_Proxy( 
    IMallocSpy  * This);


void __stdcall IMallocSpy_PostHeapMinimize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1327 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef  IStdMarshalInfo  *LPSTDMARSHALINFO;


extern "C" const IID IID_IStdMarshalInfo;


    
    struct __declspec(uuid("00000018-0000-0000-C000-000000000046")) __declspec(novtable)
    IStdMarshalInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetClassForHandler( 
             DWORD dwDestContext,
             void  *pvDestContext,
             CLSID  *pClsid) = 0;
        
    };
    




















































#line 1411 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall IStdMarshalInfo_GetClassForHandler_Proxy( 
    IStdMarshalInfo  * This,
     DWORD dwDestContext,
     void  *pvDestContext,
     CLSID  *pClsid);


void __stdcall IStdMarshalInfo_GetClassForHandler_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1430 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef  IExternalConnection  *LPEXTERNALCONNECTION;

typedef 
enum tagEXTCONN
    {	EXTCONN_STRONG	= 0x1,
	EXTCONN_WEAK	= 0x2,
	EXTCONN_CALLABLE	= 0x4
    }	EXTCONN;


extern "C" const IID IID_IExternalConnection;


    
    struct __declspec(uuid("00000019-0000-0000-C000-000000000046")) __declspec(novtable)
    IExternalConnection : public IUnknown
    {
    public:
        virtual DWORD __stdcall AddConnection( 
             DWORD extconn,
             DWORD reserved) = 0;
        
        virtual DWORD __stdcall ReleaseConnection( 
             DWORD extconn,
             DWORD reserved,
             BOOL fLastReleaseCloses) = 0;
        
    };
    




























































#line 1533 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



DWORD __stdcall IExternalConnection_AddConnection_Proxy( 
    IExternalConnection  * This,
     DWORD extconn,
     DWORD reserved);


void __stdcall IExternalConnection_AddConnection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


DWORD __stdcall IExternalConnection_ReleaseConnection_Proxy( 
    IExternalConnection  * This,
     DWORD extconn,
     DWORD reserved,
     BOOL fLastReleaseCloses);


void __stdcall IExternalConnection_ReleaseConnection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1565 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef  IMultiQI  *LPMULTIQI;

typedef struct  tagMULTI_QI
    {
    const IID  *pIID;
    IUnknown  *pItf;
    HRESULT hr;
    }	MULTI_QI;


extern "C" const IID IID_IMultiQI;


    
    struct __declspec(uuid("00000020-0000-0000-C000-000000000046")) __declspec(novtable)
    IMultiQI : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QueryMultipleInterfaces( 
             ULONG cMQIs,
             MULTI_QI  *pMQIs) = 0;
        
    };
    



















































#line 1654 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall IMultiQI_QueryMultipleInterfaces_Proxy( 
    IMultiQI  * This,
     ULONG cMQIs,
     MULTI_QI  *pMQIs);


void __stdcall IMultiQI_QueryMultipleInterfaces_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1672 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef  IEnumUnknown  *LPENUMUNKNOWN;


extern "C" const IID IID_IEnumUnknown;


    
    struct __declspec(uuid("00000100-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumUnknown : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             IUnknown  * *rgelt,
             ULONG  *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumUnknown  * *ppenum) = 0;
        
    };
    








































































#line 1784 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



 HRESULT __stdcall IEnumUnknown_RemoteNext_Proxy( 
    IEnumUnknown  * This,
     ULONG celt,
     IUnknown  * *rgelt,
     ULONG  *pceltFetched);


void __stdcall IEnumUnknown_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumUnknown_Skip_Proxy( 
    IEnumUnknown  * This,
     ULONG celt);


void __stdcall IEnumUnknown_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumUnknown_Reset_Proxy( 
    IEnumUnknown  * This);


void __stdcall IEnumUnknown_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumUnknown_Clone_Proxy( 
    IEnumUnknown  * This,
     IEnumUnknown  * *ppenum);


void __stdcall IEnumUnknown_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1838 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef  IBindCtx  *LPBC;

typedef  IBindCtx  *LPBINDCTX;

typedef struct  tagBIND_OPTS
    {
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
    }	BIND_OPTS;

typedef struct tagBIND_OPTS  *LPBIND_OPTS;


    typedef struct tagBIND_OPTS2 : tagBIND_OPTS{
    DWORD           dwTrackFlags;
    DWORD           dwClassContext;
    LCID            locale;
    COSERVERINFO *  pServerInfo;
    } BIND_OPTS2, * LPBIND_OPTS2;















#line 1888 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"
typedef 
enum tagBIND_FLAGS
    {	BIND_MAYBOTHERUSER	= 1,
	BIND_JUSTTESTEXISTENCE	= 2
    }	BIND_FLAGS;


extern "C" const IID IID_IBindCtx;


    
    struct __declspec(uuid("0000000e-0000-0000-C000-000000000046")) __declspec(novtable)
    IBindCtx : public IUnknown
    {
    public:
        virtual HRESULT __stdcall RegisterObjectBound( 
             IUnknown  *punk) = 0;
        
        virtual HRESULT __stdcall RevokeObjectBound( 
             IUnknown  *punk) = 0;
        
        virtual HRESULT __stdcall ReleaseBoundObjects( void) = 0;
        
        virtual  HRESULT __stdcall SetBindOptions( 
             BIND_OPTS  *pbindopts) = 0;
        
        virtual  HRESULT __stdcall GetBindOptions( 
             BIND_OPTS  *pbindopts) = 0;
        
        virtual HRESULT __stdcall GetRunningObjectTable( 
             IRunningObjectTable  * *pprot) = 0;
        
        virtual HRESULT __stdcall RegisterObjectParam( 
             LPOLESTR pszKey,
             IUnknown  *punk) = 0;
        
        virtual HRESULT __stdcall GetObjectParam( 
             LPOLESTR pszKey,
             IUnknown  * *ppunk) = 0;
        
        virtual HRESULT __stdcall EnumObjectParam( 
             IEnumString  * *ppenum) = 0;
        
        virtual HRESULT __stdcall RevokeObjectParam( 
             LPOLESTR pszKey) = 0;
        
    };
    


















































































































#line 2051 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall IBindCtx_RegisterObjectBound_Proxy( 
    IBindCtx  * This,
     IUnknown  *punk);


void __stdcall IBindCtx_RegisterObjectBound_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindCtx_RevokeObjectBound_Proxy( 
    IBindCtx  * This,
     IUnknown  *punk);


void __stdcall IBindCtx_RevokeObjectBound_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindCtx_ReleaseBoundObjects_Proxy( 
    IBindCtx  * This);


void __stdcall IBindCtx_ReleaseBoundObjects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IBindCtx_RemoteSetBindOptions_Proxy( 
    IBindCtx  * This,
     BIND_OPTS2  *pbindopts);


void __stdcall IBindCtx_RemoteSetBindOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IBindCtx_RemoteGetBindOptions_Proxy( 
    IBindCtx  * This,
     BIND_OPTS2  *pbindopts);


void __stdcall IBindCtx_RemoteGetBindOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindCtx_GetRunningObjectTable_Proxy( 
    IBindCtx  * This,
     IRunningObjectTable  * *pprot);


void __stdcall IBindCtx_GetRunningObjectTable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindCtx_RegisterObjectParam_Proxy( 
    IBindCtx  * This,
     LPOLESTR pszKey,
     IUnknown  *punk);


void __stdcall IBindCtx_RegisterObjectParam_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindCtx_GetObjectParam_Proxy( 
    IBindCtx  * This,
     LPOLESTR pszKey,
     IUnknown  * *ppunk);


void __stdcall IBindCtx_GetObjectParam_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindCtx_EnumObjectParam_Proxy( 
    IBindCtx  * This,
     IEnumString  * *ppenum);


void __stdcall IBindCtx_EnumObjectParam_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindCtx_RevokeObjectParam_Proxy( 
    IBindCtx  * This,
     LPOLESTR pszKey);


void __stdcall IBindCtx_RevokeObjectParam_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2177 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef  IEnumMoniker  *LPENUMMONIKER;


extern "C" const IID IID_IEnumMoniker;


    
    struct __declspec(uuid("00000102-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumMoniker : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             IMoniker  * *rgelt,
             ULONG  *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumMoniker  * *ppenum) = 0;
        
    };
    








































































#line 2289 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



 HRESULT __stdcall IEnumMoniker_RemoteNext_Proxy( 
    IEnumMoniker  * This,
     ULONG celt,
     IMoniker  * *rgelt,
     ULONG  *pceltFetched);


void __stdcall IEnumMoniker_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumMoniker_Skip_Proxy( 
    IEnumMoniker  * This,
     ULONG celt);


void __stdcall IEnumMoniker_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumMoniker_Reset_Proxy( 
    IEnumMoniker  * This);


void __stdcall IEnumMoniker_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumMoniker_Clone_Proxy( 
    IEnumMoniker  * This,
     IEnumMoniker  * *ppenum);


void __stdcall IEnumMoniker_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2343 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef  IRunnableObject  *LPRUNNABLEOBJECT;


extern "C" const IID IID_IRunnableObject;


    
    struct __declspec(uuid("00000126-0000-0000-C000-000000000046")) __declspec(novtable)
    IRunnableObject : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetRunningClass( 
             LPCLSID lpClsid) = 0;
        
        virtual HRESULT __stdcall Run( 
             LPBINDCTX pbc) = 0;
        
        virtual  BOOL __stdcall IsRunning( void) = 0;
        
        virtual HRESULT __stdcall LockRunning( 
             BOOL fLock,
             BOOL fLastUnlockCloses) = 0;
        
        virtual HRESULT __stdcall SetContainedObject( 
             BOOL fContained) = 0;
        
    };
    














































































#line 2463 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall IRunnableObject_GetRunningClass_Proxy( 
    IRunnableObject  * This,
     LPCLSID lpClsid);


void __stdcall IRunnableObject_GetRunningClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunnableObject_Run_Proxy( 
    IRunnableObject  * This,
     LPBINDCTX pbc);


void __stdcall IRunnableObject_Run_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IRunnableObject_RemoteIsRunning_Proxy( 
    IRunnableObject  * This);


void __stdcall IRunnableObject_RemoteIsRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunnableObject_LockRunning_Proxy( 
    IRunnableObject  * This,
     BOOL fLock,
     BOOL fLastUnlockCloses);


void __stdcall IRunnableObject_LockRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunnableObject_SetContainedObject_Proxy( 
    IRunnableObject  * This,
     BOOL fContained);


void __stdcall IRunnableObject_SetContainedObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2528 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef  IRunningObjectTable  *LPRUNNINGOBJECTTABLE;


extern "C" const IID IID_IRunningObjectTable;


    
    struct __declspec(uuid("00000010-0000-0000-C000-000000000046")) __declspec(novtable)
    IRunningObjectTable : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Register( 
             DWORD grfFlags,
             IUnknown  *punkObject,
             IMoniker  *pmkObjectName,
             DWORD  *pdwRegister) = 0;
        
        virtual HRESULT __stdcall Revoke( 
             DWORD dwRegister) = 0;
        
        virtual HRESULT __stdcall IsRunning( 
             IMoniker  *pmkObjectName) = 0;
        
        virtual HRESULT __stdcall GetObjectA( 
             IMoniker  *pmkObjectName,
             IUnknown  * *ppunkObject) = 0;
        
        virtual HRESULT __stdcall NoteChangeTime( 
             DWORD dwRegister,
             FILETIME  *pfiletime) = 0;
        
        virtual HRESULT __stdcall GetTimeOfLastChange( 
             IMoniker  *pmkObjectName,
             FILETIME  *pfiletime) = 0;
        
        virtual HRESULT __stdcall EnumRunning( 
             IEnumMoniker  * *ppenumMoniker) = 0;
        
    };
    


































































































#line 2680 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall IRunningObjectTable_Register_Proxy( 
    IRunningObjectTable  * This,
     DWORD grfFlags,
     IUnknown  *punkObject,
     IMoniker  *pmkObjectName,
     DWORD  *pdwRegister);


void __stdcall IRunningObjectTable_Register_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunningObjectTable_Revoke_Proxy( 
    IRunningObjectTable  * This,
     DWORD dwRegister);


void __stdcall IRunningObjectTable_Revoke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunningObjectTable_IsRunning_Proxy( 
    IRunningObjectTable  * This,
     IMoniker  *pmkObjectName);


void __stdcall IRunningObjectTable_IsRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunningObjectTable_GetObject_Proxy( 
    IRunningObjectTable  * This,
     IMoniker  *pmkObjectName,
     IUnknown  * *ppunkObject);


void __stdcall IRunningObjectTable_GetObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunningObjectTable_NoteChangeTime_Proxy( 
    IRunningObjectTable  * This,
     DWORD dwRegister,
     FILETIME  *pfiletime);


void __stdcall IRunningObjectTable_NoteChangeTime_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunningObjectTable_GetTimeOfLastChange_Proxy( 
    IRunningObjectTable  * This,
     IMoniker  *pmkObjectName,
     FILETIME  *pfiletime);


void __stdcall IRunningObjectTable_GetTimeOfLastChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunningObjectTable_EnumRunning_Proxy( 
    IRunningObjectTable  * This,
     IEnumMoniker  * *ppenumMoniker);


void __stdcall IRunningObjectTable_EnumRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2775 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef  IPersist  *LPPERSIST;


extern "C" const IID IID_IPersist;


    
    struct __declspec(uuid("0000010c-0000-0000-C000-000000000046")) __declspec(novtable)
    IPersist : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetClassID( 
             CLSID  *pClassID) = 0;
        
    };
    


















































#line 2855 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall IPersist_GetClassID_Proxy( 
    IPersist  * This,
     CLSID  *pClassID);


void __stdcall IPersist_GetClassID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2872 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef  IPersistStream  *LPPERSISTSTREAM;


extern "C" const IID IID_IPersistStream;


    
    struct __declspec(uuid("00000109-0000-0000-C000-000000000046")) __declspec(novtable)
    IPersistStream : public IPersist
    {
    public:
        virtual HRESULT __stdcall IsDirty( void) = 0;
        
        virtual HRESULT __stdcall Load( 
             IStream  *pStm) = 0;
        
        virtual HRESULT __stdcall Save( 
             IStream  *pStm,
             BOOL fClearDirty) = 0;
        
        virtual HRESULT __stdcall GetSizeMax( 
             ULARGE_INTEGER  *pcbSize) = 0;
        
    };
    















































































#line 2990 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall IPersistStream_IsDirty_Proxy( 
    IPersistStream  * This);


void __stdcall IPersistStream_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStream_Load_Proxy( 
    IPersistStream  * This,
     IStream  *pStm);


void __stdcall IPersistStream_Load_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStream_Save_Proxy( 
    IPersistStream  * This,
     IStream  *pStm,
     BOOL fClearDirty);


void __stdcall IPersistStream_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStream_GetSizeMax_Proxy( 
    IPersistStream  * This,
     ULARGE_INTEGER  *pcbSize);


void __stdcall IPersistStream_GetSizeMax_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3043 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef  IMoniker  *LPMONIKER;

typedef 
enum tagMKSYS
    {	MKSYS_NONE	= 0,
	MKSYS_GENERICCOMPOSITE	= 1,
	MKSYS_FILEMONIKER	= 2,
	MKSYS_ANTIMONIKER	= 3,
	MKSYS_ITEMMONIKER	= 4,
	MKSYS_POINTERMONIKER	= 5,
	MKSYS_CLASSMONIKER	= 7
    }	MKSYS;

typedef  
enum tagMKREDUCE
    {	MKRREDUCE_ONE	= 3 << 16,
	MKRREDUCE_TOUSER	= 2 << 16,
	MKRREDUCE_THROUGHUSER	= 1 << 16,
	MKRREDUCE_ALL	= 0
    }	MKRREDUCE;


extern "C" const IID IID_IMoniker;


    
    struct __declspec(uuid("0000000f-0000-0000-C000-000000000046")) __declspec(novtable)
    IMoniker : public IPersistStream
    {
    public:
        virtual  HRESULT __stdcall BindToObject( 
             IBindCtx  *pbc,
             IMoniker  *pmkToLeft,
             const IID & riidResult,
             void  * *ppvResult) = 0;
        
        virtual  HRESULT __stdcall BindToStorage( 
             IBindCtx  *pbc,
             IMoniker  *pmkToLeft,
             const IID & riid,
             void  * *ppvObj) = 0;
        
        virtual HRESULT __stdcall Reduce( 
             IBindCtx  *pbc,
             DWORD dwReduceHowFar,
             IMoniker  * *ppmkToLeft,
             IMoniker  * *ppmkReduced) = 0;
        
        virtual HRESULT __stdcall ComposeWith( 
             IMoniker  *pmkRight,
             BOOL fOnlyIfNotGeneric,
             IMoniker  * *ppmkComposite) = 0;
        
        virtual HRESULT __stdcall Enum( 
             BOOL fForward,
             IEnumMoniker  * *ppenumMoniker) = 0;
        
        virtual HRESULT __stdcall IsEqual( 
             IMoniker  *pmkOtherMoniker) = 0;
        
        virtual HRESULT __stdcall Hash( 
             DWORD  *pdwHash) = 0;
        
        virtual HRESULT __stdcall IsRunning( 
             IBindCtx  *pbc,
             IMoniker  *pmkToLeft,
             IMoniker  *pmkNewlyRunning) = 0;
        
        virtual HRESULT __stdcall GetTimeOfLastChange( 
             IBindCtx  *pbc,
             IMoniker  *pmkToLeft,
             FILETIME  *pFileTime) = 0;
        
        virtual HRESULT __stdcall Inverse( 
             IMoniker  * *ppmk) = 0;
        
        virtual HRESULT __stdcall CommonPrefixWith( 
             IMoniker  *pmkOther,
             IMoniker  * *ppmkPrefix) = 0;
        
        virtual HRESULT __stdcall RelativePathTo( 
             IMoniker  *pmkOther,
             IMoniker  * *ppmkRelPath) = 0;
        
        virtual HRESULT __stdcall GetDisplayName( 
             IBindCtx  *pbc,
             IMoniker  *pmkToLeft,
             LPOLESTR  *ppszDisplayName) = 0;
        
        virtual HRESULT __stdcall ParseDisplayName( 
             IBindCtx  *pbc,
             IMoniker  *pmkToLeft,
             LPOLESTR pszDisplayName,
             ULONG  *pchEaten,
             IMoniker  * *ppmkOut) = 0;
        
        virtual HRESULT __stdcall IsSystemMoniker( 
             DWORD  *pdwMksys) = 0;
        
    };
    

















































































































































































































#line 3367 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



 HRESULT __stdcall IMoniker_RemoteBindToObject_Proxy( 
    IMoniker  * This,
     IBindCtx  *pbc,
     IMoniker  *pmkToLeft,
     const IID & riidResult,
     IUnknown  * *ppvResult);


void __stdcall IMoniker_RemoteBindToObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IMoniker_RemoteBindToStorage_Proxy( 
    IMoniker  * This,
     IBindCtx  *pbc,
     IMoniker  *pmkToLeft,
     const IID & riid,
     IUnknown  * *ppvObj);


void __stdcall IMoniker_RemoteBindToStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_Reduce_Proxy( 
    IMoniker  * This,
     IBindCtx  *pbc,
     DWORD dwReduceHowFar,
     IMoniker  * *ppmkToLeft,
     IMoniker  * *ppmkReduced);


void __stdcall IMoniker_Reduce_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_ComposeWith_Proxy( 
    IMoniker  * This,
     IMoniker  *pmkRight,
     BOOL fOnlyIfNotGeneric,
     IMoniker  * *ppmkComposite);


void __stdcall IMoniker_ComposeWith_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_Enum_Proxy( 
    IMoniker  * This,
     BOOL fForward,
     IEnumMoniker  * *ppenumMoniker);


void __stdcall IMoniker_Enum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_IsEqual_Proxy( 
    IMoniker  * This,
     IMoniker  *pmkOtherMoniker);


void __stdcall IMoniker_IsEqual_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_Hash_Proxy( 
    IMoniker  * This,
     DWORD  *pdwHash);


void __stdcall IMoniker_Hash_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_IsRunning_Proxy( 
    IMoniker  * This,
     IBindCtx  *pbc,
     IMoniker  *pmkToLeft,
     IMoniker  *pmkNewlyRunning);


void __stdcall IMoniker_IsRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_GetTimeOfLastChange_Proxy( 
    IMoniker  * This,
     IBindCtx  *pbc,
     IMoniker  *pmkToLeft,
     FILETIME  *pFileTime);


void __stdcall IMoniker_GetTimeOfLastChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_Inverse_Proxy( 
    IMoniker  * This,
     IMoniker  * *ppmk);


void __stdcall IMoniker_Inverse_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_CommonPrefixWith_Proxy( 
    IMoniker  * This,
     IMoniker  *pmkOther,
     IMoniker  * *ppmkPrefix);


void __stdcall IMoniker_CommonPrefixWith_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_RelativePathTo_Proxy( 
    IMoniker  * This,
     IMoniker  *pmkOther,
     IMoniker  * *ppmkRelPath);


void __stdcall IMoniker_RelativePathTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_GetDisplayName_Proxy( 
    IMoniker  * This,
     IBindCtx  *pbc,
     IMoniker  *pmkToLeft,
     LPOLESTR  *ppszDisplayName);


void __stdcall IMoniker_GetDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_ParseDisplayName_Proxy( 
    IMoniker  * This,
     IBindCtx  *pbc,
     IMoniker  *pmkToLeft,
     LPOLESTR pszDisplayName,
     ULONG  *pchEaten,
     IMoniker  * *ppmkOut);


void __stdcall IMoniker_ParseDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_IsSystemMoniker_Proxy( 
    IMoniker  * This,
     DWORD  *pdwMksys);


void __stdcall IMoniker_IsSystemMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3576 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 



extern "C" const IID IID_IROTData;


    
    struct __declspec(uuid("f29f6bc0-5021-11ce-aa15-00006901293f")) __declspec(novtable)
    IROTData : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetComparisonData( 
             byte  *pbData,
             ULONG cbMax,
             ULONG  *pcbData) = 0;
        
    };
    




















































#line 3658 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall IROTData_GetComparisonData_Proxy( 
    IROTData  * This,
     byte  *pbData,
     ULONG cbMax,
     ULONG  *pcbData);


void __stdcall IROTData_GetComparisonData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3677 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef  IEnumString  *LPENUMSTRING;


extern "C" const IID IID_IEnumString;


    
    struct __declspec(uuid("00000101-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumString : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             LPOLESTR  *rgelt,
             ULONG  *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumString  * *ppenum) = 0;
        
    };
    








































































#line 3789 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



 HRESULT __stdcall IEnumString_RemoteNext_Proxy( 
    IEnumString  * This,
     ULONG celt,
     LPOLESTR  *rgelt,
     ULONG  *pceltFetched);


void __stdcall IEnumString_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumString_Skip_Proxy( 
    IEnumString  * This,
     ULONG celt);


void __stdcall IEnumString_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumString_Reset_Proxy( 
    IEnumString  * This);


void __stdcall IEnumString_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumString_Clone_Proxy( 
    IEnumString  * This,
     IEnumString  * *ppenum);


void __stdcall IEnumString_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3843 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 



extern "C" const IID IID_ISequentialStream;


    
    struct __declspec(uuid("0c733a30-2a1c-11ce-ade5-00aa0044773d")) __declspec(novtable)
    ISequentialStream : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Read( 
             void  *pv,
             ULONG cb,
             ULONG  *pcbRead) = 0;
        
        virtual  HRESULT __stdcall Write( 
             const void  *pv,
             ULONG cb,
             ULONG  *pcbWritten) = 0;
        
    };
    





























































#line 3939 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



 HRESULT __stdcall ISequentialStream_RemoteRead_Proxy( 
    ISequentialStream  * This,
     byte  *pv,
     ULONG cb,
     ULONG  *pcbRead);


void __stdcall ISequentialStream_RemoteRead_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISequentialStream_RemoteWrite_Proxy( 
    ISequentialStream  * This,
     const byte  *pv,
     ULONG cb,
     ULONG  *pcbWritten);


void __stdcall ISequentialStream_RemoteWrite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3972 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef  IStream  *LPSTREAM;



















typedef struct  tagSTATSTG
    {
    LPOLESTR pwcsName;
    DWORD type;
    ULARGE_INTEGER cbSize;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD grfMode;
    DWORD grfLocksSupported;
    CLSID clsid;
    DWORD grfStateBits;
    DWORD reserved;
    }	STATSTG;

#line 4021 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"
typedef 
enum tagSTGTY
    {	STGTY_STORAGE	= 1,
	STGTY_STREAM	= 2,
	STGTY_LOCKBYTES	= 3,
	STGTY_PROPERTY	= 4
    }	STGTY;

typedef 
enum tagSTREAM_SEEK
    {	STREAM_SEEK_SET	= 0,
	STREAM_SEEK_CUR	= 1,
	STREAM_SEEK_END	= 2
    }	STREAM_SEEK;

typedef 
enum tagLOCKTYPE
    {	LOCK_WRITE	= 1,
	LOCK_EXCLUSIVE	= 2,
	LOCK_ONLYONCE	= 4
    }	LOCKTYPE;


extern "C" const IID IID_IStream;


    
    struct __declspec(uuid("0000000c-0000-0000-C000-000000000046")) __declspec(novtable)
    IStream : public ISequentialStream
    {
    public:
        virtual  HRESULT __stdcall Seek( 
             LARGE_INTEGER dlibMove,
             DWORD dwOrigin,
             ULARGE_INTEGER  *plibNewPosition) = 0;
        
        virtual HRESULT __stdcall SetSize( 
             ULARGE_INTEGER libNewSize) = 0;
        
        virtual  HRESULT __stdcall CopyTo( 
             IStream  *pstm,
             ULARGE_INTEGER cb,
             ULARGE_INTEGER  *pcbRead,
             ULARGE_INTEGER  *pcbWritten) = 0;
        
        virtual HRESULT __stdcall Commit( 
             DWORD grfCommitFlags) = 0;
        
        virtual HRESULT __stdcall Revert( void) = 0;
        
        virtual HRESULT __stdcall LockRegion( 
             ULARGE_INTEGER libOffset,
             ULARGE_INTEGER cb,
             DWORD dwLockType) = 0;
        
        virtual HRESULT __stdcall UnlockRegion( 
             ULARGE_INTEGER libOffset,
             ULARGE_INTEGER cb,
             DWORD dwLockType) = 0;
        
        virtual HRESULT __stdcall Stat( 
             STATSTG  *pstatstg,
             DWORD grfStatFlag) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IStream  * *ppstm) = 0;
        
    };
    






































































































































#line 4225 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



 HRESULT __stdcall IStream_RemoteSeek_Proxy( 
    IStream  * This,
     LARGE_INTEGER dlibMove,
     DWORD dwOrigin,
     ULARGE_INTEGER  *plibNewPosition);


void __stdcall IStream_RemoteSeek_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStream_SetSize_Proxy( 
    IStream  * This,
     ULARGE_INTEGER libNewSize);


void __stdcall IStream_SetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IStream_RemoteCopyTo_Proxy( 
    IStream  * This,
     IStream  *pstm,
     ULARGE_INTEGER cb,
     ULARGE_INTEGER  *pcbRead,
     ULARGE_INTEGER  *pcbWritten);


void __stdcall IStream_RemoteCopyTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStream_Commit_Proxy( 
    IStream  * This,
     DWORD grfCommitFlags);


void __stdcall IStream_Commit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStream_Revert_Proxy( 
    IStream  * This);


void __stdcall IStream_Revert_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStream_LockRegion_Proxy( 
    IStream  * This,
     ULARGE_INTEGER libOffset,
     ULARGE_INTEGER cb,
     DWORD dwLockType);


void __stdcall IStream_LockRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStream_UnlockRegion_Proxy( 
    IStream  * This,
     ULARGE_INTEGER libOffset,
     ULARGE_INTEGER cb,
     DWORD dwLockType);


void __stdcall IStream_UnlockRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStream_Stat_Proxy( 
    IStream  * This,
     STATSTG  *pstatstg,
     DWORD grfStatFlag);


void __stdcall IStream_Stat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStream_Clone_Proxy( 
    IStream  * This,
     IStream  * *ppstm);


void __stdcall IStream_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4347 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef  IEnumSTATSTG  *LPENUMSTATSTG;


extern "C" const IID IID_IEnumSTATSTG;


    
    struct __declspec(uuid("0000000d-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumSTATSTG : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             STATSTG  *rgelt,
             ULONG  *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumSTATSTG  * *ppenum) = 0;
        
    };
    








































































#line 4459 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



 HRESULT __stdcall IEnumSTATSTG_RemoteNext_Proxy( 
    IEnumSTATSTG  * This,
     ULONG celt,
     STATSTG  *rgelt,
     ULONG  *pceltFetched);


void __stdcall IEnumSTATSTG_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATSTG_Skip_Proxy( 
    IEnumSTATSTG  * This,
     ULONG celt);


void __stdcall IEnumSTATSTG_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATSTG_Reset_Proxy( 
    IEnumSTATSTG  * This);


void __stdcall IEnumSTATSTG_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATSTG_Clone_Proxy( 
    IEnumSTATSTG  * This,
     IEnumSTATSTG  * *ppenum);


void __stdcall IEnumSTATSTG_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4513 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef  IStorage  *LPSTORAGE;

typedef struct  tagRemSNB
    {
    unsigned long ulCntStr;
    unsigned long ulCntChar;
     OLECHAR rgString[ 1 ];
    }	RemSNB;

typedef  RemSNB  *wireSNB;

typedef  OLECHAR  * *SNB;


extern "C" const IID IID_IStorage;


    
    struct __declspec(uuid("0000000b-0000-0000-C000-000000000046")) __declspec(novtable)
    IStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateStream( 
             const OLECHAR  *pwcsName,
             DWORD grfMode,
             DWORD reserved1,
             DWORD reserved2,
             IStream  * *ppstm) = 0;
        
        virtual  HRESULT __stdcall OpenStream( 
             const OLECHAR  *pwcsName,
             void  *reserved1,
             DWORD grfMode,
             DWORD reserved2,
             IStream  * *ppstm) = 0;
        
        virtual HRESULT __stdcall CreateStorage( 
             const OLECHAR  *pwcsName,
             DWORD grfMode,
             DWORD reserved1,
             DWORD reserved2,
             IStorage  * *ppstg) = 0;
        
        virtual HRESULT __stdcall OpenStorage( 
             const OLECHAR  *pwcsName,
             IStorage  *pstgPriority,
             DWORD grfMode,
             SNB snbExclude,
             DWORD reserved,
             IStorage  * *ppstg) = 0;
        
        virtual HRESULT __stdcall CopyTo( 
             DWORD ciidExclude,
             const IID  *rgiidExclude,
             SNB snbExclude,
             IStorage  *pstgDest) = 0;
        
        virtual HRESULT __stdcall MoveElementTo( 
             const OLECHAR  *pwcsName,
             IStorage  *pstgDest,
             const OLECHAR  *pwcsNewName,
             DWORD grfFlags) = 0;
        
        virtual HRESULT __stdcall Commit( 
             DWORD grfCommitFlags) = 0;
        
        virtual HRESULT __stdcall Revert( void) = 0;
        
        virtual  HRESULT __stdcall EnumElements( 
             DWORD reserved1,
             void  *reserved2,
             DWORD reserved3,
             IEnumSTATSTG  * *ppenum) = 0;
        
        virtual HRESULT __stdcall DestroyElement( 
             const OLECHAR  *pwcsName) = 0;
        
        virtual HRESULT __stdcall RenameElement( 
             const OLECHAR  *pwcsOldName,
             const OLECHAR  *pwcsNewName) = 0;
        
        virtual HRESULT __stdcall SetElementTimes( 
             const OLECHAR  *pwcsName,
             const FILETIME  *pctime,
             const FILETIME  *patime,
             const FILETIME  *pmtime) = 0;
        
        virtual HRESULT __stdcall SetClass( 
             const CLSID & clsid) = 0;
        
        virtual HRESULT __stdcall SetStateBits( 
             DWORD grfStateBits,
             DWORD grfMask) = 0;
        
        virtual HRESULT __stdcall Stat( 
             STATSTG  *pstatstg,
             DWORD grfStatFlag) = 0;
        
    };
    



















































































































































































#line 4806 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall IStorage_CreateStream_Proxy( 
    IStorage  * This,
     const OLECHAR  *pwcsName,
     DWORD grfMode,
     DWORD reserved1,
     DWORD reserved2,
     IStream  * *ppstm);


void __stdcall IStorage_CreateStream_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IStorage_RemoteOpenStream_Proxy( 
    IStorage  * This,
     const OLECHAR  *pwcsName,
     unsigned long cbReserved1,
     byte  *reserved1,
     DWORD grfMode,
     DWORD reserved2,
     IStream  * *ppstm);


void __stdcall IStorage_RemoteOpenStream_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_CreateStorage_Proxy( 
    IStorage  * This,
     const OLECHAR  *pwcsName,
     DWORD grfMode,
     DWORD reserved1,
     DWORD reserved2,
     IStorage  * *ppstg);


void __stdcall IStorage_CreateStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_OpenStorage_Proxy( 
    IStorage  * This,
     const OLECHAR  *pwcsName,
     IStorage  *pstgPriority,
     DWORD grfMode,
     SNB snbExclude,
     DWORD reserved,
     IStorage  * *ppstg);


void __stdcall IStorage_OpenStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_CopyTo_Proxy( 
    IStorage  * This,
     DWORD ciidExclude,
     const IID  *rgiidExclude,
     SNB snbExclude,
     IStorage  *pstgDest);


void __stdcall IStorage_CopyTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_MoveElementTo_Proxy( 
    IStorage  * This,
     const OLECHAR  *pwcsName,
     IStorage  *pstgDest,
     const OLECHAR  *pwcsNewName,
     DWORD grfFlags);


void __stdcall IStorage_MoveElementTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_Commit_Proxy( 
    IStorage  * This,
     DWORD grfCommitFlags);


void __stdcall IStorage_Commit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_Revert_Proxy( 
    IStorage  * This);


void __stdcall IStorage_Revert_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IStorage_RemoteEnumElements_Proxy( 
    IStorage  * This,
     DWORD reserved1,
     unsigned long cbReserved2,
     byte  *reserved2,
     DWORD reserved3,
     IEnumSTATSTG  * *ppenum);


void __stdcall IStorage_RemoteEnumElements_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_DestroyElement_Proxy( 
    IStorage  * This,
     const OLECHAR  *pwcsName);


void __stdcall IStorage_DestroyElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_RenameElement_Proxy( 
    IStorage  * This,
     const OLECHAR  *pwcsOldName,
     const OLECHAR  *pwcsNewName);


void __stdcall IStorage_RenameElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_SetElementTimes_Proxy( 
    IStorage  * This,
     const OLECHAR  *pwcsName,
     const FILETIME  *pctime,
     const FILETIME  *patime,
     const FILETIME  *pmtime);


void __stdcall IStorage_SetElementTimes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_SetClass_Proxy( 
    IStorage  * This,
     const CLSID & clsid);


void __stdcall IStorage_SetClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_SetStateBits_Proxy( 
    IStorage  * This,
     DWORD grfStateBits,
     DWORD grfMask);


void __stdcall IStorage_SetStateBits_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_Stat_Proxy( 
    IStorage  * This,
     STATSTG  *pstatstg,
     DWORD grfStatFlag);


void __stdcall IStorage_Stat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5024 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef  IPersistFile  *LPPERSISTFILE;


extern "C" const IID IID_IPersistFile;


    
    struct __declspec(uuid("0000010b-0000-0000-C000-000000000046")) __declspec(novtable)
    IPersistFile : public IPersist
    {
    public:
        virtual HRESULT __stdcall IsDirty( void) = 0;
        
        virtual HRESULT __stdcall Load( 
             LPCOLESTR pszFileName,
             DWORD dwMode) = 0;
        
        virtual HRESULT __stdcall Save( 
             LPCOLESTR pszFileName,
             BOOL fRemember) = 0;
        
        virtual HRESULT __stdcall SaveCompleted( 
             LPCOLESTR pszFileName) = 0;
        
        virtual HRESULT __stdcall GetCurFile( 
             LPOLESTR  *ppszFileName) = 0;
        
    };
    























































































#line 5154 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall IPersistFile_IsDirty_Proxy( 
    IPersistFile  * This);


void __stdcall IPersistFile_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistFile_Load_Proxy( 
    IPersistFile  * This,
     LPCOLESTR pszFileName,
     DWORD dwMode);


void __stdcall IPersistFile_Load_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistFile_Save_Proxy( 
    IPersistFile  * This,
     LPCOLESTR pszFileName,
     BOOL fRemember);


void __stdcall IPersistFile_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistFile_SaveCompleted_Proxy( 
    IPersistFile  * This,
     LPCOLESTR pszFileName);


void __stdcall IPersistFile_SaveCompleted_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistFile_GetCurFile_Proxy( 
    IPersistFile  * This,
     LPOLESTR  *ppszFileName);


void __stdcall IPersistFile_GetCurFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5220 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef  IPersistStorage  *LPPERSISTSTORAGE;


extern "C" const IID IID_IPersistStorage;


    
    struct __declspec(uuid("0000010a-0000-0000-C000-000000000046")) __declspec(novtable)
    IPersistStorage : public IPersist
    {
    public:
        virtual HRESULT __stdcall IsDirty( void) = 0;
        
        virtual HRESULT __stdcall InitNew( 
             IStorage  *pStg) = 0;
        
        virtual HRESULT __stdcall Load( 
             IStorage  *pStg) = 0;
        
        virtual HRESULT __stdcall Save( 
             IStorage  *pStgSave,
             BOOL fSameAsLoad) = 0;
        
        virtual HRESULT __stdcall SaveCompleted( 
             IStorage  *pStgNew) = 0;
        
        virtual HRESULT __stdcall HandsOffStorage( void) = 0;
        
    };
    




























































































#line 5356 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall IPersistStorage_IsDirty_Proxy( 
    IPersistStorage  * This);


void __stdcall IPersistStorage_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStorage_InitNew_Proxy( 
    IPersistStorage  * This,
     IStorage  *pStg);


void __stdcall IPersistStorage_InitNew_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStorage_Load_Proxy( 
    IPersistStorage  * This,
     IStorage  *pStg);


void __stdcall IPersistStorage_Load_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStorage_Save_Proxy( 
    IPersistStorage  * This,
     IStorage  *pStgSave,
     BOOL fSameAsLoad);


void __stdcall IPersistStorage_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStorage_SaveCompleted_Proxy( 
    IPersistStorage  * This,
     IStorage  *pStgNew);


void __stdcall IPersistStorage_SaveCompleted_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStorage_HandsOffStorage_Proxy( 
    IPersistStorage  * This);


void __stdcall IPersistStorage_HandsOffStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5432 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef  ILockBytes  *LPLOCKBYTES;


extern "C" const IID IID_ILockBytes;


    
    struct __declspec(uuid("0000000a-0000-0000-C000-000000000046")) __declspec(novtable)
    ILockBytes : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall ReadAt( 
             ULARGE_INTEGER ulOffset,
             void  *pv,
             ULONG cb,
             ULONG  *pcbRead) = 0;
        
        virtual  HRESULT __stdcall WriteAt( 
             ULARGE_INTEGER ulOffset,
             const void  *pv,
             ULONG cb,
             ULONG  *pcbWritten) = 0;
        
        virtual HRESULT __stdcall Flush( void) = 0;
        
        virtual HRESULT __stdcall SetSize( 
             ULARGE_INTEGER cb) = 0;
        
        virtual HRESULT __stdcall LockRegion( 
             ULARGE_INTEGER libOffset,
             ULARGE_INTEGER cb,
             DWORD dwLockType) = 0;
        
        virtual HRESULT __stdcall UnlockRegion( 
             ULARGE_INTEGER libOffset,
             ULARGE_INTEGER cb,
             DWORD dwLockType) = 0;
        
        virtual HRESULT __stdcall Stat( 
             STATSTG  *pstatstg,
             DWORD grfStatFlag) = 0;
        
    };
    






































































































#line 5592 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



 HRESULT __stdcall ILockBytes_RemoteReadAt_Proxy( 
    ILockBytes  * This,
     ULARGE_INTEGER ulOffset,
     byte  *pv,
     ULONG cb,
     ULONG  *pcbRead);


void __stdcall ILockBytes_RemoteReadAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ILockBytes_RemoteWriteAt_Proxy( 
    ILockBytes  * This,
     ULARGE_INTEGER ulOffset,
     const byte  *pv,
     ULONG cb,
     ULONG  *pcbWritten);


void __stdcall ILockBytes_RemoteWriteAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILockBytes_Flush_Proxy( 
    ILockBytes  * This);


void __stdcall ILockBytes_Flush_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILockBytes_SetSize_Proxy( 
    ILockBytes  * This,
     ULARGE_INTEGER cb);


void __stdcall ILockBytes_SetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILockBytes_LockRegion_Proxy( 
    ILockBytes  * This,
     ULARGE_INTEGER libOffset,
     ULARGE_INTEGER cb,
     DWORD dwLockType);


void __stdcall ILockBytes_LockRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILockBytes_UnlockRegion_Proxy( 
    ILockBytes  * This,
     ULARGE_INTEGER libOffset,
     ULARGE_INTEGER cb,
     DWORD dwLockType);


void __stdcall ILockBytes_UnlockRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILockBytes_Stat_Proxy( 
    ILockBytes  * This,
     STATSTG  *pstatstg,
     DWORD grfStatFlag);


void __stdcall ILockBytes_Stat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5691 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef  IEnumFORMATETC  *LPENUMFORMATETC;

typedef struct  tagDVTARGETDEVICE
    {
    DWORD tdSize;
    WORD tdDriverNameOffset;
    WORD tdDeviceNameOffset;
    WORD tdPortNameOffset;
    WORD tdExtDevmodeOffset;
     BYTE tdData[ 1 ];
    }	DVTARGETDEVICE;

typedef CLIPFORMAT  *LPCLIPFORMAT;

typedef struct  tagFORMATETC
    {
    CLIPFORMAT cfFormat;
     DVTARGETDEVICE  *ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
    }	FORMATETC;

typedef struct tagFORMATETC  *LPFORMATETC;


extern "C" const IID IID_IEnumFORMATETC;


    
    struct __declspec(uuid("00000103-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumFORMATETC : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             FORMATETC  *rgelt,
             ULONG  *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumFORMATETC  * *ppenum) = 0;
        
    };
    








































































#line 5826 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



 HRESULT __stdcall IEnumFORMATETC_RemoteNext_Proxy( 
    IEnumFORMATETC  * This,
     ULONG celt,
     FORMATETC  *rgelt,
     ULONG  *pceltFetched);


void __stdcall IEnumFORMATETC_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumFORMATETC_Skip_Proxy( 
    IEnumFORMATETC  * This,
     ULONG celt);


void __stdcall IEnumFORMATETC_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumFORMATETC_Reset_Proxy( 
    IEnumFORMATETC  * This);


void __stdcall IEnumFORMATETC_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumFORMATETC_Clone_Proxy( 
    IEnumFORMATETC  * This,
     IEnumFORMATETC  * *ppenum);


void __stdcall IEnumFORMATETC_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5880 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef  IEnumSTATDATA  *LPENUMSTATDATA;

typedef 
enum tagADVF
    {	ADVF_NODATA	= 1,
	ADVF_PRIMEFIRST	= 2,
	ADVF_ONLYONCE	= 4,
	ADVF_DATAONSTOP	= 64,
	ADVFCACHE_NOHANDLER	= 8,
	ADVFCACHE_FORCEBUILTIN	= 16,
	ADVFCACHE_ONSAVE	= 32
    }	ADVF;

typedef struct  tagSTATDATA
    {
    FORMATETC formatetc;
    DWORD advf;
     IAdviseSink  *pAdvSink;
    DWORD dwConnection;
    }	STATDATA;

typedef STATDATA  *LPSTATDATA;


extern "C" const IID IID_IEnumSTATDATA;


    
    struct __declspec(uuid("00000105-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumSTATDATA : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             STATDATA  *rgelt,
             ULONG  *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumSTATDATA  * *ppenum) = 0;
        
    };
    








































































#line 6013 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



 HRESULT __stdcall IEnumSTATDATA_RemoteNext_Proxy( 
    IEnumSTATDATA  * This,
     ULONG celt,
     STATDATA  *rgelt,
     ULONG  *pceltFetched);


void __stdcall IEnumSTATDATA_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATDATA_Skip_Proxy( 
    IEnumSTATDATA  * This,
     ULONG celt);


void __stdcall IEnumSTATDATA_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATDATA_Reset_Proxy( 
    IEnumSTATDATA  * This);


void __stdcall IEnumSTATDATA_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATDATA_Clone_Proxy( 
    IEnumSTATDATA  * This,
     IEnumSTATDATA  * *ppenum);


void __stdcall IEnumSTATDATA_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6067 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef  IRootStorage  *LPROOTSTORAGE;


extern "C" const IID IID_IRootStorage;


    
    struct __declspec(uuid("00000012-0000-0000-C000-000000000046")) __declspec(novtable)
    IRootStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SwitchToFile( 
             LPOLESTR pszFile) = 0;
        
    };
    


















































#line 6147 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall IRootStorage_SwitchToFile_Proxy( 
    IRootStorage  * This,
     LPOLESTR pszFile);


void __stdcall IRootStorage_SwitchToFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6164 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef IAdviseSink  *LPADVISESINK;

typedef  
enum tagTYMED
    {	TYMED_HGLOBAL	= 1,
	TYMED_FILE	= 2,
	TYMED_ISTREAM	= 4,
	TYMED_ISTORAGE	= 8,
	TYMED_GDI	= 16,
	TYMED_MFPICT	= 32,
	TYMED_ENHMF	= 64,
	TYMED_NULL	= 0
    }	TYMED;


#pragma warning(disable:4200)
#line 6194 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"
typedef struct  tagRemSTGMEDIUM
    {
    DWORD tymed;
    DWORD dwHandleType;
    unsigned long pData;
    unsigned long pUnkForRelease;
    unsigned long cbData;
     byte data[ 1 ];
    }	RemSTGMEDIUM;


#pragma warning(default:4200)
#line 6207 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"















typedef struct  tagSTGMEDIUM
    {
    DWORD tymed;
     union 
        {
         HBITMAP hBitmap;
         HMETAFILEPICT hMetaFilePict;
         HENHMETAFILE hEnhMetaFile;
         HGLOBAL hGlobal;
         LPOLESTR lpszFileName;
         IStream  *pstm;
         IStorage  *pstg;
           
        }	;
     IUnknown  *pUnkForRelease;
    }	uSTGMEDIUM;

#line 6240 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"
typedef struct  _GDI_OBJECT
    {
    DWORD ObjectType;
      union __MIDL_IAdviseSink_0002
        {
         wireHBITMAP hBitmap;
         wireHPALETTE hPalette;
         wireHGLOBAL hGeneric;
        }	u;
    }	GDI_OBJECT;

typedef struct  _userSTGMEDIUM
    {
    struct  _STGMEDIUM_UNION
        {
        DWORD tymed;
          union __MIDL_IAdviseSink_0003
            {
               
             wireHMETAFILEPICT hMetaFilePict;
             wireHENHMETAFILE hHEnhMetaFile;
             GDI_OBJECT  *hGdiHandle;
             wireHGLOBAL hGlobal;
             LPOLESTR lpszFileName;
             BYTE_BLOB  *pstm;
             BYTE_BLOB  *pstg;
            }	u;
        }	;
    IUnknown  *pUnkForRelease;
    }	userSTGMEDIUM;

typedef  userSTGMEDIUM  *wireSTGMEDIUM;

typedef  uSTGMEDIUM STGMEDIUM;

typedef  userSTGMEDIUM  *wireASYNC_STGMEDIUM;

typedef  STGMEDIUM ASYNC_STGMEDIUM;

typedef STGMEDIUM  *LPSTGMEDIUM;

typedef struct  _userFLAG_STGMEDIUM
    {
    long ContextFlags;
    long fPassOwnership;
    userSTGMEDIUM Stgmed;
    }	userFLAG_STGMEDIUM;

typedef  userFLAG_STGMEDIUM  *wireFLAG_STGMEDIUM;

typedef  struct  _FLAG_STGMEDIUM
    {
    long ContextFlags;
    long fPassOwnership;
    STGMEDIUM Stgmed;
    }	FLAG_STGMEDIUM;


extern "C" const IID IID_IAdviseSink;


    
    struct __declspec(uuid("0000010f-0000-0000-C000-000000000046")) __declspec(novtable)
    IAdviseSink : public IUnknown
    {
    public:
        virtual  void __stdcall OnDataChange( 
             FORMATETC  *pFormatetc,
             STGMEDIUM  *pStgmed) = 0;
        
        virtual  void __stdcall OnViewChange( 
             DWORD dwAspect,
             LONG lindex) = 0;
        
        virtual  void __stdcall OnRename( 
             IMoniker  *pmk) = 0;
        
        virtual  void __stdcall OnSave( void) = 0;
        
        virtual  void __stdcall OnClose( void) = 0;
        
    };
    














































































#line 6402 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



 HRESULT __stdcall IAdviseSink_RemoteOnDataChange_Proxy( 
    IAdviseSink  * This,
     IAsyncManager  * *ppIAM,
     FORMATETC  *pFormatetc,
     ASYNC_STGMEDIUM  *pStgmed);


void __stdcall IAdviseSink_RemoteOnDataChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAdviseSink_RemoteOnViewChange_Proxy( 
    IAdviseSink  * This,
     IAsyncManager  * *ppIAM,
     DWORD dwAspect,
     LONG lindex);


void __stdcall IAdviseSink_RemoteOnViewChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAdviseSink_RemoteOnRename_Proxy( 
    IAdviseSink  * This,
     IAsyncManager  * *ppIAM,
     IMoniker  *pmk);


void __stdcall IAdviseSink_RemoteOnRename_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAdviseSink_RemoteOnSave_Proxy( 
    IAdviseSink  * This,
     IAsyncManager  * *ppIAM);


void __stdcall IAdviseSink_RemoteOnSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAdviseSink_RemoteOnClose_Proxy( 
    IAdviseSink  * This);


void __stdcall IAdviseSink_RemoteOnClose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6471 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef  IAdviseSink2  *LPADVISESINK2;


extern "C" const IID IID_IAdviseSink2;


    
    struct __declspec(uuid("00000125-0000-0000-C000-000000000046")) __declspec(novtable)
    IAdviseSink2 : public IAdviseSink
    {
    public:
        virtual  void __stdcall OnLinkSrcChange( 
             IMoniker  *pmk) = 0;
        
    };
    






















































































#line 6587 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



 HRESULT __stdcall IAdviseSink2_RemoteOnLinkSrcChange_Proxy( 
    IAdviseSink2  * This,
     IAsyncManager  * *ppIAM,
     IMoniker  *pmk);


void __stdcall IAdviseSink2_RemoteOnLinkSrcChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6605 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef  IDataObject  *LPDATAOBJECT;

typedef 
enum tagDATADIR
    {	DATADIR_GET	= 1,
	DATADIR_SET	= 2
    }	DATADIR;


extern "C" const IID IID_IDataObject;


    
    struct __declspec(uuid("0000010e-0000-0000-C000-000000000046")) __declspec(novtable)
    IDataObject : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall GetData( 
             FORMATETC  *pformatetcIn,
             STGMEDIUM  *pmedium) = 0;
        
        virtual  HRESULT __stdcall GetDataHere( 
             FORMATETC  *pformatetc,
             STGMEDIUM  *pmedium) = 0;
        
        virtual HRESULT __stdcall QueryGetData( 
             FORMATETC  *pformatetc) = 0;
        
        virtual HRESULT __stdcall GetCanonicalFormatEtc( 
             FORMATETC  *pformatectIn,
             FORMATETC  *pformatetcOut) = 0;
        
        virtual  HRESULT __stdcall SetData( 
             FORMATETC  *pformatetc,
             STGMEDIUM  *pmedium,
             BOOL fRelease) = 0;
        
        virtual HRESULT __stdcall EnumFormatEtc( 
             DWORD dwDirection,
             IEnumFORMATETC  * *ppenumFormatEtc) = 0;
        
        virtual HRESULT __stdcall DAdvise( 
             FORMATETC  *pformatetc,
             DWORD advf,
             IAdviseSink  *pAdvSink,
             DWORD  *pdwConnection) = 0;
        
        virtual HRESULT __stdcall DUnadvise( 
             DWORD dwConnection) = 0;
        
        virtual HRESULT __stdcall EnumDAdvise( 
             IEnumSTATDATA  * *ppenumAdvise) = 0;
        
    };
    



















































































































#line 6789 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



 HRESULT __stdcall IDataObject_RemoteGetData_Proxy( 
    IDataObject  * This,
     FORMATETC  *pformatetcIn,
     STGMEDIUM  *pRemoteMedium);


void __stdcall IDataObject_RemoteGetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IDataObject_RemoteGetDataHere_Proxy( 
    IDataObject  * This,
     FORMATETC  *pformatetc,
     STGMEDIUM  *pRemoteMedium);


void __stdcall IDataObject_RemoteGetDataHere_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataObject_QueryGetData_Proxy( 
    IDataObject  * This,
     FORMATETC  *pformatetc);


void __stdcall IDataObject_QueryGetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataObject_GetCanonicalFormatEtc_Proxy( 
    IDataObject  * This,
     FORMATETC  *pformatectIn,
     FORMATETC  *pformatetcOut);


void __stdcall IDataObject_GetCanonicalFormatEtc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IDataObject_RemoteSetData_Proxy( 
    IDataObject  * This,
     FORMATETC  *pformatetc,
     FLAG_STGMEDIUM  *pmedium,
     BOOL fRelease);


void __stdcall IDataObject_RemoteSetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataObject_EnumFormatEtc_Proxy( 
    IDataObject  * This,
     DWORD dwDirection,
     IEnumFORMATETC  * *ppenumFormatEtc);


void __stdcall IDataObject_EnumFormatEtc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataObject_DAdvise_Proxy( 
    IDataObject  * This,
     FORMATETC  *pformatetc,
     DWORD advf,
     IAdviseSink  *pAdvSink,
     DWORD  *pdwConnection);


void __stdcall IDataObject_DAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataObject_DUnadvise_Proxy( 
    IDataObject  * This,
     DWORD dwConnection);


void __stdcall IDataObject_DUnadvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataObject_EnumDAdvise_Proxy( 
    IDataObject  * This,
     IEnumSTATDATA  * *ppenumAdvise);


void __stdcall IDataObject_EnumDAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6911 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef  IDataAdviseHolder  *LPDATAADVISEHOLDER;


extern "C" const IID IID_IDataAdviseHolder;


    
    struct __declspec(uuid("00000110-0000-0000-C000-000000000046")) __declspec(novtable)
    IDataAdviseHolder : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Advise( 
             IDataObject  *pDataObject,
             FORMATETC  *pFetc,
             DWORD advf,
             IAdviseSink  *pAdvise,
             DWORD  *pdwConnection) = 0;
        
        virtual HRESULT __stdcall Unadvise( 
             DWORD dwConnection) = 0;
        
        virtual HRESULT __stdcall EnumAdvise( 
             IEnumSTATDATA  * *ppenumAdvise) = 0;
        
        virtual HRESULT __stdcall SendOnDataChange( 
             IDataObject  *pDataObject,
             DWORD dwReserved,
             DWORD advf) = 0;
        
    };
    













































































#line 7033 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall IDataAdviseHolder_Advise_Proxy( 
    IDataAdviseHolder  * This,
     IDataObject  *pDataObject,
     FORMATETC  *pFetc,
     DWORD advf,
     IAdviseSink  *pAdvise,
     DWORD  *pdwConnection);


void __stdcall IDataAdviseHolder_Advise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataAdviseHolder_Unadvise_Proxy( 
    IDataAdviseHolder  * This,
     DWORD dwConnection);


void __stdcall IDataAdviseHolder_Unadvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataAdviseHolder_EnumAdvise_Proxy( 
    IDataAdviseHolder  * This,
     IEnumSTATDATA  * *ppenumAdvise);


void __stdcall IDataAdviseHolder_EnumAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataAdviseHolder_SendOnDataChange_Proxy( 
    IDataAdviseHolder  * This,
     IDataObject  *pDataObject,
     DWORD dwReserved,
     DWORD advf);


void __stdcall IDataAdviseHolder_SendOnDataChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7092 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef  IMessageFilter  *LPMESSAGEFILTER;

typedef 
enum tagCALLTYPE
    {	CALLTYPE_TOPLEVEL	= 1,
	CALLTYPE_NESTED	= 2,
	CALLTYPE_ASYNC	= 3,
	CALLTYPE_TOPLEVEL_CALLPENDING	= 4,
	CALLTYPE_ASYNC_CALLPENDING	= 5
    }	CALLTYPE;

typedef 
enum tagSERVERCALL
    {	SERVERCALL_ISHANDLED	= 0,
	SERVERCALL_REJECTED	= 1,
	SERVERCALL_RETRYLATER	= 2
    }	SERVERCALL;

typedef 
enum tagPENDINGTYPE
    {	PENDINGTYPE_TOPLEVEL	= 1,
	PENDINGTYPE_NESTED	= 2
    }	PENDINGTYPE;

typedef 
enum tagPENDINGMSG
    {	PENDINGMSG_CANCELCALL	= 0,
	PENDINGMSG_WAITNOPROCESS	= 1,
	PENDINGMSG_WAITDEFPROCESS	= 2
    }	PENDINGMSG;

typedef struct  tagINTERFACEINFO
    {
    IUnknown  *pUnk;
    IID iid;
    WORD wMethod;
    }	INTERFACEINFO;

typedef struct tagINTERFACEINFO  *LPINTERFACEINFO;


extern "C" const IID IID_IMessageFilter;


    
    struct __declspec(uuid("00000016-0000-0000-C000-000000000046")) __declspec(novtable)
    IMessageFilter : public IUnknown
    {
    public:
        virtual DWORD __stdcall HandleInComingCall( 
             DWORD dwCallType,
             HTASK htaskCaller,
             DWORD dwTickCount,
             LPINTERFACEINFO lpInterfaceInfo) = 0;
        
        virtual DWORD __stdcall RetryRejectedCall( 
             HTASK htaskCallee,
             DWORD dwTickCount,
             DWORD dwRejectType) = 0;
        
        virtual DWORD __stdcall MessagePending( 
             HTASK htaskCallee,
             DWORD dwTickCount,
             DWORD dwPendingType) = 0;
        
    };
    







































































#line 7244 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



DWORD __stdcall IMessageFilter_HandleInComingCall_Proxy( 
    IMessageFilter  * This,
     DWORD dwCallType,
     HTASK htaskCaller,
     DWORD dwTickCount,
     LPINTERFACEINFO lpInterfaceInfo);


void __stdcall IMessageFilter_HandleInComingCall_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


DWORD __stdcall IMessageFilter_RetryRejectedCall_Proxy( 
    IMessageFilter  * This,
     HTASK htaskCallee,
     DWORD dwTickCount,
     DWORD dwRejectType);


void __stdcall IMessageFilter_RetryRejectedCall_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


DWORD __stdcall IMessageFilter_MessagePending_Proxy( 
    IMessageFilter  * This,
     HTASK htaskCallee,
     DWORD dwTickCount,
     DWORD dwPendingType);


void __stdcall IMessageFilter_MessagePending_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7292 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef unsigned long RPCOLEDATAREP;

typedef struct  tagRPCOLEMESSAGE
    {
    void  *reserved1;
    RPCOLEDATAREP dataRepresentation;
    void  *Buffer;
    ULONG cbBuffer;
    ULONG iMethod;
    void  *reserved2[ 5 ];
    ULONG rpcFlags;
    }	RPCOLEMESSAGE;

typedef RPCOLEMESSAGE  *PRPCOLEMESSAGE;


extern "C" const IID IID_IRpcChannelBuffer;


    
    struct __declspec(uuid("D5F56B60-593B-101A-B569-08002B2DBF7A")) __declspec(novtable)
    IRpcChannelBuffer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetBuffer( 
             RPCOLEMESSAGE  *pMessage,
             const IID & riid) = 0;
        
        virtual HRESULT __stdcall SendReceive( 
             RPCOLEMESSAGE  *pMessage,
             ULONG  *pStatus) = 0;
        
        virtual HRESULT __stdcall FreeBuffer( 
             RPCOLEMESSAGE  *pMessage) = 0;
        
        virtual HRESULT __stdcall GetDestCtx( 
             DWORD  *pdwDestContext,
             void  * *ppvDestContext) = 0;
        
        virtual HRESULT __stdcall IsConnected( void) = 0;
        
    };
    
















































































#line 7429 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall IRpcChannelBuffer_GetBuffer_Proxy( 
    IRpcChannelBuffer  * This,
     RPCOLEMESSAGE  *pMessage,
     const IID & riid);


void __stdcall IRpcChannelBuffer_GetBuffer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcChannelBuffer_SendReceive_Proxy( 
    IRpcChannelBuffer  * This,
     RPCOLEMESSAGE  *pMessage,
     ULONG  *pStatus);


void __stdcall IRpcChannelBuffer_SendReceive_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcChannelBuffer_FreeBuffer_Proxy( 
    IRpcChannelBuffer  * This,
     RPCOLEMESSAGE  *pMessage);


void __stdcall IRpcChannelBuffer_FreeBuffer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcChannelBuffer_GetDestCtx_Proxy( 
    IRpcChannelBuffer  * This,
     DWORD  *pdwDestContext,
     void  * *ppvDestContext);


void __stdcall IRpcChannelBuffer_GetDestCtx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcChannelBuffer_IsConnected_Proxy( 
    IRpcChannelBuffer  * This);


void __stdcall IRpcChannelBuffer_IsConnected_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7496 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 



extern "C" const IID IID_IRpcChannelBuffer2;


    
    struct __declspec(uuid("594f31d0-7f19-11d0-b194-00a0c90dc8bf")) __declspec(novtable)
    IRpcChannelBuffer2 : public IRpcChannelBuffer
    {
    public:
        virtual HRESULT __stdcall GetProtocolVersion( 
             DWORD  *pdwVersion) = 0;
        
    };
    
























































































#line 7612 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall IRpcChannelBuffer2_GetProtocolVersion_Proxy( 
    IRpcChannelBuffer2  * This,
     DWORD  *pdwVersion);


void __stdcall IRpcChannelBuffer2_GetProtocolVersion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7629 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 



extern "C" const IID IID_IRpcChannelBuffer3;


    
    struct __declspec(uuid("25B15600-0115-11d0-BF0D-00AA00B8DFD2")) __declspec(novtable)
    IRpcChannelBuffer3 : public IRpcChannelBuffer2
    {
    public:
        virtual HRESULT __stdcall Send( 
             RPCOLEMESSAGE  *pMsg,
             ULONG  *pulStatus) = 0;
        
        virtual HRESULT __stdcall Receive( 
             RPCOLEMESSAGE  *pMsg,
             ULONG ulSize,
             ULONG  *pulStatus) = 0;
        
        virtual HRESULT __stdcall Cancel( 
             RPCOLEMESSAGE  *pMsg) = 0;
        
        virtual HRESULT __stdcall GetCallContext( 
             RPCOLEMESSAGE  *pMsg,
             const IID & riid,
             void  * *pInterface) = 0;
        
        virtual HRESULT __stdcall GetDestCtxEx( 
             RPCOLEMESSAGE  *pMsg,
             DWORD  *pdwDestContext,
             void  * *ppvDestContext) = 0;
        
        virtual HRESULT __stdcall GetState( 
             RPCOLEMESSAGE  *pMsg,
             DWORD  *pState) = 0;
        
        virtual HRESULT __stdcall RegisterAsync( 
             RPCOLEMESSAGE  *pMsg,
             IAsyncManager  *pAsyncMgr) = 0;
        
    };
    



















































































































































#line 7831 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall IRpcChannelBuffer3_Send_Proxy( 
    IRpcChannelBuffer3  * This,
     RPCOLEMESSAGE  *pMsg,
     ULONG  *pulStatus);


void __stdcall IRpcChannelBuffer3_Send_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcChannelBuffer3_Receive_Proxy( 
    IRpcChannelBuffer3  * This,
     RPCOLEMESSAGE  *pMsg,
     ULONG ulSize,
     ULONG  *pulStatus);


void __stdcall IRpcChannelBuffer3_Receive_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcChannelBuffer3_Cancel_Proxy( 
    IRpcChannelBuffer3  * This,
     RPCOLEMESSAGE  *pMsg);


void __stdcall IRpcChannelBuffer3_Cancel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcChannelBuffer3_GetCallContext_Proxy( 
    IRpcChannelBuffer3  * This,
     RPCOLEMESSAGE  *pMsg,
     const IID & riid,
     void  * *pInterface);


void __stdcall IRpcChannelBuffer3_GetCallContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcChannelBuffer3_GetDestCtxEx_Proxy( 
    IRpcChannelBuffer3  * This,
     RPCOLEMESSAGE  *pMsg,
     DWORD  *pdwDestContext,
     void  * *ppvDestContext);


void __stdcall IRpcChannelBuffer3_GetDestCtxEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcChannelBuffer3_GetState_Proxy( 
    IRpcChannelBuffer3  * This,
     RPCOLEMESSAGE  *pMsg,
     DWORD  *pState);


void __stdcall IRpcChannelBuffer3_GetState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcChannelBuffer3_RegisterAsync_Proxy( 
    IRpcChannelBuffer3  * This,
     RPCOLEMESSAGE  *pMsg,
     IAsyncManager  *pAsyncMgr);


void __stdcall IRpcChannelBuffer3_RegisterAsync_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7929 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 



extern "C" const IID IID_IRpcProxyBuffer;


    
    struct __declspec(uuid("D5F56A34-593B-101A-B569-08002B2DBF7A")) __declspec(novtable)
    IRpcProxyBuffer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Connect( 
             IRpcChannelBuffer  *pRpcChannelBuffer) = 0;
        
        virtual void __stdcall Disconnect( void) = 0;
        
    };
    
























































#line 8015 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall IRpcProxyBuffer_Connect_Proxy( 
    IRpcProxyBuffer  * This,
     IRpcChannelBuffer  *pRpcChannelBuffer);


void __stdcall IRpcProxyBuffer_Connect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IRpcProxyBuffer_Disconnect_Proxy( 
    IRpcProxyBuffer  * This);


void __stdcall IRpcProxyBuffer_Disconnect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8043 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 



extern "C" const IID IID_IRpcStubBuffer;


    
    struct __declspec(uuid("D5F56AFC-593B-101A-B569-08002B2DBF7A")) __declspec(novtable)
    IRpcStubBuffer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Connect( 
             IUnknown  *pUnkServer) = 0;
        
        virtual void __stdcall Disconnect( void) = 0;
        
        virtual HRESULT __stdcall Invoke( 
             RPCOLEMESSAGE  *_prpcmsg,
             IRpcChannelBuffer  *_pRpcChannelBuffer) = 0;
        
        virtual IRpcStubBuffer  *__stdcall IsIIDSupported( 
             const IID & riid) = 0;
        
        virtual ULONG __stdcall CountRefs( void) = 0;
        
        virtual HRESULT __stdcall DebugServerQueryInterface( 
            void  * *ppv) = 0;
        
        virtual void __stdcall DebugServerRelease( 
            void  *pv) = 0;
        
    };
    



























































































#line 8179 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall IRpcStubBuffer_Connect_Proxy( 
    IRpcStubBuffer  * This,
     IUnknown  *pUnkServer);


void __stdcall IRpcStubBuffer_Connect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IRpcStubBuffer_Disconnect_Proxy( 
    IRpcStubBuffer  * This);


void __stdcall IRpcStubBuffer_Disconnect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcStubBuffer_Invoke_Proxy( 
    IRpcStubBuffer  * This,
     RPCOLEMESSAGE  *_prpcmsg,
     IRpcChannelBuffer  *_pRpcChannelBuffer);


void __stdcall IRpcStubBuffer_Invoke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


IRpcStubBuffer  *__stdcall IRpcStubBuffer_IsIIDSupported_Proxy( 
    IRpcStubBuffer  * This,
     const IID & riid);


void __stdcall IRpcStubBuffer_IsIIDSupported_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


ULONG __stdcall IRpcStubBuffer_CountRefs_Proxy( 
    IRpcStubBuffer  * This);


void __stdcall IRpcStubBuffer_CountRefs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcStubBuffer_DebugServerQueryInterface_Proxy( 
    IRpcStubBuffer  * This,
    void  * *ppv);


void __stdcall IRpcStubBuffer_DebugServerQueryInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IRpcStubBuffer_DebugServerRelease_Proxy( 
    IRpcStubBuffer  * This,
    void  *pv);


void __stdcall IRpcStubBuffer_DebugServerRelease_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8267 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 



extern "C" const IID IID_IPSFactoryBuffer;


    
    struct __declspec(uuid("D5F569D0-593B-101A-B569-08002B2DBF7A")) __declspec(novtable)
    IPSFactoryBuffer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateProxy( 
             IUnknown  *pUnkOuter,
             const IID & riid,
             IRpcProxyBuffer  * *ppProxy,
             void  * *ppv) = 0;
        
        virtual HRESULT __stdcall CreateStub( 
             const IID & riid,
             IUnknown  *pUnkServer,
             IRpcStubBuffer  * *ppStub) = 0;
        
    };
    






























































#line 8365 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall IPSFactoryBuffer_CreateProxy_Proxy( 
    IPSFactoryBuffer  * This,
     IUnknown  *pUnkOuter,
     const IID & riid,
     IRpcProxyBuffer  * *ppProxy,
     void  * *ppv);


void __stdcall IPSFactoryBuffer_CreateProxy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPSFactoryBuffer_CreateStub_Proxy( 
    IPSFactoryBuffer  * This,
     const IID & riid,
     IUnknown  *pUnkServer,
     IRpcStubBuffer  * *ppStub);


void __stdcall IPSFactoryBuffer_CreateStub_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8399 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"







 







































































































































































































































































































#line 8703 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"





extern RPC_IF_HANDLE __MIDL_itf_objidl_0044_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0044_v0_0_s_ifspec;









 




extern const FMTID FMTID_SummaryInformation;

extern const FMTID FMTID_DocSummaryInformation;

extern const FMTID FMTID_UserDefinedProperties;












typedef  IPropertyStorage  *LPPROPERTYSTORAGE;

typedef struct tagPROPVARIANT PROPVARIANT;

typedef struct  tagCAUB
    {
    ULONG cElems;
     unsigned char  *pElems;
    }	CAUB;

typedef struct  tagCAI
    {
    ULONG cElems;
     short  *pElems;
    }	CAI;

typedef struct  tagCAUI
    {
    ULONG cElems;
     USHORT  *pElems;
    }	CAUI;

typedef struct  tagCAL
    {
    ULONG cElems;
     long  *pElems;
    }	CAL;

typedef struct  tagCAUL
    {
    ULONG cElems;
     ULONG  *pElems;
    }	CAUL;

typedef struct  tagCAFLT
    {
    ULONG cElems;
     float  *pElems;
    }	CAFLT;

typedef struct  tagCADBL
    {
    ULONG cElems;
     double  *pElems;
    }	CADBL;

typedef struct  tagCACY
    {
    ULONG cElems;
     CY  *pElems;
    }	CACY;

typedef struct  tagCADATE
    {
    ULONG cElems;
     DATE  *pElems;
    }	CADATE;

typedef struct  tagCABSTR
    {
    ULONG cElems;
     BSTR  *pElems;
    }	CABSTR;

typedef struct  tagCABSTRBLOB
    {
    ULONG cElems;
     BSTRBLOB  *pElems;
    }	CABSTRBLOB;

typedef struct  tagCABOOL
    {
    ULONG cElems;
     VARIANT_BOOL  *pElems;
    }	CABOOL;

typedef struct  tagCASCODE
    {
    ULONG cElems;
     SCODE  *pElems;
    }	CASCODE;

typedef struct  tagCAPROPVARIANT
    {
    ULONG cElems;
     PROPVARIANT  *pElems;
    }	CAPROPVARIANT;

typedef struct  tagCAH
    {
    ULONG cElems;
     LARGE_INTEGER  *pElems;
    }	CAH;

typedef struct  tagCAUH
    {
    ULONG cElems;
     ULARGE_INTEGER  *pElems;
    }	CAUH;

typedef struct  tagCALPSTR
    {
    ULONG cElems;
     LPSTR  *pElems;
    }	CALPSTR;

typedef struct  tagCALPWSTR
    {
    ULONG cElems;
     LPWSTR  *pElems;
    }	CALPWSTR;

typedef struct  tagCAFILETIME
    {
    ULONG cElems;
     FILETIME  *pElems;
    }	CAFILETIME;

typedef struct  tagCACLIPDATA
    {
    ULONG cElems;
     CLIPDATA  *pElems;
    }	CACLIPDATA;

typedef struct  tagCACLSID
    {
    ULONG cElems;
     CLSID  *pElems;
    }	CACLSID;




#pragma warning(disable:4237)
struct  tagPROPVARIANT
    {
    VARTYPE vt;
    WORD wReserved1;
    WORD wReserved2;
    WORD wReserved3;
      union 
        {
           
         UCHAR bVal;
         short iVal;
         USHORT uiVal;
         VARIANT_BOOL boolVal;
         
         long lVal;
         ULONG ulVal;
         float fltVal;
         SCODE scode;
         LARGE_INTEGER hVal;
         ULARGE_INTEGER uhVal;
         double dblVal;
         CY cyVal;
         DATE date;
         FILETIME filetime;
         CLSID  *puuid;
         BLOB blob;
         CLIPDATA  *pclipdata;
         IStream  *pStream;
         IStorage  *pStorage;
         BSTR bstrVal;
         BSTRBLOB bstrblobVal;
         LPSTR pszVal;
         LPWSTR pwszVal;
         CAUB caub;
         CAI cai;
         CAUI caui;
         CABOOL cabool;
         CAL cal;
         CAUL caul;
         CAFLT caflt;
         CASCODE cascode;
         CAH cah;
         CAUH cauh;
         CADBL cadbl;
         CACY cacy;
         CADATE cadate;
         CAFILETIME cafiletime;
         CACLSID cauuid;
         CACLIPDATA caclipdata;
         CABSTR cabstr;
         CABSTRBLOB cabstrblob;
         CALPSTR calpstr;
         CALPWSTR calpwstr;
         CAPROPVARIANT capropvar;
        }	;
    };
typedef struct tagPROPVARIANT  *LPPROPVARIANT;












































typedef struct  tagPROPSPEC
    {
    ULONG ulKind;
      union 
        {
         PROPID propid;
         LPOLESTR lpwstr;
           
        }	;
    }	PROPSPEC;

typedef struct  tagSTATPROPSTG
    {
    LPOLESTR lpwstrName;
    PROPID propid;
    VARTYPE vt;
    }	STATPROPSTG;






typedef struct  tagSTATPROPSETSTG
    {
    FMTID fmtid;
    CLSID clsid;
    DWORD grfFlags;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD dwOSVersion;
    }	STATPROPSETSTG;


extern "C" const IID IID_IPropertyStorage;


    
    struct __declspec(uuid("00000138-0000-0000-C000-000000000046")) __declspec(novtable)
    IPropertyStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ReadMultiple( 
             ULONG cpspec,
             const PROPSPEC  rgpspec[  ],
             PROPVARIANT  rgpropvar[  ]) = 0;
        
        virtual HRESULT __stdcall WriteMultiple( 
             ULONG cpspec,
             const PROPSPEC  rgpspec[  ],
             const PROPVARIANT  rgpropvar[  ],
             PROPID propidNameFirst) = 0;
        
        virtual HRESULT __stdcall DeleteMultiple( 
             ULONG cpspec,
             const PROPSPEC  rgpspec[  ]) = 0;
        
        virtual HRESULT __stdcall ReadPropertyNames( 
             ULONG cpropid,
             const PROPID  rgpropid[  ],
             LPOLESTR  rglpwstrName[  ]) = 0;
        
        virtual HRESULT __stdcall WritePropertyNames( 
             ULONG cpropid,
             const PROPID  rgpropid[  ],
             const LPOLESTR  rglpwstrName[  ]) = 0;
        
        virtual HRESULT __stdcall DeletePropertyNames( 
             ULONG cpropid,
             const PROPID  rgpropid[  ]) = 0;
        
        virtual HRESULT __stdcall Commit( 
             DWORD grfCommitFlags) = 0;
        
        virtual HRESULT __stdcall Revert( void) = 0;
        
        virtual HRESULT __stdcall Enum( 
             IEnumSTATPROPSTG  * *ppenum) = 0;
        
        virtual HRESULT __stdcall SetTimes( 
             const FILETIME  *pctime,
             const FILETIME  *patime,
             const FILETIME  *pmtime) = 0;
        
        virtual HRESULT __stdcall SetClass( 
             const CLSID & clsid) = 0;
        
        virtual HRESULT __stdcall Stat( 
             STATPROPSETSTG  *pstatpsstg) = 0;
        
    };
    











































































































































#line 9209 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall IPropertyStorage_ReadMultiple_Proxy( 
    IPropertyStorage  * This,
     ULONG cpspec,
     const PROPSPEC  rgpspec[  ],
     PROPVARIANT  rgpropvar[  ]);


void __stdcall IPropertyStorage_ReadMultiple_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_WriteMultiple_Proxy( 
    IPropertyStorage  * This,
     ULONG cpspec,
     const PROPSPEC  rgpspec[  ],
     const PROPVARIANT  rgpropvar[  ],
     PROPID propidNameFirst);


void __stdcall IPropertyStorage_WriteMultiple_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_DeleteMultiple_Proxy( 
    IPropertyStorage  * This,
     ULONG cpspec,
     const PROPSPEC  rgpspec[  ]);


void __stdcall IPropertyStorage_DeleteMultiple_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_ReadPropertyNames_Proxy( 
    IPropertyStorage  * This,
     ULONG cpropid,
     const PROPID  rgpropid[  ],
     LPOLESTR  rglpwstrName[  ]);


void __stdcall IPropertyStorage_ReadPropertyNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_WritePropertyNames_Proxy( 
    IPropertyStorage  * This,
     ULONG cpropid,
     const PROPID  rgpropid[  ],
     const LPOLESTR  rglpwstrName[  ]);


void __stdcall IPropertyStorage_WritePropertyNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_DeletePropertyNames_Proxy( 
    IPropertyStorage  * This,
     ULONG cpropid,
     const PROPID  rgpropid[  ]);


void __stdcall IPropertyStorage_DeletePropertyNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_Commit_Proxy( 
    IPropertyStorage  * This,
     DWORD grfCommitFlags);


void __stdcall IPropertyStorage_Commit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_Revert_Proxy( 
    IPropertyStorage  * This);


void __stdcall IPropertyStorage_Revert_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_Enum_Proxy( 
    IPropertyStorage  * This,
     IEnumSTATPROPSTG  * *ppenum);


void __stdcall IPropertyStorage_Enum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_SetTimes_Proxy( 
    IPropertyStorage  * This,
     const FILETIME  *pctime,
     const FILETIME  *patime,
     const FILETIME  *pmtime);


void __stdcall IPropertyStorage_SetTimes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_SetClass_Proxy( 
    IPropertyStorage  * This,
     const CLSID & clsid);


void __stdcall IPropertyStorage_SetClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_Stat_Proxy( 
    IPropertyStorage  * This,
     STATPROPSETSTG  *pstatpsstg);


void __stdcall IPropertyStorage_Stat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 9370 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef  IPropertySetStorage  *LPPROPERTYSETSTORAGE;


extern "C" const IID IID_IPropertySetStorage;


    
    struct __declspec(uuid("0000013A-0000-0000-C000-000000000046")) __declspec(novtable)
    IPropertySetStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Create( 
             const FMTID & rfmtid,
             const CLSID  *pclsid,
             DWORD grfFlags,
             DWORD grfMode,
             IPropertyStorage  * *ppprstg) = 0;
        
        virtual HRESULT __stdcall Open( 
             const FMTID & rfmtid,
             DWORD grfMode,
             IPropertyStorage  * *ppprstg) = 0;
        
        virtual HRESULT __stdcall Delete( 
             const FMTID & rfmtid) = 0;
        
        virtual HRESULT __stdcall Enum( 
             IEnumSTATPROPSETSTG  * *ppenum) = 0;
        
    };
    













































































#line 9492 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall IPropertySetStorage_Create_Proxy( 
    IPropertySetStorage  * This,
     const FMTID & rfmtid,
     const CLSID  *pclsid,
     DWORD grfFlags,
     DWORD grfMode,
     IPropertyStorage  * *ppprstg);


void __stdcall IPropertySetStorage_Create_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertySetStorage_Open_Proxy( 
    IPropertySetStorage  * This,
     const FMTID & rfmtid,
     DWORD grfMode,
     IPropertyStorage  * *ppprstg);


void __stdcall IPropertySetStorage_Open_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertySetStorage_Delete_Proxy( 
    IPropertySetStorage  * This,
     const FMTID & rfmtid);


void __stdcall IPropertySetStorage_Delete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertySetStorage_Enum_Proxy( 
    IPropertySetStorage  * This,
     IEnumSTATPROPSETSTG  * *ppenum);


void __stdcall IPropertySetStorage_Enum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 9551 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef  IEnumSTATPROPSTG  *LPENUMSTATPROPSTG;


extern "C" const IID IID_IEnumSTATPROPSTG;


    
    struct __declspec(uuid("00000139-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumSTATPROPSTG : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             STATPROPSTG  *rgelt,
             ULONG  *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumSTATPROPSTG  * *ppenum) = 0;
        
    };
    








































































#line 9663 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



 HRESULT __stdcall IEnumSTATPROPSTG_RemoteNext_Proxy( 
    IEnumSTATPROPSTG  * This,
     ULONG celt,
     STATPROPSTG  *rgelt,
     ULONG  *pceltFetched);


void __stdcall IEnumSTATPROPSTG_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATPROPSTG_Skip_Proxy( 
    IEnumSTATPROPSTG  * This,
     ULONG celt);


void __stdcall IEnumSTATPROPSTG_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATPROPSTG_Reset_Proxy( 
    IEnumSTATPROPSTG  * This);


void __stdcall IEnumSTATPROPSTG_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATPROPSTG_Clone_Proxy( 
    IEnumSTATPROPSTG  * This,
     IEnumSTATPROPSTG  * *ppenum);


void __stdcall IEnumSTATPROPSTG_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 9717 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef  IEnumSTATPROPSETSTG  *LPENUMSTATPROPSETSTG;


extern "C" const IID IID_IEnumSTATPROPSETSTG;


    
    struct __declspec(uuid("0000013B-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumSTATPROPSETSTG : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             STATPROPSETSTG  *rgelt,
             ULONG  *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumSTATPROPSETSTG  * *ppenum) = 0;
        
    };
    








































































#line 9829 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



 HRESULT __stdcall IEnumSTATPROPSETSTG_RemoteNext_Proxy( 
    IEnumSTATPROPSETSTG  * This,
     ULONG celt,
     STATPROPSETSTG  *rgelt,
     ULONG  *pceltFetched);


void __stdcall IEnumSTATPROPSETSTG_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATPROPSETSTG_Skip_Proxy( 
    IEnumSTATPROPSETSTG  * This,
     ULONG celt);


void __stdcall IEnumSTATPROPSETSTG_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATPROPSETSTG_Reset_Proxy( 
    IEnumSTATPROPSETSTG  * This);


void __stdcall IEnumSTATPROPSETSTG_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATPROPSETSTG_Clone_Proxy( 
    IEnumSTATPROPSETSTG  * This,
     IEnumSTATPROPSETSTG  * *ppenum);


void __stdcall IEnumSTATPROPSETSTG_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 9883 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"







 


extern "C" __declspec(dllimport) HRESULT __stdcall PropVariantCopy ( PROPVARIANT * pvarDest, const PROPVARIANT * pvarSrc );
extern "C" __declspec(dllimport) HRESULT __stdcall PropVariantClear ( PROPVARIANT * pvar );
extern "C" __declspec(dllimport) HRESULT __stdcall FreePropVariantArray ( ULONG cVariants, PROPVARIANT * rgvars );



inline void PropVariantInit ( PROPVARIANT * pvar )
{
    memset ( pvar, 0, sizeof(PROPVARIANT) );
}


#line 9906 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



extern "C" __declspec(dllimport) HRESULT __stdcall StgCreatePropStg( IUnknown* pUnk, const FMTID & fmtid, const CLSID *pclsid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage **ppPropStg );
extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenPropStg( IUnknown* pUnk, const FMTID & fmtid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage **ppPropStg );
extern "C" __declspec(dllimport) HRESULT __stdcall StgCreatePropSetStg( IStorage *pStorage, DWORD dwReserved, IPropertySetStorage **ppPropSetStg);


extern "C" __declspec(dllimport) HRESULT __stdcall FmtIdToPropStgName( const FMTID *pfmtid, LPOLESTR oszName );
extern "C" __declspec(dllimport) HRESULT __stdcall PropStgNameToFmtId( const LPOLESTR oszName, FMTID *pfmtid );
#line 9917 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"








































































































































































































































































































































































































































































































































































































































































































































































































































#line 10726 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"


extern RPC_IF_HANDLE __MIDL_itf_objidl_0053_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0053_v0_0_s_ifspec;









 



extern "C" const IID IID_IFillLockBytes;


    
    struct __declspec(uuid("99caf010-415e-11cf-8814-00aa00b569f5")) __declspec(novtable)
    IFillLockBytes : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall FillAppend( 
             const void  *pv,
             ULONG cb,
             ULONG  *pcbWritten) = 0;
        
        virtual  HRESULT __stdcall FillAt( 
             ULARGE_INTEGER ulOffset,
             const void  *pv,
             ULONG cb,
             ULONG  *pcbWritten) = 0;
        
        virtual HRESULT __stdcall SetFillSize( 
             ULARGE_INTEGER ulSize) = 0;
        
        virtual HRESULT __stdcall Terminate( 
             BOOL bCanceled) = 0;
        
    };
    












































































#line 10847 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



 HRESULT __stdcall IFillLockBytes_RemoteFillAppend_Proxy( 
    IFillLockBytes  * This,
     const byte  *pv,
     ULONG cb,
     ULONG  *pcbWritten);


void __stdcall IFillLockBytes_RemoteFillAppend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IFillLockBytes_RemoteFillAt_Proxy( 
    IFillLockBytes  * This,
     ULARGE_INTEGER ulOffset,
     const byte  *pv,
     ULONG cb,
     ULONG  *pcbWritten);


void __stdcall IFillLockBytes_RemoteFillAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFillLockBytes_SetFillSize_Proxy( 
    IFillLockBytes  * This,
     ULARGE_INTEGER ulSize);


void __stdcall IFillLockBytes_SetFillSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFillLockBytes_Terminate_Proxy( 
    IFillLockBytes  * This,
     BOOL bCanceled);


void __stdcall IFillLockBytes_Terminate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 10905 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 



extern "C" const IID IID_IProgressNotify;


    
    struct __declspec(uuid("a9d758a0-4617-11cf-95fc-00aa00680db4")) __declspec(novtable)
    IProgressNotify : public IUnknown
    {
    public:
        virtual HRESULT __stdcall OnProgress( 
             DWORD dwProgressCurrent,
             DWORD dwProgressMaximum,
             BOOL fAccurate,
             BOOL fOwner) = 0;
        
    };
    





















































#line 10989 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall IProgressNotify_OnProgress_Proxy( 
    IProgressNotify  * This,
     DWORD dwProgressCurrent,
     DWORD dwProgressMaximum,
     BOOL fAccurate,
     BOOL fOwner);


void __stdcall IProgressNotify_OnProgress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 11009 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef struct  tagStorageLayout
    {
    DWORD LayoutType;
    OLECHAR  *pwcsElementName;
    LARGE_INTEGER cOffset;
    LARGE_INTEGER cBytes;
    }	StorageLayout;


extern "C" const IID IID_ILayoutStorage;


    
    struct __declspec(uuid("0e6d4d90-6738-11cf-9608-00aa00680db4")) __declspec(novtable)
    ILayoutStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall LayoutScript( 
             StorageLayout  *pStorageLayout,
             DWORD nEntries,
             DWORD glfInterleavedFlag) = 0;
        
        virtual HRESULT __stdcall BeginMonitor( void) = 0;
        
        virtual HRESULT __stdcall EndMonitor( void) = 0;
        
        virtual HRESULT __stdcall ReLayoutDocfile( 
             OLECHAR  *pwcsNewDfName) = 0;
        
        virtual HRESULT __stdcall ReLayoutDocfileOnILockBytes( 
             ILockBytes  *pILockBytes) = 0;
        
    };
    














































































#line 11135 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall ILayoutStorage_LayoutScript_Proxy( 
    ILayoutStorage  * This,
     StorageLayout  *pStorageLayout,
     DWORD nEntries,
     DWORD glfInterleavedFlag);


void __stdcall ILayoutStorage_LayoutScript_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILayoutStorage_BeginMonitor_Proxy( 
    ILayoutStorage  * This);


void __stdcall ILayoutStorage_BeginMonitor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILayoutStorage_EndMonitor_Proxy( 
    ILayoutStorage  * This);


void __stdcall ILayoutStorage_EndMonitor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILayoutStorage_ReLayoutDocfile_Proxy( 
    ILayoutStorage  * This,
     OLECHAR  *pwcsNewDfName);


void __stdcall ILayoutStorage_ReLayoutDocfile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILayoutStorage_ReLayoutDocfileOnILockBytes_Proxy( 
    ILayoutStorage  * This,
     ILockBytes  *pILockBytes);


void __stdcall ILayoutStorage_ReLayoutDocfileOnILockBytes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 11200 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef  ISurrogate  *LPSURROGATE;


extern "C" const IID IID_ISurrogate;


    
    struct __declspec(uuid("00000022-0000-0000-C000-000000000046")) __declspec(novtable)
    ISurrogate : public IUnknown
    {
    public:
        virtual HRESULT __stdcall LoadDllServer( 
             const CLSID & Clsid) = 0;
        
        virtual HRESULT __stdcall FreeSurrogate( void) = 0;
        
    };
    
























































#line 11288 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall ISurrogate_LoadDllServer_Proxy( 
    ISurrogate  * This,
     const CLSID & Clsid);


void __stdcall ISurrogate_LoadDllServer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISurrogate_FreeSurrogate_Proxy( 
    ISurrogate  * This);


void __stdcall ISurrogate_FreeSurrogate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 11316 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef  IGlobalInterfaceTable  *LPGLOBALINTERFACETABLE;


extern "C" const IID IID_IGlobalInterfaceTable;


    
    struct __declspec(uuid("00000146-0000-0000-C000-000000000046")) __declspec(novtable)
    IGlobalInterfaceTable : public IUnknown
    {
    public:
        virtual HRESULT __stdcall RegisterInterfaceInGlobal( 
             IUnknown  *pUnk,
             const IID & riid,
             DWORD  *pdwCookie) = 0;
        
        virtual HRESULT __stdcall RevokeInterfaceFromGlobal( 
             DWORD dwCookie) = 0;
        
        virtual HRESULT __stdcall GetInterfaceFromGlobal( 
             DWORD dwCookie,
             const IID & riid,
             void  * *ppv) = 0;
        
    };
    




































































#line 11424 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall IGlobalInterfaceTable_RegisterInterfaceInGlobal_Proxy( 
    IGlobalInterfaceTable  * This,
     IUnknown  *pUnk,
     const IID & riid,
     DWORD  *pdwCookie);


void __stdcall IGlobalInterfaceTable_RegisterInterfaceInGlobal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IGlobalInterfaceTable_RevokeInterfaceFromGlobal_Proxy( 
    IGlobalInterfaceTable  * This,
     DWORD dwCookie);


void __stdcall IGlobalInterfaceTable_RevokeInterfaceFromGlobal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IGlobalInterfaceTable_GetInterfaceFromGlobal_Proxy( 
    IGlobalInterfaceTable  * This,
     DWORD dwCookie,
     const IID & riid,
     void  * *ppv);


void __stdcall IGlobalInterfaceTable_GetInterfaceFromGlobal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 11469 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 



extern "C" const IID IID_IDirectWriterLock;


    
    struct __declspec(uuid("0e6d4d92-6738-11cf-9608-00aa00680db4")) __declspec(novtable)
    IDirectWriterLock : public IUnknown
    {
    public:
        virtual HRESULT __stdcall WaitForWriteAccess( 
             DWORD dwTimeout) = 0;
        
        virtual HRESULT __stdcall ReleaseWriteAccess( void) = 0;
        
        virtual HRESULT __stdcall HaveWriteAccess( void) = 0;
        
    };
    






























































#line 11563 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall IDirectWriterLock_WaitForWriteAccess_Proxy( 
    IDirectWriterLock  * This,
     DWORD dwTimeout);


void __stdcall IDirectWriterLock_WaitForWriteAccess_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDirectWriterLock_ReleaseWriteAccess_Proxy( 
    IDirectWriterLock  * This);


void __stdcall IDirectWriterLock_ReleaseWriteAccess_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDirectWriterLock_HaveWriteAccess_Proxy( 
    IDirectWriterLock  * This);


void __stdcall IDirectWriterLock_HaveWriteAccess_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 11602 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 



extern "C" const IID IID_ISynchronize;


    
    struct __declspec(uuid("00000023-0000-0000-C000-000000000046")) __declspec(novtable)
    ISynchronize : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Wait( 
             DWORD dwMilliseconds) = 0;
        
        virtual HRESULT __stdcall Signal( void) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
    };
    






























































#line 11696 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall ISynchronize_Wait_Proxy( 
    ISynchronize  * This,
     DWORD dwMilliseconds);


void __stdcall ISynchronize_Wait_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISynchronize_Signal_Proxy( 
    ISynchronize  * This);


void __stdcall ISynchronize_Signal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISynchronize_Reset_Proxy( 
    ISynchronize  * This);


void __stdcall ISynchronize_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 11735 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 



extern "C" const IID IID_ISynchronizeMutex;


    
    struct __declspec(uuid("00000025-0000-0000-C000-000000000046")) __declspec(novtable)
    ISynchronizeMutex : public ISynchronize
    {
    public:
        virtual HRESULT __stdcall ReleaseMutex( void) = 0;
        
    };
    





































































#line 11831 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall ISynchronizeMutex_ReleaseMutex_Proxy( 
    ISynchronizeMutex  * This);


void __stdcall ISynchronizeMutex_ReleaseMutex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 11847 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 



extern "C" const IID IID_IAsyncSetup;


    
    struct __declspec(uuid("00000024-0000-0000-C000-000000000046")) __declspec(novtable)
    IAsyncSetup : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetAsyncManager( 
             const IID & riid,
             IUnknown  *pOuter,
             DWORD dwFlags,
             IUnknown  * *ppInner,
             IAsyncManager  * *ppAsyncMgr) = 0;
        
    };
    






















































#line 11933 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall IAsyncSetup_GetAsyncManager_Proxy( 
    IAsyncSetup  * This,
     const IID & riid,
     IUnknown  *pOuter,
     DWORD dwFlags,
     IUnknown  * *ppInner,
     IAsyncManager  * *ppAsyncMgr);


void __stdcall IAsyncSetup_GetAsyncManager_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 11954 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef  ICancelMethodCalls  *LPCANCELMETHODCALLS;


extern "C" const IID IID_ICancelMethodCalls;


    
    struct __declspec(uuid("00000029-0000-0000-C000-000000000046")) __declspec(novtable)
    ICancelMethodCalls : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Cancel( void) = 0;
        
        virtual HRESULT __stdcall TestCancel( void) = 0;
        
        virtual HRESULT __stdcall SetCancelTimeout( 
             ULONG ulSeconds) = 0;
        
    };
    






























































#line 12050 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall ICancelMethodCalls_Cancel_Proxy( 
    ICancelMethodCalls  * This);


void __stdcall ICancelMethodCalls_Cancel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICancelMethodCalls_TestCancel_Proxy( 
    ICancelMethodCalls  * This);


void __stdcall ICancelMethodCalls_TestCancel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICancelMethodCalls_SetCancelTimeout_Proxy( 
    ICancelMethodCalls  * This,
     ULONG ulSeconds);


void __stdcall ICancelMethodCalls_SetCancelTimeout_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12089 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef 
enum tagDCOM_CALL_STATE
    {	DCOM_NONE	= 0,
	DCOM_CALL_COMPLETE	= 0x1,
	DCOM_CALL_CANCELED	= 0x2
    }	DCOM_CALL_STATE;


extern "C" const IID IID_IAsyncManager;


    
    struct __declspec(uuid("0000002A-0000-0000-C000-000000000046")) __declspec(novtable)
    IAsyncManager : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CompleteCall( 
             HRESULT Result) = 0;
        
        virtual HRESULT __stdcall GetCallContext( 
             const IID & riid,
             void  * *pInterface) = 0;
        
        virtual HRESULT __stdcall GetState( 
             ULONG  *pulStateFlags) = 0;
        
    };
    

































































#line 12196 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall IAsyncManager_CompleteCall_Proxy( 
    IAsyncManager  * This,
     HRESULT Result);


void __stdcall IAsyncManager_CompleteCall_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IAsyncManager_GetCallContext_Proxy( 
    IAsyncManager  * This,
     const IID & riid,
     void  * *pInterface);


void __stdcall IAsyncManager_GetCallContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IAsyncManager_GetState_Proxy( 
    IAsyncManager  * This,
     ULONG  *pulStateFlags);


void __stdcall IAsyncManager_GetState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12238 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 



extern "C" const IID IID_IWaitMultiple;


    
    struct __declspec(uuid("0000002B-0000-0000-C000-000000000046")) __declspec(novtable)
    IWaitMultiple : public IUnknown
    {
    public:
        virtual HRESULT __stdcall WaitMultiple( 
             DWORD timeout,
             ISynchronize  * *pSync) = 0;
        
        virtual HRESULT __stdcall AddSynchronize( 
             ISynchronize  *pSync) = 0;
        
    };
    


























































#line 12328 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall IWaitMultiple_WaitMultiple_Proxy( 
    IWaitMultiple  * This,
     DWORD timeout,
     ISynchronize  * *pSync);


void __stdcall IWaitMultiple_WaitMultiple_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IWaitMultiple_AddSynchronize_Proxy( 
    IWaitMultiple  * This,
     ISynchronize  *pSync);


void __stdcall IWaitMultiple_AddSynchronize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12358 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 



extern "C" const IID IID_ISynchronizeEvent;


    
    struct __declspec(uuid("0000002C-0000-0000-C000-000000000046")) __declspec(novtable)
    ISynchronizeEvent : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetEvent( 
             HANDLE  *pEvent) = 0;
        
    };
    


















































#line 12436 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall ISynchronizeEvent_GetEvent_Proxy( 
    ISynchronizeEvent  * This,
     HANDLE  *pEvent);


void __stdcall ISynchronizeEvent_GetEvent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12453 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 



extern "C" const IID IID_IUrlMon;


    
    struct __declspec(uuid("00000026-0000-0000-C000-000000000046")) __declspec(novtable)
    IUrlMon : public IUnknown
    {
    public:
        virtual HRESULT __stdcall AsyncGetClassBits( 
             const CLSID & rclsid,
             LPCWSTR pszTYPE,
             LPCWSTR pszExt,
             DWORD dwFileVersionMS,
             DWORD dwFileVersionLS,
             LPCWSTR pszCodeBase,
             IBindCtx  *pbc,
             DWORD dwClassContext,
             const IID & riid,
             DWORD flags) = 0;
        
    };
    



























































#line 12549 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall IUrlMon_AsyncGetClassBits_Proxy( 
    IUrlMon  * This,
     const CLSID & rclsid,
     LPCWSTR pszTYPE,
     LPCWSTR pszExt,
     DWORD dwFileVersionMS,
     DWORD dwFileVersionLS,
     LPCWSTR pszCodeBase,
     IBindCtx  *pbc,
     DWORD dwClassContext,
     const IID & riid,
     DWORD flags);


void __stdcall IUrlMon_AsyncGetClassBits_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12575 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef struct  tagPUBLISHEDINFOLIST
    {
    DWORD cPublApps;
     PUBLISHEDAPPINFO  *pPublAppInfo;
    }	PUBLISHEDINFOLIST;


extern "C" const IID IID_IClassAccess;


    
    struct __declspec(uuid("00000190-0000-0000-C000-000000000046")) __declspec(novtable)
    IClassAccess : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetClassInfoA( 
             const CLSID & clsid,
             QUERYCONTEXT QryContext,
             PACKAGEINFO  *pPackageInfo) = 0;
        
        virtual HRESULT __stdcall GetClassSpecInfo( 
             uCLSSPEC  *pClassSpec,
             QUERYCONTEXT QryContext,
             PACKAGEINFO  *pPackageInfo) = 0;
        
        virtual HRESULT __stdcall GetInstallablePackages( 
             DWORD Count,
             PUBLISHEDINFOLIST  *pInfoList) = 0;
        
    };
    





































































#line 12689 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall IClassAccess_GetClassInfo_Proxy( 
    IClassAccess  * This,
     const CLSID & clsid,
     QUERYCONTEXT QryContext,
     PACKAGEINFO  *pPackageInfo);


void __stdcall IClassAccess_GetClassInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IClassAccess_GetClassSpecInfo_Proxy( 
    IClassAccess  * This,
     uCLSSPEC  *pClassSpec,
     QUERYCONTEXT QryContext,
     PACKAGEINFO  *pPackageInfo);


void __stdcall IClassAccess_GetClassSpecInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IClassAccess_GetInstallablePackages_Proxy( 
    IClassAccess  * This,
     DWORD Count,
     PUBLISHEDINFOLIST  *pInfoList);


void __stdcall IClassAccess_GetInstallablePackages_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12735 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 


typedef struct  tagPACKAGEINFOLIST
    {
    DWORD cPackInfo;
     PACKAGEINFO  *pPackageInfo;
    }	PACKAGEINFOLIST;


extern "C" const IID IID_IClassRefresh;


    
    struct __declspec(uuid("00000192-0000-0000-C000-000000000046")) __declspec(novtable)
    IClassRefresh : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetUpgrades( 
             ULONG cClasses,
             CLSID  *pClassList,
             CSPLATFORM Platform,
             LCID Locale,
             PACKAGEINFOLIST  *pPackageInfoList) = 0;
        
        virtual HRESULT __stdcall CommitUpgrades( void) = 0;
        
    };
    




























































#line 12835 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall IClassRefresh_GetUpgrades_Proxy( 
    IClassRefresh  * This,
     ULONG cClasses,
     CLSID  *pClassList,
     CSPLATFORM Platform,
     LCID Locale,
     PACKAGEINFOLIST  *pPackageInfoList);


void __stdcall IClassRefresh_GetUpgrades_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IClassRefresh_CommitUpgrades_Proxy( 
    IClassRefresh  * This);


void __stdcall IClassRefresh_CommitUpgrades_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12867 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"







 


typedef struct  tagCLASSDETAIL
    {
    CLSID Clsid;
    LPOLESTR pszDesc;
    LPOLESTR pszIconPath;
    CLSID TreatAsClsid;
    CLSID AutoConvertClsid;
    DWORD cFileExt;
     LPOLESTR  *prgFileExt;
    LPOLESTR pMimeType;
    LPOLESTR pDefaultProgId;
    DWORD cOtherProgId;
     LPOLESTR  *prgOtherProgId;
    }	CLASSDETAIL;





extern RPC_IF_HANDLE __MIDL_itf_objidl_0069_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0069_v0_0_s_ifspec;









 



extern "C" const IID IID_IEnumPackage;


    
    struct __declspec(uuid("00000193-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumPackage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next( 
             ULONG celt,
             PACKAGEDETAIL  *rgelt,
             ULONG  *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumPackage  * *ppenum) = 0;
        
    };
    








































































#line 13007 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall IEnumPackage_Next_Proxy( 
    IEnumPackage  * This,
     ULONG celt,
     PACKAGEDETAIL  *rgelt,
     ULONG  *pceltFetched);


void __stdcall IEnumPackage_Next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumPackage_Skip_Proxy( 
    IEnumPackage  * This,
     ULONG celt);


void __stdcall IEnumPackage_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumPackage_Reset_Proxy( 
    IEnumPackage  * This);


void __stdcall IEnumPackage_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumPackage_Clone_Proxy( 
    IEnumPackage  * This,
     IEnumPackage  * *ppenum);


void __stdcall IEnumPackage_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 13061 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"










 



extern "C" const IID IID_IEnumClass;


    
    struct __declspec(uuid("00000194-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumClass : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next( 
             ULONG celt,
             CLASSDETAIL  *rgelt,
             ULONG  *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumClass  * *ppenum) = 0;
        
    };
    








































































#line 13171 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall IEnumClass_Next_Proxy( 
    IEnumClass  * This,
     ULONG celt,
     CLASSDETAIL  *rgelt,
     ULONG  *pceltFetched);


void __stdcall IEnumClass_Next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumClass_Skip_Proxy( 
    IEnumClass  * This,
     ULONG celt);


void __stdcall IEnumClass_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumClass_Reset_Proxy( 
    IEnumClass  * This);


void __stdcall IEnumClass_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumClass_Clone_Proxy( 
    IEnumClass  * This,
     IEnumClass  * *ppenum);


void __stdcall IEnumClass_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 13225 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"







 


#line 13236 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"


extern RPC_IF_HANDLE __MIDL_itf_objidl_0071_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0071_v0_0_s_ifspec;









 



extern "C" const IID IID_IClassAdmin;


    
    struct __declspec(uuid("00000191-0000-0000-C000-000000000046")) __declspec(novtable)
    IClassAdmin : public IUnknown
    {
    public:
        virtual HRESULT __stdcall NewClass( 
             CLASSDETAIL  *pClassDetail) = 0;
        
        virtual HRESULT __stdcall DeleteClass( 
             const CLSID & guidClsId) = 0;
        
        virtual HRESULT __stdcall NewInterface( 
             const IID & iid,
             LPOLESTR pszDesc,
             const CLSID & psclsid,
             const CLSID & typelibid) = 0;
        
        virtual HRESULT __stdcall DeleteInterface( 
             const IID & iid) = 0;
        
        virtual HRESULT __stdcall NewPackage( 
             PACKAGEDETAIL  *pPackageDetail) = 0;
        
        virtual HRESULT __stdcall DeletePackage( 
             LPOLESTR pszPackageName) = 0;
        
        virtual HRESULT __stdcall GetClassesEnum( 
             IEnumClass  * *ppIEnumClass) = 0;
        
        virtual HRESULT __stdcall GetPackagesEnum( 
             const CLSID & guidClsid,
             LPOLESTR pszVendor,
             CSPLATFORM Platform,
             DWORD dwContext,
             LCID Locale,
             IEnumPackage  * *ppIEnumPackage) = 0;
        
        virtual HRESULT __stdcall GetClassDetails( 
             const CLSID & guidClsId,
             CLASSDETAIL  *pClassDetail) = 0;
        
        virtual HRESULT __stdcall GetIidDetails( 
             const IID & iid,
             LPOLESTR  *ppszDesc,
             CLSID  *psClsid,
             CLSID  *pTypeLibId) = 0;
        
        virtual HRESULT __stdcall GetPackageDetails( 
             LPOLESTR pszPackageName,
             PACKAGEDETAIL  *pPackageDetail) = 0;
        
    };
    





































































































































#line 13443 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"



HRESULT __stdcall IClassAdmin_NewClass_Proxy( 
    IClassAdmin  * This,
     CLASSDETAIL  *pClassDetail);


void __stdcall IClassAdmin_NewClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IClassAdmin_DeleteClass_Proxy( 
    IClassAdmin  * This,
     const CLSID & guidClsId);


void __stdcall IClassAdmin_DeleteClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IClassAdmin_NewInterface_Proxy( 
    IClassAdmin  * This,
     const IID & iid,
     LPOLESTR pszDesc,
     const CLSID & psclsid,
     const CLSID & typelibid);


void __stdcall IClassAdmin_NewInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IClassAdmin_DeleteInterface_Proxy( 
    IClassAdmin  * This,
     const IID & iid);


void __stdcall IClassAdmin_DeleteInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IClassAdmin_NewPackage_Proxy( 
    IClassAdmin  * This,
     PACKAGEDETAIL  *pPackageDetail);


void __stdcall IClassAdmin_NewPackage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IClassAdmin_DeletePackage_Proxy( 
    IClassAdmin  * This,
     LPOLESTR pszPackageName);


void __stdcall IClassAdmin_DeletePackage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IClassAdmin_GetClassesEnum_Proxy( 
    IClassAdmin  * This,
     IEnumClass  * *ppIEnumClass);


void __stdcall IClassAdmin_GetClassesEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IClassAdmin_GetPackagesEnum_Proxy( 
    IClassAdmin  * This,
     const CLSID & guidClsid,
     LPOLESTR pszVendor,
     CSPLATFORM Platform,
     DWORD dwContext,
     LCID Locale,
     IEnumPackage  * *ppIEnumPackage);


void __stdcall IClassAdmin_GetPackagesEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IClassAdmin_GetClassDetails_Proxy( 
    IClassAdmin  * This,
     const CLSID & guidClsId,
     CLASSDETAIL  *pClassDetail);


void __stdcall IClassAdmin_GetClassDetails_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IClassAdmin_GetIidDetails_Proxy( 
    IClassAdmin  * This,
     const IID & iid,
     LPOLESTR  *ppszDesc,
     CLSID  *psClsid,
     CLSID  *pTypeLibId);


void __stdcall IClassAdmin_GetIidDetails_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IClassAdmin_GetPackageDetails_Proxy( 
    IClassAdmin  * This,
     LPOLESTR pszPackageName,
     PACKAGEDETAIL  *pPackageDetail);


void __stdcall IClassAdmin_GetPackageDetails_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 13593 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"







 



#pragma warning(default:4201)
#line 13606 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"


extern RPC_IF_HANDLE __MIDL_itf_objidl_0072_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0072_v0_0_s_ifspec;



unsigned long             __stdcall  ASYNC_STGMEDIUM_UserSize(     unsigned long  *, unsigned long            , ASYNC_STGMEDIUM  * ); 
unsigned char  * __stdcall  ASYNC_STGMEDIUM_UserMarshal(  unsigned long  *, unsigned char  *, ASYNC_STGMEDIUM  * ); 
unsigned char  * __stdcall  ASYNC_STGMEDIUM_UserUnmarshal(unsigned long  *, unsigned char  *, ASYNC_STGMEDIUM  * ); 
void                      __stdcall  ASYNC_STGMEDIUM_UserFree(     unsigned long  *, ASYNC_STGMEDIUM  * ); 

unsigned long             __stdcall  BSTR_UserSize(     unsigned long  *, unsigned long            , BSTR  * ); 
unsigned char  * __stdcall  BSTR_UserMarshal(  unsigned long  *, unsigned char  *, BSTR  * ); 
unsigned char  * __stdcall  BSTR_UserUnmarshal(unsigned long  *, unsigned char  *, BSTR  * ); 
void                      __stdcall  BSTR_UserFree(     unsigned long  *, BSTR  * ); 

unsigned long             __stdcall  CLIPFORMAT_UserSize(     unsigned long  *, unsigned long            , CLIPFORMAT  * ); 
unsigned char  * __stdcall  CLIPFORMAT_UserMarshal(  unsigned long  *, unsigned char  *, CLIPFORMAT  * ); 
unsigned char  * __stdcall  CLIPFORMAT_UserUnmarshal(unsigned long  *, unsigned char  *, CLIPFORMAT  * ); 
void                      __stdcall  CLIPFORMAT_UserFree(     unsigned long  *, CLIPFORMAT  * ); 

unsigned long             __stdcall  FLAG_STGMEDIUM_UserSize(     unsigned long  *, unsigned long            , FLAG_STGMEDIUM  * ); 
unsigned char  * __stdcall  FLAG_STGMEDIUM_UserMarshal(  unsigned long  *, unsigned char  *, FLAG_STGMEDIUM  * ); 
unsigned char  * __stdcall  FLAG_STGMEDIUM_UserUnmarshal(unsigned long  *, unsigned char  *, FLAG_STGMEDIUM  * ); 
void                      __stdcall  FLAG_STGMEDIUM_UserFree(     unsigned long  *, FLAG_STGMEDIUM  * ); 

unsigned long             __stdcall  SNB_UserSize(     unsigned long  *, unsigned long            , SNB  * ); 
unsigned char  * __stdcall  SNB_UserMarshal(  unsigned long  *, unsigned char  *, SNB  * ); 
unsigned char  * __stdcall  SNB_UserUnmarshal(unsigned long  *, unsigned char  *, SNB  * ); 
void                      __stdcall  SNB_UserFree(     unsigned long  *, SNB  * ); 

unsigned long             __stdcall  STGMEDIUM_UserSize(     unsigned long  *, unsigned long            , STGMEDIUM  * ); 
unsigned char  * __stdcall  STGMEDIUM_UserMarshal(  unsigned long  *, unsigned char  *, STGMEDIUM  * ); 
unsigned char  * __stdcall  STGMEDIUM_UserUnmarshal(unsigned long  *, unsigned char  *, STGMEDIUM  * ); 
void                      __stdcall  STGMEDIUM_UserFree(     unsigned long  *, STGMEDIUM  * ); 

 HRESULT __stdcall IEnumUnknown_Next_Proxy( 
    IEnumUnknown  * This,
     ULONG celt,
     IUnknown  * *rgelt,
     ULONG  *pceltFetched);


 HRESULT __stdcall IEnumUnknown_Next_Stub( 
    IEnumUnknown  * This,
     ULONG celt,
     IUnknown  * *rgelt,
     ULONG  *pceltFetched);

 HRESULT __stdcall IBindCtx_SetBindOptions_Proxy( 
    IBindCtx  * This,
     BIND_OPTS  *pbindopts);


 HRESULT __stdcall IBindCtx_SetBindOptions_Stub( 
    IBindCtx  * This,
     BIND_OPTS2  *pbindopts);

 HRESULT __stdcall IBindCtx_GetBindOptions_Proxy( 
    IBindCtx  * This,
     BIND_OPTS  *pbindopts);


 HRESULT __stdcall IBindCtx_GetBindOptions_Stub( 
    IBindCtx  * This,
     BIND_OPTS2  *pbindopts);

 HRESULT __stdcall IEnumMoniker_Next_Proxy( 
    IEnumMoniker  * This,
     ULONG celt,
     IMoniker  * *rgelt,
     ULONG  *pceltFetched);


 HRESULT __stdcall IEnumMoniker_Next_Stub( 
    IEnumMoniker  * This,
     ULONG celt,
     IMoniker  * *rgelt,
     ULONG  *pceltFetched);

 BOOL __stdcall IRunnableObject_IsRunning_Proxy( 
    IRunnableObject  * This);


 HRESULT __stdcall IRunnableObject_IsRunning_Stub( 
    IRunnableObject  * This);

 HRESULT __stdcall IMoniker_BindToObject_Proxy( 
    IMoniker  * This,
     IBindCtx  *pbc,
     IMoniker  *pmkToLeft,
     const IID & riidResult,
     void  * *ppvResult);


 HRESULT __stdcall IMoniker_BindToObject_Stub( 
    IMoniker  * This,
     IBindCtx  *pbc,
     IMoniker  *pmkToLeft,
     const IID & riidResult,
     IUnknown  * *ppvResult);

 HRESULT __stdcall IMoniker_BindToStorage_Proxy( 
    IMoniker  * This,
     IBindCtx  *pbc,
     IMoniker  *pmkToLeft,
     const IID & riid,
     void  * *ppvObj);


 HRESULT __stdcall IMoniker_BindToStorage_Stub( 
    IMoniker  * This,
     IBindCtx  *pbc,
     IMoniker  *pmkToLeft,
     const IID & riid,
     IUnknown  * *ppvObj);

 HRESULT __stdcall IEnumString_Next_Proxy( 
    IEnumString  * This,
     ULONG celt,
     LPOLESTR  *rgelt,
     ULONG  *pceltFetched);


 HRESULT __stdcall IEnumString_Next_Stub( 
    IEnumString  * This,
     ULONG celt,
     LPOLESTR  *rgelt,
     ULONG  *pceltFetched);

 HRESULT __stdcall ISequentialStream_Read_Proxy( 
    ISequentialStream  * This,
     void  *pv,
     ULONG cb,
     ULONG  *pcbRead);


 HRESULT __stdcall ISequentialStream_Read_Stub( 
    ISequentialStream  * This,
     byte  *pv,
     ULONG cb,
     ULONG  *pcbRead);

 HRESULT __stdcall ISequentialStream_Write_Proxy( 
    ISequentialStream  * This,
     const void  *pv,
     ULONG cb,
     ULONG  *pcbWritten);


 HRESULT __stdcall ISequentialStream_Write_Stub( 
    ISequentialStream  * This,
     const byte  *pv,
     ULONG cb,
     ULONG  *pcbWritten);

 HRESULT __stdcall IStream_Seek_Proxy( 
    IStream  * This,
     LARGE_INTEGER dlibMove,
     DWORD dwOrigin,
     ULARGE_INTEGER  *plibNewPosition);


 HRESULT __stdcall IStream_Seek_Stub( 
    IStream  * This,
     LARGE_INTEGER dlibMove,
     DWORD dwOrigin,
     ULARGE_INTEGER  *plibNewPosition);

 HRESULT __stdcall IStream_CopyTo_Proxy( 
    IStream  * This,
     IStream  *pstm,
     ULARGE_INTEGER cb,
     ULARGE_INTEGER  *pcbRead,
     ULARGE_INTEGER  *pcbWritten);


 HRESULT __stdcall IStream_CopyTo_Stub( 
    IStream  * This,
     IStream  *pstm,
     ULARGE_INTEGER cb,
     ULARGE_INTEGER  *pcbRead,
     ULARGE_INTEGER  *pcbWritten);

 HRESULT __stdcall IEnumSTATSTG_Next_Proxy( 
    IEnumSTATSTG  * This,
     ULONG celt,
     STATSTG  *rgelt,
     ULONG  *pceltFetched);


 HRESULT __stdcall IEnumSTATSTG_Next_Stub( 
    IEnumSTATSTG  * This,
     ULONG celt,
     STATSTG  *rgelt,
     ULONG  *pceltFetched);

 HRESULT __stdcall IStorage_OpenStream_Proxy( 
    IStorage  * This,
     const OLECHAR  *pwcsName,
     void  *reserved1,
     DWORD grfMode,
     DWORD reserved2,
     IStream  * *ppstm);


 HRESULT __stdcall IStorage_OpenStream_Stub( 
    IStorage  * This,
     const OLECHAR  *pwcsName,
     unsigned long cbReserved1,
     byte  *reserved1,
     DWORD grfMode,
     DWORD reserved2,
     IStream  * *ppstm);

 HRESULT __stdcall IStorage_EnumElements_Proxy( 
    IStorage  * This,
     DWORD reserved1,
     void  *reserved2,
     DWORD reserved3,
     IEnumSTATSTG  * *ppenum);


 HRESULT __stdcall IStorage_EnumElements_Stub( 
    IStorage  * This,
     DWORD reserved1,
     unsigned long cbReserved2,
     byte  *reserved2,
     DWORD reserved3,
     IEnumSTATSTG  * *ppenum);

 HRESULT __stdcall ILockBytes_ReadAt_Proxy( 
    ILockBytes  * This,
     ULARGE_INTEGER ulOffset,
     void  *pv,
     ULONG cb,
     ULONG  *pcbRead);


 HRESULT __stdcall ILockBytes_ReadAt_Stub( 
    ILockBytes  * This,
     ULARGE_INTEGER ulOffset,
     byte  *pv,
     ULONG cb,
     ULONG  *pcbRead);

 HRESULT __stdcall ILockBytes_WriteAt_Proxy( 
    ILockBytes  * This,
     ULARGE_INTEGER ulOffset,
     const void  *pv,
     ULONG cb,
     ULONG  *pcbWritten);


 HRESULT __stdcall ILockBytes_WriteAt_Stub( 
    ILockBytes  * This,
     ULARGE_INTEGER ulOffset,
     const byte  *pv,
     ULONG cb,
     ULONG  *pcbWritten);

 HRESULT __stdcall IEnumFORMATETC_Next_Proxy( 
    IEnumFORMATETC  * This,
     ULONG celt,
     FORMATETC  *rgelt,
     ULONG  *pceltFetched);


 HRESULT __stdcall IEnumFORMATETC_Next_Stub( 
    IEnumFORMATETC  * This,
     ULONG celt,
     FORMATETC  *rgelt,
     ULONG  *pceltFetched);

 HRESULT __stdcall IEnumSTATDATA_Next_Proxy( 
    IEnumSTATDATA  * This,
     ULONG celt,
     STATDATA  *rgelt,
     ULONG  *pceltFetched);


 HRESULT __stdcall IEnumSTATDATA_Next_Stub( 
    IEnumSTATDATA  * This,
     ULONG celt,
     STATDATA  *rgelt,
     ULONG  *pceltFetched);

 void __stdcall IAdviseSink_OnDataChange_Proxy( 
    IAdviseSink  * This,
     FORMATETC  *pFormatetc,
     STGMEDIUM  *pStgmed);


 HRESULT __stdcall IAdviseSink_OnDataChange_Stub( 
    IAdviseSink  * This,
     IAsyncManager  * *ppIAM,
     FORMATETC  *pFormatetc,
     ASYNC_STGMEDIUM  *pStgmed);

 void __stdcall IAdviseSink_OnViewChange_Proxy( 
    IAdviseSink  * This,
     DWORD dwAspect,
     LONG lindex);


 HRESULT __stdcall IAdviseSink_OnViewChange_Stub( 
    IAdviseSink  * This,
     IAsyncManager  * *ppIAM,
     DWORD dwAspect,
     LONG lindex);

 void __stdcall IAdviseSink_OnRename_Proxy( 
    IAdviseSink  * This,
     IMoniker  *pmk);


 HRESULT __stdcall IAdviseSink_OnRename_Stub( 
    IAdviseSink  * This,
     IAsyncManager  * *ppIAM,
     IMoniker  *pmk);

 void __stdcall IAdviseSink_OnSave_Proxy( 
    IAdviseSink  * This);


 HRESULT __stdcall IAdviseSink_OnSave_Stub( 
    IAdviseSink  * This,
     IAsyncManager  * *ppIAM);

 void __stdcall IAdviseSink_OnClose_Proxy( 
    IAdviseSink  * This);


 HRESULT __stdcall IAdviseSink_OnClose_Stub( 
    IAdviseSink  * This);

 void __stdcall IAdviseSink2_OnLinkSrcChange_Proxy( 
    IAdviseSink2  * This,
     IMoniker  *pmk);


 HRESULT __stdcall IAdviseSink2_OnLinkSrcChange_Stub( 
    IAdviseSink2  * This,
     IAsyncManager  * *ppIAM,
     IMoniker  *pmk);

 HRESULT __stdcall IDataObject_GetData_Proxy( 
    IDataObject  * This,
     FORMATETC  *pformatetcIn,
     STGMEDIUM  *pmedium);


 HRESULT __stdcall IDataObject_GetData_Stub( 
    IDataObject  * This,
     FORMATETC  *pformatetcIn,
     STGMEDIUM  *pRemoteMedium);

 HRESULT __stdcall IDataObject_GetDataHere_Proxy( 
    IDataObject  * This,
     FORMATETC  *pformatetc,
     STGMEDIUM  *pmedium);


 HRESULT __stdcall IDataObject_GetDataHere_Stub( 
    IDataObject  * This,
     FORMATETC  *pformatetc,
     STGMEDIUM  *pRemoteMedium);

 HRESULT __stdcall IDataObject_SetData_Proxy( 
    IDataObject  * This,
     FORMATETC  *pformatetc,
     STGMEDIUM  *pmedium,
     BOOL fRelease);


 HRESULT __stdcall IDataObject_SetData_Stub( 
    IDataObject  * This,
     FORMATETC  *pformatetc,
     FLAG_STGMEDIUM  *pmedium,
     BOOL fRelease);

 HRESULT __stdcall IEnumSTATPROPSTG_Next_Proxy( 
    IEnumSTATPROPSTG  * This,
     ULONG celt,
     STATPROPSTG  *rgelt,
     ULONG  *pceltFetched);


 HRESULT __stdcall IEnumSTATPROPSTG_Next_Stub( 
    IEnumSTATPROPSTG  * This,
     ULONG celt,
     STATPROPSTG  *rgelt,
     ULONG  *pceltFetched);

 HRESULT __stdcall IEnumSTATPROPSETSTG_Next_Proxy( 
    IEnumSTATPROPSETSTG  * This,
     ULONG celt,
     STATPROPSETSTG  *rgelt,
     ULONG  *pceltFetched);


 HRESULT __stdcall IEnumSTATPROPSETSTG_Next_Stub( 
    IEnumSTATPROPSETSTG  * This,
     ULONG celt,
     STATPROPSETSTG  *rgelt,
     ULONG  *pceltFetched);

 HRESULT __stdcall IFillLockBytes_FillAppend_Proxy( 
    IFillLockBytes  * This,
     const void  *pv,
     ULONG cb,
     ULONG  *pcbWritten);


 HRESULT __stdcall IFillLockBytes_FillAppend_Stub( 
    IFillLockBytes  * This,
     const byte  *pv,
     ULONG cb,
     ULONG  *pcbWritten);

 HRESULT __stdcall IFillLockBytes_FillAt_Proxy( 
    IFillLockBytes  * This,
     ULARGE_INTEGER ulOffset,
     const void  *pv,
     ULONG cb,
     ULONG  *pcbWritten);


 HRESULT __stdcall IFillLockBytes_FillAt_Stub( 
    IFillLockBytes  * This,
     ULARGE_INTEGER ulOffset,
     const byte  *pv,
     ULONG cb,
     ULONG  *pcbWritten);






}
#line 14049 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"

#line 14051 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"
#line 373 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"

























#line 399 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"


































__inline BOOL IsEqualGUID(const GUID & rguid1, const GUID & rguid2)
{
    return !memcmp(&rguid1, &rguid2, sizeof(GUID));
}


#line 440 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"
#line 441 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"















__inline BOOL operator==(const GUID& guidOne, const GUID& guidOther)
{

    return !memcmp(&guidOne,&guidOther,sizeof(GUID));


#line 463 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"
}
#line 465 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"

__inline BOOL operator!=(const GUID& guidOne, const GUID& guidOther)
{
    return !(guidOne == guidOther);
}

#line 472 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"



#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\cguid.h"













extern "C" {
#line 16 "c:\\programme\\microsoft visual studio\\vc98\\include\\cguid.h"

extern const IID GUID_NULL;
extern const IID IID_IRpcChannel;
extern const IID IID_IRpcStub;
extern const IID IID_IStubManager;
extern const IID IID_IRpcProxy;
extern const IID IID_IProxyManager;
extern const IID IID_IPSFactory;
extern const IID IID_IInternalMoniker;
extern const IID IID_IDfReserved1;
extern const IID IID_IDfReserved2;
extern const IID IID_IDfReserved3;
extern const CLSID CLSID_StdMarshal;
extern const CLSID CLSID_AggStdMarshal;
extern const CLSID CLSID_StdAsyncActManager;
extern const IID IID_IStub;
extern const IID IID_IProxy;
extern const IID IID_IEnumGeneric;
extern const IID IID_IEnumHolder;
extern const IID IID_IEnumCallback;
extern const IID IID_IOleManager;
extern const IID IID_IOlePresObj;
extern const IID IID_IDebug;
extern const IID IID_IDebugStream;
extern const CLSID CLSID_PSGenObject;
extern const CLSID CLSID_PSClientSite;
extern const CLSID CLSID_PSClassObject;
extern const CLSID CLSID_PSInPlaceActive;
extern const CLSID CLSID_PSInPlaceFrame;
extern const CLSID CLSID_PSDragDrop;
extern const CLSID CLSID_PSBindCtx;
extern const CLSID CLSID_PSEnumerators;
extern const CLSID CLSID_StaticMetafile;
extern const CLSID CLSID_StaticDib;
extern const CLSID CID_CDfsVolume;
extern const CLSID CLSID_DCOMAccessControl;
extern const CLSID CLSID_StdGlobalInterfaceTable;
extern const CLSID CLSID_ComBinding;









extern const CLSID CLSID_CCDFormKrnl;
extern const CLSID CLSID_CCDPropertyPage;
extern const CLSID CLSID_CCDFormDialog;




extern const CLSID CLSID_CCDCommandButton;
extern const CLSID CLSID_CCDComboBox;
extern const CLSID CLSID_CCDTextBox;
extern const CLSID CLSID_CCDCheckBox;
extern const CLSID CLSID_CCDLabel;
extern const CLSID CLSID_CCDOptionButton;
extern const CLSID CLSID_CCDListBox;
extern const CLSID CLSID_CCDScrollBar;
extern const CLSID CLSID_CCDGroupBox;




extern const CLSID CLSID_CCDGeneralPropertyPage;
extern const CLSID CLSID_CCDGenericPropertyPage;
extern const CLSID CLSID_CCDFontPropertyPage;
extern const CLSID CLSID_CCDColorPropertyPage;
extern const CLSID CLSID_CCDLabelPropertyPage;
extern const CLSID CLSID_CCDCheckBoxPropertyPage;
extern const CLSID CLSID_CCDTextBoxPropertyPage;
extern const CLSID CLSID_CCDOptionButtonPropertyPage;
extern const CLSID CLSID_CCDListBoxPropertyPage;
extern const CLSID CLSID_CCDCommandButtonPropertyPage;
extern const CLSID CLSID_CCDComboBoxPropertyPage;
extern const CLSID CLSID_CCDScrollBarPropertyPage;
extern const CLSID CLSID_CCDGroupBoxPropertyPage;
extern const CLSID CLSID_CCDXObjectPropertyPage;

extern const CLSID CLSID_CStdPropertyFrame;

extern const CLSID CLSID_CFormPropertyPage;
extern const CLSID CLSID_CGridPropertyPage;

extern const CLSID CLSID_CWSJArticlePage;
extern const CLSID CLSID_CSystemPage;

extern const CLSID CLSID_IdentityUnmarshal;
extern const CLSID CLSID_InProcFreeMarshaler;

extern const CLSID CLSID_Picture_Metafile;
extern const CLSID CLSID_Picture_EnhMetafile;
extern const CLSID CLSID_Picture_Dib;




extern const GUID GUID_TRISTATE;


}
#line 121 "c:\\programme\\microsoft visual studio\\vc98\\include\\cguid.h"


#line 124 "c:\\programme\\microsoft visual studio\\vc98\\include\\cguid.h"
#line 476 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"
#line 477 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"


typedef enum tagCOINIT
{
  COINIT_APARTMENTTHREADED  = 0x2,      






#line 489 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"
} COINIT;







extern "C" __declspec(dllimport) DWORD __stdcall CoBuildVersion( void );



extern "C" __declspec(dllimport) HRESULT __stdcall  CoInitialize(LPVOID pvReserved);
extern "C" __declspec(dllimport) void __stdcall  CoUninitialize(void);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoGetMalloc(DWORD dwMemContext, LPMALLOC * ppMalloc);
extern "C" __declspec(dllimport) DWORD __stdcall CoGetCurrentProcess(void);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoRegisterMallocSpy(LPMALLOCSPY pMallocSpy);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoRevokeMallocSpy(void);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoCreateStandardMalloc(DWORD memctx, IMalloc * * ppMalloc);



#line 512 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"




#line 517 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"



extern "C" __declspec(dllimport) HRESULT __stdcall  CoGetClassObject(const CLSID & rclsid, DWORD dwClsContext, LPVOID pvReserved,
                    const IID & riid, LPVOID * ppv);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoRegisterClassObject(const CLSID & rclsid, LPUNKNOWN pUnk,
                    DWORD dwClsContext, DWORD flags, LPDWORD lpdwRegister);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoRevokeClassObject(DWORD dwRegister);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoResumeClassObjects(void);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoSuspendClassObjects(void);
extern "C" __declspec(dllimport) ULONG __stdcall CoAddRefServerProcess(void);
extern "C" __declspec(dllimport) ULONG __stdcall CoReleaseServerProcess(void);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoGetPSClsid(const IID & riid, CLSID *pClsid);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoRegisterPSClsid(const IID & riid, const CLSID & rclsid);


extern "C" __declspec(dllimport) HRESULT __stdcall  CoRegisterSurrogate(LPSURROGATE pSurrogate);



extern "C" __declspec(dllimport) HRESULT __stdcall CoGetMarshalSizeMax(ULONG *pulSize, const IID & riid, LPUNKNOWN pUnk,
                    DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags);
extern "C" __declspec(dllimport) HRESULT __stdcall CoMarshalInterface(LPSTREAM pStm, const IID & riid, LPUNKNOWN pUnk,
                    DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags);
extern "C" __declspec(dllimport) HRESULT __stdcall CoUnmarshalInterface(LPSTREAM pStm, const IID & riid, LPVOID * ppv);
extern "C" __declspec(dllimport) HRESULT __stdcall CoMarshalHresult(LPSTREAM pstm, HRESULT hresult);
extern "C" __declspec(dllimport) HRESULT __stdcall CoUnmarshalHresult(LPSTREAM pstm, HRESULT  * phresult);
extern "C" __declspec(dllimport) HRESULT __stdcall CoReleaseMarshalData(LPSTREAM pStm);
extern "C" __declspec(dllimport) HRESULT __stdcall CoDisconnectObject(LPUNKNOWN pUnk, DWORD dwReserved);
extern "C" __declspec(dllimport) HRESULT __stdcall CoLockObjectExternal(LPUNKNOWN pUnk, BOOL fLock, BOOL fLastUnlockReleases);
extern "C" __declspec(dllimport) HRESULT __stdcall CoGetStandardMarshal(const IID & riid, LPUNKNOWN pUnk,
                    DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags,
                    LPMARSHAL * ppMarshal);


extern "C" __declspec(dllimport) HRESULT __stdcall CoGetStdMarshalEx(LPUNKNOWN pUnkOuter, DWORD smexflags,
                            LPUNKNOWN * ppUnkInner);
extern "C" __declspec(dllimport) HRESULT __stdcall CoGetStaticMarshal(IUnknown *pUnkControl,
                             ULONG        cItfs,
                             IID        **arIIDs,
                             UUID       **arIPIDs,
                             DWORD        dwBindingFlags,
                             ULONG        cBindings,
                             LPUNKNOWN   *pBindings,
                             IUnknown   **ppUnkInner);


typedef enum tagSTDMSHLFLAGS
{
    SMEXF_SERVER     = 0x01,       
    SMEXF_HANDLER    = 0x02        
} STDMSHLFLAGS;


extern "C" __declspec(dllimport) BOOL __stdcall CoIsHandlerConnected(LPUNKNOWN pUnk);
extern "C" __declspec(dllimport) BOOL __stdcall CoHasStrongExternalConnections(LPUNKNOWN pUnk);


extern "C" __declspec(dllimport) HRESULT __stdcall CoMarshalInterThreadInterfaceInStream(const IID & riid, LPUNKNOWN pUnk,
                    LPSTREAM *ppStm);

extern "C" __declspec(dllimport) HRESULT __stdcall CoGetInterfaceAndReleaseStream(LPSTREAM pStm, const IID & iid,
                    LPVOID * ppv);

extern "C" __declspec(dllimport) HRESULT __stdcall CoCreateFreeThreadedMarshaler(LPUNKNOWN  punkOuter,
                    LPUNKNOWN *ppunkMarshal);



extern "C" __declspec(dllimport) HINSTANCE __stdcall CoLoadLibrary(LPOLESTR lpszLibName, BOOL bAutoFree);
extern "C" __declspec(dllimport) void __stdcall CoFreeLibrary(HINSTANCE hInst);
extern "C" __declspec(dllimport) void __stdcall CoFreeAllLibraries(void);
extern "C" __declspec(dllimport) void __stdcall CoFreeUnusedLibraries(void);























































#line 646 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"



extern "C" __declspec(dllimport) HRESULT __stdcall CoCreateInstance(const CLSID & rclsid, LPUNKNOWN pUnkOuter,
                    DWORD dwClsContext, const IID & riid, LPVOID * ppv);































#line 683 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"









#line 693 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"























#line 717 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"



extern "C" __declspec(dllimport) HRESULT __stdcall StringFromCLSID(const CLSID & rclsid, LPOLESTR * lplpsz);
extern "C" __declspec(dllimport) HRESULT __stdcall CLSIDFromString(LPOLESTR lpsz, LPCLSID pclsid);
extern "C" __declspec(dllimport) HRESULT __stdcall StringFromIID(const IID & rclsid, LPOLESTR * lplpsz);
extern "C" __declspec(dllimport) HRESULT __stdcall IIDFromString(LPOLESTR lpsz, LPIID lpiid);
extern "C" __declspec(dllimport) BOOL __stdcall CoIsOle1Class(const CLSID & rclsid);
extern "C" __declspec(dllimport) HRESULT __stdcall ProgIDFromCLSID (const CLSID & clsid, LPOLESTR * lplpszProgID);
extern "C" __declspec(dllimport) HRESULT __stdcall CLSIDFromProgID (LPCOLESTR lpszProgID, LPCLSID lpclsid);
extern "C" __declspec(dllimport) int __stdcall StringFromGUID2(const GUID & rguid, LPOLESTR lpsz, int cbMax);

extern "C" __declspec(dllimport) HRESULT __stdcall CoCreateGuid(GUID  *pguid);

extern "C" __declspec(dllimport) BOOL __stdcall CoFileTimeToDosDateTime(
                 FILETIME * lpFileTime, LPWORD lpDosDate, LPWORD lpDosTime);
extern "C" __declspec(dllimport) BOOL __stdcall CoDosDateTimeToFileTime(
                       WORD nDosDate, WORD nDosTime, FILETIME * lpFileTime);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoFileTimeNow( FILETIME * lpFileTime );


extern "C" __declspec(dllimport) HRESULT __stdcall CoRegisterMessageFilter( LPMESSAGEFILTER lpMessageFilter,
                                LPMESSAGEFILTER * lplpMessageFilter );



#line 744 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"




extern "C" __declspec(dllimport) HRESULT __stdcall CoGetTreatAsClass(const CLSID & clsidOld, LPCLSID pClsidNew);
extern "C" __declspec(dllimport) HRESULT __stdcall CoTreatAsClass(const CLSID & clsidOld, const CLSID & clsidNew);










typedef HRESULT (__stdcall * LPFNGETCLASSOBJECT) (const CLSID &, const IID &, LPVOID *);





typedef HRESULT (__stdcall * LPFNCANUNLOADNOW)(void);


extern "C" HRESULT __stdcall  DllGetClassObject(const CLSID & rclsid, const IID & riid, LPVOID * ppv);

extern "C" HRESULT __stdcall  DllCanUnloadNow(void);



extern "C" __declspec(dllimport) LPVOID __stdcall CoTaskMemAlloc(ULONG cb);
extern "C" __declspec(dllimport) LPVOID __stdcall CoTaskMemRealloc(LPVOID pv, ULONG cb);
extern "C" __declspec(dllimport) void __stdcall   CoTaskMemFree(LPVOID pv);




extern "C" __declspec(dllimport) HRESULT __stdcall CreateDataAdviseHolder(LPDATAADVISEHOLDER * ppDAHolder);

extern "C" __declspec(dllimport) HRESULT __stdcall CreateDataCache(LPUNKNOWN pUnkOuter, const CLSID & rclsid,
                                        const IID & iid, LPVOID * ppv);







extern "C" __declspec(dllimport) HRESULT __stdcall StgCreateDocfile(const OLECHAR * pwcsName,
            DWORD grfMode,
            DWORD reserved,
            IStorage  *  *ppstgOpen);

extern "C" __declspec(dllimport) HRESULT __stdcall StgCreateDocfileOnILockBytes(ILockBytes  *plkbyt,
                    DWORD grfMode,
                    DWORD reserved,
                    IStorage  *  *ppstgOpen);

extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenStorage(const OLECHAR * pwcsName,
              IStorage  *pstgPriority,
              DWORD grfMode,
              SNB snbExclude,
              DWORD reserved,
              IStorage  *  *ppstgOpen);
extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenStorageOnILockBytes(ILockBytes  *plkbyt,
                  IStorage  *pstgPriority,
                  DWORD grfMode,
                  SNB snbExclude,
                  DWORD reserved,
                  IStorage  *  *ppstgOpen);

extern "C" __declspec(dllimport) HRESULT __stdcall StgIsStorageFile(const OLECHAR * pwcsName);
extern "C" __declspec(dllimport) HRESULT __stdcall StgIsStorageILockBytes(ILockBytes * plkbyt);

extern "C" __declspec(dllimport) HRESULT __stdcall StgSetTimes(OLECHAR const * lpszName,
                   FILETIME const * pctime,
                   FILETIME const * patime,
                   FILETIME const * pmtime);

extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenAsyncDocfileOnIFillLockBytes( IFillLockBytes *pflb,
             DWORD grfMode,
             DWORD asyncFlags,
             IStorage **ppstgOpen);

extern "C" __declspec(dllimport) HRESULT __stdcall StgGetIFillLockBytesOnILockBytes( ILockBytes *pilb,
             IFillLockBytes **ppflb);

extern "C" __declspec(dllimport) HRESULT __stdcall StgGetIFillLockBytesOnFile(OLECHAR const *pwcsName,
             IFillLockBytes **ppflb);


extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenLayoutDocfile(OLECHAR const *pwcsDfName,
             DWORD grfMode,
             DWORD reserved,
             IStorage **ppstgOpen);

extern "C" __declspec(dllimport) HRESULT __stdcall StgCreateStorageEx (const WCHAR* pwcsName,
            DWORD grfMode,
            DWORD stgfmt,              
            DWORD grfAttrs,             
            void * reserved1,
            void * reserved2,
            const IID & riid,
            void ** ppObjectOpen);

extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenStorageEx (const WCHAR* pwcsName,
            DWORD grfMode,
            DWORD stgfmt,              
            DWORD grfAttrs,             
            void * reserved1,
            void * reserved2,
            const IID & riid,
            void ** ppObjectOpen);






extern "C" __declspec(dllimport) HRESULT __stdcall  BindMoniker(LPMONIKER pmk, DWORD grfOpt, const IID & iidResult, LPVOID * ppvResult);

extern "C" __declspec(dllimport) HRESULT __stdcall  CoInstall(
    IBindCtx     * pbc,
    DWORD          dwFlags,
    uCLSSPEC     * pClassSpec,
    QUERYCONTEXT * pQuery,
    LPWSTR         pszCodeBase);

extern "C" __declspec(dllimport) HRESULT __stdcall  CoGetObject(LPCWSTR pszName, BIND_OPTS *pBindOptions, const IID & riid, void **ppv);
extern "C" __declspec(dllimport) HRESULT __stdcall  MkParseDisplayName(LPBC pbc, LPCOLESTR szUserName,
                ULONG  * pchEaten, LPMONIKER  * ppmk);
extern "C" __declspec(dllimport) HRESULT __stdcall  MonikerRelativePathTo(LPMONIKER pmkSrc, LPMONIKER pmkDest, LPMONIKER
                * ppmkRelPath, BOOL dwReserved);
extern "C" __declspec(dllimport) HRESULT __stdcall  MonikerCommonPrefixWith(LPMONIKER pmkThis, LPMONIKER pmkOther,
                LPMONIKER * ppmkCommon);
extern "C" __declspec(dllimport) HRESULT __stdcall  CreateBindCtx(DWORD reserved, LPBC * ppbc);
extern "C" __declspec(dllimport) HRESULT __stdcall  CreateGenericComposite(LPMONIKER pmkFirst, LPMONIKER pmkRest,
    LPMONIKER * ppmkComposite);
extern "C" __declspec(dllimport) HRESULT __stdcall  GetClassFile (LPCOLESTR szFilename, CLSID * pclsid);

extern "C" __declspec(dllimport) HRESULT __stdcall  CreateClassMoniker(const CLSID & rclsid, LPMONIKER * ppmk);

extern "C" __declspec(dllimport) HRESULT __stdcall  CreateFileMoniker(LPCOLESTR lpszPathName, LPMONIKER * ppmk);

extern "C" __declspec(dllimport) HRESULT __stdcall  CreateItemMoniker(LPCOLESTR lpszDelim, LPCOLESTR lpszItem,
    LPMONIKER * ppmk);
extern "C" __declspec(dllimport) HRESULT __stdcall  CreateAntiMoniker(LPMONIKER * ppmk);
extern "C" __declspec(dllimport) HRESULT __stdcall  CreatePointerMoniker(LPUNKNOWN punk, LPMONIKER * ppmk);

extern "C" __declspec(dllimport) HRESULT __stdcall  GetRunningObjectTable( DWORD reserved, LPRUNNINGOBJECTTABLE * pprot);

#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"











#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"
















#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"





































































































































































































#line 13 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 14 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"


#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"







































































































































































































































































































































































































































#line 425 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"

#line 17 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"
#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"





extern "C"{
#line 25 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"

 



typedef struct IPersistMoniker IPersistMoniker;
#line 32 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




typedef struct IBindProtocol IBindProtocol;
#line 38 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




typedef struct IBinding IBinding;
#line 44 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




typedef struct IBindStatusCallback IBindStatusCallback;
#line 50 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




typedef struct IAuthenticate IAuthenticate;
#line 56 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




typedef struct IHttpNegotiate IHttpNegotiate;
#line 62 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




typedef struct IWindowForBindingUI IWindowForBindingUI;
#line 68 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




typedef struct ICodeInstall ICodeInstall;
#line 74 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




typedef struct IWinInetInfo IWinInetInfo;
#line 80 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




typedef struct IHttpSecurity IHttpSecurity;
#line 86 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




typedef struct IWinInetHttpInfo IWinInetHttpInfo;
#line 92 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




typedef struct IBindHost IBindHost;
#line 98 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




typedef struct IInternet IInternet;
#line 104 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




typedef struct IInternetBindInfo IInternetBindInfo;
#line 110 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




typedef struct IInternetProtocolRoot IInternetProtocolRoot;
#line 116 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




typedef struct IInternetProtocol IInternetProtocol;
#line 122 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




typedef struct IInternetProtocolSink IInternetProtocolSink;
#line 128 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




typedef struct IInternetSession IInternetSession;
#line 134 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




typedef struct IInternetThreadSwitch IInternetThreadSwitch;
#line 140 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




typedef struct IInternetPriority IInternetPriority;
#line 146 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




typedef struct IInternetProtocolInfo IInternetProtocolInfo;
#line 152 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




typedef struct IInternetSecurityMgrSite IInternetSecurityMgrSite;
#line 158 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




typedef struct IInternetSecurityManager IInternetSecurityManager;
#line 164 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




typedef struct IInternetHostSecurityManager IInternetHostSecurityManager;
#line 170 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




typedef struct IInternetZoneManager IInternetZoneManager;
#line 176 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




typedef struct ISoftDistExt ISoftDistExt;
#line 182 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




typedef struct IDataFilter IDataFilter;
#line 188 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




typedef struct IEncodingFilterFactory IEncodingFilterFactory;
#line 194 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"



#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"


















#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"
















#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"





































































































































































































#line 20 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"







#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"







































































































































































































































































































































































































































#line 425 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"

#line 29 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"
#line 30 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 198 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"


















#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"
















#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"





































































































































































































#line 20 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"







#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"







































































































































































































































































































































































































































#line 425 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"

#line 29 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"
#line 30 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"





extern "C"{
#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"

 



typedef struct IOleAdviseHolder IOleAdviseHolder;
#line 44 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"




typedef struct IOleCache IOleCache;
#line 50 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"




typedef struct IOleCache2 IOleCache2;
#line 56 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"




typedef struct IOleCacheControl IOleCacheControl;
#line 62 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"




typedef struct IParseDisplayName IParseDisplayName;
#line 68 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"




typedef struct IOleContainer IOleContainer;
#line 74 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"




typedef struct IOleClientSite IOleClientSite;
#line 80 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"




typedef struct IOleObject IOleObject;
#line 86 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"




typedef struct IOleWindow IOleWindow;
#line 92 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"




typedef struct IOleLink IOleLink;
#line 98 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"




typedef struct IOleItemContainer IOleItemContainer;
#line 104 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"




typedef struct IOleInPlaceUIWindow IOleInPlaceUIWindow;
#line 110 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"




typedef struct IOleInPlaceActiveObject IOleInPlaceActiveObject;
#line 116 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"




typedef struct IOleInPlaceFrame IOleInPlaceFrame;
#line 122 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"




typedef struct IOleInPlaceObject IOleInPlaceObject;
#line 128 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"




typedef struct IOleInPlaceSite IOleInPlaceSite;
#line 134 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"




typedef struct IContinue IContinue;
#line 140 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"




typedef struct IViewObject IViewObject;
#line 146 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"




typedef struct IViewObject2 IViewObject2;
#line 152 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"




typedef struct IDropSource IDropSource;
#line 158 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"




typedef struct IDropTarget IDropTarget;
#line 164 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"




typedef struct IEnumOLEVERB IEnumOLEVERB;
#line 170 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"



#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"


















#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"
















#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"





































































































































































































#line 20 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"







#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"







































































































































































































































































































































































































































#line 425 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"

#line 29 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"
#line 30 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 174 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"

void  * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void  * ); 






 












extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_v0_0_s_ifspec;









 


typedef  IOleAdviseHolder  *LPOLEADVISEHOLDER;


extern "C" const IID IID_IOleAdviseHolder;


    
    struct __declspec(uuid("00000111-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleAdviseHolder : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Advise( 
             IAdviseSink  *pAdvise,
             DWORD  *pdwConnection) = 0;
        
        virtual HRESULT __stdcall Unadvise( 
             DWORD dwConnection) = 0;
        
        virtual HRESULT __stdcall EnumAdvise( 
             IEnumSTATDATA  * *ppenumAdvise) = 0;
        
        virtual HRESULT __stdcall SendOnRename( 
             IMoniker  *pmk) = 0;
        
        virtual HRESULT __stdcall SendOnSave( void) = 0;
        
        virtual HRESULT __stdcall SendOnClose( void) = 0;
        
    };
    




















































































#line 325 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"



HRESULT __stdcall IOleAdviseHolder_Advise_Proxy( 
    IOleAdviseHolder  * This,
     IAdviseSink  *pAdvise,
     DWORD  *pdwConnection);


void __stdcall IOleAdviseHolder_Advise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleAdviseHolder_Unadvise_Proxy( 
    IOleAdviseHolder  * This,
     DWORD dwConnection);


void __stdcall IOleAdviseHolder_Unadvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleAdviseHolder_EnumAdvise_Proxy( 
    IOleAdviseHolder  * This,
     IEnumSTATDATA  * *ppenumAdvise);


void __stdcall IOleAdviseHolder_EnumAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleAdviseHolder_SendOnRename_Proxy( 
    IOleAdviseHolder  * This,
     IMoniker  *pmk);


void __stdcall IOleAdviseHolder_SendOnRename_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleAdviseHolder_SendOnSave_Proxy( 
    IOleAdviseHolder  * This);


void __stdcall IOleAdviseHolder_SendOnSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleAdviseHolder_SendOnClose_Proxy( 
    IOleAdviseHolder  * This);


void __stdcall IOleAdviseHolder_SendOnClose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 401 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"










 


typedef  IOleCache  *LPOLECACHE;


extern "C" const IID IID_IOleCache;


    
    struct __declspec(uuid("0000011e-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleCache : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Cache( 
             FORMATETC  *pformatetc,
             DWORD advf,
             DWORD  *pdwConnection) = 0;
        
        virtual HRESULT __stdcall Uncache( 
             DWORD dwConnection) = 0;
        
        virtual HRESULT __stdcall EnumCache( 
             IEnumSTATDATA  * *ppenumSTATDATA) = 0;
        
        virtual HRESULT __stdcall InitCache( 
             IDataObject  *pDataObject) = 0;
        
        virtual HRESULT __stdcall SetData( 
             FORMATETC  *pformatetc,
             STGMEDIUM  *pmedium,
             BOOL fRelease) = 0;
        
    };
    


















































































#line 529 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"



HRESULT __stdcall IOleCache_Cache_Proxy( 
    IOleCache  * This,
     FORMATETC  *pformatetc,
     DWORD advf,
     DWORD  *pdwConnection);


void __stdcall IOleCache_Cache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleCache_Uncache_Proxy( 
    IOleCache  * This,
     DWORD dwConnection);


void __stdcall IOleCache_Uncache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleCache_EnumCache_Proxy( 
    IOleCache  * This,
     IEnumSTATDATA  * *ppenumSTATDATA);


void __stdcall IOleCache_EnumCache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleCache_InitCache_Proxy( 
    IOleCache  * This,
     IDataObject  *pDataObject);


void __stdcall IOleCache_InitCache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleCache_SetData_Proxy( 
    IOleCache  * This,
     FORMATETC  *pformatetc,
     STGMEDIUM  *pmedium,
     BOOL fRelease);


void __stdcall IOleCache_SetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 598 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"










 


typedef  IOleCache2  *LPOLECACHE2;



















typedef  
enum tagDISCARDCACHE
    {	DISCARDCACHE_SAVEIFDIRTY	= 0,
	DISCARDCACHE_NOSAVE	= 1
    }	DISCARDCACHE;


extern "C" const IID IID_IOleCache2;


    
    struct __declspec(uuid("00000128-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleCache2 : public IOleCache
    {
    public:
        virtual  HRESULT __stdcall UpdateCache( 
             LPDATAOBJECT pDataObject,
             DWORD grfUpdf,
             LPVOID pReserved) = 0;
        
        virtual HRESULT __stdcall DiscardCache( 
             DWORD dwDiscardOptions) = 0;
        
    };
    



































































































#line 756 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"



 HRESULT __stdcall IOleCache2_RemoteUpdateCache_Proxy( 
    IOleCache2  * This,
     LPDATAOBJECT pDataObject,
     DWORD grfUpdf,
     DWORD pReserved);


void __stdcall IOleCache2_RemoteUpdateCache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleCache2_DiscardCache_Proxy( 
    IOleCache2  * This,
     DWORD dwDiscardOptions);


void __stdcall IOleCache2_DiscardCache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 787 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"










 


typedef  IOleCacheControl  *LPOLECACHECONTROL;


extern "C" const IID IID_IOleCacheControl;


    
    struct __declspec(uuid("00000129-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleCacheControl : public IUnknown
    {
    public:
        virtual HRESULT __stdcall OnRun( 
            LPDATAOBJECT pDataObject) = 0;
        
        virtual HRESULT __stdcall OnStop( void) = 0;
        
    };
    
























































#line 875 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"



HRESULT __stdcall IOleCacheControl_OnRun_Proxy( 
    IOleCacheControl  * This,
    LPDATAOBJECT pDataObject);


void __stdcall IOleCacheControl_OnRun_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleCacheControl_OnStop_Proxy( 
    IOleCacheControl  * This);


void __stdcall IOleCacheControl_OnStop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 903 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"










 


typedef  IParseDisplayName  *LPPARSEDISPLAYNAME;


extern "C" const IID IID_IParseDisplayName;


    
    struct __declspec(uuid("0000011a-0000-0000-C000-000000000046")) __declspec(novtable)
    IParseDisplayName : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ParseDisplayName( 
             IBindCtx  *pbc,
             LPOLESTR pszDisplayName,
             ULONG  *pchEaten,
             IMoniker  * *ppmkOut) = 0;
        
    };
    





















































#line 989 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"



HRESULT __stdcall IParseDisplayName_ParseDisplayName_Proxy( 
    IParseDisplayName  * This,
     IBindCtx  *pbc,
     LPOLESTR pszDisplayName,
     ULONG  *pchEaten,
     IMoniker  * *ppmkOut);


void __stdcall IParseDisplayName_ParseDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1009 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"










 


typedef  IOleContainer  *LPOLECONTAINER;


extern "C" const IID IID_IOleContainer;


    
    struct __declspec(uuid("0000011b-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleContainer : public IParseDisplayName
    {
    public:
        virtual HRESULT __stdcall EnumObjects( 
             DWORD grfFlags,
             IEnumUnknown  * *ppenum) = 0;
        
        virtual HRESULT __stdcall LockContainer( 
             BOOL fLock) = 0;
        
    };
    





































































#line 1112 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"



HRESULT __stdcall IOleContainer_EnumObjects_Proxy( 
    IOleContainer  * This,
     DWORD grfFlags,
     IEnumUnknown  * *ppenum);


void __stdcall IOleContainer_EnumObjects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleContainer_LockContainer_Proxy( 
    IOleContainer  * This,
     BOOL fLock);


void __stdcall IOleContainer_LockContainer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1142 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"










 


typedef  IOleClientSite  *LPOLECLIENTSITE;


extern "C" const IID IID_IOleClientSite;


    
    struct __declspec(uuid("00000118-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleClientSite : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SaveObject( void) = 0;
        
        virtual HRESULT __stdcall GetMoniker( 
             DWORD dwAssign,
             DWORD dwWhichMoniker,
             IMoniker  * *ppmk) = 0;
        
        virtual HRESULT __stdcall GetContainer( 
             IOleContainer  * *ppContainer) = 0;
        
        virtual HRESULT __stdcall ShowObject( void) = 0;
        
        virtual HRESULT __stdcall OnShowWindow( 
             BOOL fShow) = 0;
        
        virtual HRESULT __stdcall RequestNewObjectLayout( void) = 0;
        
    };
    




















































































#line 1270 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"



HRESULT __stdcall IOleClientSite_SaveObject_Proxy( 
    IOleClientSite  * This);


void __stdcall IOleClientSite_SaveObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleClientSite_GetMoniker_Proxy( 
    IOleClientSite  * This,
     DWORD dwAssign,
     DWORD dwWhichMoniker,
     IMoniker  * *ppmk);


void __stdcall IOleClientSite_GetMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleClientSite_GetContainer_Proxy( 
    IOleClientSite  * This,
     IOleContainer  * *ppContainer);


void __stdcall IOleClientSite_GetContainer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleClientSite_ShowObject_Proxy( 
    IOleClientSite  * This);


void __stdcall IOleClientSite_ShowObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleClientSite_OnShowWindow_Proxy( 
    IOleClientSite  * This,
     BOOL fShow);


void __stdcall IOleClientSite_OnShowWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleClientSite_RequestNewObjectLayout_Proxy( 
    IOleClientSite  * This);


void __stdcall IOleClientSite_RequestNewObjectLayout_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1346 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"










 


typedef  IOleObject  *LPOLEOBJECT;

typedef 
enum tagOLEGETMONIKER
    {	OLEGETMONIKER_ONLYIFTHERE	= 1,
	OLEGETMONIKER_FORCEASSIGN	= 2,
	OLEGETMONIKER_UNASSIGN	= 3,
	OLEGETMONIKER_TEMPFORUSER	= 4
    }	OLEGETMONIKER;

typedef 
enum tagOLEWHICHMK
    {	OLEWHICHMK_CONTAINER	= 1,
	OLEWHICHMK_OBJREL	= 2,
	OLEWHICHMK_OBJFULL	= 3
    }	OLEWHICHMK;

typedef 
enum tagUSERCLASSTYPE
    {	USERCLASSTYPE_FULL	= 1,
	USERCLASSTYPE_SHORT	= 2,
	USERCLASSTYPE_APPNAME	= 3
    }	USERCLASSTYPE;

typedef 
enum tagOLEMISC
    {	OLEMISC_RECOMPOSEONRESIZE	= 0x1,
	OLEMISC_ONLYICONIC	= 0x2,
	OLEMISC_INSERTNOTREPLACE	= 0x4,
	OLEMISC_STATIC	= 0x8,
	OLEMISC_CANTLINKINSIDE	= 0x10,
	OLEMISC_CANLINKBYOLE1	= 0x20,
	OLEMISC_ISLINKOBJECT	= 0x40,
	OLEMISC_INSIDEOUT	= 0x80,
	OLEMISC_ACTIVATEWHENVISIBLE	= 0x100,
	OLEMISC_RENDERINGISDEVICEINDEPENDENT	= 0x200,
	OLEMISC_INVISIBLEATRUNTIME	= 0x400,
	OLEMISC_ALWAYSRUN	= 0x800,
	OLEMISC_ACTSLIKEBUTTON	= 0x1000,
	OLEMISC_ACTSLIKELABEL	= 0x2000,
	OLEMISC_NOUIACTIVATE	= 0x4000,
	OLEMISC_ALIGNABLE	= 0x8000,
	OLEMISC_SIMPLEFRAME	= 0x10000,
	OLEMISC_SETCLIENTSITEFIRST	= 0x20000,
	OLEMISC_IMEMODE	= 0x40000,
	OLEMISC_IGNOREACTIVATEWHENVISIBLE	= 0x80000,
	OLEMISC_WANTSTOMENUMERGE	= 0x100000,
	OLEMISC_SUPPORTSMULTILEVELUNDO	= 0x200000
    }	OLEMISC;

typedef 
enum tagOLECLOSE
    {	OLECLOSE_SAVEIFDIRTY	= 0,
	OLECLOSE_NOSAVE	= 1,
	OLECLOSE_PROMPTSAVE	= 2
    }	OLECLOSE;


extern "C" const IID IID_IOleObject;


    
    struct __declspec(uuid("00000112-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleObject : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetClientSite( 
             IOleClientSite  *pClientSite) = 0;
        
        virtual HRESULT __stdcall GetClientSite( 
             IOleClientSite  * *ppClientSite) = 0;
        
        virtual HRESULT __stdcall SetHostNames( 
             LPCOLESTR szContainerApp,
             LPCOLESTR szContainerObj) = 0;
        
        virtual HRESULT __stdcall Close( 
             DWORD dwSaveOption) = 0;
        
        virtual HRESULT __stdcall SetMoniker( 
             DWORD dwWhichMoniker,
             IMoniker  *pmk) = 0;
        
        virtual HRESULT __stdcall GetMoniker( 
             DWORD dwAssign,
             DWORD dwWhichMoniker,
             IMoniker  * *ppmk) = 0;
        
        virtual HRESULT __stdcall InitFromData( 
             IDataObject  *pDataObject,
             BOOL fCreation,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall GetClipboardData( 
             DWORD dwReserved,
             IDataObject  * *ppDataObject) = 0;
        
        virtual HRESULT __stdcall DoVerb( 
             LONG iVerb,
             LPMSG lpmsg,
             IOleClientSite  *pActiveSite,
             LONG lindex,
             HWND hwndParent,
             LPCRECT lprcPosRect) = 0;
        
        virtual HRESULT __stdcall EnumVerbs( 
             IEnumOLEVERB  * *ppEnumOleVerb) = 0;
        
        virtual HRESULT __stdcall Update( void) = 0;
        
        virtual HRESULT __stdcall IsUpToDate( void) = 0;
        
        virtual HRESULT __stdcall GetUserClassID( 
             CLSID  *pClsid) = 0;
        
        virtual HRESULT __stdcall GetUserType( 
             DWORD dwFormOfType,
             LPOLESTR  *pszUserType) = 0;
        
        virtual HRESULT __stdcall SetExtent( 
             DWORD dwDrawAspect,
             SIZEL  *psizel) = 0;
        
        virtual HRESULT __stdcall GetExtent( 
             DWORD dwDrawAspect,
             SIZEL  *psizel) = 0;
        
        virtual HRESULT __stdcall Advise( 
             IAdviseSink  *pAdvSink,
             DWORD  *pdwConnection) = 0;
        
        virtual HRESULT __stdcall Unadvise( 
             DWORD dwConnection) = 0;
        
        virtual HRESULT __stdcall EnumAdvise( 
             IEnumSTATDATA  * *ppenumAdvise) = 0;
        
        virtual HRESULT __stdcall GetMiscStatus( 
             DWORD dwAspect,
             DWORD  *pdwStatus) = 0;
        
        virtual HRESULT __stdcall SetColorScheme( 
             LOGPALETTE  *pLogpal) = 0;
        
    };
    













































































































































































































#line 1711 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"



HRESULT __stdcall IOleObject_SetClientSite_Proxy( 
    IOleObject  * This,
     IOleClientSite  *pClientSite);


void __stdcall IOleObject_SetClientSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_GetClientSite_Proxy( 
    IOleObject  * This,
     IOleClientSite  * *ppClientSite);


void __stdcall IOleObject_GetClientSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_SetHostNames_Proxy( 
    IOleObject  * This,
     LPCOLESTR szContainerApp,
     LPCOLESTR szContainerObj);


void __stdcall IOleObject_SetHostNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_Close_Proxy( 
    IOleObject  * This,
     DWORD dwSaveOption);


void __stdcall IOleObject_Close_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_SetMoniker_Proxy( 
    IOleObject  * This,
     DWORD dwWhichMoniker,
     IMoniker  *pmk);


void __stdcall IOleObject_SetMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_GetMoniker_Proxy( 
    IOleObject  * This,
     DWORD dwAssign,
     DWORD dwWhichMoniker,
     IMoniker  * *ppmk);


void __stdcall IOleObject_GetMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_InitFromData_Proxy( 
    IOleObject  * This,
     IDataObject  *pDataObject,
     BOOL fCreation,
     DWORD dwReserved);


void __stdcall IOleObject_InitFromData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_GetClipboardData_Proxy( 
    IOleObject  * This,
     DWORD dwReserved,
     IDataObject  * *ppDataObject);


void __stdcall IOleObject_GetClipboardData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_DoVerb_Proxy( 
    IOleObject  * This,
     LONG iVerb,
     LPMSG lpmsg,
     IOleClientSite  *pActiveSite,
     LONG lindex,
     HWND hwndParent,
     LPCRECT lprcPosRect);


void __stdcall IOleObject_DoVerb_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_EnumVerbs_Proxy( 
    IOleObject  * This,
     IEnumOLEVERB  * *ppEnumOleVerb);


void __stdcall IOleObject_EnumVerbs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_Update_Proxy( 
    IOleObject  * This);


void __stdcall IOleObject_Update_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_IsUpToDate_Proxy( 
    IOleObject  * This);


void __stdcall IOleObject_IsUpToDate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_GetUserClassID_Proxy( 
    IOleObject  * This,
     CLSID  *pClsid);


void __stdcall IOleObject_GetUserClassID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_GetUserType_Proxy( 
    IOleObject  * This,
     DWORD dwFormOfType,
     LPOLESTR  *pszUserType);


void __stdcall IOleObject_GetUserType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_SetExtent_Proxy( 
    IOleObject  * This,
     DWORD dwDrawAspect,
     SIZEL  *psizel);


void __stdcall IOleObject_SetExtent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_GetExtent_Proxy( 
    IOleObject  * This,
     DWORD dwDrawAspect,
     SIZEL  *psizel);


void __stdcall IOleObject_GetExtent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_Advise_Proxy( 
    IOleObject  * This,
     IAdviseSink  *pAdvSink,
     DWORD  *pdwConnection);


void __stdcall IOleObject_Advise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_Unadvise_Proxy( 
    IOleObject  * This,
     DWORD dwConnection);


void __stdcall IOleObject_Unadvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_EnumAdvise_Proxy( 
    IOleObject  * This,
     IEnumSTATDATA  * *ppenumAdvise);


void __stdcall IOleObject_EnumAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_GetMiscStatus_Proxy( 
    IOleObject  * This,
     DWORD dwAspect,
     DWORD  *pdwStatus);


void __stdcall IOleObject_GetMiscStatus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_SetColorScheme_Proxy( 
    IOleObject  * This,
     LOGPALETTE  *pLogpal);


void __stdcall IOleObject_SetColorScheme_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1983 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"










 


typedef 
enum tagOLERENDER
    {	OLERENDER_NONE	= 0,
	OLERENDER_DRAW	= 1,
	OLERENDER_FORMAT	= 2,
	OLERENDER_ASIS	= 3
    }	OLERENDER;

typedef OLERENDER  *LPOLERENDER;

typedef struct  tagOBJECTDESCRIPTOR
    {
    ULONG cbSize;
    CLSID clsid;
    DWORD dwDrawAspect;
    SIZEL sizel;
    POINTL pointl;
    DWORD dwStatus;
    DWORD dwFullUserTypeName;
    DWORD dwSrcOfCopy;
    }	OBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR  *POBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR  *LPOBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR LINKSRCDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR  *PLINKSRCDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR  *LPLINKSRCDESCRIPTOR;



extern RPC_IF_HANDLE IOLETypes_v0_0_c_ifspec;
extern RPC_IF_HANDLE IOLETypes_v0_0_s_ifspec;
#line 2033 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"









 


typedef  IOleWindow  *LPOLEWINDOW;


extern "C" const IID IID_IOleWindow;


    
    struct __declspec(uuid("00000114-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleWindow : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall GetWindow( 
             HWND  *phwnd) = 0;
        
        virtual HRESULT __stdcall ContextSensitiveHelp( 
             BOOL fEnterMode) = 0;
        
    };
    

























































#line 2122 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"



 HRESULT __stdcall IOleWindow_GetWindow_Proxy( 
    IOleWindow  * This,
     HWND  *phwnd);


void __stdcall IOleWindow_GetWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleWindow_ContextSensitiveHelp_Proxy( 
    IOleWindow  * This,
     BOOL fEnterMode);


void __stdcall IOleWindow_ContextSensitiveHelp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2151 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"










 


typedef  IOleLink  *LPOLELINK;

typedef 
enum tagOLEUPDATE
    {	OLEUPDATE_ALWAYS	= 1,
	OLEUPDATE_ONCALL	= 3
    }	OLEUPDATE;

typedef OLEUPDATE  *LPOLEUPDATE;

typedef OLEUPDATE  *POLEUPDATE;

typedef 
enum tagOLELINKBIND
    {	OLELINKBIND_EVENIFCLASSDIFF	= 1
    }	OLELINKBIND;


extern "C" const IID IID_IOleLink;


    
    struct __declspec(uuid("0000011d-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleLink : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetUpdateOptions( 
             DWORD dwUpdateOpt) = 0;
        
        virtual HRESULT __stdcall GetUpdateOptions( 
             DWORD  *pdwUpdateOpt) = 0;
        
        virtual HRESULT __stdcall SetSourceMoniker( 
             IMoniker  *pmk,
             const CLSID & rclsid) = 0;
        
        virtual HRESULT __stdcall GetSourceMoniker( 
             IMoniker  * *ppmk) = 0;
        
        virtual HRESULT __stdcall SetSourceDisplayName( 
             LPCOLESTR pszStatusText) = 0;
        
        virtual HRESULT __stdcall GetSourceDisplayName( 
             LPOLESTR  *ppszDisplayName) = 0;
        
        virtual HRESULT __stdcall BindToSource( 
             DWORD bindflags,
             IBindCtx  *pbc) = 0;
        
        virtual HRESULT __stdcall BindIfRunning( void) = 0;
        
        virtual HRESULT __stdcall GetBoundSource( 
             IUnknown  * *ppunk) = 0;
        
        virtual HRESULT __stdcall UnbindSource( void) = 0;
        
        virtual HRESULT __stdcall Update( 
             IBindCtx  *pbc) = 0;
        
    };
    
























































































































#line 2346 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"



HRESULT __stdcall IOleLink_SetUpdateOptions_Proxy( 
    IOleLink  * This,
     DWORD dwUpdateOpt);


void __stdcall IOleLink_SetUpdateOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_GetUpdateOptions_Proxy( 
    IOleLink  * This,
     DWORD  *pdwUpdateOpt);


void __stdcall IOleLink_GetUpdateOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_SetSourceMoniker_Proxy( 
    IOleLink  * This,
     IMoniker  *pmk,
     const CLSID & rclsid);


void __stdcall IOleLink_SetSourceMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_GetSourceMoniker_Proxy( 
    IOleLink  * This,
     IMoniker  * *ppmk);


void __stdcall IOleLink_GetSourceMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_SetSourceDisplayName_Proxy( 
    IOleLink  * This,
     LPCOLESTR pszStatusText);


void __stdcall IOleLink_SetSourceDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_GetSourceDisplayName_Proxy( 
    IOleLink  * This,
     LPOLESTR  *ppszDisplayName);


void __stdcall IOleLink_GetSourceDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_BindToSource_Proxy( 
    IOleLink  * This,
     DWORD bindflags,
     IBindCtx  *pbc);


void __stdcall IOleLink_BindToSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_BindIfRunning_Proxy( 
    IOleLink  * This);


void __stdcall IOleLink_BindIfRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_GetBoundSource_Proxy( 
    IOleLink  * This,
     IUnknown  * *ppunk);


void __stdcall IOleLink_GetBoundSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_UnbindSource_Proxy( 
    IOleLink  * This);


void __stdcall IOleLink_UnbindSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_Update_Proxy( 
    IOleLink  * This,
     IBindCtx  *pbc);


void __stdcall IOleLink_Update_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2483 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"










 


typedef  IOleItemContainer  *LPOLEITEMCONTAINER;

typedef 
enum tagBINDSPEED
    {	BINDSPEED_INDEFINITE	= 1,
	BINDSPEED_MODERATE	= 2,
	BINDSPEED_IMMEDIATE	= 3
    }	BINDSPEED;

typedef  
enum tagOLECONTF
    {	OLECONTF_EMBEDDINGS	= 1,
	OLECONTF_LINKS	= 2,
	OLECONTF_OTHERS	= 4,
	OLECONTF_ONLYUSER	= 8,
	OLECONTF_ONLYIFRUNNING	= 16
    }	OLECONTF;


extern "C" const IID IID_IOleItemContainer;


    
    struct __declspec(uuid("0000011c-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleItemContainer : public IOleContainer
    {
    public:
        virtual HRESULT __stdcall GetObjectA( 
             LPOLESTR pszItem,
             DWORD dwSpeedNeeded,
             IBindCtx  *pbc,
             const IID & riid,
             void  * *ppvObject) = 0;
        
        virtual HRESULT __stdcall GetObjectStorage( 
             LPOLESTR pszItem,
             IBindCtx  *pbc,
             const IID & riid,
             void  * *ppvStorage) = 0;
        
        virtual HRESULT __stdcall IsRunning( 
             LPOLESTR pszItem) = 0;
        
    };
    


































































































#line 2640 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"



HRESULT __stdcall IOleItemContainer_GetObject_Proxy( 
    IOleItemContainer  * This,
     LPOLESTR pszItem,
     DWORD dwSpeedNeeded,
     IBindCtx  *pbc,
     const IID & riid,
     void  * *ppvObject);


void __stdcall IOleItemContainer_GetObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleItemContainer_GetObjectStorage_Proxy( 
    IOleItemContainer  * This,
     LPOLESTR pszItem,
     IBindCtx  *pbc,
     const IID & riid,
     void  * *ppvStorage);


void __stdcall IOleItemContainer_GetObjectStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleItemContainer_IsRunning_Proxy( 
    IOleItemContainer  * This,
     LPOLESTR pszItem);


void __stdcall IOleItemContainer_IsRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2688 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"










 


typedef  IOleInPlaceUIWindow  *LPOLEINPLACEUIWINDOW;

typedef RECT BORDERWIDTHS;

typedef LPRECT LPBORDERWIDTHS;

typedef LPCRECT LPCBORDERWIDTHS;


extern "C" const IID IID_IOleInPlaceUIWindow;


    
    struct __declspec(uuid("00000115-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleInPlaceUIWindow : public IOleWindow
    {
    public:
        virtual  HRESULT __stdcall GetBorder( 
             LPRECT lprectBorder) = 0;
        
        virtual  HRESULT __stdcall RequestBorderSpace( 
             LPCBORDERWIDTHS pborderwidths) = 0;
        
        virtual  HRESULT __stdcall SetBorderSpace( 
             LPCBORDERWIDTHS pborderwidths) = 0;
        
        virtual HRESULT __stdcall SetActiveObject( 
             IOleInPlaceActiveObject  *pActiveObject,
             LPCOLESTR pszObjName) = 0;
        
    };
    























































































#line 2821 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"



 HRESULT __stdcall IOleInPlaceUIWindow_GetBorder_Proxy( 
    IOleInPlaceUIWindow  * This,
     LPRECT lprectBorder);


void __stdcall IOleInPlaceUIWindow_GetBorder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleInPlaceUIWindow_RequestBorderSpace_Proxy( 
    IOleInPlaceUIWindow  * This,
     LPCBORDERWIDTHS pborderwidths);


void __stdcall IOleInPlaceUIWindow_RequestBorderSpace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleInPlaceUIWindow_SetBorderSpace_Proxy( 
    IOleInPlaceUIWindow  * This,
     LPCBORDERWIDTHS pborderwidths);


void __stdcall IOleInPlaceUIWindow_SetBorderSpace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceUIWindow_SetActiveObject_Proxy( 
    IOleInPlaceUIWindow  * This,
     IOleInPlaceActiveObject  *pActiveObject,
     LPCOLESTR pszObjName);


void __stdcall IOleInPlaceUIWindow_SetActiveObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2875 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"










 


typedef  IOleInPlaceActiveObject  *LPOLEINPLACEACTIVEOBJECT;


extern "C" const IID IID_IOleInPlaceActiveObject;


    
    struct __declspec(uuid("00000117-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleInPlaceActiveObject : public IOleWindow
    {
    public:
        virtual  HRESULT __stdcall TranslateAcceleratorA( 
             LPMSG lpmsg) = 0;
        
        virtual  HRESULT __stdcall OnFrameWindowActivate( 
             BOOL fActivate) = 0;
        
        virtual  HRESULT __stdcall OnDocWindowActivate( 
             BOOL fActivate) = 0;
        
        virtual  HRESULT __stdcall ResizeBorder( 
             LPCRECT prcBorder,
             IOleInPlaceUIWindow  *pUIWindow,
             BOOL fFrameWindow) = 0;
        
        virtual HRESULT __stdcall EnableModeless( 
             BOOL fEnable) = 0;
        
    };
    































































































#line 3014 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"



 HRESULT __stdcall IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy( 
    IOleInPlaceActiveObject  * This);


void __stdcall IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleInPlaceActiveObject_OnFrameWindowActivate_Proxy( 
    IOleInPlaceActiveObject  * This,
     BOOL fActivate);


void __stdcall IOleInPlaceActiveObject_OnFrameWindowActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleInPlaceActiveObject_OnDocWindowActivate_Proxy( 
    IOleInPlaceActiveObject  * This,
     BOOL fActivate);


void __stdcall IOleInPlaceActiveObject_OnDocWindowActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleInPlaceActiveObject_RemoteResizeBorder_Proxy( 
    IOleInPlaceActiveObject  * This,
     LPCRECT prcBorder,
     const IID & riid,
     IOleInPlaceUIWindow  *pUIWindow,
     BOOL fFrameWindow);


void __stdcall IOleInPlaceActiveObject_RemoteResizeBorder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceActiveObject_EnableModeless_Proxy( 
    IOleInPlaceActiveObject  * This,
     BOOL fEnable);


void __stdcall IOleInPlaceActiveObject_EnableModeless_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3081 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"










 


typedef  IOleInPlaceFrame  *LPOLEINPLACEFRAME;

typedef struct  tagOIFI
    {
    UINT cb;
    BOOL fMDIApp;
    HWND hwndFrame;
    HACCEL haccel;
    UINT cAccelEntries;
    }	OLEINPLACEFRAMEINFO;

typedef struct tagOIFI  *LPOLEINPLACEFRAMEINFO;

typedef struct  tagOleMenuGroupWidths
    {
    LONG width[ 6 ];
    }	OLEMENUGROUPWIDTHS;

typedef struct tagOleMenuGroupWidths  *LPOLEMENUGROUPWIDTHS;

typedef HGLOBAL HOLEMENU;


extern "C" const IID IID_IOleInPlaceFrame;


    
    struct __declspec(uuid("00000116-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleInPlaceFrame : public IOleInPlaceUIWindow
    {
    public:
        virtual HRESULT __stdcall InsertMenus( 
             HMENU hmenuShared,
             LPOLEMENUGROUPWIDTHS lpMenuWidths) = 0;
        
        virtual  HRESULT __stdcall SetMenu( 
             HMENU hmenuShared,
             HOLEMENU holemenu,
             HWND hwndActiveObject) = 0;
        
        virtual HRESULT __stdcall RemoveMenus( 
             HMENU hmenuShared) = 0;
        
        virtual  HRESULT __stdcall SetStatusText( 
             LPCOLESTR pszStatusText) = 0;
        
        virtual HRESULT __stdcall EnableModeless( 
             BOOL fEnable) = 0;
        
        virtual HRESULT __stdcall TranslateAcceleratorA( 
             LPMSG lpmsg,
             WORD wID) = 0;
        
    };
    






































































































































#line 3284 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"



HRESULT __stdcall IOleInPlaceFrame_InsertMenus_Proxy( 
    IOleInPlaceFrame  * This,
     HMENU hmenuShared,
     LPOLEMENUGROUPWIDTHS lpMenuWidths);


void __stdcall IOleInPlaceFrame_InsertMenus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleInPlaceFrame_SetMenu_Proxy( 
    IOleInPlaceFrame  * This,
     HMENU hmenuShared,
     HOLEMENU holemenu,
     HWND hwndActiveObject);


void __stdcall IOleInPlaceFrame_SetMenu_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceFrame_RemoveMenus_Proxy( 
    IOleInPlaceFrame  * This,
     HMENU hmenuShared);


void __stdcall IOleInPlaceFrame_RemoveMenus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleInPlaceFrame_SetStatusText_Proxy( 
    IOleInPlaceFrame  * This,
     LPCOLESTR pszStatusText);


void __stdcall IOleInPlaceFrame_SetStatusText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceFrame_EnableModeless_Proxy( 
    IOleInPlaceFrame  * This,
     BOOL fEnable);


void __stdcall IOleInPlaceFrame_EnableModeless_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceFrame_TranslateAccelerator_Proxy( 
    IOleInPlaceFrame  * This,
     LPMSG lpmsg,
     WORD wID);


void __stdcall IOleInPlaceFrame_TranslateAccelerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3365 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"










 


typedef  IOleInPlaceObject  *LPOLEINPLACEOBJECT;


extern "C" const IID IID_IOleInPlaceObject;


    
    struct __declspec(uuid("00000113-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleInPlaceObject : public IOleWindow
    {
    public:
        virtual HRESULT __stdcall InPlaceDeactivate( void) = 0;
        
        virtual HRESULT __stdcall UIDeactivate( void) = 0;
        
        virtual  HRESULT __stdcall SetObjectRects( 
             LPCRECT lprcPosRect,
             LPCRECT lprcClipRect) = 0;
        
        virtual HRESULT __stdcall ReactivateAndUndo( void) = 0;
        
    };
    




















































































#line 3486 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"



HRESULT __stdcall IOleInPlaceObject_InPlaceDeactivate_Proxy( 
    IOleInPlaceObject  * This);


void __stdcall IOleInPlaceObject_InPlaceDeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceObject_UIDeactivate_Proxy( 
    IOleInPlaceObject  * This);


void __stdcall IOleInPlaceObject_UIDeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleInPlaceObject_SetObjectRects_Proxy( 
    IOleInPlaceObject  * This,
     LPCRECT lprcPosRect,
     LPCRECT lprcClipRect);


void __stdcall IOleInPlaceObject_SetObjectRects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceObject_ReactivateAndUndo_Proxy( 
    IOleInPlaceObject  * This);


void __stdcall IOleInPlaceObject_ReactivateAndUndo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3537 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"










 


typedef  IOleInPlaceSite  *LPOLEINPLACESITE;


extern "C" const IID IID_IOleInPlaceSite;


    
    struct __declspec(uuid("00000119-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleInPlaceSite : public IOleWindow
    {
    public:
        virtual HRESULT __stdcall CanInPlaceActivate( void) = 0;
        
        virtual HRESULT __stdcall OnInPlaceActivate( void) = 0;
        
        virtual HRESULT __stdcall OnUIActivate( void) = 0;
        
        virtual HRESULT __stdcall GetWindowContext( 
             IOleInPlaceFrame  * *ppFrame,
             IOleInPlaceUIWindow  * *ppDoc,
             LPRECT lprcPosRect,
             LPRECT lprcClipRect,
             LPOLEINPLACEFRAMEINFO lpFrameInfo) = 0;
        
        virtual HRESULT __stdcall Scroll( 
             SIZE scrollExtant) = 0;
        
        virtual HRESULT __stdcall OnUIDeactivate( 
             BOOL fUndoable) = 0;
        
        virtual HRESULT __stdcall OnInPlaceDeactivate( void) = 0;
        
        virtual HRESULT __stdcall DiscardUndoState( void) = 0;
        
        virtual HRESULT __stdcall DeactivateAndUndo( void) = 0;
        
        virtual HRESULT __stdcall OnPosRectChange( 
             LPCRECT lprcPosRect) = 0;
        
    };
    






























































































































#line 3718 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"



HRESULT __stdcall IOleInPlaceSite_CanInPlaceActivate_Proxy( 
    IOleInPlaceSite  * This);


void __stdcall IOleInPlaceSite_CanInPlaceActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_OnInPlaceActivate_Proxy( 
    IOleInPlaceSite  * This);


void __stdcall IOleInPlaceSite_OnInPlaceActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_OnUIActivate_Proxy( 
    IOleInPlaceSite  * This);


void __stdcall IOleInPlaceSite_OnUIActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_GetWindowContext_Proxy( 
    IOleInPlaceSite  * This,
     IOleInPlaceFrame  * *ppFrame,
     IOleInPlaceUIWindow  * *ppDoc,
     LPRECT lprcPosRect,
     LPRECT lprcClipRect,
     LPOLEINPLACEFRAMEINFO lpFrameInfo);


void __stdcall IOleInPlaceSite_GetWindowContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_Scroll_Proxy( 
    IOleInPlaceSite  * This,
     SIZE scrollExtant);


void __stdcall IOleInPlaceSite_Scroll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_OnUIDeactivate_Proxy( 
    IOleInPlaceSite  * This,
     BOOL fUndoable);


void __stdcall IOleInPlaceSite_OnUIDeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_OnInPlaceDeactivate_Proxy( 
    IOleInPlaceSite  * This);


void __stdcall IOleInPlaceSite_OnInPlaceDeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_DiscardUndoState_Proxy( 
    IOleInPlaceSite  * This);


void __stdcall IOleInPlaceSite_DiscardUndoState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_DeactivateAndUndo_Proxy( 
    IOleInPlaceSite  * This);


void __stdcall IOleInPlaceSite_DeactivateAndUndo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_OnPosRectChange_Proxy( 
    IOleInPlaceSite  * This,
     LPCRECT lprcPosRect);


void __stdcall IOleInPlaceSite_OnPosRectChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3841 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"










 



extern "C" const IID IID_IContinue;


    
    struct __declspec(uuid("0000012a-0000-0000-C000-000000000046")) __declspec(novtable)
    IContinue : public IUnknown
    {
    public:
        virtual HRESULT __stdcall FContinue( void) = 0;
        
    };
    

















































#line 3917 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"



HRESULT __stdcall IContinue_FContinue_Proxy( 
    IContinue  * This);


void __stdcall IContinue_FContinue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3933 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"










 


typedef  IViewObject  *LPVIEWOBJECT;


extern "C" const IID IID_IViewObject;


    
    struct __declspec(uuid("0000010d-0000-0000-C000-000000000046")) __declspec(novtable)
    IViewObject : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Draw( 
             DWORD dwDrawAspect,
             LONG lindex,
             void  *pvAspect,
             DVTARGETDEVICE  *ptd,
             HDC hdcTargetDev,
             HDC hdcDraw,
             LPCRECTL lprcBounds,
             LPCRECTL lprcWBounds,
             BOOL ( __stdcall  *pfnContinue )( 
                DWORD dwContinue),
             DWORD dwContinue) = 0;
        
        virtual  HRESULT __stdcall GetColorSet( 
             DWORD dwDrawAspect,
             LONG lindex,
             void  *pvAspect,
             DVTARGETDEVICE  *ptd,
             HDC hicTargetDev,
             LOGPALETTE  * *ppColorSet) = 0;
        
        virtual  HRESULT __stdcall Freeze( 
             DWORD dwDrawAspect,
             LONG lindex,
             void  *pvAspect,
             DWORD  *pdwFreeze) = 0;
        
        virtual HRESULT __stdcall Unfreeze( 
             DWORD dwFreeze) = 0;
        
        virtual HRESULT __stdcall SetAdvise( 
             DWORD aspects,
             DWORD advf,
             IAdviseSink  *pAdvSink) = 0;
        
        virtual  HRESULT __stdcall GetAdvise( 
             DWORD  *pAspects,
             DWORD  *pAdvf,
             IAdviseSink  * *ppAdvSink) = 0;
        
    };
    











































































































#line 4107 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"



 HRESULT __stdcall IViewObject_RemoteDraw_Proxy( 
    IViewObject  * This,
     DWORD dwDrawAspect,
     LONG lindex,
     DWORD pvAspect,
     DVTARGETDEVICE  *ptd,
     DWORD hdcTargetDev,
     DWORD hdcDraw,
     LPCRECTL lprcBounds,
     LPCRECTL lprcWBounds,
     IContinue  *pContinue);


void __stdcall IViewObject_RemoteDraw_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IViewObject_RemoteGetColorSet_Proxy( 
    IViewObject  * This,
     DWORD dwDrawAspect,
     LONG lindex,
     DWORD pvAspect,
     DVTARGETDEVICE  *ptd,
     DWORD hicTargetDev,
     LOGPALETTE  * *ppColorSet);


void __stdcall IViewObject_RemoteGetColorSet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IViewObject_RemoteFreeze_Proxy( 
    IViewObject  * This,
     DWORD dwDrawAspect,
     LONG lindex,
     DWORD pvAspect,
     DWORD  *pdwFreeze);


void __stdcall IViewObject_RemoteFreeze_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IViewObject_Unfreeze_Proxy( 
    IViewObject  * This,
     DWORD dwFreeze);


void __stdcall IViewObject_Unfreeze_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IViewObject_SetAdvise_Proxy( 
    IViewObject  * This,
     DWORD aspects,
     DWORD advf,
     IAdviseSink  *pAdvSink);


void __stdcall IViewObject_SetAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IViewObject_RemoteGetAdvise_Proxy( 
    IViewObject  * This,
     DWORD  *pAspects,
     DWORD  *pAdvf,
     IAdviseSink  * *ppAdvSink);


void __stdcall IViewObject_RemoteGetAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4204 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"










 


typedef  IViewObject2  *LPVIEWOBJECT2;


extern "C" const IID IID_IViewObject2;


    
    struct __declspec(uuid("00000127-0000-0000-C000-000000000046")) __declspec(novtable)
    IViewObject2 : public IViewObject
    {
    public:
        virtual HRESULT __stdcall GetExtent( 
             DWORD dwDrawAspect,
             LONG lindex,
             DVTARGETDEVICE  *ptd,
             LPSIZEL lpsizel) = 0;
        
    };
    






















































































































#line 4355 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"



HRESULT __stdcall IViewObject2_GetExtent_Proxy( 
    IViewObject2  * This,
     DWORD dwDrawAspect,
     LONG lindex,
     DVTARGETDEVICE  *ptd,
     LPSIZEL lpsizel);


void __stdcall IViewObject2_GetExtent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4375 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"










 


typedef  IDropSource  *LPDROPSOURCE;


extern "C" const IID IID_IDropSource;


    
    struct __declspec(uuid("00000121-0000-0000-C000-000000000046")) __declspec(novtable)
    IDropSource : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QueryContinueDrag( 
             BOOL fEscapePressed,
             DWORD grfKeyState) = 0;
        
        virtual HRESULT __stdcall GiveFeedback( 
             DWORD dwEffect) = 0;
        
    };
    


























































#line 4467 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"



HRESULT __stdcall IDropSource_QueryContinueDrag_Proxy( 
    IDropSource  * This,
     BOOL fEscapePressed,
     DWORD grfKeyState);


void __stdcall IDropSource_QueryContinueDrag_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDropSource_GiveFeedback_Proxy( 
    IDropSource  * This,
     DWORD dwEffect);


void __stdcall IDropSource_GiveFeedback_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4497 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"










 


typedef  IDropTarget  *LPDROPTARGET;


































extern "C" const IID IID_IDropTarget;


    
    struct __declspec(uuid("00000122-0000-0000-C000-000000000046")) __declspec(novtable)
    IDropTarget : public IUnknown
    {
    public:
        virtual HRESULT __stdcall DragEnter( 
             IDataObject  *pDataObj,
             DWORD grfKeyState,
             POINTL pt,
             DWORD  *pdwEffect) = 0;
        
        virtual HRESULT __stdcall DragOver( 
             DWORD grfKeyState,
             POINTL pt,
             DWORD  *pdwEffect) = 0;
        
        virtual HRESULT __stdcall DragLeave( void) = 0;
        
        virtual HRESULT __stdcall Drop( 
             IDataObject  *pDataObj,
             DWORD grfKeyState,
             POINTL pt,
             DWORD  *pdwEffect) = 0;
        
    };
    














































































#line 4653 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"



HRESULT __stdcall IDropTarget_DragEnter_Proxy( 
    IDropTarget  * This,
     IDataObject  *pDataObj,
     DWORD grfKeyState,
     POINTL pt,
     DWORD  *pdwEffect);


void __stdcall IDropTarget_DragEnter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDropTarget_DragOver_Proxy( 
    IDropTarget  * This,
     DWORD grfKeyState,
     POINTL pt,
     DWORD  *pdwEffect);


void __stdcall IDropTarget_DragOver_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDropTarget_DragLeave_Proxy( 
    IDropTarget  * This);


void __stdcall IDropTarget_DragLeave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDropTarget_Drop_Proxy( 
    IDropTarget  * This,
     IDataObject  *pDataObj,
     DWORD grfKeyState,
     POINTL pt,
     DWORD  *pdwEffect);


void __stdcall IDropTarget_Drop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4713 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"










 


typedef  IEnumOLEVERB  *LPENUMOLEVERB;

typedef struct  tagOLEVERB
    {
    LONG lVerb;
    LPOLESTR lpszVerbName;
    DWORD fuFlags;
    DWORD grfAttribs;
    }	OLEVERB;

typedef struct tagOLEVERB  *LPOLEVERB;

typedef  
enum tagOLEVERBATTRIB
    {	OLEVERBATTRIB_NEVERDIRTIES	= 1,
	OLEVERBATTRIB_ONCONTAINERMENU	= 2
    }	OLEVERBATTRIB;


extern "C" const IID IID_IEnumOLEVERB;


    
    struct __declspec(uuid("00000104-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumOLEVERB : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             LPOLEVERB rgelt,
             ULONG  *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumOLEVERB  * *ppenum) = 0;
        
    };
    








































































#line 4841 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"



 HRESULT __stdcall IEnumOLEVERB_RemoteNext_Proxy( 
    IEnumOLEVERB  * This,
     ULONG celt,
     LPOLEVERB rgelt,
     ULONG  *pceltFetched);


void __stdcall IEnumOLEVERB_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumOLEVERB_Skip_Proxy( 
    IEnumOLEVERB  * This,
     ULONG celt);


void __stdcall IEnumOLEVERB_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumOLEVERB_Reset_Proxy( 
    IEnumOLEVERB  * This);


void __stdcall IEnumOLEVERB_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumOLEVERB_Clone_Proxy( 
    IEnumOLEVERB  * This,
     IEnumOLEVERB  * *ppenum);


void __stdcall IEnumOLEVERB_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4895 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"




unsigned long             __stdcall  CLIPFORMAT_UserSize(     unsigned long  *, unsigned long            , CLIPFORMAT  * ); 
unsigned char  * __stdcall  CLIPFORMAT_UserMarshal(  unsigned long  *, unsigned char  *, CLIPFORMAT  * ); 
unsigned char  * __stdcall  CLIPFORMAT_UserUnmarshal(unsigned long  *, unsigned char  *, CLIPFORMAT  * ); 
void                      __stdcall  CLIPFORMAT_UserFree(     unsigned long  *, CLIPFORMAT  * ); 

unsigned long             __stdcall  HACCEL_UserSize(     unsigned long  *, unsigned long            , HACCEL  * ); 
unsigned char  * __stdcall  HACCEL_UserMarshal(  unsigned long  *, unsigned char  *, HACCEL  * ); 
unsigned char  * __stdcall  HACCEL_UserUnmarshal(unsigned long  *, unsigned char  *, HACCEL  * ); 
void                      __stdcall  HACCEL_UserFree(     unsigned long  *, HACCEL  * ); 

unsigned long             __stdcall  HGLOBAL_UserSize(     unsigned long  *, unsigned long            , HGLOBAL  * ); 
unsigned char  * __stdcall  HGLOBAL_UserMarshal(  unsigned long  *, unsigned char  *, HGLOBAL  * ); 
unsigned char  * __stdcall  HGLOBAL_UserUnmarshal(unsigned long  *, unsigned char  *, HGLOBAL  * ); 
void                      __stdcall  HGLOBAL_UserFree(     unsigned long  *, HGLOBAL  * ); 

unsigned long             __stdcall  HMENU_UserSize(     unsigned long  *, unsigned long            , HMENU  * ); 
unsigned char  * __stdcall  HMENU_UserMarshal(  unsigned long  *, unsigned char  *, HMENU  * ); 
unsigned char  * __stdcall  HMENU_UserUnmarshal(unsigned long  *, unsigned char  *, HMENU  * ); 
void                      __stdcall  HMENU_UserFree(     unsigned long  *, HMENU  * ); 

unsigned long             __stdcall  HWND_UserSize(     unsigned long  *, unsigned long            , HWND  * ); 
unsigned char  * __stdcall  HWND_UserMarshal(  unsigned long  *, unsigned char  *, HWND  * ); 
unsigned char  * __stdcall  HWND_UserUnmarshal(unsigned long  *, unsigned char  *, HWND  * ); 
void                      __stdcall  HWND_UserFree(     unsigned long  *, HWND  * ); 

unsigned long             __stdcall  STGMEDIUM_UserSize(     unsigned long  *, unsigned long            , STGMEDIUM  * ); 
unsigned char  * __stdcall  STGMEDIUM_UserMarshal(  unsigned long  *, unsigned char  *, STGMEDIUM  * ); 
unsigned char  * __stdcall  STGMEDIUM_UserUnmarshal(unsigned long  *, unsigned char  *, STGMEDIUM  * ); 
void                      __stdcall  STGMEDIUM_UserFree(     unsigned long  *, STGMEDIUM  * ); 

 HRESULT __stdcall IOleInPlaceActiveObject_TranslateAccelerator_Proxy( 
    IOleInPlaceActiveObject  * This,
     LPMSG lpmsg);


 HRESULT __stdcall IOleInPlaceActiveObject_TranslateAccelerator_Stub( 
    IOleInPlaceActiveObject  * This);

 HRESULT __stdcall IOleInPlaceActiveObject_ResizeBorder_Proxy( 
    IOleInPlaceActiveObject  * This,
     LPCRECT prcBorder,
     IOleInPlaceUIWindow  *pUIWindow,
     BOOL fFrameWindow);


 HRESULT __stdcall IOleInPlaceActiveObject_ResizeBorder_Stub( 
    IOleInPlaceActiveObject  * This,
     LPCRECT prcBorder,
     const IID & riid,
     IOleInPlaceUIWindow  *pUIWindow,
     BOOL fFrameWindow);

 HRESULT __stdcall IViewObject_Draw_Proxy( 
    IViewObject  * This,
     DWORD dwDrawAspect,
     LONG lindex,
     void  *pvAspect,
     DVTARGETDEVICE  *ptd,
     HDC hdcTargetDev,
     HDC hdcDraw,
     LPCRECTL lprcBounds,
     LPCRECTL lprcWBounds,
     BOOL ( __stdcall  *pfnContinue )( 
        DWORD dwContinue),
     DWORD dwContinue);


 HRESULT __stdcall IViewObject_Draw_Stub( 
    IViewObject  * This,
     DWORD dwDrawAspect,
     LONG lindex,
     DWORD pvAspect,
     DVTARGETDEVICE  *ptd,
     DWORD hdcTargetDev,
     DWORD hdcDraw,
     LPCRECTL lprcBounds,
     LPCRECTL lprcWBounds,
     IContinue  *pContinue);

 HRESULT __stdcall IViewObject_GetColorSet_Proxy( 
    IViewObject  * This,
     DWORD dwDrawAspect,
     LONG lindex,
     void  *pvAspect,
     DVTARGETDEVICE  *ptd,
     HDC hicTargetDev,
     LOGPALETTE  * *ppColorSet);


 HRESULT __stdcall IViewObject_GetColorSet_Stub( 
    IViewObject  * This,
     DWORD dwDrawAspect,
     LONG lindex,
     DWORD pvAspect,
     DVTARGETDEVICE  *ptd,
     DWORD hicTargetDev,
     LOGPALETTE  * *ppColorSet);

 HRESULT __stdcall IViewObject_Freeze_Proxy( 
    IViewObject  * This,
     DWORD dwDrawAspect,
     LONG lindex,
     void  *pvAspect,
     DWORD  *pdwFreeze);


 HRESULT __stdcall IViewObject_Freeze_Stub( 
    IViewObject  * This,
     DWORD dwDrawAspect,
     LONG lindex,
     DWORD pvAspect,
     DWORD  *pdwFreeze);

 HRESULT __stdcall IViewObject_GetAdvise_Proxy( 
    IViewObject  * This,
     DWORD  *pAspects,
     DWORD  *pAdvf,
     IAdviseSink  * *ppAdvSink);


 HRESULT __stdcall IViewObject_GetAdvise_Stub( 
    IViewObject  * This,
     DWORD  *pAspects,
     DWORD  *pAdvf,
     IAdviseSink  * *ppAdvSink);

 HRESULT __stdcall IEnumOLEVERB_Next_Proxy( 
    IEnumOLEVERB  * This,
     ULONG celt,
     LPOLEVERB rgelt,
     ULONG  *pceltFetched);


 HRESULT __stdcall IEnumOLEVERB_Next_Stub( 
    IEnumOLEVERB  * This,
     ULONG celt,
     LPOLEVERB rgelt,
     ULONG  *pceltFetched);

 HRESULT __stdcall IOleCache2_UpdateCache_Proxy( 
    IOleCache2  * This,
     LPDATAOBJECT pDataObject,
     DWORD grfUpdf,
     LPVOID pReserved);


 HRESULT __stdcall IOleCache2_UpdateCache_Stub( 
    IOleCache2  * This,
     LPDATAOBJECT pDataObject,
     DWORD grfUpdf,
     DWORD pReserved);






}
#line 5058 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"

#line 5060 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"
#line 199 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\servprov.h"


















#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"
















#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"





































































































































































































#line 20 "c:\\programme\\microsoft visual studio\\vc98\\include\\servprov.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21 "c:\\programme\\microsoft visual studio\\vc98\\include\\servprov.h"







#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"







































































































































































































































































































































































































































#line 425 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"

#line 29 "c:\\programme\\microsoft visual studio\\vc98\\include\\servprov.h"
#line 30 "c:\\programme\\microsoft visual studio\\vc98\\include\\servprov.h"





extern "C"{
#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\servprov.h"

 



typedef struct IServiceProvider IServiceProvider;
#line 44 "c:\\programme\\microsoft visual studio\\vc98\\include\\servprov.h"



#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"


















#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"
















#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"





































































































































































































#line 20 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"







#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"







































































































































































































































































































































































































































#line 425 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"

#line 29 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"
#line 30 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 48 "c:\\programme\\microsoft visual studio\\vc98\\include\\servprov.h"

void  * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void  * ); 






 













#pragma comment(lib,"uuid.lib")









extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_v0_0_s_ifspec;









 


typedef  IServiceProvider  *LPSERVICEPROVIDER;


extern "C" const IID IID_IServiceProvider;


    

extern "C++"
{
#line 106 "c:\\programme\\microsoft visual studio\\vc98\\include\\servprov.h"

    struct __declspec(uuid("6d5140c1-7436-11ce-8034-00aa006009fa")) __declspec(novtable)
    IServiceProvider : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall QueryService( 
             const GUID & guidService,
             const IID & riid,
             void  * *ppvObject) = 0;
        

		template <class Q>
		HRESULT __stdcall QueryService(const GUID & guidService, Q** pp)
		{
			return QueryService(guidService, __uuidof(Q), (void**)pp);
		}
#line 123 "c:\\programme\\microsoft visual studio\\vc98\\include\\servprov.h"
    };


} 
#line 128 "c:\\programme\\microsoft visual studio\\vc98\\include\\servprov.h"
    




















































#line 182 "c:\\programme\\microsoft visual studio\\vc98\\include\\servprov.h"



 HRESULT __stdcall IServiceProvider_RemoteQueryService_Proxy( 
    IServiceProvider  * This,
     const GUID & guidService,
     const IID & riid,
     IUnknown  * *ppvObject);


void __stdcall IServiceProvider_RemoteQueryService_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 201 "c:\\programme\\microsoft visual studio\\vc98\\include\\servprov.h"







 


#line 212 "c:\\programme\\microsoft visual studio\\vc98\\include\\servprov.h"


extern RPC_IF_HANDLE __MIDL_itf_servprov_0074_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_servprov_0074_v0_0_s_ifspec;



 HRESULT __stdcall IServiceProvider_QueryService_Proxy( 
    IServiceProvider  * This,
     const GUID & guidService,
     const IID & riid,
     void  * *ppvObject);


 HRESULT __stdcall IServiceProvider_QueryService_Stub( 
    IServiceProvider  * This,
     const GUID & guidService,
     const IID & riid,
     IUnknown  * *ppvObject);






}
#line 239 "c:\\programme\\microsoft visual studio\\vc98\\include\\servprov.h"

#line 241 "c:\\programme\\microsoft visual studio\\vc98\\include\\servprov.h"
#line 200 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\msxml.h"











#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"
















#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"





































































































































































































#line 13 "c:\\programme\\microsoft visual studio\\vc98\\include\\msxml.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 14 "c:\\programme\\microsoft visual studio\\vc98\\include\\msxml.h"





extern "C"{
#line 21 "c:\\programme\\microsoft visual studio\\vc98\\include\\msxml.h"

 



typedef struct IXMLElementCollection IXMLElementCollection;
#line 28 "c:\\programme\\microsoft visual studio\\vc98\\include\\msxml.h"




typedef struct IXMLDocument IXMLDocument;
#line 34 "c:\\programme\\microsoft visual studio\\vc98\\include\\msxml.h"




typedef struct IXMLElement IXMLElement;
#line 40 "c:\\programme\\microsoft visual studio\\vc98\\include\\msxml.h"




typedef struct IXMLError IXMLError;
#line 46 "c:\\programme\\microsoft visual studio\\vc98\\include\\msxml.h"




typedef struct IXMLElementNotificationSink IXMLElementNotificationSink;
#line 52 "c:\\programme\\microsoft visual studio\\vc98\\include\\msxml.h"






typedef class XMLDocument XMLDocument;


#line 62 "c:\\programme\\microsoft visual studio\\vc98\\include\\msxml.h"

#line 64 "c:\\programme\\microsoft visual studio\\vc98\\include\\msxml.h"



#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\unknwn.h"


















#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"
















#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"





































































































































































































#line 20 "c:\\programme\\microsoft visual studio\\vc98\\include\\unknwn.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21 "c:\\programme\\microsoft visual studio\\vc98\\include\\unknwn.h"







#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"







































































































































































































































































































































































































































#line 425 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"

#line 29 "c:\\programme\\microsoft visual studio\\vc98\\include\\unknwn.h"
#line 30 "c:\\programme\\microsoft visual studio\\vc98\\include\\unknwn.h"





















































































































































































































































































































































#line 68 "c:\\programme\\microsoft visual studio\\vc98\\include\\msxml.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"


















#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"
















#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"





































































































































































































#line 20 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"







#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"







































































































































































































































































































































































































































#line 425 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"

#line 29 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"
#line 30 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 69 "c:\\programme\\microsoft visual studio\\vc98\\include\\msxml.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"


















#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"
















#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"





































































































































































































#line 20 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"







#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"







































































































































































































































































































































































































































#line 425 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"

#line 29 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"
#line 30 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"





extern "C"{
#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"

 



typedef struct ICreateTypeInfo ICreateTypeInfo;
#line 44 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"




typedef struct ICreateTypeInfo2 ICreateTypeInfo2;
#line 50 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"




typedef struct ICreateTypeLib ICreateTypeLib;
#line 56 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"




typedef struct ICreateTypeLib2 ICreateTypeLib2;
#line 62 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"




typedef struct IDispatch IDispatch;
#line 68 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"




typedef struct IEnumVARIANT IEnumVARIANT;
#line 74 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"




typedef struct ITypeComp ITypeComp;
#line 80 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"




typedef struct ITypeInfo ITypeInfo;
#line 86 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"




typedef struct ITypeInfo2 ITypeInfo2;
#line 92 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"




typedef struct ITypeLib ITypeLib;
#line 98 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"




typedef struct ITypeLib2 ITypeLib2;
#line 104 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"




typedef struct ITypeChangeEvents ITypeChangeEvents;
#line 110 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"




typedef struct IErrorInfo IErrorInfo;
#line 116 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"




typedef struct ICreateErrorInfo ICreateErrorInfo;
#line 122 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"




typedef struct ISupportErrorInfo ISupportErrorInfo;
#line 128 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"




typedef struct ITypeFactory ITypeFactory;
#line 134 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"




typedef struct ITypeMarshal ITypeMarshal;
#line 140 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"




typedef struct IRecordInfo IRecordInfo;
#line 146 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"



#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"


















#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"
















#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"





































































































































































































#line 20 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"







#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"







































































































































































































































































































































































































































#line 425 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"

#line 29 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"
#line 30 "c:\\programme\\microsoft visual studio\\vc98\\include\\objidl.h"





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 150 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"

void  * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void  * ); 






 









#pragma warning(disable:4201)    
#line 171 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"




















extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_v0_0_s_ifspec;









 


typedef CY CURRENCY;

typedef struct  tagSAFEARRAYBOUND
    {
    ULONG cElements;
    LONG lLbound;
    }	SAFEARRAYBOUND;

typedef struct tagSAFEARRAYBOUND  *LPSAFEARRAYBOUND;


typedef  struct _wireVARIANT  *wireVARIANT;

typedef  struct _wireBRECORD  *wireBRECORD;

typedef struct  _wireSAFEARR_BSTR
    {
    ULONG Size;
     wireBSTR  *aBstr;
    }	SAFEARR_BSTR;

typedef struct  _wireSAFEARR_UNKNOWN
    {
    ULONG Size;
     IUnknown  * *apUnknown;
    }	SAFEARR_UNKNOWN;

typedef struct  _wireSAFEARR_DISPATCH
    {
    ULONG Size;
     IDispatch  * *apDispatch;
    }	SAFEARR_DISPATCH;

typedef struct  _wireSAFEARR_VARIANT
    {
    ULONG Size;
     wireVARIANT  *aVariant;
    }	SAFEARR_VARIANT;

typedef struct  _wireSAFEARR_BRECORD
    {
    ULONG Size;
     wireBRECORD  *aRecord;
    }	SAFEARR_BRECORD;

typedef struct  _wireSAFEARR_HAVEIID
    {
    ULONG Size;
     IUnknown  * *apUnknown;
    IID iid;
    }	SAFEARR_HAVEIID;

typedef  
enum tagSF_TYPE
    {	SF_ERROR	= VT_ERROR,
	SF_I1	= VT_I1,
	SF_I2	= VT_I2,
	SF_I4	= VT_I4,
	SF_I8	= VT_I8,
	SF_BSTR	= VT_BSTR,
	SF_UNKNOWN	= VT_UNKNOWN,
	SF_DISPATCH	= VT_DISPATCH,
	SF_VARIANT	= VT_VARIANT,
	SF_RECORD	= VT_RECORD,
	SF_HAVEIID	= VT_UNKNOWN | VT_RESERVED
    }	SF_TYPE;

typedef struct  _wireSAFEARRAY_UNION
    {
    ULONG sfType;
      union __MIDL_IOleAutomationTypes_0001
        {
         SAFEARR_BSTR BstrStr;
         SAFEARR_UNKNOWN UnknownStr;
         SAFEARR_DISPATCH DispatchStr;
         SAFEARR_VARIANT VariantStr;
         SAFEARR_BRECORD RecordStr;
         SAFEARR_HAVEIID HaveIidStr;
         BYTE_SIZEDARR ByteStr;
         WORD_SIZEDARR WordStr;
         DWORD_SIZEDARR LongStr;
         HYPER_SIZEDARR HyperStr;
        }	u;
    }	SAFEARRAYUNION;

typedef  struct  _wireSAFEARRAY
    {
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    SAFEARRAYUNION uArrayStructs;
     SAFEARRAYBOUND rgsabound[ 1 ];
    }	 *wireSAFEARRAY;

typedef  wireSAFEARRAY  *wirePSAFEARRAY;

typedef struct  tagSAFEARRAY
    {
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    PVOID pvData;
    SAFEARRAYBOUND rgsabound[ 1 ];
    }	SAFEARRAY;

typedef  SAFEARRAY  *LPSAFEARRAY;














































































#line 392 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"






#line 399 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"
typedef  struct tagVARIANT VARIANT;

struct  tagVARIANT
    {
    union 
        {
        struct  
            {
            VARTYPE vt;
            WORD wReserved1;
            WORD wReserved2;
            WORD wReserved3;
            union 
                {
                LONG lVal;
                BYTE bVal;
                SHORT iVal;
                FLOAT fltVal;
                DOUBLE dblVal;
                VARIANT_BOOL boolVal;
                
                SCODE scode;
                CY cyVal;
                DATE date;
                BSTR bstrVal;
                IUnknown  *punkVal;
                IDispatch  *pdispVal;
                SAFEARRAY  *parray;
                BYTE  *pbVal;
                SHORT  *piVal;
                LONG  *plVal;
                FLOAT  *pfltVal;
                DOUBLE  *pdblVal;
                VARIANT_BOOL  *pboolVal;
                
                SCODE  *pscode;
                CY  *pcyVal;
                DATE  *pdate;
                BSTR  *pbstrVal;
                IUnknown  * *ppunkVal;
                IDispatch  * *ppdispVal;
                SAFEARRAY  * *pparray;
                VARIANT  *pvarVal;
                PVOID byref;
                CHAR cVal;
                USHORT uiVal;
                ULONG ulVal;
                INT intVal;
                UINT uintVal;
                DECIMAL  *pdecVal;
                CHAR  *pcVal;
                USHORT  *puiVal;
                ULONG  *pulVal;
                INT  *pintVal;
                UINT  *puintVal;
                struct  
                    {
                    PVOID pvRecord;
                    IRecordInfo  *pRecInfo;
                    }	;
                }	;
            }	;
        DECIMAL decVal;
        }	;
    };
typedef VARIANT  *LPVARIANT;

typedef VARIANT VARIANTARG;

typedef VARIANT  *LPVARIANTARG;


struct  _wireBRECORD
    {
    ULONG fFlags;
    ULONG clSize;
    IRecordInfo  *pRecInfo;
     byte  *pRecord;
    };
struct  _wireVARIANT
    {
    DWORD clSize;
    DWORD rpcReserved;
    USHORT vt;
    USHORT wReserved1;
    USHORT wReserved2;
    USHORT wReserved3;
     union 
        {
         LONG lVal;
         BYTE bVal;
         SHORT iVal;
         FLOAT fltVal;
         DOUBLE dblVal;
         VARIANT_BOOL boolVal;
         SCODE scode;
         CY cyVal;
         DATE date;
         wireBSTR bstrVal;
         IUnknown  *punkVal;
         IDispatch  *pdispVal;
         wireSAFEARRAY parray;
         wireBRECORD brecVal;
         BYTE  *pbVal;
         SHORT  *piVal;
         LONG  *plVal;
         FLOAT  *pfltVal;
         DOUBLE  *pdblVal;
         VARIANT_BOOL  *pboolVal;
         SCODE  *pscode;
         CY  *pcyVal;
         DATE  *pdate;
         wireBSTR  *pbstrVal;
         IUnknown  * *ppunkVal;
         IDispatch  * *ppdispVal;
         wireSAFEARRAY  *pparray;
         wireVARIANT  *pvarVal;
         CHAR cVal;
         USHORT uiVal;
         ULONG ulVal;
         INT intVal;
         UINT uintVal;
         DECIMAL decVal;
         DECIMAL  *pdecVal;
         CHAR  *pcVal;
         USHORT  *puiVal;
         ULONG  *pulVal;
         INT  *pintVal;
         UINT  *puintVal;
           
           
        }	;
    };
typedef LONG DISPID;

typedef DISPID MEMBERID;

typedef DWORD HREFTYPE;

typedef  
enum tagTYPEKIND
    {	TKIND_ENUM	= 0,
	TKIND_RECORD	= TKIND_ENUM + 1,
	TKIND_MODULE	= TKIND_RECORD + 1,
	TKIND_INTERFACE	= TKIND_MODULE + 1,
	TKIND_DISPATCH	= TKIND_INTERFACE + 1,
	TKIND_COCLASS	= TKIND_DISPATCH + 1,
	TKIND_ALIAS	= TKIND_COCLASS + 1,
	TKIND_UNION	= TKIND_ALIAS + 1,
	TKIND_MAX	= TKIND_UNION + 1
    }	TYPEKIND;

typedef struct  tagTYPEDESC
    {
     union 
        {
         struct tagTYPEDESC  *lptdesc;
         struct tagARRAYDESC  *lpadesc;
         HREFTYPE hreftype;
           
        }	;
    VARTYPE vt;
    }	TYPEDESC;

typedef struct  tagARRAYDESC
    {
    TYPEDESC tdescElem;
    USHORT cDims;
     SAFEARRAYBOUND rgbounds[ 1 ];
    }	ARRAYDESC;

typedef struct  tagPARAMDESCEX
    {
    ULONG cBytes;
    VARIANTARG varDefaultValue;
    }	PARAMDESCEX;

typedef struct tagPARAMDESCEX  *LPPARAMDESCEX;

typedef struct  tagPARAMDESC
    {
    LPPARAMDESCEX pparamdescex;
    USHORT wParamFlags;
    }	PARAMDESC;

typedef struct tagPARAMDESC  *LPPARAMDESC;

















typedef struct  tagIDLDESC
    {
    ULONG dwReserved;
    USHORT wIDLFlags;
    }	IDLDESC;

typedef struct tagIDLDESC  *LPIDLDESC;



















#line 629 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"
typedef struct tagELEMDESC {
    TYPEDESC tdesc;             
    union {
        IDLDESC idldesc;        
        PARAMDESC paramdesc;    
    };
} ELEMDESC, * LPELEMDESC;
#line 637 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"
typedef struct  tagTYPEATTR
    {
    GUID guid;
    LCID lcid;
    DWORD dwReserved;
    MEMBERID memidConstructor;
    MEMBERID memidDestructor;
    LPOLESTR lpstrSchema;
    ULONG cbSizeInstance;
    TYPEKIND typekind;
    WORD cFuncs;
    WORD cVars;
    WORD cImplTypes;
    WORD cbSizeVft;
    WORD cbAlignment;
    WORD wTypeFlags;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    TYPEDESC tdescAlias;
    IDLDESC idldescType;
    }	TYPEATTR;

typedef struct tagTYPEATTR  *LPTYPEATTR;

typedef struct  tagDISPPARAMS
    {
     VARIANTARG  *rgvarg;
     DISPID  *rgdispidNamedArgs;
    UINT cArgs;
    UINT cNamedArgs;
    }	DISPPARAMS;
















#line 685 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"
typedef struct tagEXCEPINFO {
    WORD  wCode;
    WORD  wReserved;
    BSTR  bstrSource;
    BSTR  bstrDescription;
    BSTR  bstrHelpFile;
    DWORD dwHelpContext;
    PVOID pvReserved;
    HRESULT (__stdcall *pfnDeferredFillIn)(struct tagEXCEPINFO *);
    SCODE scode;
} EXCEPINFO, * LPEXCEPINFO;
#line 697 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"
typedef 
enum tagCALLCONV
    {	CC_FASTCALL	= 0,
	CC_CDECL	= 1,
	CC_MSCPASCAL	= CC_CDECL + 1,
	CC_PASCAL	= CC_MSCPASCAL,
	CC_MACPASCAL	= CC_PASCAL + 1,
	CC_STDCALL	= CC_MACPASCAL + 1,
	CC_FPFASTCALL	= CC_STDCALL + 1,
	CC_SYSCALL	= CC_FPFASTCALL + 1,
	CC_MPWCDECL	= CC_SYSCALL + 1,
	CC_MPWPASCAL	= CC_MPWCDECL + 1,
	CC_MAX	= CC_MPWPASCAL + 1
    }	CALLCONV;

typedef  
enum tagFUNCKIND
    {	FUNC_VIRTUAL	= 0,
	FUNC_PUREVIRTUAL	= FUNC_VIRTUAL + 1,
	FUNC_NONVIRTUAL	= FUNC_PUREVIRTUAL + 1,
	FUNC_STATIC	= FUNC_NONVIRTUAL + 1,
	FUNC_DISPATCH	= FUNC_STATIC + 1
    }	FUNCKIND;

typedef  
enum tagINVOKEKIND
    {	INVOKE_FUNC	= 1,
	INVOKE_PROPERTYGET	= 2,
	INVOKE_PROPERTYPUT	= 4,
	INVOKE_PROPERTYPUTREF	= 8
    }	INVOKEKIND;

typedef struct  tagFUNCDESC
    {
    MEMBERID memid;
     SCODE  *lprgscode;
     ELEMDESC  *lprgelemdescParam;
    FUNCKIND funckind;
    INVOKEKIND invkind;
    CALLCONV callconv;
    SHORT cParams;
    SHORT cParamsOpt;
    SHORT oVft;
    SHORT cScodes;
    ELEMDESC elemdescFunc;
    WORD wFuncFlags;
    }	FUNCDESC;

typedef struct tagFUNCDESC  *LPFUNCDESC;

typedef  
enum tagVARKIND
    {	VAR_PERINSTANCE	= 0,
	VAR_STATIC	= VAR_PERINSTANCE + 1,
	VAR_CONST	= VAR_STATIC + 1,
	VAR_DISPATCH	= VAR_CONST + 1
    }	VARKIND;









typedef struct  tagVARDESC
    {
    MEMBERID memid;
    LPOLESTR lpstrSchema;
     union 
        {
         ULONG oInst;
         VARIANT  *lpvarValue;
        }	;
    ELEMDESC elemdescVar;
    WORD wVarFlags;
    VARKIND varkind;
    }	VARDESC;

typedef struct tagVARDESC  *LPVARDESC;

typedef 
enum tagTYPEFLAGS
    {	TYPEFLAG_FAPPOBJECT	= 0x1,
	TYPEFLAG_FCANCREATE	= 0x2,
	TYPEFLAG_FLICENSED	= 0x4,
	TYPEFLAG_FPREDECLID	= 0x8,
	TYPEFLAG_FHIDDEN	= 0x10,
	TYPEFLAG_FCONTROL	= 0x20,
	TYPEFLAG_FDUAL	= 0x40,
	TYPEFLAG_FNONEXTENSIBLE	= 0x80,
	TYPEFLAG_FOLEAUTOMATION	= 0x100,
	TYPEFLAG_FRESTRICTED	= 0x200,
	TYPEFLAG_FAGGREGATABLE	= 0x400,
	TYPEFLAG_FREPLACEABLE	= 0x800,
	TYPEFLAG_FDISPATCHABLE	= 0x1000,
	TYPEFLAG_FREVERSEBIND	= 0x2000
    }	TYPEFLAGS;

typedef 
enum tagFUNCFLAGS
    {	FUNCFLAG_FRESTRICTED	= 0x1,
	FUNCFLAG_FSOURCE	= 0x2,
	FUNCFLAG_FBINDABLE	= 0x4,
	FUNCFLAG_FREQUESTEDIT	= 0x8,
	FUNCFLAG_FDISPLAYBIND	= 0x10,
	FUNCFLAG_FDEFAULTBIND	= 0x20,
	FUNCFLAG_FHIDDEN	= 0x40,
	FUNCFLAG_FUSESGETLASTERROR	= 0x80,
	FUNCFLAG_FDEFAULTCOLLELEM	= 0x100,
	FUNCFLAG_FUIDEFAULT	= 0x200,
	FUNCFLAG_FNONBROWSABLE	= 0x400,
	FUNCFLAG_FREPLACEABLE	= 0x800,
	FUNCFLAG_FIMMEDIATEBIND	= 0x1000
    }	FUNCFLAGS;

typedef 
enum tagVARFLAGS
    {	VARFLAG_FREADONLY	= 0x1,
	VARFLAG_FSOURCE	= 0x2,
	VARFLAG_FBINDABLE	= 0x4,
	VARFLAG_FREQUESTEDIT	= 0x8,
	VARFLAG_FDISPLAYBIND	= 0x10,
	VARFLAG_FDEFAULTBIND	= 0x20,
	VARFLAG_FHIDDEN	= 0x40,
	VARFLAG_FRESTRICTED	= 0x80,
	VARFLAG_FDEFAULTCOLLELEM	= 0x100,
	VARFLAG_FUIDEFAULT	= 0x200,
	VARFLAG_FNONBROWSABLE	= 0x400,
	VARFLAG_FREPLACEABLE	= 0x800,
	VARFLAG_FIMMEDIATEBIND	= 0x1000
    }	VARFLAGS;

typedef  struct  tagCLEANLOCALSTORAGE
    {
    IUnknown  *pInterface;
    PVOID pStorage;
    DWORD flags;
    }	CLEANLOCALSTORAGE;

typedef struct  tagCUSTDATAITEM
    {
    GUID guid;
    VARIANTARG varValue;
    }	CUSTDATAITEM;

typedef struct tagCUSTDATAITEM  *LPCUSTDATAITEM;

typedef struct  tagCUSTDATA
    {
    DWORD cCustData;
     LPCUSTDATAITEM prgCustData;
    }	CUSTDATA;

typedef struct tagCUSTDATA  *LPCUSTDATA;



extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_c_ifspec;
extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_s_ifspec;
#line 859 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"









 


typedef  ICreateTypeInfo  *LPCREATETYPEINFO;


extern "C" const IID IID_ICreateTypeInfo;


    
    struct __declspec(uuid("00020405-0000-0000-C000-000000000046")) __declspec(novtable)
    ICreateTypeInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetGuid( 
             const GUID & guid) = 0;
        
        virtual HRESULT __stdcall SetTypeFlags( 
             UINT uTypeFlags) = 0;
        
        virtual HRESULT __stdcall SetDocString( 
             LPOLESTR pStrDoc) = 0;
        
        virtual HRESULT __stdcall SetHelpContext( 
             DWORD dwHelpContext) = 0;
        
        virtual HRESULT __stdcall SetVersion( 
             WORD wMajorVerNum,
             WORD wMinorVerNum) = 0;
        
        virtual HRESULT __stdcall AddRefTypeInfo( 
             ITypeInfo  *pTInfo,
             HREFTYPE  *phRefType) = 0;
        
        virtual HRESULT __stdcall AddFuncDesc( 
             UINT index,
             FUNCDESC  *pFuncDesc) = 0;
        
        virtual HRESULT __stdcall AddImplType( 
             UINT index,
             HREFTYPE hRefType) = 0;
        
        virtual HRESULT __stdcall SetImplTypeFlags( 
             UINT index,
             INT implTypeFlags) = 0;
        
        virtual HRESULT __stdcall SetAlignment( 
             WORD cbAlignment) = 0;
        
        virtual HRESULT __stdcall SetSchema( 
             LPOLESTR pStrSchema) = 0;
        
        virtual HRESULT __stdcall AddVarDesc( 
             UINT index,
             VARDESC  *pVarDesc) = 0;
        
        virtual HRESULT __stdcall SetFuncAndParamNames( 
             UINT index,
             LPOLESTR  *rgszNames,
             UINT cNames) = 0;
        
        virtual HRESULT __stdcall SetVarName( 
             UINT index,
             LPOLESTR szName) = 0;
        
        virtual HRESULT __stdcall SetTypeDescAlias( 
             TYPEDESC  *pTDescAlias) = 0;
        
        virtual HRESULT __stdcall DefineFuncAsDllEntry( 
             UINT index,
             LPOLESTR szDllName,
             LPOLESTR szProcName) = 0;
        
        virtual HRESULT __stdcall SetFuncDocString( 
             UINT index,
             LPOLESTR szDocString) = 0;
        
        virtual HRESULT __stdcall SetVarDocString( 
             UINT index,
             LPOLESTR szDocString) = 0;
        
        virtual HRESULT __stdcall SetFuncHelpContext( 
             UINT index,
             DWORD dwHelpContext) = 0;
        
        virtual HRESULT __stdcall SetVarHelpContext( 
             UINT index,
             DWORD dwHelpContext) = 0;
        
        virtual HRESULT __stdcall SetMops( 
             UINT index,
             BSTR bstrMops) = 0;
        
        virtual HRESULT __stdcall SetTypeIdldesc( 
             IDLDESC  *pIdlDesc) = 0;
        
        virtual HRESULT __stdcall LayOut( void) = 0;
        
    };
    



























































































































































































































#line 1188 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"



HRESULT __stdcall ICreateTypeInfo_SetGuid_Proxy( 
    ICreateTypeInfo  * This,
     const GUID & guid);


void __stdcall ICreateTypeInfo_SetGuid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetTypeFlags_Proxy( 
    ICreateTypeInfo  * This,
     UINT uTypeFlags);


void __stdcall ICreateTypeInfo_SetTypeFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetDocString_Proxy( 
    ICreateTypeInfo  * This,
     LPOLESTR pStrDoc);


void __stdcall ICreateTypeInfo_SetDocString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetHelpContext_Proxy( 
    ICreateTypeInfo  * This,
     DWORD dwHelpContext);


void __stdcall ICreateTypeInfo_SetHelpContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetVersion_Proxy( 
    ICreateTypeInfo  * This,
     WORD wMajorVerNum,
     WORD wMinorVerNum);


void __stdcall ICreateTypeInfo_SetVersion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_AddRefTypeInfo_Proxy( 
    ICreateTypeInfo  * This,
     ITypeInfo  *pTInfo,
     HREFTYPE  *phRefType);


void __stdcall ICreateTypeInfo_AddRefTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_AddFuncDesc_Proxy( 
    ICreateTypeInfo  * This,
     UINT index,
     FUNCDESC  *pFuncDesc);


void __stdcall ICreateTypeInfo_AddFuncDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_AddImplType_Proxy( 
    ICreateTypeInfo  * This,
     UINT index,
     HREFTYPE hRefType);


void __stdcall ICreateTypeInfo_AddImplType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetImplTypeFlags_Proxy( 
    ICreateTypeInfo  * This,
     UINT index,
     INT implTypeFlags);


void __stdcall ICreateTypeInfo_SetImplTypeFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetAlignment_Proxy( 
    ICreateTypeInfo  * This,
     WORD cbAlignment);


void __stdcall ICreateTypeInfo_SetAlignment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetSchema_Proxy( 
    ICreateTypeInfo  * This,
     LPOLESTR pStrSchema);


void __stdcall ICreateTypeInfo_SetSchema_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_AddVarDesc_Proxy( 
    ICreateTypeInfo  * This,
     UINT index,
     VARDESC  *pVarDesc);


void __stdcall ICreateTypeInfo_AddVarDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetFuncAndParamNames_Proxy( 
    ICreateTypeInfo  * This,
     UINT index,
     LPOLESTR  *rgszNames,
     UINT cNames);


void __stdcall ICreateTypeInfo_SetFuncAndParamNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetVarName_Proxy( 
    ICreateTypeInfo  * This,
     UINT index,
     LPOLESTR szName);


void __stdcall ICreateTypeInfo_SetVarName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetTypeDescAlias_Proxy( 
    ICreateTypeInfo  * This,
     TYPEDESC  *pTDescAlias);


void __stdcall ICreateTypeInfo_SetTypeDescAlias_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_DefineFuncAsDllEntry_Proxy( 
    ICreateTypeInfo  * This,
     UINT index,
     LPOLESTR szDllName,
     LPOLESTR szProcName);


void __stdcall ICreateTypeInfo_DefineFuncAsDllEntry_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetFuncDocString_Proxy( 
    ICreateTypeInfo  * This,
     UINT index,
     LPOLESTR szDocString);


void __stdcall ICreateTypeInfo_SetFuncDocString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetVarDocString_Proxy( 
    ICreateTypeInfo  * This,
     UINT index,
     LPOLESTR szDocString);


void __stdcall ICreateTypeInfo_SetVarDocString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetFuncHelpContext_Proxy( 
    ICreateTypeInfo  * This,
     UINT index,
     DWORD dwHelpContext);


void __stdcall ICreateTypeInfo_SetFuncHelpContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetVarHelpContext_Proxy( 
    ICreateTypeInfo  * This,
     UINT index,
     DWORD dwHelpContext);


void __stdcall ICreateTypeInfo_SetVarHelpContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetMops_Proxy( 
    ICreateTypeInfo  * This,
     UINT index,
     BSTR bstrMops);


void __stdcall ICreateTypeInfo_SetMops_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetTypeIdldesc_Proxy( 
    ICreateTypeInfo  * This,
     IDLDESC  *pIdlDesc);


void __stdcall ICreateTypeInfo_SetTypeIdldesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_LayOut_Proxy( 
    ICreateTypeInfo  * This);


void __stdcall ICreateTypeInfo_LayOut_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1484 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"










 


typedef  ICreateTypeInfo2  *LPCREATETYPEINFO2;


extern "C" const IID IID_ICreateTypeInfo2;


    
    struct __declspec(uuid("0002040E-0000-0000-C000-000000000046")) __declspec(novtable)
    ICreateTypeInfo2 : public ICreateTypeInfo
    {
    public:
        virtual HRESULT __stdcall DeleteFuncDesc( 
             UINT index) = 0;
        
        virtual HRESULT __stdcall DeleteFuncDescByMemId( 
             MEMBERID memid,
             INVOKEKIND invKind) = 0;
        
        virtual HRESULT __stdcall DeleteVarDesc( 
             UINT index) = 0;
        
        virtual HRESULT __stdcall DeleteVarDescByMemId( 
             MEMBERID memid) = 0;
        
        virtual HRESULT __stdcall DeleteImplType( 
             UINT index) = 0;
        
        virtual HRESULT __stdcall SetCustData( 
             const GUID & guid,
             VARIANT  *pVarVal) = 0;
        
        virtual HRESULT __stdcall SetFuncCustData( 
             UINT index,
             const GUID & guid,
             VARIANT  *pVarVal) = 0;
        
        virtual HRESULT __stdcall SetParamCustData( 
             UINT indexFunc,
             UINT indexParam,
             const GUID & guid,
             VARIANT  *pVarVal) = 0;
        
        virtual HRESULT __stdcall SetVarCustData( 
             UINT index,
             const GUID & guid,
             VARIANT  *pVarVal) = 0;
        
        virtual HRESULT __stdcall SetImplTypeCustData( 
             UINT index,
             const GUID & guid,
             VARIANT  *pVarVal) = 0;
        
        virtual HRESULT __stdcall SetHelpStringContext( 
             ULONG dwHelpStringContext) = 0;
        
        virtual HRESULT __stdcall SetFuncHelpStringContext( 
             UINT index,
             ULONG dwHelpStringContext) = 0;
        
        virtual HRESULT __stdcall SetVarHelpStringContext( 
             UINT index,
             ULONG dwHelpStringContext) = 0;
        
        virtual HRESULT __stdcall Invalidate( void) = 0;
        
        virtual HRESULT __stdcall SetName( 
             LPOLESTR szName) = 0;
        
    };
    

















































































































































































































































































































































#line 1905 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"



HRESULT __stdcall ICreateTypeInfo2_DeleteFuncDesc_Proxy( 
    ICreateTypeInfo2  * This,
     UINT index);


void __stdcall ICreateTypeInfo2_DeleteFuncDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_DeleteFuncDescByMemId_Proxy( 
    ICreateTypeInfo2  * This,
     MEMBERID memid,
     INVOKEKIND invKind);


void __stdcall ICreateTypeInfo2_DeleteFuncDescByMemId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_DeleteVarDesc_Proxy( 
    ICreateTypeInfo2  * This,
     UINT index);


void __stdcall ICreateTypeInfo2_DeleteVarDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_DeleteVarDescByMemId_Proxy( 
    ICreateTypeInfo2  * This,
     MEMBERID memid);


void __stdcall ICreateTypeInfo2_DeleteVarDescByMemId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_DeleteImplType_Proxy( 
    ICreateTypeInfo2  * This,
     UINT index);


void __stdcall ICreateTypeInfo2_DeleteImplType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetCustData_Proxy( 
    ICreateTypeInfo2  * This,
     const GUID & guid,
     VARIANT  *pVarVal);


void __stdcall ICreateTypeInfo2_SetCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetFuncCustData_Proxy( 
    ICreateTypeInfo2  * This,
     UINT index,
     const GUID & guid,
     VARIANT  *pVarVal);


void __stdcall ICreateTypeInfo2_SetFuncCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetParamCustData_Proxy( 
    ICreateTypeInfo2  * This,
     UINT indexFunc,
     UINT indexParam,
     const GUID & guid,
     VARIANT  *pVarVal);


void __stdcall ICreateTypeInfo2_SetParamCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetVarCustData_Proxy( 
    ICreateTypeInfo2  * This,
     UINT index,
     const GUID & guid,
     VARIANT  *pVarVal);


void __stdcall ICreateTypeInfo2_SetVarCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetImplTypeCustData_Proxy( 
    ICreateTypeInfo2  * This,
     UINT index,
     const GUID & guid,
     VARIANT  *pVarVal);


void __stdcall ICreateTypeInfo2_SetImplTypeCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetHelpStringContext_Proxy( 
    ICreateTypeInfo2  * This,
     ULONG dwHelpStringContext);


void __stdcall ICreateTypeInfo2_SetHelpStringContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetFuncHelpStringContext_Proxy( 
    ICreateTypeInfo2  * This,
     UINT index,
     ULONG dwHelpStringContext);


void __stdcall ICreateTypeInfo2_SetFuncHelpStringContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetVarHelpStringContext_Proxy( 
    ICreateTypeInfo2  * This,
     UINT index,
     ULONG dwHelpStringContext);


void __stdcall ICreateTypeInfo2_SetVarHelpStringContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_Invalidate_Proxy( 
    ICreateTypeInfo2  * This);


void __stdcall ICreateTypeInfo2_Invalidate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetName_Proxy( 
    ICreateTypeInfo2  * This,
     LPOLESTR szName);


void __stdcall ICreateTypeInfo2_SetName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2102 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"










 


typedef  ICreateTypeLib  *LPCREATETYPELIB;


extern "C" const IID IID_ICreateTypeLib;


    
    struct __declspec(uuid("00020406-0000-0000-C000-000000000046")) __declspec(novtable)
    ICreateTypeLib : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateTypeInfo( 
             LPOLESTR szName,
             TYPEKIND tkind,
             ICreateTypeInfo  * *ppCTInfo) = 0;
        
        virtual HRESULT __stdcall SetName( 
             LPOLESTR szName) = 0;
        
        virtual HRESULT __stdcall SetVersion( 
             WORD wMajorVerNum,
             WORD wMinorVerNum) = 0;
        
        virtual HRESULT __stdcall SetGuid( 
             const GUID & guid) = 0;
        
        virtual HRESULT __stdcall SetDocString( 
             LPOLESTR szDoc) = 0;
        
        virtual HRESULT __stdcall SetHelpFileName( 
             LPOLESTR szHelpFileName) = 0;
        
        virtual HRESULT __stdcall SetHelpContext( 
             DWORD dwHelpContext) = 0;
        
        virtual HRESULT __stdcall SetLcid( 
             LCID lcid) = 0;
        
        virtual HRESULT __stdcall SetLibFlags( 
             UINT uLibFlags) = 0;
        
        virtual HRESULT __stdcall SaveAllChanges( void) = 0;
        
    };
    



















































































































#line 2276 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"



HRESULT __stdcall ICreateTypeLib_CreateTypeInfo_Proxy( 
    ICreateTypeLib  * This,
     LPOLESTR szName,
     TYPEKIND tkind,
     ICreateTypeInfo  * *ppCTInfo);


void __stdcall ICreateTypeLib_CreateTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SetName_Proxy( 
    ICreateTypeLib  * This,
     LPOLESTR szName);


void __stdcall ICreateTypeLib_SetName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SetVersion_Proxy( 
    ICreateTypeLib  * This,
     WORD wMajorVerNum,
     WORD wMinorVerNum);


void __stdcall ICreateTypeLib_SetVersion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SetGuid_Proxy( 
    ICreateTypeLib  * This,
     const GUID & guid);


void __stdcall ICreateTypeLib_SetGuid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SetDocString_Proxy( 
    ICreateTypeLib  * This,
     LPOLESTR szDoc);


void __stdcall ICreateTypeLib_SetDocString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SetHelpFileName_Proxy( 
    ICreateTypeLib  * This,
     LPOLESTR szHelpFileName);


void __stdcall ICreateTypeLib_SetHelpFileName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SetHelpContext_Proxy( 
    ICreateTypeLib  * This,
     DWORD dwHelpContext);


void __stdcall ICreateTypeLib_SetHelpContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SetLcid_Proxy( 
    ICreateTypeLib  * This,
     LCID lcid);


void __stdcall ICreateTypeLib_SetLcid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SetLibFlags_Proxy( 
    ICreateTypeLib  * This,
     UINT uLibFlags);


void __stdcall ICreateTypeLib_SetLibFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SaveAllChanges_Proxy( 
    ICreateTypeLib  * This);


void __stdcall ICreateTypeLib_SaveAllChanges_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2403 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"










 


typedef  ICreateTypeLib2  *LPCREATETYPELIB2;


extern "C" const IID IID_ICreateTypeLib2;


    
    struct __declspec(uuid("0002040F-0000-0000-C000-000000000046")) __declspec(novtable)
    ICreateTypeLib2 : public ICreateTypeLib
    {
    public:
        virtual HRESULT __stdcall DeleteTypeInfo( 
             LPOLESTR szName) = 0;
        
        virtual HRESULT __stdcall SetCustData( 
             const GUID & guid,
             VARIANT  *pVarVal) = 0;
        
        virtual HRESULT __stdcall SetHelpStringContext( 
             ULONG dwHelpStringContext) = 0;
        
        virtual HRESULT __stdcall SetHelpStringDll( 
             LPOLESTR szFileName) = 0;
        
    };
    

















































































































































#line 2588 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"



HRESULT __stdcall ICreateTypeLib2_DeleteTypeInfo_Proxy( 
    ICreateTypeLib2  * This,
     LPOLESTR szName);


void __stdcall ICreateTypeLib2_DeleteTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib2_SetCustData_Proxy( 
    ICreateTypeLib2  * This,
     const GUID & guid,
     VARIANT  *pVarVal);


void __stdcall ICreateTypeLib2_SetCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib2_SetHelpStringContext_Proxy( 
    ICreateTypeLib2  * This,
     ULONG dwHelpStringContext);


void __stdcall ICreateTypeLib2_SetHelpStringContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib2_SetHelpStringDll_Proxy( 
    ICreateTypeLib2  * This,
     LPOLESTR szFileName);


void __stdcall ICreateTypeLib2_SetHelpStringDll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2642 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"










 


typedef  IDispatch  *LPDISPATCH;

































extern "C" const IID IID_IDispatch;


    
    struct __declspec(uuid("00020400-0000-0000-C000-000000000046")) __declspec(novtable)
    IDispatch : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetTypeInfoCount( 
             UINT  *pctinfo) = 0;
        
        virtual HRESULT __stdcall GetTypeInfo( 
             UINT iTInfo,
             LCID lcid,
             ITypeInfo  * *ppTInfo) = 0;
        
        virtual HRESULT __stdcall GetIDsOfNames( 
             const IID & riid,
             LPOLESTR  *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID  *rgDispId) = 0;
        
        virtual  HRESULT __stdcall Invoke( 
             DISPID dispIdMember,
             const IID & riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS  *pDispParams,
             VARIANT  *pVarResult,
             EXCEPINFO  *pExcepInfo,
             UINT  *puArgErr) = 0;
        
    };
    




















































































#line 2809 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"



HRESULT __stdcall IDispatch_GetTypeInfoCount_Proxy( 
    IDispatch  * This,
     UINT  *pctinfo);


void __stdcall IDispatch_GetTypeInfoCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDispatch_GetTypeInfo_Proxy( 
    IDispatch  * This,
     UINT iTInfo,
     LCID lcid,
     ITypeInfo  * *ppTInfo);


void __stdcall IDispatch_GetTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDispatch_GetIDsOfNames_Proxy( 
    IDispatch  * This,
     const IID & riid,
     LPOLESTR  *rgszNames,
     UINT cNames,
     LCID lcid,
     DISPID  *rgDispId);


void __stdcall IDispatch_GetIDsOfNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IDispatch_RemoteInvoke_Proxy( 
    IDispatch  * This,
     DISPID dispIdMember,
     const IID & riid,
     LCID lcid,
     DWORD dwFlags,
     DISPPARAMS  *pDispParams,
     VARIANT  *pVarResult,
     EXCEPINFO  *pExcepInfo,
     UINT  *pArgErr,
     UINT cVarRef,
     UINT  *rgVarRefIdx,
     VARIANTARG  *rgVarRef);


void __stdcall IDispatch_RemoteInvoke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2878 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"










 


typedef  IEnumVARIANT  *LPENUMVARIANT;


extern "C" const IID IID_IEnumVARIANT;


    
    struct __declspec(uuid("00020404-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumVARIANT : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             VARIANT  *rgVar,
             ULONG  *pCeltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumVARIANT  * *ppEnum) = 0;
        
    };
    








































































#line 2990 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"



 HRESULT __stdcall IEnumVARIANT_RemoteNext_Proxy( 
    IEnumVARIANT  * This,
     ULONG celt,
     VARIANT  *rgVar,
     ULONG  *pCeltFetched);


void __stdcall IEnumVARIANT_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumVARIANT_Skip_Proxy( 
    IEnumVARIANT  * This,
     ULONG celt);


void __stdcall IEnumVARIANT_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumVARIANT_Reset_Proxy( 
    IEnumVARIANT  * This);


void __stdcall IEnumVARIANT_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumVARIANT_Clone_Proxy( 
    IEnumVARIANT  * This,
     IEnumVARIANT  * *ppEnum);


void __stdcall IEnumVARIANT_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3044 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"










 


typedef  ITypeComp  *LPTYPECOMP;

typedef  
enum tagDESCKIND
    {	DESCKIND_NONE	= 0,
	DESCKIND_FUNCDESC	= DESCKIND_NONE + 1,
	DESCKIND_VARDESC	= DESCKIND_FUNCDESC + 1,
	DESCKIND_TYPECOMP	= DESCKIND_VARDESC + 1,
	DESCKIND_IMPLICITAPPOBJ	= DESCKIND_TYPECOMP + 1,
	DESCKIND_MAX	= DESCKIND_IMPLICITAPPOBJ + 1
    }	DESCKIND;

typedef union tagBINDPTR
    {
    FUNCDESC  *lpfuncdesc;
    VARDESC  *lpvardesc;
    ITypeComp  *lptcomp;
    }	BINDPTR;

typedef union tagBINDPTR  *LPBINDPTR;


extern "C" const IID IID_ITypeComp;


    
    struct __declspec(uuid("00020403-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeComp : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Bind( 
             LPOLESTR szName,
             ULONG lHashVal,
             WORD wFlags,
             ITypeInfo  * *ppTInfo,
             DESCKIND  *pDescKind,
             BINDPTR  *pBindPtr) = 0;
        
        virtual  HRESULT __stdcall BindType( 
             LPOLESTR szName,
             ULONG lHashVal,
             ITypeInfo  * *ppTInfo,
             ITypeComp  * *ppTComp) = 0;
        
    };
    

































































#line 3169 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"



 HRESULT __stdcall ITypeComp_RemoteBind_Proxy( 
    ITypeComp  * This,
     LPOLESTR szName,
     ULONG lHashVal,
     WORD wFlags,
     ITypeInfo  * *ppTInfo,
     DESCKIND  *pDescKind,
     LPFUNCDESC  *ppFuncDesc,
     LPVARDESC  *ppVarDesc,
     ITypeComp  * *ppTypeComp,
     CLEANLOCALSTORAGE  *pDummy);


void __stdcall ITypeComp_RemoteBind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeComp_RemoteBindType_Proxy( 
    ITypeComp  * This,
     LPOLESTR szName,
     ULONG lHashVal,
     ITypeInfo  * *ppTInfo);


void __stdcall ITypeComp_RemoteBindType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3208 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"










 


typedef  ITypeInfo  *LPTYPEINFO;


extern "C" const IID IID_ITypeInfo;


    
    struct __declspec(uuid("00020401-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeInfo : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall GetTypeAttr( 
             TYPEATTR  * *ppTypeAttr) = 0;
        
        virtual HRESULT __stdcall GetTypeComp( 
             ITypeComp  * *ppTComp) = 0;
        
        virtual  HRESULT __stdcall GetFuncDesc( 
             UINT index,
             FUNCDESC  * *ppFuncDesc) = 0;
        
        virtual  HRESULT __stdcall GetVarDesc( 
             UINT index,
             VARDESC  * *ppVarDesc) = 0;
        
        virtual  HRESULT __stdcall GetNames( 
             MEMBERID memid,
             BSTR  *rgBstrNames,
             UINT cMaxNames,
             UINT  *pcNames) = 0;
        
        virtual HRESULT __stdcall GetRefTypeOfImplType( 
             UINT index,
             HREFTYPE  *pRefType) = 0;
        
        virtual HRESULT __stdcall GetImplTypeFlags( 
             UINT index,
             INT  *pImplTypeFlags) = 0;
        
        virtual  HRESULT __stdcall GetIDsOfNames( 
             LPOLESTR  *rgszNames,
             UINT cNames,
             MEMBERID  *pMemId) = 0;
        
        virtual  HRESULT __stdcall Invoke( 
             PVOID pvInstance,
             MEMBERID memid,
             WORD wFlags,
             DISPPARAMS  *pDispParams,
             VARIANT  *pVarResult,
             EXCEPINFO  *pExcepInfo,
             UINT  *puArgErr) = 0;
        
        virtual  HRESULT __stdcall GetDocumentation( 
             MEMBERID memid,
             BSTR  *pBstrName,
             BSTR  *pBstrDocString,
             DWORD  *pdwHelpContext,
             BSTR  *pBstrHelpFile) = 0;
        
        virtual  HRESULT __stdcall GetDllEntry( 
             MEMBERID memid,
             INVOKEKIND invKind,
             BSTR  *pBstrDllName,
             BSTR  *pBstrName,
             WORD  *pwOrdinal) = 0;
        
        virtual HRESULT __stdcall GetRefTypeInfo( 
             HREFTYPE hRefType,
             ITypeInfo  * *ppTInfo) = 0;
        
        virtual  HRESULT __stdcall AddressOfMember( 
             MEMBERID memid,
             INVOKEKIND invKind,
             PVOID  *ppv) = 0;
        
        virtual  HRESULT __stdcall CreateInstance( 
             IUnknown  *pUnkOuter,
             const IID & riid,
             PVOID  *ppvObj) = 0;
        
        virtual HRESULT __stdcall GetMops( 
             MEMBERID memid,
             BSTR  *pBstrMops) = 0;
        
        virtual  HRESULT __stdcall GetContainingTypeLib( 
             ITypeLib  * *ppTLib,
             UINT  *pIndex) = 0;
        
        virtual  void __stdcall ReleaseTypeAttr( 
             TYPEATTR  *pTypeAttr) = 0;
        
        virtual  void __stdcall ReleaseFuncDesc( 
             FUNCDESC  *pFuncDesc) = 0;
        
        virtual  void __stdcall ReleaseVarDesc( 
             VARDESC  *pVarDesc) = 0;
        
    };
    














































































































































































































#line 3528 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"



 HRESULT __stdcall ITypeInfo_RemoteGetTypeAttr_Proxy( 
    ITypeInfo  * This,
     LPTYPEATTR  *ppTypeAttr,
     CLEANLOCALSTORAGE  *pDummy);


void __stdcall ITypeInfo_RemoteGetTypeAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo_GetTypeComp_Proxy( 
    ITypeInfo  * This,
     ITypeComp  * *ppTComp);


void __stdcall ITypeInfo_GetTypeComp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteGetFuncDesc_Proxy( 
    ITypeInfo  * This,
     UINT index,
     LPFUNCDESC  *ppFuncDesc,
     CLEANLOCALSTORAGE  *pDummy);


void __stdcall ITypeInfo_RemoteGetFuncDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteGetVarDesc_Proxy( 
    ITypeInfo  * This,
     UINT index,
     LPVARDESC  *ppVarDesc,
     CLEANLOCALSTORAGE  *pDummy);


void __stdcall ITypeInfo_RemoteGetVarDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteGetNames_Proxy( 
    ITypeInfo  * This,
     MEMBERID memid,
     BSTR  *rgBstrNames,
     UINT cMaxNames,
     UINT  *pcNames);


void __stdcall ITypeInfo_RemoteGetNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo_GetRefTypeOfImplType_Proxy( 
    ITypeInfo  * This,
     UINT index,
     HREFTYPE  *pRefType);


void __stdcall ITypeInfo_GetRefTypeOfImplType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo_GetImplTypeFlags_Proxy( 
    ITypeInfo  * This,
     UINT index,
     INT  *pImplTypeFlags);


void __stdcall ITypeInfo_GetImplTypeFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_LocalGetIDsOfNames_Proxy( 
    ITypeInfo  * This);


void __stdcall ITypeInfo_LocalGetIDsOfNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_LocalInvoke_Proxy( 
    ITypeInfo  * This);


void __stdcall ITypeInfo_LocalInvoke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteGetDocumentation_Proxy( 
    ITypeInfo  * This,
     MEMBERID memid,
     DWORD refPtrFlags,
     BSTR  *pBstrName,
     BSTR  *pBstrDocString,
     DWORD  *pdwHelpContext,
     BSTR  *pBstrHelpFile);


void __stdcall ITypeInfo_RemoteGetDocumentation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteGetDllEntry_Proxy( 
    ITypeInfo  * This,
     MEMBERID memid,
     INVOKEKIND invKind,
     DWORD refPtrFlags,
     BSTR  *pBstrDllName,
     BSTR  *pBstrName,
     WORD  *pwOrdinal);


void __stdcall ITypeInfo_RemoteGetDllEntry_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo_GetRefTypeInfo_Proxy( 
    ITypeInfo  * This,
     HREFTYPE hRefType,
     ITypeInfo  * *ppTInfo);


void __stdcall ITypeInfo_GetRefTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_LocalAddressOfMember_Proxy( 
    ITypeInfo  * This);


void __stdcall ITypeInfo_LocalAddressOfMember_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteCreateInstance_Proxy( 
    ITypeInfo  * This,
     const IID & riid,
     IUnknown  * *ppvObj);


void __stdcall ITypeInfo_RemoteCreateInstance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo_GetMops_Proxy( 
    ITypeInfo  * This,
     MEMBERID memid,
     BSTR  *pBstrMops);


void __stdcall ITypeInfo_GetMops_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteGetContainingTypeLib_Proxy( 
    ITypeInfo  * This,
     ITypeLib  * *ppTLib,
     UINT  *pIndex);


void __stdcall ITypeInfo_RemoteGetContainingTypeLib_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_LocalReleaseTypeAttr_Proxy( 
    ITypeInfo  * This);


void __stdcall ITypeInfo_LocalReleaseTypeAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_LocalReleaseFuncDesc_Proxy( 
    ITypeInfo  * This);


void __stdcall ITypeInfo_LocalReleaseFuncDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_LocalReleaseVarDesc_Proxy( 
    ITypeInfo  * This);


void __stdcall ITypeInfo_LocalReleaseVarDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3779 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"










 


typedef  ITypeInfo2  *LPTYPEINFO2;


extern "C" const IID IID_ITypeInfo2;


    
    struct __declspec(uuid("00020412-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeInfo2 : public ITypeInfo
    {
    public:
        virtual HRESULT __stdcall GetTypeKind( 
             TYPEKIND  *pTypeKind) = 0;
        
        virtual HRESULT __stdcall GetTypeFlags( 
             ULONG  *pTypeFlags) = 0;
        
        virtual HRESULT __stdcall GetFuncIndexOfMemId( 
             MEMBERID memid,
             INVOKEKIND invKind,
             UINT  *pFuncIndex) = 0;
        
        virtual HRESULT __stdcall GetVarIndexOfMemId( 
             MEMBERID memid,
             UINT  *pVarIndex) = 0;
        
        virtual HRESULT __stdcall GetCustData( 
             const GUID & guid,
             VARIANT  *pVarVal) = 0;
        
        virtual HRESULT __stdcall GetFuncCustData( 
             UINT index,
             const GUID & guid,
             VARIANT  *pVarVal) = 0;
        
        virtual HRESULT __stdcall GetParamCustData( 
             UINT indexFunc,
             UINT indexParam,
             const GUID & guid,
             VARIANT  *pVarVal) = 0;
        
        virtual HRESULT __stdcall GetVarCustData( 
             UINT index,
             const GUID & guid,
             VARIANT  *pVarVal) = 0;
        
        virtual HRESULT __stdcall GetImplTypeCustData( 
             UINT index,
             const GUID & guid,
             VARIANT  *pVarVal) = 0;
        
        virtual  HRESULT __stdcall GetDocumentation2( 
             MEMBERID memid,
             LCID lcid,
             BSTR  *pbstrHelpString,
             DWORD  *pdwHelpStringContext,
             BSTR  *pbstrHelpStringDll) = 0;
        
        virtual HRESULT __stdcall GetAllCustData( 
             CUSTDATA  *pCustData) = 0;
        
        virtual HRESULT __stdcall GetAllFuncCustData( 
             UINT index,
             CUSTDATA  *pCustData) = 0;
        
        virtual HRESULT __stdcall GetAllParamCustData( 
             UINT indexFunc,
             UINT indexParam,
             CUSTDATA  *pCustData) = 0;
        
        virtual HRESULT __stdcall GetAllVarCustData( 
             UINT index,
             CUSTDATA  *pCustData) = 0;
        
        virtual HRESULT __stdcall GetAllImplTypeCustData( 
             UINT index,
             CUSTDATA  *pCustData) = 0;
        
    };
    














































































































































































































































































































































#line 4207 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"



HRESULT __stdcall ITypeInfo2_GetTypeKind_Proxy( 
    ITypeInfo2  * This,
     TYPEKIND  *pTypeKind);


void __stdcall ITypeInfo2_GetTypeKind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetTypeFlags_Proxy( 
    ITypeInfo2  * This,
     ULONG  *pTypeFlags);


void __stdcall ITypeInfo2_GetTypeFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetFuncIndexOfMemId_Proxy( 
    ITypeInfo2  * This,
     MEMBERID memid,
     INVOKEKIND invKind,
     UINT  *pFuncIndex);


void __stdcall ITypeInfo2_GetFuncIndexOfMemId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetVarIndexOfMemId_Proxy( 
    ITypeInfo2  * This,
     MEMBERID memid,
     UINT  *pVarIndex);


void __stdcall ITypeInfo2_GetVarIndexOfMemId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetCustData_Proxy( 
    ITypeInfo2  * This,
     const GUID & guid,
     VARIANT  *pVarVal);


void __stdcall ITypeInfo2_GetCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetFuncCustData_Proxy( 
    ITypeInfo2  * This,
     UINT index,
     const GUID & guid,
     VARIANT  *pVarVal);


void __stdcall ITypeInfo2_GetFuncCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetParamCustData_Proxy( 
    ITypeInfo2  * This,
     UINT indexFunc,
     UINT indexParam,
     const GUID & guid,
     VARIANT  *pVarVal);


void __stdcall ITypeInfo2_GetParamCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetVarCustData_Proxy( 
    ITypeInfo2  * This,
     UINT index,
     const GUID & guid,
     VARIANT  *pVarVal);


void __stdcall ITypeInfo2_GetVarCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetImplTypeCustData_Proxy( 
    ITypeInfo2  * This,
     UINT index,
     const GUID & guid,
     VARIANT  *pVarVal);


void __stdcall ITypeInfo2_GetImplTypeCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo2_RemoteGetDocumentation2_Proxy( 
    ITypeInfo2  * This,
     MEMBERID memid,
     LCID lcid,
     DWORD refPtrFlags,
     BSTR  *pbstrHelpString,
     DWORD  *pdwHelpStringContext,
     BSTR  *pbstrHelpStringDll);


void __stdcall ITypeInfo2_RemoteGetDocumentation2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetAllCustData_Proxy( 
    ITypeInfo2  * This,
     CUSTDATA  *pCustData);


void __stdcall ITypeInfo2_GetAllCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetAllFuncCustData_Proxy( 
    ITypeInfo2  * This,
     UINT index,
     CUSTDATA  *pCustData);


void __stdcall ITypeInfo2_GetAllFuncCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetAllParamCustData_Proxy( 
    ITypeInfo2  * This,
     UINT indexFunc,
     UINT indexParam,
     CUSTDATA  *pCustData);


void __stdcall ITypeInfo2_GetAllParamCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetAllVarCustData_Proxy( 
    ITypeInfo2  * This,
     UINT index,
     CUSTDATA  *pCustData);


void __stdcall ITypeInfo2_GetAllVarCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetAllImplTypeCustData_Proxy( 
    ITypeInfo2  * This,
     UINT index,
     CUSTDATA  *pCustData);


void __stdcall ITypeInfo2_GetAllImplTypeCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4415 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"










 


typedef  
enum tagSYSKIND
    {	SYS_WIN16	= 0,
	SYS_WIN32	= SYS_WIN16 + 1,
	SYS_MAC	= SYS_WIN32 + 1
    }	SYSKIND;

typedef  
enum tagLIBFLAGS
    {	LIBFLAG_FRESTRICTED	= 0x1,
	LIBFLAG_FCONTROL	= 0x2,
	LIBFLAG_FHIDDEN	= 0x4,
	LIBFLAG_FHASDISKIMAGE	= 0x8
    }	LIBFLAGS;

typedef  ITypeLib  *LPTYPELIB;

typedef struct  tagTLIBATTR
    {
    GUID guid;
    LCID lcid;
    SYSKIND syskind;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    WORD wLibFlags;
    }	TLIBATTR;

typedef struct tagTLIBATTR  *LPTLIBATTR;


extern "C" const IID IID_ITypeLib;


    
    struct __declspec(uuid("00020402-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeLib : public IUnknown
    {
    public:
        virtual  UINT __stdcall GetTypeInfoCount( void) = 0;
        
        virtual HRESULT __stdcall GetTypeInfo( 
             UINT index,
             ITypeInfo  * *ppTInfo) = 0;
        
        virtual HRESULT __stdcall GetTypeInfoType( 
             UINT index,
             TYPEKIND  *pTKind) = 0;
        
        virtual HRESULT __stdcall GetTypeInfoOfGuid( 
             const GUID & guid,
             ITypeInfo  * *ppTinfo) = 0;
        
        virtual  HRESULT __stdcall GetLibAttr( 
             TLIBATTR  * *ppTLibAttr) = 0;
        
        virtual HRESULT __stdcall GetTypeComp( 
             ITypeComp  * *ppTComp) = 0;
        
        virtual  HRESULT __stdcall GetDocumentation( 
             INT index,
             BSTR  *pBstrName,
             BSTR  *pBstrDocString,
             DWORD  *pdwHelpContext,
             BSTR  *pBstrHelpFile) = 0;
        
        virtual  HRESULT __stdcall IsName( 
             LPOLESTR szNameBuf,
             ULONG lHashVal,
             BOOL  *pfName) = 0;
        
        virtual  HRESULT __stdcall FindName( 
             LPOLESTR szNameBuf,
             ULONG lHashVal,
             ITypeInfo  * *ppTInfo,
             MEMBERID  *rgMemId,
             USHORT  *pcFound) = 0;
        
        virtual  void __stdcall ReleaseTLibAttr( 
             TLIBATTR  *pTLibAttr) = 0;
        
    };
    





























































































































#line 4636 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"



 HRESULT __stdcall ITypeLib_RemoteGetTypeInfoCount_Proxy( 
    ITypeLib  * This,
     UINT  *pcTInfo);


void __stdcall ITypeLib_RemoteGetTypeInfoCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeLib_GetTypeInfo_Proxy( 
    ITypeLib  * This,
     UINT index,
     ITypeInfo  * *ppTInfo);


void __stdcall ITypeLib_GetTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeLib_GetTypeInfoType_Proxy( 
    ITypeLib  * This,
     UINT index,
     TYPEKIND  *pTKind);


void __stdcall ITypeLib_GetTypeInfoType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeLib_GetTypeInfoOfGuid_Proxy( 
    ITypeLib  * This,
     const GUID & guid,
     ITypeInfo  * *ppTinfo);


void __stdcall ITypeLib_GetTypeInfoOfGuid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeLib_RemoteGetLibAttr_Proxy( 
    ITypeLib  * This,
     LPTLIBATTR  *ppTLibAttr,
     CLEANLOCALSTORAGE  *pDummy);


void __stdcall ITypeLib_RemoteGetLibAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeLib_GetTypeComp_Proxy( 
    ITypeLib  * This,
     ITypeComp  * *ppTComp);


void __stdcall ITypeLib_GetTypeComp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeLib_RemoteGetDocumentation_Proxy( 
    ITypeLib  * This,
     INT index,
     DWORD refPtrFlags,
     BSTR  *pBstrName,
     BSTR  *pBstrDocString,
     DWORD  *pdwHelpContext,
     BSTR  *pBstrHelpFile);


void __stdcall ITypeLib_RemoteGetDocumentation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeLib_RemoteIsName_Proxy( 
    ITypeLib  * This,
     LPOLESTR szNameBuf,
     ULONG lHashVal,
     BOOL  *pfName,
     BSTR  *pBstrLibName);


void __stdcall ITypeLib_RemoteIsName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeLib_RemoteFindName_Proxy( 
    ITypeLib  * This,
     LPOLESTR szNameBuf,
     ULONG lHashVal,
     ITypeInfo  * *ppTInfo,
     MEMBERID  *rgMemId,
     USHORT  *pcFound,
     BSTR  *pBstrLibName);


void __stdcall ITypeLib_RemoteFindName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeLib_LocalReleaseTLibAttr_Proxy( 
    ITypeLib  * This);


void __stdcall ITypeLib_LocalReleaseTLibAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4777 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"










 


typedef  ITypeLib2  *LPTYPELIB2;


extern "C" const IID IID_ITypeLib2;


    
    struct __declspec(uuid("00020411-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeLib2 : public ITypeLib
    {
    public:
        virtual HRESULT __stdcall GetCustData( 
             const GUID & guid,
             VARIANT  *pVarVal) = 0;
        
        virtual  HRESULT __stdcall GetLibStatistics( 
             ULONG  *pcUniqueNames,
             ULONG  *pcchUniqueNames) = 0;
        
        virtual  HRESULT __stdcall GetDocumentation2( 
             INT index,
             LCID lcid,
             BSTR  *pbstrHelpString,
             DWORD  *pdwHelpStringContext,
             BSTR  *pbstrHelpStringDll) = 0;
        
        virtual HRESULT __stdcall GetAllCustData( 
             CUSTDATA  *pCustData) = 0;
        
    };
    
































































































































































#line 4982 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"



HRESULT __stdcall ITypeLib2_GetCustData_Proxy( 
    ITypeLib2  * This,
     const GUID & guid,
     VARIANT  *pVarVal);


void __stdcall ITypeLib2_GetCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeLib2_RemoteGetLibStatistics_Proxy( 
    ITypeLib2  * This,
     ULONG  *pcUniqueNames,
     ULONG  *pcchUniqueNames);


void __stdcall ITypeLib2_RemoteGetLibStatistics_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeLib2_RemoteGetDocumentation2_Proxy( 
    ITypeLib2  * This,
     INT index,
     LCID lcid,
     DWORD refPtrFlags,
     BSTR  *pbstrHelpString,
     DWORD  *pdwHelpStringContext,
     BSTR  *pbstrHelpStringDll);


void __stdcall ITypeLib2_RemoteGetDocumentation2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeLib2_GetAllCustData_Proxy( 
    ITypeLib2  * This,
     CUSTDATA  *pCustData);


void __stdcall ITypeLib2_GetAllCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5042 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"










 


typedef  ITypeChangeEvents  *LPTYPECHANGEEVENTS;

typedef 
enum tagCHANGEKIND
    {	CHANGEKIND_ADDMEMBER	= 0,
	CHANGEKIND_DELETEMEMBER	= CHANGEKIND_ADDMEMBER + 1,
	CHANGEKIND_SETNAMES	= CHANGEKIND_DELETEMEMBER + 1,
	CHANGEKIND_SETDOCUMENTATION	= CHANGEKIND_SETNAMES + 1,
	CHANGEKIND_GENERAL	= CHANGEKIND_SETDOCUMENTATION + 1,
	CHANGEKIND_INVALIDATE	= CHANGEKIND_GENERAL + 1,
	CHANGEKIND_CHANGEFAILED	= CHANGEKIND_INVALIDATE + 1,
	CHANGEKIND_MAX	= CHANGEKIND_CHANGEFAILED + 1
    }	CHANGEKIND;


extern "C" const IID IID_ITypeChangeEvents;


    
    struct __declspec(uuid("00020410-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeChangeEvents : public IUnknown
    {
    public:
        virtual HRESULT __stdcall RequestTypeChange( 
             CHANGEKIND changeKind,
             ITypeInfo  *pTInfoBefore,
             LPOLESTR pStrName,
             INT  *pfCancel) = 0;
        
        virtual HRESULT __stdcall AfterTypeChange( 
             CHANGEKIND changeKind,
             ITypeInfo  *pTInfoAfter,
             LPOLESTR pStrName) = 0;
        
    };
    






























































#line 5154 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"



HRESULT __stdcall ITypeChangeEvents_RequestTypeChange_Proxy( 
    ITypeChangeEvents  * This,
     CHANGEKIND changeKind,
     ITypeInfo  *pTInfoBefore,
     LPOLESTR pStrName,
     INT  *pfCancel);


void __stdcall ITypeChangeEvents_RequestTypeChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeChangeEvents_AfterTypeChange_Proxy( 
    ITypeChangeEvents  * This,
     CHANGEKIND changeKind,
     ITypeInfo  *pTInfoAfter,
     LPOLESTR pStrName);


void __stdcall ITypeChangeEvents_AfterTypeChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5188 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"










 


typedef  IErrorInfo  *LPERRORINFO;


extern "C" const IID IID_IErrorInfo;


    
    struct __declspec(uuid("1CF2B120-547D-101B-8E65-08002B2BD119")) __declspec(novtable)
    IErrorInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetGUID( 
             GUID  *pGUID) = 0;
        
        virtual HRESULT __stdcall GetSource( 
             BSTR  *pBstrSource) = 0;
        
        virtual HRESULT __stdcall GetDescription( 
             BSTR  *pBstrDescription) = 0;
        
        virtual HRESULT __stdcall GetHelpFile( 
             BSTR  *pBstrHelpFile) = 0;
        
        virtual HRESULT __stdcall GetHelpContext( 
             DWORD  *pdwHelpContext) = 0;
        
    };
    














































































#line 5308 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"



HRESULT __stdcall IErrorInfo_GetGUID_Proxy( 
    IErrorInfo  * This,
     GUID  *pGUID);


void __stdcall IErrorInfo_GetGUID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IErrorInfo_GetSource_Proxy( 
    IErrorInfo  * This,
     BSTR  *pBstrSource);


void __stdcall IErrorInfo_GetSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IErrorInfo_GetDescription_Proxy( 
    IErrorInfo  * This,
     BSTR  *pBstrDescription);


void __stdcall IErrorInfo_GetDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IErrorInfo_GetHelpFile_Proxy( 
    IErrorInfo  * This,
     BSTR  *pBstrHelpFile);


void __stdcall IErrorInfo_GetHelpFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IErrorInfo_GetHelpContext_Proxy( 
    IErrorInfo  * This,
     DWORD  *pdwHelpContext);


void __stdcall IErrorInfo_GetHelpContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5373 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"










 


typedef  ICreateErrorInfo  *LPCREATEERRORINFO;


extern "C" const IID IID_ICreateErrorInfo;


    
    struct __declspec(uuid("22F03340-547D-101B-8E65-08002B2BD119")) __declspec(novtable)
    ICreateErrorInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetGUID( 
             const GUID & rguid) = 0;
        
        virtual HRESULT __stdcall SetSource( 
             LPOLESTR szSource) = 0;
        
        virtual HRESULT __stdcall SetDescription( 
             LPOLESTR szDescription) = 0;
        
        virtual HRESULT __stdcall SetHelpFile( 
             LPOLESTR szHelpFile) = 0;
        
        virtual HRESULT __stdcall SetHelpContext( 
             DWORD dwHelpContext) = 0;
        
    };
    














































































#line 5493 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"



HRESULT __stdcall ICreateErrorInfo_SetGUID_Proxy( 
    ICreateErrorInfo  * This,
     const GUID & rguid);


void __stdcall ICreateErrorInfo_SetGUID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateErrorInfo_SetSource_Proxy( 
    ICreateErrorInfo  * This,
     LPOLESTR szSource);


void __stdcall ICreateErrorInfo_SetSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateErrorInfo_SetDescription_Proxy( 
    ICreateErrorInfo  * This,
     LPOLESTR szDescription);


void __stdcall ICreateErrorInfo_SetDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateErrorInfo_SetHelpFile_Proxy( 
    ICreateErrorInfo  * This,
     LPOLESTR szHelpFile);


void __stdcall ICreateErrorInfo_SetHelpFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateErrorInfo_SetHelpContext_Proxy( 
    ICreateErrorInfo  * This,
     DWORD dwHelpContext);


void __stdcall ICreateErrorInfo_SetHelpContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5558 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"










 


typedef  ISupportErrorInfo  *LPSUPPORTERRORINFO;


extern "C" const IID IID_ISupportErrorInfo;


    
    struct __declspec(uuid("DF0B3D60-548F-101B-8E65-08002B2BD119")) __declspec(novtable)
    ISupportErrorInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall InterfaceSupportsErrorInfo( 
             const IID & riid) = 0;
        
    };
    


















































#line 5638 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"



HRESULT __stdcall ISupportErrorInfo_InterfaceSupportsErrorInfo_Proxy( 
    ISupportErrorInfo  * This,
     const IID & riid);


void __stdcall ISupportErrorInfo_InterfaceSupportsErrorInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5655 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"










 



extern "C" const IID IID_ITypeFactory;


    
    struct __declspec(uuid("0000002E-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeFactory : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateFromTypeInfo( 
             ITypeInfo  *pTypeInfo,
             const IID & riid,
             IUnknown  * *ppv) = 0;
        
    };
    




















































#line 5737 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"



HRESULT __stdcall ITypeFactory_CreateFromTypeInfo_Proxy( 
    ITypeFactory  * This,
     ITypeInfo  *pTypeInfo,
     const IID & riid,
     IUnknown  * *ppv);


void __stdcall ITypeFactory_CreateFromTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5756 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"










 



extern "C" const IID IID_ITypeMarshal;


    
    struct __declspec(uuid("0000002D-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeMarshal : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Size( 
             PVOID pvType,
             DWORD dwDestContext,
             PVOID pvDestContext,
             ULONG  *pSize) = 0;
        
        virtual HRESULT __stdcall Marshal( 
             PVOID pvType,
             DWORD dwDestContext,
             PVOID pvDestContext,
             ULONG cbBufferLength,
             BYTE  *pBuffer,
             ULONG  *pcbWritten) = 0;
        
        virtual HRESULT __stdcall Unmarshal( 
             PVOID pvType,
             DWORD dwFlags,
             ULONG cbBufferLength,
             BYTE  *pBuffer,
             ULONG  *pcbRead) = 0;
        
        virtual HRESULT __stdcall Free( 
             PVOID pvType) = 0;
        
    };
    



















































































#line 5888 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"



HRESULT __stdcall ITypeMarshal_Size_Proxy( 
    ITypeMarshal  * This,
     PVOID pvType,
     DWORD dwDestContext,
     PVOID pvDestContext,
     ULONG  *pSize);


void __stdcall ITypeMarshal_Size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeMarshal_Marshal_Proxy( 
    ITypeMarshal  * This,
     PVOID pvType,
     DWORD dwDestContext,
     PVOID pvDestContext,
     ULONG cbBufferLength,
     BYTE  *pBuffer,
     ULONG  *pcbWritten);


void __stdcall ITypeMarshal_Marshal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeMarshal_Unmarshal_Proxy( 
    ITypeMarshal  * This,
     PVOID pvType,
     DWORD dwFlags,
     ULONG cbBufferLength,
     BYTE  *pBuffer,
     ULONG  *pcbRead);


void __stdcall ITypeMarshal_Unmarshal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeMarshal_Free_Proxy( 
    ITypeMarshal  * This,
     PVOID pvType);


void __stdcall ITypeMarshal_Free_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5953 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"










 


typedef  IRecordInfo  *LPRECORDINFO;


extern "C" const IID IID_IRecordInfo;


    
    struct __declspec(uuid("0000002F-0000-0000-C000-000000000046")) __declspec(novtable)
    IRecordInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall RecordInit( 
             PVOID pvNew) = 0;
        
        virtual HRESULT __stdcall RecordClear( 
             PVOID pvExisting) = 0;
        
        virtual HRESULT __stdcall RecordCopy( 
             PVOID pvExisting,
             PVOID pvNew) = 0;
        
        virtual HRESULT __stdcall GetGuid( 
             GUID  *pguid) = 0;
        
        virtual HRESULT __stdcall GetName( 
             BSTR  *pbstrName) = 0;
        
        virtual HRESULT __stdcall GetSize( 
             ULONG  *pcbSize) = 0;
        
        virtual HRESULT __stdcall GetTypeInfo( 
             ITypeInfo  * *ppTypeInfo) = 0;
        
        virtual HRESULT __stdcall GetField( 
             PVOID pvData,
             LPCOLESTR szFieldName,
             VARIANT  *pvarField) = 0;
        
        virtual HRESULT __stdcall GetFieldNoCopy( 
             PVOID pvData,
             LPCOLESTR szFieldName,
             VARIANT  *pvarField,
             PVOID  *ppvDataCArray) = 0;
        
        virtual HRESULT __stdcall PutField( 
             ULONG wFlags,
             PVOID pvData,
             LPCOLESTR szFieldName,
             VARIANT  *pvarField) = 0;
        
        virtual HRESULT __stdcall PutFieldNoCopy( 
             ULONG wFlags,
             PVOID pvData,
             LPCOLESTR szFieldName,
             VARIANT  *pvarField) = 0;
        
        virtual HRESULT __stdcall GetFieldNames( 
             ULONG  *pcNames,
             BSTR  *rgBstrNames) = 0;
        
        virtual BOOL __stdcall IsMatchingType( 
             IRecordInfo  *pRecordInfo) = 0;
        
        virtual PVOID __stdcall RecordCreate( void) = 0;
        
        virtual HRESULT __stdcall RecordCreateCopy( 
             PVOID pvSource,
             PVOID  *ppvDest) = 0;
        
        virtual HRESULT __stdcall RecordDestroy( 
             PVOID pvRecord) = 0;
        
    };
    








































































































































































#line 6209 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"



HRESULT __stdcall IRecordInfo_RecordInit_Proxy( 
    IRecordInfo  * This,
     PVOID pvNew);


void __stdcall IRecordInfo_RecordInit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_RecordClear_Proxy( 
    IRecordInfo  * This,
     PVOID pvExisting);


void __stdcall IRecordInfo_RecordClear_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_RecordCopy_Proxy( 
    IRecordInfo  * This,
     PVOID pvExisting,
     PVOID pvNew);


void __stdcall IRecordInfo_RecordCopy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_GetGuid_Proxy( 
    IRecordInfo  * This,
     GUID  *pguid);


void __stdcall IRecordInfo_GetGuid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_GetName_Proxy( 
    IRecordInfo  * This,
     BSTR  *pbstrName);


void __stdcall IRecordInfo_GetName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_GetSize_Proxy( 
    IRecordInfo  * This,
     ULONG  *pcbSize);


void __stdcall IRecordInfo_GetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_GetTypeInfo_Proxy( 
    IRecordInfo  * This,
     ITypeInfo  * *ppTypeInfo);


void __stdcall IRecordInfo_GetTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_GetField_Proxy( 
    IRecordInfo  * This,
     PVOID pvData,
     LPCOLESTR szFieldName,
     VARIANT  *pvarField);


void __stdcall IRecordInfo_GetField_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_GetFieldNoCopy_Proxy( 
    IRecordInfo  * This,
     PVOID pvData,
     LPCOLESTR szFieldName,
     VARIANT  *pvarField,
     PVOID  *ppvDataCArray);


void __stdcall IRecordInfo_GetFieldNoCopy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_PutField_Proxy( 
    IRecordInfo  * This,
     ULONG wFlags,
     PVOID pvData,
     LPCOLESTR szFieldName,
     VARIANT  *pvarField);


void __stdcall IRecordInfo_PutField_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_PutFieldNoCopy_Proxy( 
    IRecordInfo  * This,
     ULONG wFlags,
     PVOID pvData,
     LPCOLESTR szFieldName,
     VARIANT  *pvarField);


void __stdcall IRecordInfo_PutFieldNoCopy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_GetFieldNames_Proxy( 
    IRecordInfo  * This,
     ULONG  *pcNames,
     BSTR  *rgBstrNames);


void __stdcall IRecordInfo_GetFieldNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


BOOL __stdcall IRecordInfo_IsMatchingType_Proxy( 
    IRecordInfo  * This,
     IRecordInfo  *pRecordInfo);


void __stdcall IRecordInfo_IsMatchingType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


PVOID __stdcall IRecordInfo_RecordCreate_Proxy( 
    IRecordInfo  * This);


void __stdcall IRecordInfo_RecordCreate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_RecordCreateCopy_Proxy( 
    IRecordInfo  * This,
     PVOID pvSource,
     PVOID  *ppvDest);


void __stdcall IRecordInfo_RecordCreateCopy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_RecordDestroy_Proxy( 
    IRecordInfo  * This,
     PVOID pvRecord);


void __stdcall IRecordInfo_RecordDestroy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6419 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"







 



#pragma warning(default:4201) 
#line 6432 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"


extern RPC_IF_HANDLE __MIDL_itf_oaidl_0092_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0092_v0_0_s_ifspec;



unsigned long             __stdcall  BSTR_UserSize(     unsigned long  *, unsigned long            , BSTR  * ); 
unsigned char  * __stdcall  BSTR_UserMarshal(  unsigned long  *, unsigned char  *, BSTR  * ); 
unsigned char  * __stdcall  BSTR_UserUnmarshal(unsigned long  *, unsigned char  *, BSTR  * ); 
void                      __stdcall  BSTR_UserFree(     unsigned long  *, BSTR  * ); 

unsigned long             __stdcall  CLEANLOCALSTORAGE_UserSize(     unsigned long  *, unsigned long            , CLEANLOCALSTORAGE  * ); 
unsigned char  * __stdcall  CLEANLOCALSTORAGE_UserMarshal(  unsigned long  *, unsigned char  *, CLEANLOCALSTORAGE  * ); 
unsigned char  * __stdcall  CLEANLOCALSTORAGE_UserUnmarshal(unsigned long  *, unsigned char  *, CLEANLOCALSTORAGE  * ); 
void                      __stdcall  CLEANLOCALSTORAGE_UserFree(     unsigned long  *, CLEANLOCALSTORAGE  * ); 

unsigned long             __stdcall  VARIANT_UserSize(     unsigned long  *, unsigned long            , VARIANT  * ); 
unsigned char  * __stdcall  VARIANT_UserMarshal(  unsigned long  *, unsigned char  *, VARIANT  * ); 
unsigned char  * __stdcall  VARIANT_UserUnmarshal(unsigned long  *, unsigned char  *, VARIANT  * ); 
void                      __stdcall  VARIANT_UserFree(     unsigned long  *, VARIANT  * ); 

 HRESULT __stdcall IDispatch_Invoke_Proxy( 
    IDispatch  * This,
     DISPID dispIdMember,
     const IID & riid,
     LCID lcid,
     WORD wFlags,
     DISPPARAMS  *pDispParams,
     VARIANT  *pVarResult,
     EXCEPINFO  *pExcepInfo,
     UINT  *puArgErr);


 HRESULT __stdcall IDispatch_Invoke_Stub( 
    IDispatch  * This,
     DISPID dispIdMember,
     const IID & riid,
     LCID lcid,
     DWORD dwFlags,
     DISPPARAMS  *pDispParams,
     VARIANT  *pVarResult,
     EXCEPINFO  *pExcepInfo,
     UINT  *pArgErr,
     UINT cVarRef,
     UINT  *rgVarRefIdx,
     VARIANTARG  *rgVarRef);

 HRESULT __stdcall IEnumVARIANT_Next_Proxy( 
    IEnumVARIANT  * This,
     ULONG celt,
     VARIANT  *rgVar,
     ULONG  *pCeltFetched);


 HRESULT __stdcall IEnumVARIANT_Next_Stub( 
    IEnumVARIANT  * This,
     ULONG celt,
     VARIANT  *rgVar,
     ULONG  *pCeltFetched);

 HRESULT __stdcall ITypeComp_Bind_Proxy( 
    ITypeComp  * This,
     LPOLESTR szName,
     ULONG lHashVal,
     WORD wFlags,
     ITypeInfo  * *ppTInfo,
     DESCKIND  *pDescKind,
     BINDPTR  *pBindPtr);


 HRESULT __stdcall ITypeComp_Bind_Stub( 
    ITypeComp  * This,
     LPOLESTR szName,
     ULONG lHashVal,
     WORD wFlags,
     ITypeInfo  * *ppTInfo,
     DESCKIND  *pDescKind,
     LPFUNCDESC  *ppFuncDesc,
     LPVARDESC  *ppVarDesc,
     ITypeComp  * *ppTypeComp,
     CLEANLOCALSTORAGE  *pDummy);

 HRESULT __stdcall ITypeComp_BindType_Proxy( 
    ITypeComp  * This,
     LPOLESTR szName,
     ULONG lHashVal,
     ITypeInfo  * *ppTInfo,
     ITypeComp  * *ppTComp);


 HRESULT __stdcall ITypeComp_BindType_Stub( 
    ITypeComp  * This,
     LPOLESTR szName,
     ULONG lHashVal,
     ITypeInfo  * *ppTInfo);

 HRESULT __stdcall ITypeInfo_GetTypeAttr_Proxy( 
    ITypeInfo  * This,
     TYPEATTR  * *ppTypeAttr);


 HRESULT __stdcall ITypeInfo_GetTypeAttr_Stub( 
    ITypeInfo  * This,
     LPTYPEATTR  *ppTypeAttr,
     CLEANLOCALSTORAGE  *pDummy);

 HRESULT __stdcall ITypeInfo_GetFuncDesc_Proxy( 
    ITypeInfo  * This,
     UINT index,
     FUNCDESC  * *ppFuncDesc);


 HRESULT __stdcall ITypeInfo_GetFuncDesc_Stub( 
    ITypeInfo  * This,
     UINT index,
     LPFUNCDESC  *ppFuncDesc,
     CLEANLOCALSTORAGE  *pDummy);

 HRESULT __stdcall ITypeInfo_GetVarDesc_Proxy( 
    ITypeInfo  * This,
     UINT index,
     VARDESC  * *ppVarDesc);


 HRESULT __stdcall ITypeInfo_GetVarDesc_Stub( 
    ITypeInfo  * This,
     UINT index,
     LPVARDESC  *ppVarDesc,
     CLEANLOCALSTORAGE  *pDummy);

 HRESULT __stdcall ITypeInfo_GetNames_Proxy( 
    ITypeInfo  * This,
     MEMBERID memid,
     BSTR  *rgBstrNames,
     UINT cMaxNames,
     UINT  *pcNames);


 HRESULT __stdcall ITypeInfo_GetNames_Stub( 
    ITypeInfo  * This,
     MEMBERID memid,
     BSTR  *rgBstrNames,
     UINT cMaxNames,
     UINT  *pcNames);

 HRESULT __stdcall ITypeInfo_GetIDsOfNames_Proxy( 
    ITypeInfo  * This,
     LPOLESTR  *rgszNames,
     UINT cNames,
     MEMBERID  *pMemId);


 HRESULT __stdcall ITypeInfo_GetIDsOfNames_Stub( 
    ITypeInfo  * This);

 HRESULT __stdcall ITypeInfo_Invoke_Proxy( 
    ITypeInfo  * This,
     PVOID pvInstance,
     MEMBERID memid,
     WORD wFlags,
     DISPPARAMS  *pDispParams,
     VARIANT  *pVarResult,
     EXCEPINFO  *pExcepInfo,
     UINT  *puArgErr);


 HRESULT __stdcall ITypeInfo_Invoke_Stub( 
    ITypeInfo  * This);

 HRESULT __stdcall ITypeInfo_GetDocumentation_Proxy( 
    ITypeInfo  * This,
     MEMBERID memid,
     BSTR  *pBstrName,
     BSTR  *pBstrDocString,
     DWORD  *pdwHelpContext,
     BSTR  *pBstrHelpFile);


 HRESULT __stdcall ITypeInfo_GetDocumentation_Stub( 
    ITypeInfo  * This,
     MEMBERID memid,
     DWORD refPtrFlags,
     BSTR  *pBstrName,
     BSTR  *pBstrDocString,
     DWORD  *pdwHelpContext,
     BSTR  *pBstrHelpFile);

 HRESULT __stdcall ITypeInfo_GetDllEntry_Proxy( 
    ITypeInfo  * This,
     MEMBERID memid,
     INVOKEKIND invKind,
     BSTR  *pBstrDllName,
     BSTR  *pBstrName,
     WORD  *pwOrdinal);


 HRESULT __stdcall ITypeInfo_GetDllEntry_Stub( 
    ITypeInfo  * This,
     MEMBERID memid,
     INVOKEKIND invKind,
     DWORD refPtrFlags,
     BSTR  *pBstrDllName,
     BSTR  *pBstrName,
     WORD  *pwOrdinal);

 HRESULT __stdcall ITypeInfo_AddressOfMember_Proxy( 
    ITypeInfo  * This,
     MEMBERID memid,
     INVOKEKIND invKind,
     PVOID  *ppv);


 HRESULT __stdcall ITypeInfo_AddressOfMember_Stub( 
    ITypeInfo  * This);

 HRESULT __stdcall ITypeInfo_CreateInstance_Proxy( 
    ITypeInfo  * This,
     IUnknown  *pUnkOuter,
     const IID & riid,
     PVOID  *ppvObj);


 HRESULT __stdcall ITypeInfo_CreateInstance_Stub( 
    ITypeInfo  * This,
     const IID & riid,
     IUnknown  * *ppvObj);

 HRESULT __stdcall ITypeInfo_GetContainingTypeLib_Proxy( 
    ITypeInfo  * This,
     ITypeLib  * *ppTLib,
     UINT  *pIndex);


 HRESULT __stdcall ITypeInfo_GetContainingTypeLib_Stub( 
    ITypeInfo  * This,
     ITypeLib  * *ppTLib,
     UINT  *pIndex);

 void __stdcall ITypeInfo_ReleaseTypeAttr_Proxy( 
    ITypeInfo  * This,
     TYPEATTR  *pTypeAttr);


 HRESULT __stdcall ITypeInfo_ReleaseTypeAttr_Stub( 
    ITypeInfo  * This);

 void __stdcall ITypeInfo_ReleaseFuncDesc_Proxy( 
    ITypeInfo  * This,
     FUNCDESC  *pFuncDesc);


 HRESULT __stdcall ITypeInfo_ReleaseFuncDesc_Stub( 
    ITypeInfo  * This);

 void __stdcall ITypeInfo_ReleaseVarDesc_Proxy( 
    ITypeInfo  * This,
     VARDESC  *pVarDesc);


 HRESULT __stdcall ITypeInfo_ReleaseVarDesc_Stub( 
    ITypeInfo  * This);

 HRESULT __stdcall ITypeInfo2_GetDocumentation2_Proxy( 
    ITypeInfo2  * This,
     MEMBERID memid,
     LCID lcid,
     BSTR  *pbstrHelpString,
     DWORD  *pdwHelpStringContext,
     BSTR  *pbstrHelpStringDll);


 HRESULT __stdcall ITypeInfo2_GetDocumentation2_Stub( 
    ITypeInfo2  * This,
     MEMBERID memid,
     LCID lcid,
     DWORD refPtrFlags,
     BSTR  *pbstrHelpString,
     DWORD  *pdwHelpStringContext,
     BSTR  *pbstrHelpStringDll);

 UINT __stdcall ITypeLib_GetTypeInfoCount_Proxy( 
    ITypeLib  * This);


 HRESULT __stdcall ITypeLib_GetTypeInfoCount_Stub( 
    ITypeLib  * This,
     UINT  *pcTInfo);

 HRESULT __stdcall ITypeLib_GetLibAttr_Proxy( 
    ITypeLib  * This,
     TLIBATTR  * *ppTLibAttr);


 HRESULT __stdcall ITypeLib_GetLibAttr_Stub( 
    ITypeLib  * This,
     LPTLIBATTR  *ppTLibAttr,
     CLEANLOCALSTORAGE  *pDummy);

 HRESULT __stdcall ITypeLib_GetDocumentation_Proxy( 
    ITypeLib  * This,
     INT index,
     BSTR  *pBstrName,
     BSTR  *pBstrDocString,
     DWORD  *pdwHelpContext,
     BSTR  *pBstrHelpFile);


 HRESULT __stdcall ITypeLib_GetDocumentation_Stub( 
    ITypeLib  * This,
     INT index,
     DWORD refPtrFlags,
     BSTR  *pBstrName,
     BSTR  *pBstrDocString,
     DWORD  *pdwHelpContext,
     BSTR  *pBstrHelpFile);

 HRESULT __stdcall ITypeLib_IsName_Proxy( 
    ITypeLib  * This,
     LPOLESTR szNameBuf,
     ULONG lHashVal,
     BOOL  *pfName);


 HRESULT __stdcall ITypeLib_IsName_Stub( 
    ITypeLib  * This,
     LPOLESTR szNameBuf,
     ULONG lHashVal,
     BOOL  *pfName,
     BSTR  *pBstrLibName);

 HRESULT __stdcall ITypeLib_FindName_Proxy( 
    ITypeLib  * This,
     LPOLESTR szNameBuf,
     ULONG lHashVal,
     ITypeInfo  * *ppTInfo,
     MEMBERID  *rgMemId,
     USHORT  *pcFound);


 HRESULT __stdcall ITypeLib_FindName_Stub( 
    ITypeLib  * This,
     LPOLESTR szNameBuf,
     ULONG lHashVal,
     ITypeInfo  * *ppTInfo,
     MEMBERID  *rgMemId,
     USHORT  *pcFound,
     BSTR  *pBstrLibName);

 void __stdcall ITypeLib_ReleaseTLibAttr_Proxy( 
    ITypeLib  * This,
     TLIBATTR  *pTLibAttr);


 HRESULT __stdcall ITypeLib_ReleaseTLibAttr_Stub( 
    ITypeLib  * This);

 HRESULT __stdcall ITypeLib2_GetLibStatistics_Proxy( 
    ITypeLib2  * This,
     ULONG  *pcUniqueNames,
     ULONG  *pcchUniqueNames);


 HRESULT __stdcall ITypeLib2_GetLibStatistics_Stub( 
    ITypeLib2  * This,
     ULONG  *pcUniqueNames,
     ULONG  *pcchUniqueNames);

 HRESULT __stdcall ITypeLib2_GetDocumentation2_Proxy( 
    ITypeLib2  * This,
     INT index,
     LCID lcid,
     BSTR  *pbstrHelpString,
     DWORD  *pdwHelpStringContext,
     BSTR  *pbstrHelpStringDll);


 HRESULT __stdcall ITypeLib2_GetDocumentation2_Stub( 
    ITypeLib2  * This,
     INT index,
     LCID lcid,
     DWORD refPtrFlags,
     BSTR  *pbstrHelpString,
     DWORD  *pdwHelpStringContext,
     BSTR  *pbstrHelpStringDll);






}
#line 6825 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"

#line 6827 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"
#line 70 "c:\\programme\\microsoft visual studio\\vc98\\include\\msxml.h"

void  * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void  * ); 






 













extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_v0_0_s_ifspec;










 


typedef 
enum xmlelemTYPE
    {	XMLELEMTYPE_ELEMENT	= 0,
	XMLELEMTYPE_TEXT	= XMLELEMTYPE_ELEMENT + 1,
	XMLELEMTYPE_COMMENT	= XMLELEMTYPE_TEXT + 1,
	XMLELEMTYPE_DOCUMENT	= XMLELEMTYPE_COMMENT + 1,
	XMLELEMTYPE_DTD	= XMLELEMTYPE_DOCUMENT + 1,
	XMLELEMTYPE_PI	= XMLELEMTYPE_DTD + 1,
	XMLELEMTYPE_OTHER	= XMLELEMTYPE_PI + 1
    }	XMLELEM_TYPE;

typedef struct  _xml_error
    {
    unsigned int _nLine;
    BSTR _pchBuf;
    unsigned int _cchBuf;
    unsigned int _ich;
    BSTR _pszFound;
    BSTR _pszExpected;
    DWORD _reserved1;
    DWORD _reserved2;
    }	XML_ERROR;


extern "C" const IID LIBID_MSXML;









 



extern "C" const IID IID_IXMLElementCollection;


    
    struct __declspec(uuid("65725580-9B5D-11d0-9BFE-00C04FC99C8E"))
    IXMLElementCollection : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall put_length( 
             long v) = 0;
        
        virtual  HRESULT __stdcall get_length( 
             long  *p) = 0;
        
        virtual  HRESULT __stdcall get__newEnum( 
             IUnknown  * *ppUnk) = 0;
        
        virtual  HRESULT __stdcall item( 
             VARIANT var1,
             VARIANT var2,
             IDispatch  * *ppDisp) = 0;
        
    };
    



















































































































#line 286 "c:\\programme\\microsoft visual studio\\vc98\\include\\msxml.h"



 HRESULT __stdcall IXMLElementCollection_put_length_Proxy( 
    IXMLElementCollection  * This,
     long v);


void __stdcall IXMLElementCollection_put_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElementCollection_get_length_Proxy( 
    IXMLElementCollection  * This,
     long  *p);


void __stdcall IXMLElementCollection_get_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElementCollection_get__newEnum_Proxy( 
    IXMLElementCollection  * This,
     IUnknown  * *ppUnk);


void __stdcall IXMLElementCollection_get__newEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElementCollection_item_Proxy( 
    IXMLElementCollection  * This,
     VARIANT var1,
     VARIANT var2,
     IDispatch  * *ppDisp);


void __stdcall IXMLElementCollection_item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 341 "c:\\programme\\microsoft visual studio\\vc98\\include\\msxml.h"










 



extern "C" const IID IID_IXMLDocument;


    
    struct __declspec(uuid("F52E2B61-18A1-11d1-B105-00805F49916B"))
    IXMLDocument : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_root( 
             IXMLElement  * *p) = 0;
        
        virtual  HRESULT __stdcall get_fileSize( 
             BSTR  *p) = 0;
        
        virtual  HRESULT __stdcall get_fileModifiedDate( 
             BSTR  *p) = 0;
        
        virtual  HRESULT __stdcall get_fileUpdatedDate( 
             BSTR  *p) = 0;
        
        virtual  HRESULT __stdcall get_URL( 
             BSTR  *p) = 0;
        
        virtual  HRESULT __stdcall put_URL( 
             BSTR p) = 0;
        
        virtual  HRESULT __stdcall get_mimeType( 
             BSTR  *p) = 0;
        
        virtual  HRESULT __stdcall get_readyState( 
             long  *pl) = 0;
        
        virtual  HRESULT __stdcall get_charset( 
             BSTR  *p) = 0;
        
        virtual  HRESULT __stdcall put_charset( 
             BSTR p) = 0;
        
        virtual  HRESULT __stdcall get_version( 
             BSTR  *p) = 0;
        
        virtual  HRESULT __stdcall get_doctype( 
             BSTR  *p) = 0;
        
        virtual  HRESULT __stdcall get_dtdURL( 
             BSTR  *p) = 0;
        
        virtual  HRESULT __stdcall createElement( 
             VARIANT vType,
             VARIANT var1,
             IXMLElement  * *ppElem) = 0;
        
    };
    

























































































































































































#line 595 "c:\\programme\\microsoft visual studio\\vc98\\include\\msxml.h"



 HRESULT __stdcall IXMLDocument_get_root_Proxy( 
    IXMLDocument  * This,
     IXMLElement  * *p);


void __stdcall IXMLDocument_get_root_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_get_fileSize_Proxy( 
    IXMLDocument  * This,
     BSTR  *p);


void __stdcall IXMLDocument_get_fileSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_get_fileModifiedDate_Proxy( 
    IXMLDocument  * This,
     BSTR  *p);


void __stdcall IXMLDocument_get_fileModifiedDate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_get_fileUpdatedDate_Proxy( 
    IXMLDocument  * This,
     BSTR  *p);


void __stdcall IXMLDocument_get_fileUpdatedDate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_get_URL_Proxy( 
    IXMLDocument  * This,
     BSTR  *p);


void __stdcall IXMLDocument_get_URL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_put_URL_Proxy( 
    IXMLDocument  * This,
     BSTR p);


void __stdcall IXMLDocument_put_URL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_get_mimeType_Proxy( 
    IXMLDocument  * This,
     BSTR  *p);


void __stdcall IXMLDocument_get_mimeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_get_readyState_Proxy( 
    IXMLDocument  * This,
     long  *pl);


void __stdcall IXMLDocument_get_readyState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_get_charset_Proxy( 
    IXMLDocument  * This,
     BSTR  *p);


void __stdcall IXMLDocument_get_charset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_put_charset_Proxy( 
    IXMLDocument  * This,
     BSTR p);


void __stdcall IXMLDocument_put_charset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_get_version_Proxy( 
    IXMLDocument  * This,
     BSTR  *p);


void __stdcall IXMLDocument_get_version_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_get_doctype_Proxy( 
    IXMLDocument  * This,
     BSTR  *p);


void __stdcall IXMLDocument_get_doctype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_get_dtdURL_Proxy( 
    IXMLDocument  * This,
     BSTR  *p);


void __stdcall IXMLDocument_get_dtdURL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_createElement_Proxy( 
    IXMLDocument  * This,
     VARIANT vType,
     VARIANT var1,
     IXMLElement  * *ppElem);


void __stdcall IXMLDocument_createElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 770 "c:\\programme\\microsoft visual studio\\vc98\\include\\msxml.h"










 



extern "C" const IID IID_IXMLElement;


    
    struct __declspec(uuid("3F7F31AC-E15F-11d0-9C25-00C04FC99C8E"))
    IXMLElement : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_tagName( 
             BSTR  *p) = 0;
        
        virtual  HRESULT __stdcall put_tagName( 
             BSTR p) = 0;
        
        virtual  HRESULT __stdcall get_parent( 
             IXMLElement  * *ppParent) = 0;
        
        virtual  HRESULT __stdcall setAttribute( 
             BSTR strPropertyName,
             VARIANT PropertyValue) = 0;
        
        virtual  HRESULT __stdcall getAttribute( 
             BSTR strPropertyName,
             VARIANT  *PropertyValue) = 0;
        
        virtual  HRESULT __stdcall removeAttribute( 
             BSTR strPropertyName) = 0;
        
        virtual  HRESULT __stdcall get_children( 
             IXMLElementCollection  * *pp) = 0;
        
        virtual  HRESULT __stdcall get_type( 
             long  *plType) = 0;
        
        virtual  HRESULT __stdcall get_text( 
             BSTR  *p) = 0;
        
        virtual  HRESULT __stdcall put_text( 
             BSTR p) = 0;
        
        virtual  HRESULT __stdcall addChild( 
             IXMLElement  *pChildElem,
            long lIndex,
            long lReserved) = 0;
        
        virtual  HRESULT __stdcall removeChild( 
             IXMLElement  *pChildElem) = 0;
        
    };
    













































































































































































#line 1008 "c:\\programme\\microsoft visual studio\\vc98\\include\\msxml.h"



 HRESULT __stdcall IXMLElement_get_tagName_Proxy( 
    IXMLElement  * This,
     BSTR  *p);


void __stdcall IXMLElement_get_tagName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement_put_tagName_Proxy( 
    IXMLElement  * This,
     BSTR p);


void __stdcall IXMLElement_put_tagName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement_get_parent_Proxy( 
    IXMLElement  * This,
     IXMLElement  * *ppParent);


void __stdcall IXMLElement_get_parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement_setAttribute_Proxy( 
    IXMLElement  * This,
     BSTR strPropertyName,
     VARIANT PropertyValue);


void __stdcall IXMLElement_setAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement_getAttribute_Proxy( 
    IXMLElement  * This,
     BSTR strPropertyName,
     VARIANT  *PropertyValue);


void __stdcall IXMLElement_getAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement_removeAttribute_Proxy( 
    IXMLElement  * This,
     BSTR strPropertyName);


void __stdcall IXMLElement_removeAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement_get_children_Proxy( 
    IXMLElement  * This,
     IXMLElementCollection  * *pp);


void __stdcall IXMLElement_get_children_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement_get_type_Proxy( 
    IXMLElement  * This,
     long  *plType);


void __stdcall IXMLElement_get_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement_get_text_Proxy( 
    IXMLElement  * This,
     BSTR  *p);


void __stdcall IXMLElement_get_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement_put_text_Proxy( 
    IXMLElement  * This,
     BSTR p);


void __stdcall IXMLElement_put_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement_addChild_Proxy( 
    IXMLElement  * This,
     IXMLElement  *pChildElem,
    long lIndex,
    long lReserved);


void __stdcall IXMLElement_addChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement_removeChild_Proxy( 
    IXMLElement  * This,
     IXMLElement  *pChildElem);


void __stdcall IXMLElement_removeChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1161 "c:\\programme\\microsoft visual studio\\vc98\\include\\msxml.h"










 



extern "C" const IID IID_IXMLError;


    
    struct __declspec(uuid("948C5AD3-C58D-11d0-9C0B-00C04FC99C8E"))
    IXMLError : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetErrorInfo( 
            XML_ERROR  *pErrorReturn) = 0;
        
    };
    


















































#line 1239 "c:\\programme\\microsoft visual studio\\vc98\\include\\msxml.h"



HRESULT __stdcall IXMLError_GetErrorInfo_Proxy( 
    IXMLError  * This,
    XML_ERROR  *pErrorReturn);


void __stdcall IXMLError_GetErrorInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1256 "c:\\programme\\microsoft visual studio\\vc98\\include\\msxml.h"










 



extern "C" const IID IID_IXMLElementNotificationSink;


    
    struct __declspec(uuid("D9F1E15A-CCDB-11d0-9C0C-00C04FC99C8E"))
    IXMLElementNotificationSink : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall ChildAdded( 
             IDispatch  *pChildElem) = 0;
        
    };
    




























































































#line 1376 "c:\\programme\\microsoft visual studio\\vc98\\include\\msxml.h"



 HRESULT __stdcall IXMLElementNotificationSink_ChildAdded_Proxy( 
    IXMLElementNotificationSink  * This,
     IDispatch  *pChildElem);


void __stdcall IXMLElementNotificationSink_ChildAdded_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1393 "c:\\programme\\microsoft visual studio\\vc98\\include\\msxml.h"


extern "C" const CLSID CLSID_XMLDocument;



class __declspec(uuid("CFC399AF-D876-11d0-9C10-00C04FC99C8E"))
XMLDocument;
#line 1402 "c:\\programme\\microsoft visual studio\\vc98\\include\\msxml.h"
#line 1403 "c:\\programme\\microsoft visual studio\\vc98\\include\\msxml.h"






}
#line 1411 "c:\\programme\\microsoft visual studio\\vc98\\include\\msxml.h"

#line 1413 "c:\\programme\\microsoft visual studio\\vc98\\include\\msxml.h"
#line 201 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"

void  * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void  * ); 






 













#pragma comment(lib,"uuid.lib")


















extern "C" const IID IID_IAsyncMoniker;    
extern "C" const IID CLSID_StdURLMoniker;  
extern "C" const IID CLSID_HttpProtocol;   
extern "C" const IID CLSID_FtpProtocol;    
extern "C" const IID CLSID_GopherProtocol; 
extern "C" const IID CLSID_HttpSProtocol;  
extern "C" const IID CLSID_FileProtocol;   
extern "C" const IID CLSID_MkProtocol;     
extern "C" const IID CLSID_StdURLProtocol; 
extern "C" const IID CLSID_UrlMkBindCtx;   
extern "C" const IID CLSID_StdEncodingFilterFac; 
extern "C" const IID CLSID_DeCompMimeFilter;     
extern "C" const IID CLSID_CdlProtocol;          
extern "C" const IID CLSID_ClassInstallFilter;   
extern "C" const IID IID_IAsyncBindCtx;    
 



 
extern "C" HRESULT __stdcall CreateURLMoniker(LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER  * ppmk);             
extern "C" HRESULT __stdcall GetClassURL(LPCWSTR szURL, CLSID *pClsID);                                           
extern "C" HRESULT __stdcall CreateAsyncBindCtx(DWORD reserved, IBindStatusCallback *pBSCb,                       
                                IEnumFORMATETC *pEFetc, IBindCtx **ppBC);                   
extern "C" HRESULT __stdcall CreateAsyncBindCtxEx(IBindCtx *pbc, DWORD dwOptions, IBindStatusCallback *pBSCb, IEnumFORMATETC *pEnum,   
                            IBindCtx **ppBC, DWORD reserved);                                                     
extern "C" HRESULT __stdcall MkParseDisplayNameEx(IBindCtx *pbc, LPCWSTR szDisplayName, ULONG *pchEaten,          
                                LPMONIKER *ppmk);                                           
extern "C" HRESULT __stdcall RegisterBindStatusCallback(LPBC pBC, IBindStatusCallback *pBSCb,                     
                                IBindStatusCallback**  ppBSCBPrev, DWORD dwReserved);       
extern "C" HRESULT __stdcall RevokeBindStatusCallback(LPBC pBC, IBindStatusCallback *pBSCb);                      
extern "C" HRESULT __stdcall GetClassFileOrMime(LPBC pBC, LPCWSTR szFilename, LPVOID pBuffer, DWORD cbSize, LPCWSTR szMime, DWORD dwReserved, CLSID *pclsid); 
extern "C" HRESULT __stdcall IsValidURL(LPBC pBC, LPCWSTR szURL, DWORD dwReserved);                               
extern "C" HRESULT __stdcall CoGetClassObjectFromURL( const CLSID & rCLASSID,
            LPCWSTR szCODE, DWORD dwFileVersionMS, 
            DWORD dwFileVersionLS, LPCWSTR szTYPE,
            LPBINDCTX pBindCtx, DWORD dwClsContext,
            LPVOID pvReserved, const IID & riid, LPVOID * ppv);
 

extern "C" HRESULT __stdcall IsAsyncMoniker(IMoniker* pmk);                                                       
extern "C" HRESULT __stdcall CreateURLBinding(LPCWSTR lpszUrl, IBindCtx *pbc, IBinding **ppBdg);                  
 
extern "C" HRESULT __stdcall RegisterMediaTypes(UINT ctypes, const LPCSTR* rgszTypes, CLIPFORMAT* rgcfTypes);            
extern "C" HRESULT __stdcall FindMediaType(LPCSTR rgszTypes, CLIPFORMAT* rgcfTypes);                                       
extern "C" HRESULT __stdcall CreateFormatEnumerator( UINT cfmtetc, FORMATETC* rgfmtetc, IEnumFORMATETC** ppenumfmtetc); 
extern "C" HRESULT __stdcall RegisterFormatEnumerator(LPBC pBC, IEnumFORMATETC *pEFetc, DWORD reserved);          
extern "C" HRESULT __stdcall RevokeFormatEnumerator(LPBC pBC, IEnumFORMATETC *pEFetc);                            
extern "C" HRESULT __stdcall RegisterMediaTypeClass(LPBC pBC,UINT ctypes, const LPCSTR* rgszTypes, CLSID *rgclsID, DWORD reserved);    
extern "C" HRESULT __stdcall FindMediaTypeClass(LPBC pBC, LPCSTR szType, CLSID *pclsID, DWORD reserved);                          
extern "C" HRESULT __stdcall UrlMkSetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD dwReserved);       
extern "C" HRESULT __stdcall UrlMkGetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD *pdwBufferLength, DWORD dwReserved);       
extern "C" HRESULT __stdcall FindMimeFromData(                                                                                                                  
                        LPBC pBC,                           
                        LPCWSTR pwzUrl,                     
                        LPVOID pBuffer,                     
                        DWORD cbSize,                       
                        LPCWSTR pwzMimeProposed,            
                        DWORD dwMimeFlags,                  
                        LPWSTR *ppwzMimeOut,                
                        DWORD dwReserved);                  
extern "C" HRESULT __stdcall ObtainUserAgentString(DWORD dwOption, LPSTR pszUAOut, DWORD* cbSize);       
 



 
































 






#line 350 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"
                                                                             



                                                                             




































extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_v0_0_s_ifspec;









 


typedef  IPersistMoniker  *LPPERSISTMONIKER;


extern "C" const IID IID_IPersistMoniker;


    
    struct __declspec(uuid("79eac9c9-baf9-11ce-8c82-00aa004ba90b"))
    IPersistMoniker : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetClassID( 
             CLSID  *pClassID) = 0;
        
        virtual HRESULT __stdcall IsDirty( void) = 0;
        
        virtual HRESULT __stdcall Load( 
             BOOL fFullyAvailable,
             IMoniker  *pimkName,
             LPBC pibc,
             DWORD grfMode) = 0;
        
        virtual HRESULT __stdcall Save( 
             IMoniker  *pimkName,
             LPBC pbc,
             BOOL fRemember) = 0;
        
        virtual HRESULT __stdcall SaveCompleted( 
             IMoniker  *pimkName,
             LPBC pibc) = 0;
        
        virtual HRESULT __stdcall GetCurMoniker( 
             IMoniker  * *ppimkName) = 0;
        
    };
    


























































































#line 532 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"



HRESULT __stdcall IPersistMoniker_GetClassID_Proxy( 
    IPersistMoniker  * This,
     CLSID  *pClassID);


void __stdcall IPersistMoniker_GetClassID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistMoniker_IsDirty_Proxy( 
    IPersistMoniker  * This);


void __stdcall IPersistMoniker_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistMoniker_Load_Proxy( 
    IPersistMoniker  * This,
     BOOL fFullyAvailable,
     IMoniker  *pimkName,
     LPBC pibc,
     DWORD grfMode);


void __stdcall IPersistMoniker_Load_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistMoniker_Save_Proxy( 
    IPersistMoniker  * This,
     IMoniker  *pimkName,
     LPBC pbc,
     BOOL fRemember);


void __stdcall IPersistMoniker_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistMoniker_SaveCompleted_Proxy( 
    IPersistMoniker  * This,
     IMoniker  *pimkName,
     LPBC pibc);


void __stdcall IPersistMoniker_SaveCompleted_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistMoniker_GetCurMoniker_Proxy( 
    IPersistMoniker  * This,
     IMoniker  * *ppimkName);


void __stdcall IPersistMoniker_GetCurMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 614 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"







 


#line 625 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0111_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0111_v0_0_s_ifspec;









 


typedef  IBindProtocol  *LPBINDPROTOCOL;


extern "C" const IID IID_IBindProtocol;


    
    struct __declspec(uuid("79eac9cd-baf9-11ce-8c82-00aa004ba90b"))
    IBindProtocol : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateBinding( 
             LPCWSTR szUrl,
             IBindCtx  *pbc,
             IBinding  * *ppb) = 0;
        
    };
    




















































#line 714 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"



HRESULT __stdcall IBindProtocol_CreateBinding_Proxy( 
    IBindProtocol  * This,
     LPCWSTR szUrl,
     IBindCtx  *pbc,
     IBinding  * *ppb);


void __stdcall IBindProtocol_CreateBinding_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 733 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"







 


#line 744 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0112_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0112_v0_0_s_ifspec;









 


typedef  IBinding  *LPBINDING;


extern "C" const IID IID_IBinding;


    
    struct __declspec(uuid("79eac9c0-baf9-11ce-8c82-00aa004ba90b"))
    IBinding : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Abort( void) = 0;
        
        virtual HRESULT __stdcall Suspend( void) = 0;
        
        virtual HRESULT __stdcall Resume( void) = 0;
        
        virtual HRESULT __stdcall SetPriority( 
             LONG nPriority) = 0;
        
        virtual HRESULT __stdcall GetPriority( 
             LONG  *pnPriority) = 0;
        
        virtual  HRESULT __stdcall GetBindResult( 
             CLSID  *pclsidProtocol,
             DWORD  *pdwResult,
             LPOLESTR  *pszResult,
             DWORD  *pdwReserved) = 0;
        
    };
    





















































































#line 879 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"



HRESULT __stdcall IBinding_Abort_Proxy( 
    IBinding  * This);


void __stdcall IBinding_Abort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBinding_Suspend_Proxy( 
    IBinding  * This);


void __stdcall IBinding_Suspend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBinding_Resume_Proxy( 
    IBinding  * This);


void __stdcall IBinding_Resume_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBinding_SetPriority_Proxy( 
    IBinding  * This,
     LONG nPriority);


void __stdcall IBinding_SetPriority_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBinding_GetPriority_Proxy( 
    IBinding  * This,
     LONG  *pnPriority);


void __stdcall IBinding_GetPriority_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IBinding_RemoteGetBindResult_Proxy( 
    IBinding  * This,
     CLSID  *pclsidProtocol,
     DWORD  *pdwResult,
     LPOLESTR  *pszResult,
     DWORD dwReserved);


void __stdcall IBinding_RemoteGetBindResult_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 956 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"







 


#line 967 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0113_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0113_v0_0_s_ifspec;









 


typedef  IBindStatusCallback  *LPBINDSTATUSCALLBACK;

typedef  
enum __MIDL_IBindStatusCallback_0001
    {	BINDVERB_GET	= 0,
	BINDVERB_POST	= 0x1,
	BINDVERB_PUT	= 0x2,
	BINDVERB_CUSTOM	= 0x3
    }	BINDVERB;

typedef  
enum __MIDL_IBindStatusCallback_0002
    {	BINDINFOF_URLENCODESTGMEDDATA	= 0x1,
	BINDINFOF_URLENCODEDEXTRAINFO	= 0x2
    }	BINDINFOF;

typedef  
enum __MIDL_IBindStatusCallback_0003
    {	BINDF_ASYNCHRONOUS	= 0x1,
	BINDF_ASYNCSTORAGE	= 0x2,
	BINDF_NOPROGRESSIVERENDERING	= 0x4,
	BINDF_OFFLINEOPERATION	= 0x8,
	BINDF_GETNEWESTVERSION	= 0x10,
	BINDF_NOWRITECACHE	= 0x20,
	BINDF_NEEDFILE	= 0x40,
	BINDF_PULLDATA	= 0x80,
	BINDF_IGNORESECURITYPROBLEM	= 0x100,
	BINDF_RESYNCHRONIZE	= 0x200,
	BINDF_HYPERLINK	= 0x400,
	BINDF_NO_UI	= 0x800,
	BINDF_SILENTOPERATION	= 0x1000,
	BINDF_PRAGMA_NO_CACHE	= 0x2000,
	BINDF_FREE_THREADED	= 0x10000,
	BINDF_DIRECT_READ	= 0x20000,
	BINDF_FORMS_SUBMIT	= 0x40000,
	BINDF_GETFROMCACHE_IF_NET_FAIL	= 0x80000
    }	BINDF;

typedef struct  _tagBINDINFO
    {
    ULONG cbSize;
    LPWSTR szExtraInfo;
    STGMEDIUM stgmedData;
    DWORD grfBindInfoF;
    DWORD dwBindVerb;
    LPWSTR szCustomVerb;
    DWORD cbstgmedData;
    DWORD dwOptions;
    DWORD dwOptionsFlags;
    DWORD dwCodePage;
    SECURITY_ATTRIBUTES securityAttributes;
    IID iid;
    IUnknown  *pUnk;
    DWORD dwReserved;
    }	BINDINFO;

typedef struct  _REMSECURITY_ATTRIBUTES
    {
    DWORD nLength;
    DWORD lpSecurityDescriptor;
    BOOL bInheritHandle;
    }	REMSECURITY_ATTRIBUTES;

typedef struct _REMSECURITY_ATTRIBUTES  *PREMSECURITY_ATTRIBUTES;

typedef struct _REMSECURITY_ATTRIBUTES  *LPREMSECURITY_ATTRIBUTES;

typedef struct  _tagRemBINDINFO
    {
    ULONG cbSize;
    LPWSTR szExtraInfo;
    DWORD grfBindInfoF;
    DWORD dwBindVerb;
    LPWSTR szCustomVerb;
    DWORD cbstgmedData;
    DWORD dwOptions;
    DWORD dwOptionsFlags;
    DWORD dwCodePage;
    REMSECURITY_ATTRIBUTES securityAttributes;
    IID iid;
    IUnknown  *pUnk;
    DWORD dwReserved;
    }	RemBINDINFO;

typedef struct  tagRemFORMATETC
    {
    DWORD cfFormat;
    DWORD ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
    }	RemFORMATETC;

typedef struct tagRemFORMATETC  *LPREMFORMATETC;

typedef  
enum __MIDL_IBindStatusCallback_0004
    {	BSCF_FIRSTDATANOTIFICATION	= 0x1,
	BSCF_INTERMEDIATEDATANOTIFICATION	= 0x2,
	BSCF_LASTDATANOTIFICATION	= 0x4,
	BSCF_DATAFULLYAVAILABLE	= 0x8,
	BSCF_AVAILABLEDATASIZEUNKNOWN	= 0x10
    }	BSCF;

typedef 
enum tagBINDSTATUS
    {	BINDSTATUS_FINDINGRESOURCE	= 1,
	BINDSTATUS_CONNECTING	= BINDSTATUS_FINDINGRESOURCE + 1,
	BINDSTATUS_REDIRECTING	= BINDSTATUS_CONNECTING + 1,
	BINDSTATUS_BEGINDOWNLOADDATA	= BINDSTATUS_REDIRECTING + 1,
	BINDSTATUS_DOWNLOADINGDATA	= BINDSTATUS_BEGINDOWNLOADDATA + 1,
	BINDSTATUS_ENDDOWNLOADDATA	= BINDSTATUS_DOWNLOADINGDATA + 1,
	BINDSTATUS_BEGINDOWNLOADCOMPONENTS	= BINDSTATUS_ENDDOWNLOADDATA + 1,
	BINDSTATUS_INSTALLINGCOMPONENTS	= BINDSTATUS_BEGINDOWNLOADCOMPONENTS + 1,
	BINDSTATUS_ENDDOWNLOADCOMPONENTS	= BINDSTATUS_INSTALLINGCOMPONENTS + 1,
	BINDSTATUS_USINGCACHEDCOPY	= BINDSTATUS_ENDDOWNLOADCOMPONENTS + 1,
	BINDSTATUS_SENDINGREQUEST	= BINDSTATUS_USINGCACHEDCOPY + 1,
	BINDSTATUS_CLASSIDAVAILABLE	= BINDSTATUS_SENDINGREQUEST + 1,
	BINDSTATUS_MIMETYPEAVAILABLE	= BINDSTATUS_CLASSIDAVAILABLE + 1,
	BINDSTATUS_CACHEFILENAMEAVAILABLE	= BINDSTATUS_MIMETYPEAVAILABLE + 1,
	BINDSTATUS_BEGINSYNCOPERATION	= BINDSTATUS_CACHEFILENAMEAVAILABLE + 1,
	BINDSTATUS_ENDSYNCOPERATION	= BINDSTATUS_BEGINSYNCOPERATION + 1,
	BINDSTATUS_BEGINUPLOADDATA	= BINDSTATUS_ENDSYNCOPERATION + 1,
	BINDSTATUS_UPLOADINGDATA	= BINDSTATUS_BEGINUPLOADDATA + 1,
	BINDSTATUS_ENDUPLOADDATA	= BINDSTATUS_UPLOADINGDATA + 1,
	BINDSTATUS_PROTOCOLCLASSID	= BINDSTATUS_ENDUPLOADDATA + 1,
	BINDSTATUS_ENCODING	= BINDSTATUS_PROTOCOLCLASSID + 1,
	BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE	= BINDSTATUS_ENCODING + 1,
	BINDSTATUS_CLASSINSTALLLOCATION	= BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE + 1,
	BINDSTATUS_DECODING	= BINDSTATUS_CLASSINSTALLLOCATION + 1,
	BINDSTATUS_LOADINGMIMEHANDLER	= BINDSTATUS_DECODING + 1
    }	BINDSTATUS;


extern "C" const IID IID_IBindStatusCallback;


    
    struct __declspec(uuid("79eac9c1-baf9-11ce-8c82-00aa004ba90b"))
    IBindStatusCallback : public IUnknown
    {
    public:
        virtual HRESULT __stdcall OnStartBinding( 
             DWORD dwReserved,
             IBinding  *pib) = 0;
        
        virtual HRESULT __stdcall GetPriority( 
             LONG  *pnPriority) = 0;
        
        virtual HRESULT __stdcall OnLowResource( 
             DWORD reserved) = 0;
        
        virtual HRESULT __stdcall OnProgress( 
             ULONG ulProgress,
             ULONG ulProgressMax,
             ULONG ulStatusCode,
             LPCWSTR szStatusText) = 0;
        
        virtual HRESULT __stdcall OnStopBinding( 
             HRESULT hresult,
             LPCWSTR szError) = 0;
        
        virtual  HRESULT __stdcall GetBindInfo( 
             DWORD  *grfBINDF,
             BINDINFO  *pbindinfo) = 0;
        
        virtual  HRESULT __stdcall OnDataAvailable( 
             DWORD grfBSCF,
             DWORD dwSize,
             FORMATETC  *pformatetc,
             STGMEDIUM  *pstgmed) = 0;
        
        virtual HRESULT __stdcall OnObjectAvailable( 
             const IID & riid,
             IUnknown  *punk) = 0;
        
    };
    













































































































#line 1273 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"



HRESULT __stdcall IBindStatusCallback_OnStartBinding_Proxy( 
    IBindStatusCallback  * This,
     DWORD dwReserved,
     IBinding  *pib);


void __stdcall IBindStatusCallback_OnStartBinding_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindStatusCallback_GetPriority_Proxy( 
    IBindStatusCallback  * This,
     LONG  *pnPriority);


void __stdcall IBindStatusCallback_GetPriority_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindStatusCallback_OnLowResource_Proxy( 
    IBindStatusCallback  * This,
     DWORD reserved);


void __stdcall IBindStatusCallback_OnLowResource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindStatusCallback_OnProgress_Proxy( 
    IBindStatusCallback  * This,
     ULONG ulProgress,
     ULONG ulProgressMax,
     ULONG ulStatusCode,
     LPCWSTR szStatusText);


void __stdcall IBindStatusCallback_OnProgress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindStatusCallback_OnStopBinding_Proxy( 
    IBindStatusCallback  * This,
     HRESULT hresult,
     LPCWSTR szError);


void __stdcall IBindStatusCallback_OnStopBinding_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IBindStatusCallback_RemoteGetBindInfo_Proxy( 
    IBindStatusCallback  * This,
     DWORD  *grfBINDF,
     RemBINDINFO  *pbindinfo,
     RemSTGMEDIUM  *pstgmed);


void __stdcall IBindStatusCallback_RemoteGetBindInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IBindStatusCallback_RemoteOnDataAvailable_Proxy( 
    IBindStatusCallback  * This,
     DWORD grfBSCF,
     DWORD dwSize,
     RemFORMATETC  *pformatetc,
     RemSTGMEDIUM  *pstgmed);


void __stdcall IBindStatusCallback_RemoteOnDataAvailable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindStatusCallback_OnObjectAvailable_Proxy( 
    IBindStatusCallback  * This,
     const IID & riid,
     IUnknown  *punk);


void __stdcall IBindStatusCallback_OnObjectAvailable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1385 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"







 


#line 1396 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0114_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0114_v0_0_s_ifspec;









 


typedef  IAuthenticate  *LPAUTHENTICATION;


extern "C" const IID IID_IAuthenticate;


    
    struct __declspec(uuid("79eac9d0-baf9-11ce-8c82-00aa004ba90b"))
    IAuthenticate : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Authenticate( 
             HWND  *phwnd,
             LPWSTR  *pszUsername,
             LPWSTR  *pszPassword) = 0;
        
    };
    




















































#line 1485 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"



HRESULT __stdcall IAuthenticate_Authenticate_Proxy( 
    IAuthenticate  * This,
     HWND  *phwnd,
     LPWSTR  *pszUsername,
     LPWSTR  *pszPassword);


void __stdcall IAuthenticate_Authenticate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1504 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"







 


#line 1515 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0115_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0115_v0_0_s_ifspec;









 


typedef  IHttpNegotiate  *LPHTTPNEGOTIATE;


extern "C" const IID IID_IHttpNegotiate;


    
    struct __declspec(uuid("79eac9d2-baf9-11ce-8c82-00aa004ba90b"))
    IHttpNegotiate : public IUnknown
    {
    public:
        virtual HRESULT __stdcall BeginningTransaction( 
             LPCWSTR szURL,
             LPCWSTR szHeaders,
             DWORD dwReserved,
             LPWSTR  *pszAdditionalHeaders) = 0;
        
        virtual HRESULT __stdcall OnResponse( 
             DWORD dwResponseCode,
             LPCWSTR szResponseHeaders,
             LPCWSTR szRequestHeaders,
             LPWSTR  *pszAdditionalRequestHeaders) = 0;
        
    };
    































































#line 1622 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"



HRESULT __stdcall IHttpNegotiate_BeginningTransaction_Proxy( 
    IHttpNegotiate  * This,
     LPCWSTR szURL,
     LPCWSTR szHeaders,
     DWORD dwReserved,
     LPWSTR  *pszAdditionalHeaders);


void __stdcall IHttpNegotiate_BeginningTransaction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IHttpNegotiate_OnResponse_Proxy( 
    IHttpNegotiate  * This,
     DWORD dwResponseCode,
     LPCWSTR szResponseHeaders,
     LPCWSTR szRequestHeaders,
     LPWSTR  *pszAdditionalRequestHeaders);


void __stdcall IHttpNegotiate_OnResponse_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1657 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"







 


#line 1668 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0116_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0116_v0_0_s_ifspec;









 


typedef  IWindowForBindingUI  *LPWINDOWFORBINDINGUI;


extern "C" const IID IID_IWindowForBindingUI;


    
    struct __declspec(uuid("79eac9d5-bafa-11ce-8c82-00aa004ba90b"))
    IWindowForBindingUI : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetWindow( 
             const GUID & rguidReason,
             HWND  *phwnd) = 0;
        
    };
    



















































#line 1755 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"



HRESULT __stdcall IWindowForBindingUI_GetWindow_Proxy( 
    IWindowForBindingUI  * This,
     const GUID & rguidReason,
     HWND  *phwnd);


void __stdcall IWindowForBindingUI_GetWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1773 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"







 


#line 1784 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0117_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0117_v0_0_s_ifspec;









 


typedef  ICodeInstall  *LPCODEINSTALL;

typedef  
enum __MIDL_ICodeInstall_0001
    {	CIP_DISK_FULL	= 0,
	CIP_ACCESS_DENIED	= CIP_DISK_FULL + 1,
	CIP_NEWER_VERSION_EXISTS	= CIP_ACCESS_DENIED + 1,
	CIP_OLDER_VERSION_EXISTS	= CIP_NEWER_VERSION_EXISTS + 1,
	CIP_NAME_CONFLICT	= CIP_OLDER_VERSION_EXISTS + 1,
	CIP_TRUST_VERIFICATION_COMPONENT_MISSING	= CIP_NAME_CONFLICT + 1,
	CIP_EXE_SELF_REGISTERATION_TIMEOUT	= CIP_TRUST_VERIFICATION_COMPONENT_MISSING + 1,
	CIP_UNSAFE_TO_ABORT	= CIP_EXE_SELF_REGISTERATION_TIMEOUT + 1,
	CIP_NEED_REBOOT	= CIP_UNSAFE_TO_ABORT + 1
    }	CIP_STATUS;


extern "C" const IID IID_ICodeInstall;


    
    struct __declspec(uuid("79eac9d1-baf9-11ce-8c82-00aa004ba90b"))
    ICodeInstall : public IWindowForBindingUI
    {
    public:
        virtual HRESULT __stdcall OnCodeInstallProblem( 
             ULONG ulStatusCode,
             LPCWSTR szDestination,
             LPCWSTR szSource,
             DWORD dwReserved) = 0;
        
    };
    






























































#line 1897 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"



HRESULT __stdcall ICodeInstall_OnCodeInstallProblem_Proxy( 
    ICodeInstall  * This,
     ULONG ulStatusCode,
     LPCWSTR szDestination,
     LPCWSTR szSource,
     DWORD dwReserved);


void __stdcall ICodeInstall_OnCodeInstallProblem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1917 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"







 


#line 1928 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0118_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0118_v0_0_s_ifspec;









 


typedef  IWinInetInfo  *LPWININETINFO;


extern "C" const IID IID_IWinInetInfo;


    
    struct __declspec(uuid("79eac9d6-bafa-11ce-8c82-00aa004ba90b"))
    IWinInetInfo : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall QueryOption( 
             DWORD dwOption,
             LPVOID pBuffer,
             DWORD  *pcbBuf) = 0;
        
    };
    




















































#line 2017 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"



 HRESULT __stdcall IWinInetInfo_RemoteQueryOption_Proxy( 
    IWinInetInfo  * This,
     DWORD dwOption,
     BYTE  *pBuffer,
     DWORD  *pcbBuf);


void __stdcall IWinInetInfo_RemoteQueryOption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2036 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"







 


#line 2047 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"





extern RPC_IF_HANDLE __MIDL_itf_urlmon_0119_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0119_v0_0_s_ifspec;









 


typedef  IHttpSecurity  *LPHTTPSECURITY;


extern "C" const IID IID_IHttpSecurity;


    
    struct __declspec(uuid("79eac9d7-bafa-11ce-8c82-00aa004ba90b"))
    IHttpSecurity : public IWindowForBindingUI
    {
    public:
        virtual HRESULT __stdcall OnSecurityProblem( 
             DWORD dwProblem) = 0;
        
    };
    



























































#line 2142 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"



HRESULT __stdcall IHttpSecurity_OnSecurityProblem_Proxy( 
    IHttpSecurity  * This,
     DWORD dwProblem);


void __stdcall IHttpSecurity_OnSecurityProblem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2159 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"







 


#line 2170 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0120_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0120_v0_0_s_ifspec;









 


typedef  IWinInetHttpInfo  *LPWININETHTTPINFO;


extern "C" const IID IID_IWinInetHttpInfo;


    
    struct __declspec(uuid("79eac9d8-bafa-11ce-8c82-00aa004ba90b"))
    IWinInetHttpInfo : public IWinInetInfo
    {
    public:
        virtual  HRESULT __stdcall QueryInfo( 
             DWORD dwOption,
             LPVOID pBuffer,
             DWORD  *pcbBuf,
             DWORD  *pdwFlags,
             DWORD  *pdwReserved) = 0;
        
    };
    
































































#line 2273 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"



 HRESULT __stdcall IWinInetHttpInfo_RemoteQueryInfo_Proxy( 
    IWinInetHttpInfo  * This,
     DWORD dwOption,
     BYTE  *pBuffer,
     DWORD  *pcbBuf,
     DWORD  *pdwFlags,
     DWORD  *pdwReserved);


void __stdcall IWinInetHttpInfo_RemoteQueryInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2294 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"







 


#line 2305 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




extern "C" const GUID SID_BindHost;


extern RPC_IF_HANDLE __MIDL_itf_urlmon_0121_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0121_v0_0_s_ifspec;









 


typedef  IBindHost  *LPBINDHOST;


extern "C" const IID IID_IBindHost;


    
    struct __declspec(uuid("fc4801a1-2ba9-11cf-a229-00aa003d7352"))
    IBindHost : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateMoniker( 
             LPOLESTR szName,
             IBindCtx  *pBC,
             IMoniker  * *ppmk,
             DWORD dwReserved) = 0;
        
        virtual  HRESULT __stdcall MonikerBindToStorage( 
             IMoniker  *pMk,
             IBindCtx  *pBC,
             IBindStatusCallback  *pBSC,
             const IID & riid,
             void  * *ppvObj) = 0;
        
        virtual  HRESULT __stdcall MonikerBindToObject( 
             IMoniker  *pMk,
             IBindCtx  *pBC,
             IBindStatusCallback  *pBSC,
             const IID & riid,
             void  * *ppvObj) = 0;
        
    };
    











































































#line 2435 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"



HRESULT __stdcall IBindHost_CreateMoniker_Proxy( 
    IBindHost  * This,
     LPOLESTR szName,
     IBindCtx  *pBC,
     IMoniker  * *ppmk,
     DWORD dwReserved);


void __stdcall IBindHost_CreateMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IBindHost_RemoteMonikerBindToStorage_Proxy( 
    IBindHost  * This,
     IMoniker  *pMk,
     IBindCtx  *pBC,
     IBindStatusCallback  *pBSC,
     const IID & riid,
     IUnknown  * *ppvObj);


void __stdcall IBindHost_RemoteMonikerBindToStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IBindHost_RemoteMonikerBindToObject_Proxy( 
    IBindHost  * This,
     IMoniker  *pMk,
     IBindCtx  *pBC,
     IBindStatusCallback  *pBSC,
     const IID & riid,
     IUnknown  * *ppvObj);


void __stdcall IBindHost_RemoteMonikerBindToObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2487 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"







 


#line 2498 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"
                                                                                                           





                                                                                                           
                                                                                                           
struct IBindStatusCallback;                                                                                
extern "C" HRESULT __stdcall HlinkSimpleNavigateToString(                                                                        
     LPCWSTR szTarget,         
     LPCWSTR szLocation,       
     LPCWSTR szTargetFrameName,
     IUnknown *pUnk,           
     IBindCtx *pbc,            
     IBindStatusCallback *,                                                                      
     DWORD grfHLNF,            
     DWORD dwReserved          
);                                                                                                         
                                                                                                           
extern "C" HRESULT __stdcall HlinkSimpleNavigateToMoniker(                                                                       
     IMoniker *pmkTarget,      
     LPCWSTR szLocation,       
     LPCWSTR szTargetFrameName,
     IUnknown *pUnk,           
     IBindCtx *pbc,            
     IBindStatusCallback *,                                                                      
     DWORD grfHLNF,            
     DWORD dwReserved          
);                                                                                                         
                                                                                                           
extern "C" HRESULT __stdcall URLOpenStreamA(LPUNKNOWN,LPCSTR,DWORD,LPBINDSTATUSCALLBACK);                                        
extern "C" HRESULT __stdcall URLOpenStreamW(LPUNKNOWN,LPCWSTR,DWORD,LPBINDSTATUSCALLBACK);                                       
extern "C" HRESULT __stdcall URLOpenPullStreamA(LPUNKNOWN,LPCSTR,DWORD,LPBINDSTATUSCALLBACK);                                    
extern "C" HRESULT __stdcall URLOpenPullStreamW(LPUNKNOWN,LPCWSTR,DWORD,LPBINDSTATUSCALLBACK);                                   
extern "C" HRESULT __stdcall URLDownloadToFileA(LPUNKNOWN,LPCSTR,LPCSTR,DWORD,LPBINDSTATUSCALLBACK);                             
extern "C" HRESULT __stdcall URLDownloadToFileW(LPUNKNOWN,LPCWSTR,LPCWSTR,DWORD,LPBINDSTATUSCALLBACK);                           
extern "C" HRESULT __stdcall URLDownloadToCacheFileA(LPUNKNOWN,LPCSTR,LPTSTR,DWORD,DWORD,LPBINDSTATUSCALLBACK);                  
extern "C" HRESULT __stdcall URLDownloadToCacheFileW(LPUNKNOWN,LPCWSTR,LPWSTR,DWORD,DWORD,LPBINDSTATUSCALLBACK);                 
extern "C" HRESULT __stdcall URLOpenBlockingStreamA(LPUNKNOWN,LPCSTR,LPSTREAM*,DWORD,LPBINDSTATUSCALLBACK);                      
extern "C" HRESULT __stdcall URLOpenBlockingStreamW(LPUNKNOWN,LPCWSTR,LPSTREAM*,DWORD,LPBINDSTATUSCALLBACK);                     
                                                                                                           












#line 2553 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"
                                                                                                           
                                                                                                           
extern "C" HRESULT __stdcall HlinkGoBack(IUnknown *pUnk);                                                                        
extern "C" HRESULT __stdcall HlinkGoForward(IUnknown *pUnk);                                                                     
extern "C" HRESULT __stdcall HlinkNavigateString(IUnknown *pUnk, LPCWSTR szTarget);                                              
extern "C" HRESULT __stdcall HlinkNavigateMoniker(IUnknown *pUnk, IMoniker *pmkTarget);                                          
                                                                                                           












extern RPC_IF_HANDLE __MIDL_itf_urlmon_0122_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0122_v0_0_s_ifspec;









 


typedef  IInternet  *LPIINTERNET;


extern "C" const IID IID_IInternet;


    
    struct __declspec(uuid("79eac9e0-baf9-11ce-8c82-00aa004ba90b"))
    IInternet : public IUnknown
    {
    public:
    };
    











































#line 2643 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




#line 2648 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"







 


#line 2659 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0123_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0123_v0_0_s_ifspec;









 


typedef  IInternetBindInfo  *LPIINTERNETBINDINFO;

typedef 
enum tagBINDSTRING
    {	BINDSTRING_HEADERS	= 1,
	BINDSTRING_ACCEPT_MIMES	= BINDSTRING_HEADERS + 1,
	BINDSTRING_EXTRA_URL	= BINDSTRING_ACCEPT_MIMES + 1,
	BINDSTRING_LANGUAGE	= BINDSTRING_EXTRA_URL + 1,
	BINDSTRING_USERNAME	= BINDSTRING_LANGUAGE + 1,
	BINDSTRING_PASSWORD	= BINDSTRING_USERNAME + 1,
	BINDSTRING_UA_PIXELS	= BINDSTRING_PASSWORD + 1,
	BINDSTRING_UA_COLOR	= BINDSTRING_UA_PIXELS + 1,
	BINDSTRING_OS	= BINDSTRING_UA_COLOR + 1,
	BINDSTRING_USER_AGENT	= BINDSTRING_OS + 1,
	BINDSTRING_ACCEPT_ENCODINGS	= BINDSTRING_USER_AGENT + 1,
	BINDSTRING_POST_COOKIE	= BINDSTRING_ACCEPT_ENCODINGS + 1,
	BINDSTRING_POST_DATA_MIME	= BINDSTRING_POST_COOKIE + 1,
	BINDSTRING_URL	= BINDSTRING_POST_DATA_MIME + 1
    }	BINDSTRING;


extern "C" const IID IID_IInternetBindInfo;


    
    struct __declspec(uuid("79eac9e1-baf9-11ce-8c82-00aa004ba90b"))
    IInternetBindInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetBindInfo( 
             DWORD  *grfBINDF,
             BINDINFO  *pbindinfo) = 0;
        
        virtual HRESULT __stdcall GetBindString( 
             ULONG ulStringType,
             LPOLESTR  *ppwzStr,
             ULONG cEl,
             ULONG  *pcElFetched) = 0;
        
    };
    





























































#line 2780 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"



HRESULT __stdcall IInternetBindInfo_GetBindInfo_Proxy( 
    IInternetBindInfo  * This,
     DWORD  *grfBINDF,
     BINDINFO  *pbindinfo);


void __stdcall IInternetBindInfo_GetBindInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetBindInfo_GetBindString_Proxy( 
    IInternetBindInfo  * This,
     ULONG ulStringType,
     LPOLESTR  *ppwzStr,
     ULONG cEl,
     ULONG  *pcElFetched);


void __stdcall IInternetBindInfo_GetBindString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2813 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"







 


#line 2824 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0124_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0124_v0_0_s_ifspec;









 


typedef  IInternetProtocolRoot  *LPIINTERNETPROTOCOLROOT;

typedef 
enum _tagPI_FLAGS
    {	PI_PARSE_URL	= 0x1,
	PI_FILTER_MODE	= 0x2,
	PI_FORCE_ASYNC	= 0x4,
	PI_USE_WORKERTHREAD	= 0x8,
	PI_MIMEVERIFICATION	= 0x10,
	PI_CLSIDLOOKUP	= 0x20,
	PI_DATAPROGRESS	= 0x40,
	PI_SYNCHRONOUS	= 0x80,
	PI_APARTMENTTHREADED	= 0x100,
	PI_CLASSINSTALL	= 0x200,
	PD_FORCE_SWITCH	= 0x10000
    }	PI_FLAGS;

typedef struct  _tagPROTOCOLDATA
    {
    DWORD grfFlags;
    DWORD dwState;
    LPVOID pData;
    ULONG cbData;
    }	PROTOCOLDATA;


extern "C" const IID IID_IInternetProtocolRoot;


    
    struct __declspec(uuid("79eac9e3-baf9-11ce-8c82-00aa004ba90b"))
    IInternetProtocolRoot : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Start( 
             LPCWSTR szUrl,
             IInternetProtocolSink  *pOIProtSink,
             IInternetBindInfo  *pOIBindInfo,
             DWORD grfPI,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall Continue( 
             PROTOCOLDATA  *pProtocolData) = 0;
        
        virtual HRESULT __stdcall Abort( 
             HRESULT hrReason,
             DWORD dwOptions) = 0;
        
        virtual HRESULT __stdcall Terminate( 
             DWORD dwOptions) = 0;
        
        virtual HRESULT __stdcall Suspend( void) = 0;
        
        virtual HRESULT __stdcall Resume( void) = 0;
        
    };
    
























































































#line 2988 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"



HRESULT __stdcall IInternetProtocolRoot_Start_Proxy( 
    IInternetProtocolRoot  * This,
     LPCWSTR szUrl,
     IInternetProtocolSink  *pOIProtSink,
     IInternetBindInfo  *pOIBindInfo,
     DWORD grfPI,
     DWORD dwReserved);


void __stdcall IInternetProtocolRoot_Start_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolRoot_Continue_Proxy( 
    IInternetProtocolRoot  * This,
     PROTOCOLDATA  *pProtocolData);


void __stdcall IInternetProtocolRoot_Continue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolRoot_Abort_Proxy( 
    IInternetProtocolRoot  * This,
     HRESULT hrReason,
     DWORD dwOptions);


void __stdcall IInternetProtocolRoot_Abort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolRoot_Terminate_Proxy( 
    IInternetProtocolRoot  * This,
     DWORD dwOptions);


void __stdcall IInternetProtocolRoot_Terminate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolRoot_Suspend_Proxy( 
    IInternetProtocolRoot  * This);


void __stdcall IInternetProtocolRoot_Suspend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolRoot_Resume_Proxy( 
    IInternetProtocolRoot  * This);


void __stdcall IInternetProtocolRoot_Resume_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3068 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"







 


#line 3079 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0125_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0125_v0_0_s_ifspec;









 


typedef  IInternetProtocol  *LPIINTERNETPROTOCOL;


extern "C" const IID IID_IInternetProtocol;


    
    struct __declspec(uuid("79eac9e4-baf9-11ce-8c82-00aa004ba90b"))
    IInternetProtocol : public IInternetProtocolRoot
    {
    public:
        virtual HRESULT __stdcall Read( 
             void  *pv,
             ULONG cb,
             ULONG  *pcbRead) = 0;
        
        virtual HRESULT __stdcall Seek( 
             LARGE_INTEGER dlibMove,
             DWORD dwOrigin,
             ULARGE_INTEGER  *plibNewPosition) = 0;
        
        virtual HRESULT __stdcall LockRequest( 
             DWORD dwOptions) = 0;
        
        virtual HRESULT __stdcall UnlockRequest( void) = 0;
        
    };
    
























































































































#line 3246 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"



HRESULT __stdcall IInternetProtocol_Read_Proxy( 
    IInternetProtocol  * This,
     void  *pv,
     ULONG cb,
     ULONG  *pcbRead);


void __stdcall IInternetProtocol_Read_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocol_Seek_Proxy( 
    IInternetProtocol  * This,
     LARGE_INTEGER dlibMove,
     DWORD dwOrigin,
     ULARGE_INTEGER  *plibNewPosition);


void __stdcall IInternetProtocol_Seek_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocol_LockRequest_Proxy( 
    IInternetProtocol  * This,
     DWORD dwOptions);


void __stdcall IInternetProtocol_LockRequest_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocol_UnlockRequest_Proxy( 
    IInternetProtocol  * This);


void __stdcall IInternetProtocol_UnlockRequest_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3302 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"







 


#line 3313 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0126_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0126_v0_0_s_ifspec;









 


typedef  IInternetProtocolSink  *LPIINTERNETPROTOCOLSINK;


extern "C" const IID IID_IInternetProtocolSink;


    
    struct __declspec(uuid("79eac9e5-baf9-11ce-8c82-00aa004ba90b"))
    IInternetProtocolSink : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Switch( 
             PROTOCOLDATA  *pProtocolData) = 0;
        
        virtual HRESULT __stdcall ReportProgress( 
             ULONG ulStatusCode,
             LPCWSTR szStatusText) = 0;
        
        virtual HRESULT __stdcall ReportData( 
             DWORD grfBSCF,
             ULONG ulProgress,
             ULONG ulProgressMax) = 0;
        
        virtual HRESULT __stdcall ReportResult( 
             HRESULT hrResult,
             DWORD dwError,
             LPCWSTR szResult) = 0;
        
    };
    












































































#line 3438 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"



HRESULT __stdcall IInternetProtocolSink_Switch_Proxy( 
    IInternetProtocolSink  * This,
     PROTOCOLDATA  *pProtocolData);


void __stdcall IInternetProtocolSink_Switch_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolSink_ReportProgress_Proxy( 
    IInternetProtocolSink  * This,
     ULONG ulStatusCode,
     LPCWSTR szStatusText);


void __stdcall IInternetProtocolSink_ReportProgress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolSink_ReportData_Proxy( 
    IInternetProtocolSink  * This,
     DWORD grfBSCF,
     ULONG ulProgress,
     ULONG ulProgressMax);


void __stdcall IInternetProtocolSink_ReportData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolSink_ReportResult_Proxy( 
    IInternetProtocolSink  * This,
     HRESULT hrResult,
     DWORD dwError,
     LPCWSTR szResult);


void __stdcall IInternetProtocolSink_ReportResult_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3496 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"







 


#line 3507 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0127_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0127_v0_0_s_ifspec;









 


typedef  IInternetSession  *LPIINTERNETSESSION;

typedef 
enum _tagOIBDG_FLAGS
    {	OIBDG_APARTMENTTHREADED	= 0x100
    }	OIBDG_FLAGS;


extern "C" const IID IID_IInternetSession;


    
    struct __declspec(uuid("79eac9e7-baf9-11ce-8c82-00aa004ba90b"))
    IInternetSession : public IUnknown
    {
    public:
        virtual HRESULT __stdcall RegisterNameSpace( 
             IClassFactory  *pCF,
             const CLSID & rclsid,
             LPCWSTR pwzProtocol,
             ULONG cPatterns,
             const LPCWSTR  *ppwzPatterns,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall UnregisterNameSpace( 
             IClassFactory  *pCF,
             LPCWSTR pszProtocol) = 0;
        
        virtual HRESULT __stdcall RegisterMimeFilter( 
             IClassFactory  *pCF,
             const CLSID & rclsid,
             LPCWSTR pwzType) = 0;
        
        virtual HRESULT __stdcall UnregisterMimeFilter( 
             IClassFactory  *pCF,
             LPCWSTR pwzType) = 0;
        
        virtual HRESULT __stdcall CreateBinding( 
             LPBC pBC,
             LPCWSTR szUrl,
             IUnknown  *pUnkOuter,
             IUnknown  * *ppUnk,
             IInternetProtocol  * *ppOInetProt,
             DWORD dwOption) = 0;
        
        virtual HRESULT __stdcall SetSessionOption( 
             DWORD dwOption,
             LPVOID pBuffer,
             DWORD dwBufferLength,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall GetSessionOption( 
             DWORD dwOption,
             LPVOID pBuffer,
             DWORD  *pdwBufferLength,
             DWORD dwReserved) = 0;
        
    };
    
















































































































#line 3697 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"



HRESULT __stdcall IInternetSession_RegisterNameSpace_Proxy( 
    IInternetSession  * This,
     IClassFactory  *pCF,
     const CLSID & rclsid,
     LPCWSTR pwzProtocol,
     ULONG cPatterns,
     const LPCWSTR  *ppwzPatterns,
     DWORD dwReserved);


void __stdcall IInternetSession_RegisterNameSpace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSession_UnregisterNameSpace_Proxy( 
    IInternetSession  * This,
     IClassFactory  *pCF,
     LPCWSTR pszProtocol);


void __stdcall IInternetSession_UnregisterNameSpace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSession_RegisterMimeFilter_Proxy( 
    IInternetSession  * This,
     IClassFactory  *pCF,
     const CLSID & rclsid,
     LPCWSTR pwzType);


void __stdcall IInternetSession_RegisterMimeFilter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSession_UnregisterMimeFilter_Proxy( 
    IInternetSession  * This,
     IClassFactory  *pCF,
     LPCWSTR pwzType);


void __stdcall IInternetSession_UnregisterMimeFilter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSession_CreateBinding_Proxy( 
    IInternetSession  * This,
     LPBC pBC,
     LPCWSTR szUrl,
     IUnknown  *pUnkOuter,
     IUnknown  * *ppUnk,
     IInternetProtocol  * *ppOInetProt,
     DWORD dwOption);


void __stdcall IInternetSession_CreateBinding_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSession_SetSessionOption_Proxy( 
    IInternetSession  * This,
     DWORD dwOption,
     LPVOID pBuffer,
     DWORD dwBufferLength,
     DWORD dwReserved);


void __stdcall IInternetSession_SetSessionOption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSession_GetSessionOption_Proxy( 
    IInternetSession  * This,
     DWORD dwOption,
     LPVOID pBuffer,
     DWORD  *pdwBufferLength,
     DWORD dwReserved);


void __stdcall IInternetSession_GetSessionOption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3806 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"







 


#line 3817 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0128_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0128_v0_0_s_ifspec;









 


typedef  IInternetThreadSwitch  *LPIINTERNETTHREADSWITCH;


extern "C" const IID IID_IInternetThreadSwitch;


    
    struct __declspec(uuid("79eac9e8-baf9-11ce-8c82-00aa004ba90b"))
    IInternetThreadSwitch : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Prepare( void) = 0;
        
        virtual HRESULT __stdcall Continue( void) = 0;
        
    };
    























































#line 3908 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"



HRESULT __stdcall IInternetThreadSwitch_Prepare_Proxy( 
    IInternetThreadSwitch  * This);


void __stdcall IInternetThreadSwitch_Prepare_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetThreadSwitch_Continue_Proxy( 
    IInternetThreadSwitch  * This);


void __stdcall IInternetThreadSwitch_Continue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3935 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"







 


#line 3946 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0129_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0129_v0_0_s_ifspec;









 


typedef  IInternetPriority  *LPIINTERNETPRIORITY;


extern "C" const IID IID_IInternetPriority;


    
    struct __declspec(uuid("79eac9eb-baf9-11ce-8c82-00aa004ba90b"))
    IInternetPriority : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetPriority( 
             LONG nPriority) = 0;
        
        virtual HRESULT __stdcall GetPriority( 
             LONG  *pnPriority) = 0;
        
    };
    

























































#line 4041 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"



HRESULT __stdcall IInternetPriority_SetPriority_Proxy( 
    IInternetPriority  * This,
     LONG nPriority);


void __stdcall IInternetPriority_SetPriority_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetPriority_GetPriority_Proxy( 
    IInternetPriority  * This,
     LONG  *pnPriority);


void __stdcall IInternetPriority_GetPriority_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4070 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"







 


#line 4081 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0130_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0130_v0_0_s_ifspec;









 


typedef  IInternetProtocolInfo  *LPIINTERNETPROTOCOLINFO;

typedef 
enum _tagPARSEACTION
    {	PARSE_CANONICALIZE	= 1,
	PARSE_FRIENDLY	= PARSE_CANONICALIZE + 1,
	PARSE_SECURITY_URL	= PARSE_FRIENDLY + 1,
	PARSE_ROOTDOCUMENT	= PARSE_SECURITY_URL + 1,
	PARSE_DOCUMENT	= PARSE_ROOTDOCUMENT + 1,
	PARSE_ANCHOR	= PARSE_DOCUMENT + 1,
	PARSE_ENCODE	= PARSE_ANCHOR + 1,
	PARSE_DECODE	= PARSE_ENCODE + 1,
	PARSE_PATH_FROM_URL	= PARSE_DECODE + 1,
	PARSE_URL_FROM_PATH	= PARSE_PATH_FROM_URL + 1,
	PARSE_MIME	= PARSE_URL_FROM_PATH + 1,
	PARSE_SERVER	= PARSE_MIME + 1,
	PARSE_SCHEMA	= PARSE_SERVER + 1,
	PARSE_SITE	= PARSE_SCHEMA + 1,
	PARSE_DOMAIN	= PARSE_SITE + 1,
	PARSE_LOCATION	= PARSE_DOMAIN + 1,
	PARSE_SECURITY_DOMAIN	= PARSE_LOCATION + 1
    }	PARSEACTION;

typedef 
enum _tagPSUACTION
    {	PSU_DEFAULT	= 1,
	PSU_SECURITY_URL_ONLY	= PSU_DEFAULT + 1
    }	PSUACTION;

typedef 
enum _tagQUERYOPTION
    {	QUERY_EXPIRATION_DATE	= 1,
	QUERY_TIME_OF_LAST_CHANGE	= QUERY_EXPIRATION_DATE + 1,
	QUERY_CONTENT_ENCODING	= QUERY_TIME_OF_LAST_CHANGE + 1,
	QUERY_CONTENT_TYPE	= QUERY_CONTENT_ENCODING + 1,
	QUERY_REFRESH	= QUERY_CONTENT_TYPE + 1,
	QUERY_RECOMBINE	= QUERY_REFRESH + 1,
	QUERY_CAN_NAVIGATE	= QUERY_RECOMBINE + 1,
	QUERY_USES_NETWORK	= QUERY_CAN_NAVIGATE + 1,
	QUERY_IS_CACHED	= QUERY_USES_NETWORK + 1,
	QUERY_IS_INSTALLEDENTRY	= QUERY_IS_CACHED + 1,
	QUERY_IS_CACHED_OR_MAPPED	= QUERY_IS_INSTALLEDENTRY + 1,
	QUERY_USES_CACHE	= QUERY_IS_CACHED_OR_MAPPED + 1
    }	QUERYOPTION;


extern "C" const IID IID_IInternetProtocolInfo;


    
    struct __declspec(uuid("79eac9ec-baf9-11ce-8c82-00aa004ba90b"))
    IInternetProtocolInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ParseUrl( 
             LPCWSTR pwzUrl,
             PARSEACTION ParseAction,
             DWORD dwParseFlags,
             LPWSTR pwzResult,
             DWORD cchResult,
             DWORD  *pcchResult,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall CombineUrl( 
             LPCWSTR pwzBaseUrl,
             LPCWSTR pwzRelativeUrl,
             DWORD dwCombineFlags,
             LPWSTR pwzResult,
             DWORD cchResult,
             DWORD  *pcchResult,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall CompareUrl( 
             LPCWSTR pwzUrl1,
             LPCWSTR pwzUrl2,
             DWORD dwCompareFlags) = 0;
        
        virtual HRESULT __stdcall QueryInfo( 
             LPCWSTR pwzUrl,
             QUERYOPTION OueryOption,
             DWORD dwQueryFlags,
             LPVOID pBuffer,
             DWORD cbBuffer,
             DWORD  *pcbBuf,
             DWORD dwReserved) = 0;
        
    };
    



























































































#line 4279 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"



HRESULT __stdcall IInternetProtocolInfo_ParseUrl_Proxy( 
    IInternetProtocolInfo  * This,
     LPCWSTR pwzUrl,
     PARSEACTION ParseAction,
     DWORD dwParseFlags,
     LPWSTR pwzResult,
     DWORD cchResult,
     DWORD  *pcchResult,
     DWORD dwReserved);


void __stdcall IInternetProtocolInfo_ParseUrl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolInfo_CombineUrl_Proxy( 
    IInternetProtocolInfo  * This,
     LPCWSTR pwzBaseUrl,
     LPCWSTR pwzRelativeUrl,
     DWORD dwCombineFlags,
     LPWSTR pwzResult,
     DWORD cchResult,
     DWORD  *pcchResult,
     DWORD dwReserved);


void __stdcall IInternetProtocolInfo_CombineUrl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolInfo_CompareUrl_Proxy( 
    IInternetProtocolInfo  * This,
     LPCWSTR pwzUrl1,
     LPCWSTR pwzUrl2,
     DWORD dwCompareFlags);


void __stdcall IInternetProtocolInfo_CompareUrl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolInfo_QueryInfo_Proxy( 
    IInternetProtocolInfo  * This,
     LPCWSTR pwzUrl,
     QUERYOPTION OueryOption,
     DWORD dwQueryFlags,
     LPVOID pBuffer,
     DWORD cbBuffer,
     DWORD  *pcbBuf,
     DWORD dwReserved);


void __stdcall IInternetProtocolInfo_QueryInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4352 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"







 


#line 4363 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




























extern "C" HRESULT __stdcall CoInternetParseUrl(               
    LPCWSTR     pwzUrl,                  
    PARSEACTION ParseAction,             
    DWORD       dwFlags,                 
    LPWSTR      pszResult,               
    DWORD       cchResult,               
    DWORD      *pcchResult,              
    DWORD       dwReserved               
    );                                   
extern "C" HRESULT __stdcall CoInternetCombineUrl(             
    LPCWSTR     pwzBaseUrl,              
    LPCWSTR     pwzRelativeUrl,          
    DWORD       dwCombineFlags,          
    LPWSTR      pszResult,               
    DWORD       cchResult,               
    DWORD      *pcchResult,              
    DWORD       dwReserved               
    );                                   
extern "C" HRESULT __stdcall CoInternetCompareUrl(             
    LPCWSTR pwzUrl1,                     
    LPCWSTR pwzUrl2,                     
    DWORD dwFlags                        
    );                                   
extern "C" HRESULT __stdcall CoInternetGetProtocolFlags(       
    LPCWSTR     pwzUrl,                  
    DWORD      *pdwFlags,                
    DWORD       dwReserved               
    );                                   
extern "C" HRESULT __stdcall CoInternetQueryInfo(              
    LPCWSTR     pwzUrl,                  
    QUERYOPTION QueryOptions,            
    DWORD       dwQueryFlags,            
    LPVOID      pvBuffer,                
    DWORD       cbBuffer,                
    DWORD      *pcbBuffer,               
    DWORD       dwReserved               
    );                                   
extern "C" HRESULT __stdcall CoInternetGetSession(             
    DWORD       dwSessionMode,           
    IInternetSession **ppIInternetSession,
    DWORD       dwReserved               
    );                                   
extern "C" HRESULT __stdcall CoInternetGetSecurityUrl(         
    LPCWSTR pwzUrl,                      
    LPWSTR  *ppwzSecUrl,                 
    PSUACTION  psuAction,                
    DWORD   dwReserved                   
    );                                   
 
extern "C" HRESULT __stdcall CopyStgMedium(const STGMEDIUM * pcstgmedSrc,  
                           STGMEDIUM * pstgmedDest); 
extern "C" HRESULT __stdcall CopyBindInfo( const BINDINFO * pcbiSrc,   
                           BINDINFO * pbiDest ); 
extern "C" void __stdcall ReleaseBindInfo( BINDINFO * pbindinfo );  
 










#line 4457 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"







extern "C" HRESULT __stdcall CoInternetCreateSecurityManager(IServiceProvider *pSP, IInternetSecurityManager **ppSM, DWORD dwReserved);

extern "C" HRESULT __stdcall CoInternetCreateZoneManager(IServiceProvider *pSP, IInternetZoneManager **ppZM, DWORD dwReserved);



extern "C" const IID CLSID_InternetSecurityManager;  
extern "C" const IID CLSID_InternetZoneManager;  









extern RPC_IF_HANDLE __MIDL_itf_urlmon_0131_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0131_v0_0_s_ifspec;









 



extern "C" const IID IID_IInternetSecurityMgrSite;


    
    struct __declspec(uuid("79eac9ed-baf9-11ce-8c82-00aa004ba90b"))
    IInternetSecurityMgrSite : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetWindow( 
             HWND  *phwnd) = 0;
        
        virtual HRESULT __stdcall EnableModeless( 
             BOOL fEnable) = 0;
        
    };
    

























































#line 4570 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"



HRESULT __stdcall IInternetSecurityMgrSite_GetWindow_Proxy( 
    IInternetSecurityMgrSite  * This,
     HWND  *phwnd);


void __stdcall IInternetSecurityMgrSite_GetWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSecurityMgrSite_EnableModeless_Proxy( 
    IInternetSecurityMgrSite  * This,
     BOOL fEnable);


void __stdcall IInternetSecurityMgrSite_EnableModeless_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4599 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"







 


#line 4610 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0132_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0132_v0_0_s_ifspec;









 




typedef  
enum __MIDL_IInternetSecurityManager_0001
    {	PUAF_DEFAULT	= 0,
	PUAF_NOUI	= 0x1,
	PUAF_ISFILE	= 0x2,
	PUAF_WARN_IF_DENIED	= 0x4,
	PUAF_FORCEUI_FOREGROUND	= 0x8,
	PUAF_CHECK_TIFS	= 0x10
    }	PUAF;







typedef  
enum __MIDL_IInternetSecurityManager_0002
    {	SZM_CREATE	= 0,
	SZM_DELETE	= 0x1
    }	SZM_FLAGS;
















extern "C" const IID IID_IInternetSecurityManager;


    
    struct __declspec(uuid("79eac9ee-baf9-11ce-8c82-00aa004ba90b"))
    IInternetSecurityManager : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetSecuritySite( 
             IInternetSecurityMgrSite  *pSite) = 0;
        
        virtual HRESULT __stdcall GetSecuritySite( 
             IInternetSecurityMgrSite  * *ppSite) = 0;
        
        virtual HRESULT __stdcall MapUrlToZone( 
             LPCWSTR pwszUrl,
             DWORD  *pdwZone,
             DWORD dwFlags) = 0;
        
        virtual HRESULT __stdcall GetSecurityId( 
             LPCWSTR pwszUrl,
             BYTE  *pbSecurityId,
             DWORD  *pcbSecurityId,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall ProcessUrlAction( 
             LPCWSTR pwszUrl,
             DWORD dwAction,
             BYTE  *pPolicy,
             DWORD cbPolicy,
             BYTE  *pContext,
             DWORD cbContext,
             DWORD dwFlags,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall QueryCustomPolicy( 
             LPCWSTR pwszUrl,
             const GUID & guidKey,
             BYTE  * *ppPolicy,
             DWORD  *pcbPolicy,
             BYTE  *pContext,
             DWORD cbContext,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall SetZoneMapping( 
             DWORD dwZone,
             LPCWSTR lpszPattern,
             DWORD dwFlags) = 0;
        
        virtual HRESULT __stdcall GetZoneMappings( 
             DWORD dwZone,
             IEnumString  * *ppenumString,
             DWORD dwFlags) = 0;
        
    };
    

























































































































#line 4845 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"



HRESULT __stdcall IInternetSecurityManager_SetSecuritySite_Proxy( 
    IInternetSecurityManager  * This,
     IInternetSecurityMgrSite  *pSite);


void __stdcall IInternetSecurityManager_SetSecuritySite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSecurityManager_GetSecuritySite_Proxy( 
    IInternetSecurityManager  * This,
     IInternetSecurityMgrSite  * *ppSite);


void __stdcall IInternetSecurityManager_GetSecuritySite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSecurityManager_MapUrlToZone_Proxy( 
    IInternetSecurityManager  * This,
     LPCWSTR pwszUrl,
     DWORD  *pdwZone,
     DWORD dwFlags);


void __stdcall IInternetSecurityManager_MapUrlToZone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSecurityManager_GetSecurityId_Proxy( 
    IInternetSecurityManager  * This,
     LPCWSTR pwszUrl,
     BYTE  *pbSecurityId,
     DWORD  *pcbSecurityId,
     DWORD dwReserved);


void __stdcall IInternetSecurityManager_GetSecurityId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSecurityManager_ProcessUrlAction_Proxy( 
    IInternetSecurityManager  * This,
     LPCWSTR pwszUrl,
     DWORD dwAction,
     BYTE  *pPolicy,
     DWORD cbPolicy,
     BYTE  *pContext,
     DWORD cbContext,
     DWORD dwFlags,
     DWORD dwReserved);


void __stdcall IInternetSecurityManager_ProcessUrlAction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSecurityManager_QueryCustomPolicy_Proxy( 
    IInternetSecurityManager  * This,
     LPCWSTR pwszUrl,
     const GUID & guidKey,
     BYTE  * *ppPolicy,
     DWORD  *pcbPolicy,
     BYTE  *pContext,
     DWORD cbContext,
     DWORD dwReserved);


void __stdcall IInternetSecurityManager_QueryCustomPolicy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSecurityManager_SetZoneMapping_Proxy( 
    IInternetSecurityManager  * This,
     DWORD dwZone,
     LPCWSTR lpszPattern,
     DWORD dwFlags);


void __stdcall IInternetSecurityManager_SetZoneMapping_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSecurityManager_GetZoneMappings_Proxy( 
    IInternetSecurityManager  * This,
     DWORD dwZone,
     IEnumString  * *ppenumString,
     DWORD dwFlags);


void __stdcall IInternetSecurityManager_GetZoneMappings_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4968 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"







 


#line 4979 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"







extern RPC_IF_HANDLE __MIDL_itf_urlmon_0133_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0133_v0_0_s_ifspec;









 



extern "C" const IID IID_IInternetHostSecurityManager;


    
    struct __declspec(uuid("3af280b6-cb3f-11d0-891e-00c04fb6bfc4"))
    IInternetHostSecurityManager : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetSecurityId( 
             BYTE  *pbSecurityId,
             DWORD  *pcbSecurityId,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall ProcessUrlAction( 
             DWORD dwAction,
             BYTE  *pPolicy,
             DWORD cbPolicy,
             BYTE  *pContext,
             DWORD cbContext,
             DWORD dwFlags,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall QueryCustomPolicy( 
             const GUID & guidKey,
             BYTE  * *ppPolicy,
             DWORD  *pcbPolicy,
             BYTE  *pContext,
             DWORD cbContext,
             DWORD dwReserved) = 0;
        
    };
    













































































#line 5111 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"



HRESULT __stdcall IInternetHostSecurityManager_GetSecurityId_Proxy( 
    IInternetHostSecurityManager  * This,
     BYTE  *pbSecurityId,
     DWORD  *pcbSecurityId,
     DWORD dwReserved);


void __stdcall IInternetHostSecurityManager_GetSecurityId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetHostSecurityManager_ProcessUrlAction_Proxy( 
    IInternetHostSecurityManager  * This,
     DWORD dwAction,
     BYTE  *pPolicy,
     DWORD cbPolicy,
     BYTE  *pContext,
     DWORD cbContext,
     DWORD dwFlags,
     DWORD dwReserved);


void __stdcall IInternetHostSecurityManager_ProcessUrlAction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetHostSecurityManager_QueryCustomPolicy_Proxy( 
    IInternetHostSecurityManager  * This,
     const GUID & guidKey,
     BYTE  * *ppPolicy,
     DWORD  *pcbPolicy,
     BYTE  *pContext,
     DWORD cbContext,
     DWORD dwReserved);


void __stdcall IInternetHostSecurityManager_QueryCustomPolicy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5165 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"







 


#line 5176 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"







































































































































extern RPC_IF_HANDLE __MIDL_itf_urlmon_0134_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0134_v0_0_s_ifspec;









 


typedef  IInternetZoneManager  *LPURLZONEMANAGER;

typedef 
enum tagURLZONE
    {	URLZONE_PREDEFINED_MIN	= 0,
	URLZONE_LOCAL_MACHINE	= 0,
	URLZONE_INTRANET	= URLZONE_LOCAL_MACHINE + 1,
	URLZONE_TRUSTED	= URLZONE_INTRANET + 1,
	URLZONE_INTERNET	= URLZONE_TRUSTED + 1,
	URLZONE_UNTRUSTED	= URLZONE_INTERNET + 1,
	URLZONE_PREDEFINED_MAX	= 999,
	URLZONE_USER_MIN	= 1000,
	URLZONE_USER_MAX	= 10000
    }	URLZONE;

typedef 
enum tagURLTEMPLATE
    {	URLTEMPLATE_CUSTOM	= 0,
	URLTEMPLATE_PREDEFINED_MIN	= 0x10000,
	URLTEMPLATE_LOW	= 0x10000,
	URLTEMPLATE_MEDIUM	= 0x11000,
	URLTEMPLATE_HIGH	= 0x12000,
	URLTEMPLATE_PREDEFINED_MAX	= 0x20000
    }	URLTEMPLATE;


enum __MIDL_IInternetZoneManager_0001
    {	MAX_ZONE_PATH	= 260,
	MAX_ZONE_DESCRIPTION	= 200
    };
typedef  
enum __MIDL_IInternetZoneManager_0002
    {	ZAFLAGS_CUSTOM_EDIT	= 0x1,
	ZAFLAGS_ADD_SITES	= 0x2,
	ZAFLAGS_REQUIRE_VERIFICATION	= 0x4,
	ZAFLAGS_INCLUDE_PROXY_OVERRIDE	= 0x8,
	ZAFLAGS_INCLUDE_INTRANET_SITES	= 0x10,
	ZAFLAGS_NO_UI	= 0x20,
	ZAFLAGS_SUPPORTS_VERIFICATION	= 0x40,
	ZAFLAGS_UNC_AS_INTRANET	= 0x80
    }	ZAFLAGS;

typedef struct  _ZONEATTRIBUTES
    {
    ULONG cbSize;
    WCHAR szDisplayName[ 260 ];
    WCHAR szDescription[ 200 ];
    WCHAR szIconPath[ 260 ];
    DWORD dwTemplateMinLevel;
    DWORD dwTemplateRecommended;
    DWORD dwTemplateCurrentLevel;
    DWORD dwFlags;
    }	ZONEATTRIBUTES;

typedef struct _ZONEATTRIBUTES  *LPZONEATTRIBUTES;

















typedef 
enum _URLZONEREG
    {	URLZONEREG_DEFAULT	= 0,
	URLZONEREG_HKLM	= URLZONEREG_DEFAULT + 1,
	URLZONEREG_HKCU	= URLZONEREG_HKLM + 1
    }	URLZONEREG;
































extern "C" const IID IID_IInternetZoneManager;


    
    struct __declspec(uuid("79eac9ef-baf9-11ce-8c82-00aa004ba90b"))
    IInternetZoneManager : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetZoneAttributes( 
             DWORD dwZone,
             ZONEATTRIBUTES  *pZoneAttributes) = 0;
        
        virtual HRESULT __stdcall SetZoneAttributes( 
             DWORD dwZone,
             ZONEATTRIBUTES  *pZoneAttributes) = 0;
        
        virtual HRESULT __stdcall GetZoneCustomPolicy( 
             DWORD dwZone,
             const GUID & guidKey,
             BYTE  * *ppPolicy,
             DWORD  *pcbPolicy,
             URLZONEREG urlZoneReg) = 0;
        
        virtual HRESULT __stdcall SetZoneCustomPolicy( 
             DWORD dwZone,
             const GUID & guidKey,
             BYTE  *pPolicy,
             DWORD cbPolicy,
             URLZONEREG urlZoneReg) = 0;
        
        virtual HRESULT __stdcall GetZoneActionPolicy( 
             DWORD dwZone,
             DWORD dwAction,
             BYTE  *pPolicy,
             DWORD cbPolicy,
             URLZONEREG urlZoneReg) = 0;
        
        virtual HRESULT __stdcall SetZoneActionPolicy( 
             DWORD dwZone,
             DWORD dwAction,
             BYTE  *pPolicy,
             DWORD cbPolicy,
             URLZONEREG urlZoneReg) = 0;
        
        virtual HRESULT __stdcall PromptAction( 
             DWORD dwAction,
             HWND hwndParent,
             LPCWSTR pwszUrl,
             LPCWSTR pwszText,
             DWORD dwPromptFlags) = 0;
        
        virtual HRESULT __stdcall LogAction( 
             DWORD dwAction,
             LPCWSTR pwszUrl,
             LPCWSTR pwszText,
             DWORD dwLogFlags) = 0;
        
        virtual HRESULT __stdcall CreateZoneEnumerator( 
             DWORD  *pdwEnum,
             DWORD  *pdwCount,
             DWORD dwFlags) = 0;
        
        virtual HRESULT __stdcall GetZoneAt( 
             DWORD dwEnum,
             DWORD dwIndex,
             DWORD  *pdwZone) = 0;
        
        virtual HRESULT __stdcall DestroyZoneEnumerator( 
             DWORD dwEnum) = 0;
        
        virtual HRESULT __stdcall CopyTemplatePoliciesToZone( 
             DWORD dwTemplate,
             DWORD dwZone,
             DWORD dwReserved) = 0;
        
    };
    






























































































































































#line 5671 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"



HRESULT __stdcall IInternetZoneManager_GetZoneAttributes_Proxy( 
    IInternetZoneManager  * This,
     DWORD dwZone,
     ZONEATTRIBUTES  *pZoneAttributes);


void __stdcall IInternetZoneManager_GetZoneAttributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetZoneManager_SetZoneAttributes_Proxy( 
    IInternetZoneManager  * This,
     DWORD dwZone,
     ZONEATTRIBUTES  *pZoneAttributes);


void __stdcall IInternetZoneManager_SetZoneAttributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetZoneManager_GetZoneCustomPolicy_Proxy( 
    IInternetZoneManager  * This,
     DWORD dwZone,
     const GUID & guidKey,
     BYTE  * *ppPolicy,
     DWORD  *pcbPolicy,
     URLZONEREG urlZoneReg);


void __stdcall IInternetZoneManager_GetZoneCustomPolicy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetZoneManager_SetZoneCustomPolicy_Proxy( 
    IInternetZoneManager  * This,
     DWORD dwZone,
     const GUID & guidKey,
     BYTE  *pPolicy,
     DWORD cbPolicy,
     URLZONEREG urlZoneReg);


void __stdcall IInternetZoneManager_SetZoneCustomPolicy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetZoneManager_GetZoneActionPolicy_Proxy( 
    IInternetZoneManager  * This,
     DWORD dwZone,
     DWORD dwAction,
     BYTE  *pPolicy,
     DWORD cbPolicy,
     URLZONEREG urlZoneReg);


void __stdcall IInternetZoneManager_GetZoneActionPolicy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetZoneManager_SetZoneActionPolicy_Proxy( 
    IInternetZoneManager  * This,
     DWORD dwZone,
     DWORD dwAction,
     BYTE  *pPolicy,
     DWORD cbPolicy,
     URLZONEREG urlZoneReg);


void __stdcall IInternetZoneManager_SetZoneActionPolicy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetZoneManager_PromptAction_Proxy( 
    IInternetZoneManager  * This,
     DWORD dwAction,
     HWND hwndParent,
     LPCWSTR pwszUrl,
     LPCWSTR pwszText,
     DWORD dwPromptFlags);


void __stdcall IInternetZoneManager_PromptAction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetZoneManager_LogAction_Proxy( 
    IInternetZoneManager  * This,
     DWORD dwAction,
     LPCWSTR pwszUrl,
     LPCWSTR pwszText,
     DWORD dwLogFlags);


void __stdcall IInternetZoneManager_LogAction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetZoneManager_CreateZoneEnumerator_Proxy( 
    IInternetZoneManager  * This,
     DWORD  *pdwEnum,
     DWORD  *pdwCount,
     DWORD dwFlags);


void __stdcall IInternetZoneManager_CreateZoneEnumerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetZoneManager_GetZoneAt_Proxy( 
    IInternetZoneManager  * This,
     DWORD dwEnum,
     DWORD dwIndex,
     DWORD  *pdwZone);


void __stdcall IInternetZoneManager_GetZoneAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetZoneManager_DestroyZoneEnumerator_Proxy( 
    IInternetZoneManager  * This,
     DWORD dwEnum);


void __stdcall IInternetZoneManager_DestroyZoneEnumerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetZoneManager_CopyTemplatePoliciesToZone_Proxy( 
    IInternetZoneManager  * This,
     DWORD dwTemplate,
     DWORD dwZone,
     DWORD dwReserved);


void __stdcall IInternetZoneManager_CopyTemplatePoliciesToZone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5851 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"







 


#line 5862 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"
extern "C" const IID CLSID_SoftDistExt;  














typedef struct  _tagCODEBASEHOLD
    {
    ULONG cbSize;
    LPWSTR szDistUnit;
    LPWSTR szCodeBase;
    DWORD dwVersionMS;
    DWORD dwVersionLS;
    DWORD dwStyle;
    }	CODEBASEHOLD;

typedef struct _tagCODEBASEHOLD  *LPCODEBASEHOLD;

typedef struct  _tagSOFTDISTINFO
    {
    ULONG cbSize;
    DWORD dwFlags;
    DWORD dwAdState;
    LPWSTR szTitle;
    LPWSTR szAbstract;
    LPWSTR szHREF;
    DWORD dwInstalledVersionMS;
    DWORD dwInstalledVersionLS;
    DWORD dwUpdateVersionMS;
    DWORD dwUpdateVersionLS;
    DWORD dwAdvertisedVersionMS;
    DWORD dwAdvertisedVersionLS;
    DWORD dwReserved;
    }	SOFTDISTINFO;

typedef struct _tagSOFTDISTINFO  *LPSOFTDISTINFO;



extern RPC_IF_HANDLE __MIDL_itf_urlmon_0135_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0135_v0_0_s_ifspec;









 



extern "C" const IID IID_ISoftDistExt;


    
    struct __declspec(uuid("B15B8DC1-C7E1-11d0-8680-00AA00BDCB71"))
    ISoftDistExt : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ProcessSoftDist( 
             LPCWSTR szCDFURL,
             IXMLElement  *pSoftDistElement,
             LPSOFTDISTINFO lpsdi) = 0;
        
        virtual HRESULT __stdcall GetFirstCodeBase( 
             LPWSTR  *szCodeBase,
             LPDWORD dwMaxSize) = 0;
        
        virtual HRESULT __stdcall GetNextCodeBase( 
             LPWSTR  *szCodeBase,
             LPDWORD dwMaxSize) = 0;
        
        virtual HRESULT __stdcall AsyncInstallDistributionUnit( 
             IBindCtx  *pbc,
             LPVOID pvReserved,
             DWORD flags,
             LPCODEBASEHOLD lpcbh) = 0;
        
    };
    














































































#line 6033 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"



HRESULT __stdcall ISoftDistExt_ProcessSoftDist_Proxy( 
    ISoftDistExt  * This,
     LPCWSTR szCDFURL,
     IXMLElement  *pSoftDistElement,
     LPSOFTDISTINFO lpsdi);


void __stdcall ISoftDistExt_ProcessSoftDist_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISoftDistExt_GetFirstCodeBase_Proxy( 
    ISoftDistExt  * This,
     LPWSTR  *szCodeBase,
     LPDWORD dwMaxSize);


void __stdcall ISoftDistExt_GetFirstCodeBase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISoftDistExt_GetNextCodeBase_Proxy( 
    ISoftDistExt  * This,
     LPWSTR  *szCodeBase,
     LPDWORD dwMaxSize);


void __stdcall ISoftDistExt_GetNextCodeBase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISoftDistExt_AsyncInstallDistributionUnit_Proxy( 
    ISoftDistExt  * This,
     IBindCtx  *pbc,
     LPVOID pvReserved,
     DWORD flags,
     LPCODEBASEHOLD lpcbh);


void __stdcall ISoftDistExt_AsyncInstallDistributionUnit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6093 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"







 


extern "C" HRESULT __stdcall GetSoftwareUpdateInfo( LPCWSTR szDistUnit, LPSOFTDISTINFO psdi );
extern "C" HRESULT __stdcall SetSoftwareUpdateAdvertisementState( LPCWSTR szDistUnit, DWORD dwAdState, DWORD dwAdvertisedVersionMS, DWORD dwAdvertisedVersionLS );
#line 6106 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0136_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0136_v0_0_s_ifspec;









 


typedef  IDataFilter  *LPDATAFILTER;


extern "C" const IID IID_IDataFilter;


    
    struct __declspec(uuid("69d14c80-c18e-11d0-a9ce-006097942311"))
    IDataFilter : public IUnknown
    {
    public:
        virtual HRESULT __stdcall DoEncode( 
             DWORD dwFlags,
             LONG lInBufferSize,
             BYTE  *pbInBuffer,
             LONG lOutBufferSize,
             BYTE  *pbOutBuffer,
             LONG lInBytesAvailable,
             LONG  *plInBytesRead,
             LONG  *plOutBytesWritten,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall DoDecode( 
             DWORD dwFlags,
             LONG lInBufferSize,
             BYTE  *pbInBuffer,
             LONG lOutBufferSize,
             BYTE  *pbOutBuffer,
             LONG lInBytesAvailable,
             LONG  *plInBytesRead,
             LONG  *plOutBytesWritten,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall SetEncodingLevel( 
             DWORD dwEncLevel) = 0;
        
    };
    
















































































#line 6243 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"



HRESULT __stdcall IDataFilter_DoEncode_Proxy( 
    IDataFilter  * This,
     DWORD dwFlags,
     LONG lInBufferSize,
     BYTE  *pbInBuffer,
     LONG lOutBufferSize,
     BYTE  *pbOutBuffer,
     LONG lInBytesAvailable,
     LONG  *plInBytesRead,
     LONG  *plOutBytesWritten,
     DWORD dwReserved);


void __stdcall IDataFilter_DoEncode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataFilter_DoDecode_Proxy( 
    IDataFilter  * This,
     DWORD dwFlags,
     LONG lInBufferSize,
     BYTE  *pbInBuffer,
     LONG lOutBufferSize,
     BYTE  *pbOutBuffer,
     LONG lInBytesAvailable,
     LONG  *plInBytesRead,
     LONG  *plOutBytesWritten,
     DWORD dwReserved);


void __stdcall IDataFilter_DoDecode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataFilter_SetEncodingLevel_Proxy( 
    IDataFilter  * This,
     DWORD dwEncLevel);


void __stdcall IDataFilter_SetEncodingLevel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6300 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"







 


#line 6311 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"


typedef struct  _tagPROTOCOLFILTERDATA
    {
    DWORD cbSize;
    IInternetProtocolSink  *pProtocolSink;
    IInternetProtocol  *pProtocol;
    IUnknown  *pUnk;
    DWORD dwFilterFlags;
    }	PROTOCOLFILTERDATA;



extern RPC_IF_HANDLE __MIDL_itf_urlmon_0137_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0137_v0_0_s_ifspec;









 


typedef  IEncodingFilterFactory  *LPENCODINGFILTERFACTORY;

typedef struct  _tagDATAINFO
    {
    ULONG ulTotalSize;
    ULONG ulavrPacketSize;
    ULONG ulConnectSpeed;
    ULONG ulProcessorSpeed;
    }	DATAINFO;


extern "C" const IID IID_IEncodingFilterFactory;


    
    struct __declspec(uuid("70bdde00-c18e-11d0-a9ce-006097942311"))
    IEncodingFilterFactory : public IUnknown
    {
    public:
        virtual HRESULT __stdcall FindBestFilter( 
             LPCWSTR pwzCodeIn,
             LPCWSTR pwzCodeOut,
             DATAINFO info,
             IDataFilter  * *ppDF) = 0;
        
        virtual HRESULT __stdcall GetDefaultFilter( 
             LPCWSTR pwzCodeIn,
             LPCWSTR pwzCodeOut,
             IDataFilter  * *ppDF) = 0;
        
    };
    






























































#line 6433 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"



HRESULT __stdcall IEncodingFilterFactory_FindBestFilter_Proxy( 
    IEncodingFilterFactory  * This,
     LPCWSTR pwzCodeIn,
     LPCWSTR pwzCodeOut,
     DATAINFO info,
     IDataFilter  * *ppDF);


void __stdcall IEncodingFilterFactory_FindBestFilter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEncodingFilterFactory_GetDefaultFilter_Proxy( 
    IEncodingFilterFactory  * This,
     LPCWSTR pwzCodeIn,
     LPCWSTR pwzCodeOut,
     IDataFilter  * *ppDF);


void __stdcall IEncodingFilterFactory_GetDefaultFilter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6467 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"







 


#line 6478 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"



BOOL __stdcall IsLoggingEnabledA( LPCTSTR  pszUrl);                   
BOOL __stdcall IsLoggingEnalbedW( LPCWSTR  pwszUrl);                  




#line 6488 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"
typedef struct  _tagHIT_LOGGING_INFO
    {
    DWORD dwStructSize;
    LPSTR lpszLoggedUrlName;
    SYSTEMTIME StartTime;
    SYSTEMTIME EndTime;
    LPSTR lpszExtendedInfo;
    }	HIT_LOGGING_INFO;

typedef struct _tagHIT_LOGGING_INFO  *LPHIT_LOGGING_INFO;

BOOL __stdcall WriteHitLogging( LPHIT_LOGGING_INFO lpLogginginfo);    
#line 6501 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"


extern RPC_IF_HANDLE __MIDL_itf_urlmon_0138_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0138_v0_0_s_ifspec;



 HRESULT __stdcall IBinding_GetBindResult_Proxy( 
    IBinding  * This,
     CLSID  *pclsidProtocol,
     DWORD  *pdwResult,
     LPOLESTR  *pszResult,
     DWORD  *pdwReserved);


 HRESULT __stdcall IBinding_GetBindResult_Stub( 
    IBinding  * This,
     CLSID  *pclsidProtocol,
     DWORD  *pdwResult,
     LPOLESTR  *pszResult,
     DWORD dwReserved);

 HRESULT __stdcall IBindStatusCallback_GetBindInfo_Proxy( 
    IBindStatusCallback  * This,
     DWORD  *grfBINDF,
     BINDINFO  *pbindinfo);


 HRESULT __stdcall IBindStatusCallback_GetBindInfo_Stub( 
    IBindStatusCallback  * This,
     DWORD  *grfBINDF,
     RemBINDINFO  *pbindinfo,
     RemSTGMEDIUM  *pstgmed);

 HRESULT __stdcall IBindStatusCallback_OnDataAvailable_Proxy( 
    IBindStatusCallback  * This,
     DWORD grfBSCF,
     DWORD dwSize,
     FORMATETC  *pformatetc,
     STGMEDIUM  *pstgmed);


 HRESULT __stdcall IBindStatusCallback_OnDataAvailable_Stub( 
    IBindStatusCallback  * This,
     DWORD grfBSCF,
     DWORD dwSize,
     RemFORMATETC  *pformatetc,
     RemSTGMEDIUM  *pstgmed);

 HRESULT __stdcall IWinInetInfo_QueryOption_Proxy( 
    IWinInetInfo  * This,
     DWORD dwOption,
     LPVOID pBuffer,
     DWORD  *pcbBuf);


 HRESULT __stdcall IWinInetInfo_QueryOption_Stub( 
    IWinInetInfo  * This,
     DWORD dwOption,
     BYTE  *pBuffer,
     DWORD  *pcbBuf);

 HRESULT __stdcall IWinInetHttpInfo_QueryInfo_Proxy( 
    IWinInetHttpInfo  * This,
     DWORD dwOption,
     LPVOID pBuffer,
     DWORD  *pcbBuf,
     DWORD  *pdwFlags,
     DWORD  *pdwReserved);


 HRESULT __stdcall IWinInetHttpInfo_QueryInfo_Stub( 
    IWinInetHttpInfo  * This,
     DWORD dwOption,
     BYTE  *pBuffer,
     DWORD  *pcbBuf,
     DWORD  *pdwFlags,
     DWORD  *pdwReserved);

 HRESULT __stdcall IBindHost_MonikerBindToStorage_Proxy( 
    IBindHost  * This,
     IMoniker  *pMk,
     IBindCtx  *pBC,
     IBindStatusCallback  *pBSC,
     const IID & riid,
     void  * *ppvObj);


 HRESULT __stdcall IBindHost_MonikerBindToStorage_Stub( 
    IBindHost  * This,
     IMoniker  *pMk,
     IBindCtx  *pBC,
     IBindStatusCallback  *pBSC,
     const IID & riid,
     IUnknown  * *ppvObj);

 HRESULT __stdcall IBindHost_MonikerBindToObject_Proxy( 
    IBindHost  * This,
     IMoniker  *pMk,
     IBindCtx  *pBC,
     IBindStatusCallback  *pBSC,
     const IID & riid,
     void  * *ppvObj);


 HRESULT __stdcall IBindHost_MonikerBindToObject_Stub( 
    IBindHost  * This,
     IMoniker  *pMk,
     IBindCtx  *pBC,
     IBindStatusCallback  *pBSC,
     const IID & riid,
     IUnknown  * *ppvObj);






}
#line 6621 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"

#line 6623 "c:\\programme\\microsoft visual studio\\vc98\\include\\urlmon.h"
#line 897 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"




extern "C" __declspec(dllimport) HRESULT __stdcall CreateStdProgressIndicator(HWND hwndParent,
                                   LPCOLESTR pszTitle,
                                   IBindStatusCallback * pIbscCaller,
                                   IBindStatusCallback ** ppIbsc);


#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"


#line 36 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"
#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"
#line 908 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"
#line 909 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"

#line 911 "c:\\programme\\microsoft visual studio\\vc98\\include\\objbase.h"
#line 42 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleauto.h"
















#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push)
#line 28 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack8.h"
#pragma pack(8)


#line 32 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack8.h"
#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\pshpack8.h"
#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleauto.h"
#line 19 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleauto.h"









#line 29 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleauto.h"

extern "C" const IID IID_StdOle;






















#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"


















#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"
















#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"





































































































































































































#line 20 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"







#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"







































































































































































































































































































































































































































#line 425 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"

#line 29 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"
#line 30 "c:\\programme\\microsoft visual studio\\vc98\\include\\oaidl.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 54 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleauto.h"






extern "C" __declspec(dllimport) BSTR __stdcall SysAllocString(const OLECHAR *);
extern "C" __declspec(dllimport) INT __stdcall  SysReAllocString(BSTR *, const OLECHAR *);
extern "C" __declspec(dllimport) BSTR __stdcall SysAllocStringLen(const OLECHAR *, UINT);
extern "C" __declspec(dllimport) INT __stdcall  SysReAllocStringLen(BSTR *, const OLECHAR *, UINT);
extern "C" __declspec(dllimport) void __stdcall SysFreeString(BSTR);
extern "C" __declspec(dllimport) UINT __stdcall SysStringLen(BSTR);


extern "C" __declspec(dllimport) UINT __stdcall SysStringByteLen(BSTR bstr);
extern "C" __declspec(dllimport) BSTR __stdcall SysAllocStringByteLen(LPCSTR psz, UINT len);
#line 71 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleauto.h"





extern "C" __declspec(dllimport) INT __stdcall DosDateTimeToVariantTime(USHORT wDosDate, USHORT wDosTime, DOUBLE * pvtime);

extern "C" __declspec(dllimport) INT __stdcall VariantTimeToDosDateTime(DOUBLE vtime, USHORT * pwDosDate, USHORT * pwDosTime);


extern "C" __declspec(dllimport) INT __stdcall SystemTimeToVariantTime(LPSYSTEMTIME lpSystemTime, DOUBLE *pvtime);
extern "C" __declspec(dllimport) INT __stdcall VariantTimeToSystemTime(DOUBLE vtime, LPSYSTEMTIME lpSystemTime);
#line 84 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleauto.h"






extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayAllocDescriptor(UINT cDims, SAFEARRAY ** ppsaOut);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayAllocDescriptorEx(VARTYPE vt, UINT cDims, SAFEARRAY ** ppsaOut);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayAllocData(SAFEARRAY * psa);
extern "C" __declspec(dllimport) SAFEARRAY * __stdcall SafeArrayCreate(VARTYPE vt, UINT cDims, SAFEARRAYBOUND * rgsabound);
extern "C" __declspec(dllimport) SAFEARRAY * __stdcall SafeArrayCreateEx(VARTYPE vt, UINT cDims, SAFEARRAYBOUND * rgsabound, PVOID pvExtra);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayCopyData(SAFEARRAY *psaSource, SAFEARRAY *psaTarget);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayDestroyDescriptor(SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayDestroyData(SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayDestroy(SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayRedim(SAFEARRAY * psa, SAFEARRAYBOUND * psaboundNew);
extern "C" __declspec(dllimport) UINT __stdcall SafeArrayGetDim(SAFEARRAY * psa);
extern "C" __declspec(dllimport) UINT __stdcall SafeArrayGetElemsize(SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetUBound(SAFEARRAY * psa, UINT nDim, LONG * plUbound);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetLBound(SAFEARRAY * psa, UINT nDim, LONG * plLbound);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayLock(SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayUnlock(SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayAccessData(SAFEARRAY * psa, void ** ppvData);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayUnaccessData(SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetElement(SAFEARRAY * psa, LONG * rgIndices, void * pv);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayPutElement(SAFEARRAY * psa, LONG * rgIndices, void * pv);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayCopy(SAFEARRAY * psa, SAFEARRAY ** ppsaOut);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayPtrOfIndex(SAFEARRAY * psa, LONG * rgIndices, void ** ppvData);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArraySetRecordInfo(SAFEARRAY * psa, IRecordInfo * prinfo);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetRecordInfo(SAFEARRAY * psa, IRecordInfo ** prinfo);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArraySetIID(SAFEARRAY * psa, const GUID & guid);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetIID(SAFEARRAY * psa, GUID * pguid);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetVartype(SAFEARRAY * psa, VARTYPE * pvt);
extern "C" __declspec(dllimport) SAFEARRAY * __stdcall SafeArrayCreateVector(VARTYPE vt, LONG lLbound, ULONG cElements);
extern "C" __declspec(dllimport) SAFEARRAY * __stdcall SafeArrayCreateVectorEx(VARTYPE vt, LONG lLbound, ULONG cElements, PVOID pvExtra);





extern "C" __declspec(dllimport) void __stdcall VariantInit(VARIANTARG * pvarg);
extern "C" __declspec(dllimport) HRESULT __stdcall VariantClear(VARIANTARG * pvarg);
extern "C" __declspec(dllimport) HRESULT __stdcall VariantCopy(VARIANTARG * pvargDest, VARIANTARG * pvargSrc);
extern "C" __declspec(dllimport) HRESULT __stdcall VariantCopyInd(VARIANT * pvarDest, VARIANTARG * pvargSrc);
extern "C" __declspec(dllimport) HRESULT __stdcall VariantChangeType(VARIANTARG * pvargDest,
                VARIANTARG * pvarSrc, USHORT wFlags, VARTYPE vt);
extern "C" __declspec(dllimport) HRESULT __stdcall VariantChangeTypeEx(VARIANTARG * pvargDest,
                VARIANTARG * pvarSrc, LCID lcid, USHORT wFlags, VARTYPE vt);




                                      
                                      

				      
				      


                                      
                                      





extern "C" __declspec(dllimport) HRESULT __stdcall VectorFromBstr (BSTR bstr, SAFEARRAY ** ppsa);
extern "C" __declspec(dllimport) HRESULT __stdcall BstrFromVector (SAFEARRAY *psa, BSTR *pbstr);



















































extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromI2(SHORT sIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromI4(LONG lIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromR4(FLOAT fltIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromR8(DOUBLE dblIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromCy(CY cyIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromDate(DATE dateIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromDisp(IDispatch * pdispIn, LCID lcid, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromBool(VARIANT_BOOL boolIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromI1(CHAR cIn, BYTE *pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromUI2(USHORT uiIn, BYTE *pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromUI4(ULONG ulIn, BYTE *pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromDec(DECIMAL *pdecIn, BYTE *pbOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromUI1(BYTE bIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromI4(LONG lIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromR4(FLOAT fltIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromR8(DOUBLE dblIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromCy(CY cyIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromDate(DATE dateIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromDisp(IDispatch * pdispIn, LCID lcid, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromBool(VARIANT_BOOL boolIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromI1(CHAR cIn, SHORT *psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromUI2(USHORT uiIn, SHORT *psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromUI4(ULONG ulIn, SHORT *psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromDec(DECIMAL *pdecIn, SHORT *psOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromUI1(BYTE bIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromI2(SHORT sIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromR4(FLOAT fltIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromR8(DOUBLE dblIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromCy(CY cyIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromDate(DATE dateIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromDisp(IDispatch * pdispIn, LCID lcid, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromBool(VARIANT_BOOL boolIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromI1(CHAR cIn, LONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromUI2(USHORT uiIn, LONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromUI4(ULONG ulIn, LONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromDec(DECIMAL *pdecIn, LONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromInt(INT intIn, LONG *plOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromUI1(BYTE bIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromI2(SHORT sIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromI4(LONG lIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromR8(DOUBLE dblIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromCy(CY cyIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromDate(DATE dateIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, FLOAT *pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromDisp(IDispatch * pdispIn, LCID lcid, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromBool(VARIANT_BOOL boolIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromI1(CHAR cIn, FLOAT *pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromUI2(USHORT uiIn, FLOAT *pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromUI4(ULONG ulIn, FLOAT *pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromDec(DECIMAL *pdecIn, FLOAT *pfltOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromUI1(BYTE bIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromI2(SHORT sIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromI4(LONG lIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromR4(FLOAT fltIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromCy(CY cyIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromDate(DATE dateIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, DOUBLE *pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromDisp(IDispatch * pdispIn, LCID lcid, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromBool(VARIANT_BOOL boolIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromI1(CHAR cIn, DOUBLE *pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromUI2(USHORT uiIn, DOUBLE *pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromUI4(ULONG ulIn, DOUBLE *pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromDec(DECIMAL *pdecIn, DOUBLE *pdblOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUI1(BYTE bIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromI2(SHORT sIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromI4(LONG lIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromR4(FLOAT fltIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromR8(DOUBLE dblIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromCy(CY cyIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromDisp(IDispatch * pdispIn, LCID lcid, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromBool(VARIANT_BOOL boolIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromI1(CHAR cIn, DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUI2(USHORT uiIn, DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUI4(ULONG ulIn, DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromDec(DECIMAL *pdecIn, DATE *pdateOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromUI1(BYTE bIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromI2(SHORT sIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromI4(LONG lIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromR4(FLOAT fltIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromR8(DOUBLE dblIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromDate(DATE dateIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromDisp(IDispatch * pdispIn, LCID lcid, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromBool(VARIANT_BOOL boolIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromI1(CHAR cIn, CY *pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromUI2(USHORT uiIn, CY *pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromUI4(ULONG ulIn, CY *pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromDec(DECIMAL *pdecIn, CY *pcyOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromUI1(BYTE bVal, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromI2(SHORT iVal, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromI4(LONG lIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromR4(FLOAT fltIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromR8(DOUBLE dblIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromCy(CY cyIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromDate(DATE dateIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromDisp(IDispatch * pdispIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromBool(VARIANT_BOOL boolIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromI1(CHAR cIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromUI2(USHORT uiIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromUI4(ULONG ulIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromDec(DECIMAL *pdecIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromUI1(BYTE bIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromI2(SHORT sIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromI4(LONG lIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromR4(FLOAT fltIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromR8(DOUBLE dblIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromDate(DATE dateIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromCy(CY cyIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromDisp(IDispatch * pdispIn, LCID lcid, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromI1(CHAR cIn, VARIANT_BOOL *pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromUI2(USHORT uiIn, VARIANT_BOOL *pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromUI4(ULONG ulIn, VARIANT_BOOL *pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromDec(DECIMAL *pdecIn, VARIANT_BOOL *pboolOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromUI1(BYTE bIn, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromI2(SHORT uiIn, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromI4(LONG lIn, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromR4(FLOAT fltIn, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromR8(DOUBLE dblIn, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromDate(DATE dateIn, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromCy(CY cyIn, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromDisp(IDispatch *pdispIn, LCID lcid, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromBool(VARIANT_BOOL boolIn, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromUI2(USHORT uiIn, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromUI4(ULONG ulIn, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromDec(DECIMAL *pdecIn, CHAR *pcOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromUI1(BYTE bIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromI2(SHORT uiIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromI4(LONG lIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromR4(FLOAT fltIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromR8(DOUBLE dblIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromDate(DATE dateIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromCy(CY cyIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromDisp(IDispatch *pdispIn, LCID lcid, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromBool(VARIANT_BOOL boolIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromI1(CHAR cIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromUI4(ULONG ulIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromDec(DECIMAL *pdecIn, USHORT *puiOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromUI1(BYTE bIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromI2(SHORT uiIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromI4(LONG lIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromR4(FLOAT fltIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromR8(DOUBLE dblIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromDate(DATE dateIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromCy(CY cyIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromDisp(IDispatch *pdispIn, LCID lcid, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromBool(VARIANT_BOOL boolIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromI1(CHAR cIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromUI2(USHORT uiIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromDec(DECIMAL *pdecIn, ULONG *pulOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromUI1(BYTE bIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromI2(SHORT uiIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromI4(LONG lIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromR4(FLOAT fltIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromR8(DOUBLE dblIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromDate(DATE dateIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromCy(CY cyIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromDisp(IDispatch *pdispIn, LCID lcid, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromBool(VARIANT_BOOL boolIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromI1(CHAR cIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromUI2(USHORT uiIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromUI4(ULONG ulIn, DECIMAL *pdecOut);








































































typedef struct {
    INT   cDig;
    ULONG dwInFlags;
    ULONG dwOutFlags;
    INT   cchUsed;
    INT   nBaseShift;
    INT   nPwr10;
} NUMPARSE;





































extern "C" __declspec(dllimport) HRESULT __stdcall VarParseNumFromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags,
            NUMPARSE * pnumprs, BYTE * rgbDig);

extern "C" __declspec(dllimport) HRESULT __stdcall VarNumFromParseNum(NUMPARSE * pnumprs, BYTE * rgbDig,
            ULONG dwVtBits, VARIANT * pvar);





extern "C" HRESULT __stdcall VarAdd(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarAnd(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarCat(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarDiv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarEqv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarIdiv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarImp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarMod(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarMul(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarOr(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarPow(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarSub(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarXor(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);

extern "C" HRESULT __stdcall VarAbs(LPVARIANT pvarIn, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarFix(LPVARIANT pvarIn, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarInt(LPVARIANT pvarIn, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarNeg(LPVARIANT pvarIn, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarNot(LPVARIANT pvarIn, LPVARIANT pvarResult);

extern "C" HRESULT __stdcall VarRound(LPVARIANT pvarIn, int cDecimals, LPVARIANT pvarResult);


extern "C" HRESULT __stdcall VarCmp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LCID lcid, ULONG dwFlags);




extern "C" HRESULT __stdcall VarDecAdd(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecDiv(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecMul(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecSub(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);

extern "C" HRESULT __stdcall VarDecAbs(LPDECIMAL pdecIn, LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecFix(LPDECIMAL pdecIn, LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecInt(LPDECIMAL pdecIn, LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecNeg(LPDECIMAL pdecIn, LPDECIMAL pdecResult);

extern "C" HRESULT __stdcall VarDecRound(LPDECIMAL pdecIn, int cDecimals, LPDECIMAL pdecResult);

extern "C" HRESULT __stdcall VarDecCmp(LPDECIMAL pdecLeft, LPDECIMAL pdecRight);
extern "C" HRESULT __stdcall VarDecCmpR8(LPDECIMAL pdecLeft, double dblRight);




extern "C" HRESULT __stdcall VarCyAdd(CY cyLeft, CY cyRight, LPCY pcyResult);
extern "C" HRESULT __stdcall VarCyMul(CY cyLeft, CY cyRight, LPCY pcyResult);
extern "C" HRESULT __stdcall VarCyMulI4(CY cyLeft, long lRight, LPCY pcyResult);
extern "C" HRESULT __stdcall VarCySub(CY cyLeft, CY cyRight, LPCY pcyResult);

extern "C" HRESULT __stdcall VarCyAbs(CY cyIn, LPCY pcyResult);
extern "C" HRESULT __stdcall VarCyFix(CY cyIn, LPCY pcyResult);
extern "C" HRESULT __stdcall VarCyInt(CY cyIn, LPCY pcyResult);
extern "C" HRESULT __stdcall VarCyNeg(CY cyIn, LPCY pcyResult);

extern "C" HRESULT __stdcall VarCyRound(CY cyIn, int cDecimals, LPCY pcyResult);

extern "C" HRESULT __stdcall VarCyCmp(CY cyLeft, CY cyRight);
extern "C" HRESULT __stdcall VarCyCmpR8(CY cyLeft, double dblRight);




extern "C" HRESULT __stdcall VarBstrCat(BSTR bstrLeft, BSTR bstrRight, LPBSTR pbstrResult);
extern "C" HRESULT __stdcall VarBstrCmp(BSTR bstrLeft, BSTR bstrRight, LCID lcid, ULONG dwFlags); 
extern "C" HRESULT __stdcall VarR8Pow(double dblLeft, double dblRight, double *pdblResult);
extern "C" HRESULT __stdcall VarR4CmpR8(float fltLeft, double dblRight);
extern "C" HRESULT __stdcall VarR8Round(double dblIn, int cDecimals, double *pdblResult);


























typedef struct {
    SYSTEMTIME st;
    USHORT  wDayOfYear;
} UDATE;





extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUdate(UDATE *pudateIn, ULONG dwFlags, DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUdateEx(UDATE *pudateIn, LCID lcid, ULONG dwFlags, DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUdateFromDate(DATE dateIn, ULONG dwFlags, UDATE *pudateOut);



   
extern "C" __declspec(dllimport) HRESULT __stdcall GetAltMonthNames(LCID lcid, LPOLESTR * * prgp);





extern "C" __declspec(dllimport) HRESULT __stdcall VarFormat(LPVARIANT pvarIn, LPOLESTR pstrFormat, int iFirstDay, int iFirstWeek, ULONG dwFlags, BSTR *pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarFormatDateTime(LPVARIANT pvarIn, int iNamedFormat, ULONG dwFlags, BSTR *pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarFormatNumber(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarFormatPercent(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarFormatCurrency(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarWeekdayName(int iWeekday, int fAbbrev, int iFirstDay, ULONG dwFlags, BSTR *pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarMonthName(int iMonth, int fAbbrev, ULONG dwFlags, BSTR *pbstrOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarFormatFromTokens(LPVARIANT pvarIn, LPOLESTR pstrFormat, LPBYTE pbTokCur, ULONG dwFlags, BSTR *pbstrOut, LCID lcid);
extern "C" __declspec(dllimport) HRESULT __stdcall VarTokenizeFormatString(LPOLESTR pstrFormat, LPBYTE rgbTok, int cbTok, int iFirstDay, int iFirstWeek, LCID lcid, int *pcbActual);





typedef ITypeLib * LPTYPELIB;







typedef LONG DISPID;
typedef DISPID MEMBERID;











typedef ITypeInfo * LPTYPEINFO;






typedef ITypeComp * LPTYPECOMP;






typedef ICreateTypeLib * LPCREATETYPELIB;

typedef ICreateTypeInfo * LPCREATETYPEINFO;








extern "C" __declspec(dllimport) ULONG __stdcall LHashValOfNameSysA(SYSKIND syskind, LCID lcid,
            LPCSTR szName);
#line 694 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleauto.h"

extern "C" __declspec(dllimport) ULONG __stdcall
LHashValOfNameSys(SYSKIND syskind, LCID lcid, const OLECHAR * szName);












extern "C" __declspec(dllimport) HRESULT __stdcall LoadTypeLib(const OLECHAR  *szFile, ITypeLib ** pptlib);



typedef enum tagREGKIND
{
    REGKIND_DEFAULT,
    REGKIND_REGISTER,
    REGKIND_NONE
} REGKIND;

extern "C" __declspec(dllimport) HRESULT __stdcall LoadTypeLibEx(LPCOLESTR szFile, REGKIND regkind,
            ITypeLib ** pptlib);



extern "C" __declspec(dllimport) HRESULT __stdcall LoadRegTypeLib(const GUID & rguid, WORD wVerMajor, WORD wVerMinor,
            LCID lcid, ITypeLib ** pptlib);



extern "C" __declspec(dllimport) HRESULT __stdcall QueryPathOfRegTypeLib(const GUID & guid, USHORT wMaj, USHORT wMin,
            LCID lcid, LPBSTR lpbstrPathName);



extern "C" __declspec(dllimport) HRESULT __stdcall RegisterTypeLib(ITypeLib * ptlib, OLECHAR  *szFullPath,
            OLECHAR  *szHelpDir);




extern "C" __declspec(dllimport) HRESULT __stdcall UnRegisterTypeLib(const GUID & libID, WORD wVerMajor,
            WORD wVerMinor, LCID lcid, SYSKIND syskind);

extern "C" __declspec(dllimport) HRESULT __stdcall CreateTypeLib(SYSKIND syskind, const OLECHAR  *szFile,
            ICreateTypeLib ** ppctlib);

extern "C" __declspec(dllimport) HRESULT __stdcall CreateTypeLib2(SYSKIND syskind, LPCOLESTR szFile,
            ICreateTypeLib2 **ppctlib);






typedef IDispatch * LPDISPATCH;

typedef struct tagPARAMDATA {
    OLECHAR * szName;   
    VARTYPE vt;         
} PARAMDATA, * LPPARAMDATA;

typedef struct tagMETHODDATA {
    OLECHAR * szName;   
    PARAMDATA * ppdata; 
    DISPID dispid;      
    UINT iMeth;         
    CALLCONV cc;        
    UINT cArgs;         
    WORD wFlags;        
    VARTYPE vtReturn;
} METHODDATA, * LPMETHODDATA;

typedef struct tagINTERFACEDATA {
    METHODDATA * pmethdata;  
    UINT cMembers;      
} INTERFACEDATA, * LPINTERFACEDATA;






extern "C" __declspec(dllimport) HRESULT __stdcall DispGetParam(DISPPARAMS * pdispparams, UINT position,
            VARTYPE vtTarg, VARIANT * pvarResult, UINT * puArgErr);



extern "C" __declspec(dllimport) HRESULT __stdcall DispGetIDsOfNames(ITypeInfo * ptinfo, OLECHAR ** rgszNames,
            UINT cNames, DISPID * rgdispid);



extern "C" __declspec(dllimport) HRESULT __stdcall DispInvoke(void * _this, ITypeInfo * ptinfo, DISPID dispidMember,
            WORD wFlags, DISPPARAMS * pparams, VARIANT * pvarResult,
            EXCEPINFO * pexcepinfo, UINT * puArgErr);



extern "C" __declspec(dllimport) HRESULT __stdcall CreateDispTypeInfo(INTERFACEDATA * pidata, LCID lcid,
            ITypeInfo ** pptinfo);




extern "C" __declspec(dllimport) HRESULT __stdcall CreateStdDispatch(IUnknown * punkOuter, void * pvThis,
            ITypeInfo * ptinfo, IUnknown ** ppunkStdDisp);




extern "C" __declspec(dllimport) HRESULT __stdcall DispCallFunc(void * pvInstance, ULONG oVft, CALLCONV cc,
            VARTYPE vtReturn, UINT  cActuals, VARTYPE * prgvt,
            VARIANTARG ** prgpvarg, VARIANT * pvargResult);










extern "C" __declspec(dllimport) HRESULT __stdcall RegisterActiveObject(IUnknown * punk, const CLSID & rclsid,
            DWORD dwFlags, DWORD * pdwRegister);

extern "C" __declspec(dllimport) HRESULT __stdcall RevokeActiveObject(DWORD dwRegister, void * pvReserved);

extern "C" __declspec(dllimport) HRESULT __stdcall GetActiveObject(const CLSID & rclsid, void * pvReserved,
            IUnknown ** ppunk);





extern "C" __declspec(dllimport) HRESULT __stdcall SetErrorInfo(ULONG dwReserved, IErrorInfo * perrinfo);
extern "C" __declspec(dllimport) HRESULT __stdcall GetErrorInfo(ULONG dwReserved, IErrorInfo ** pperrinfo);
extern "C" __declspec(dllimport) HRESULT __stdcall CreateErrorInfo(ICreateErrorInfo ** pperrinfo);





extern "C" __declspec(dllimport) HRESULT __stdcall GetRecordInfoFromTypeInfo(ITypeInfo * pTypeInfo,
            IRecordInfo ** ppRecInfo);

extern "C" __declspec(dllimport) HRESULT __stdcall GetRecordInfoFromGuids(const GUID & rGuidTypeLib,
            ULONG uVerMajor, ULONG uVerMinor, LCID lcid,
            const GUID & rGuidTypeInfo, IRecordInfo ** ppRecInfo);





extern "C" __declspec(dllimport) ULONG __stdcall OaBuildVersion(void);

extern "C" __declspec(dllimport) void __stdcall ClearCustData(LPCUSTDATA pCustData);








#line 867 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleauto.h"




#line 872 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleauto.h"



















































#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"


#line 36 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"
#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"
#line 924 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleauto.h"
#line 925 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleauto.h"

#line 927 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleauto.h"
#line 43 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"































































#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"


















#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"
















#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpc.h"





































































































































































































#line 20 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\rpcndr.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"







#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"







































































































































































































































































































































































































































#line 425 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"

#line 29 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"
#line 30 "c:\\programme\\microsoft visual studio\\vc98\\include\\oleidl.h"






































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 107 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"


















extern "C" __declspec(dllimport) HRESULT __stdcall CreateDataAdviseHolder(LPDATAADVISEHOLDER * ppDAHolder);









extern "C" __declspec(dllimport) DWORD __stdcall OleBuildVersion( void );


extern "C" __declspec(dllimport) HRESULT __stdcall ReadClassStg(LPSTORAGE pStg, CLSID * pclsid);
extern "C" __declspec(dllimport) HRESULT __stdcall WriteClassStg(LPSTORAGE pStg, const CLSID & rclsid);
extern "C" __declspec(dllimport) HRESULT __stdcall ReadClassStm(LPSTREAM pStm, CLSID * pclsid);
extern "C" __declspec(dllimport) HRESULT __stdcall WriteClassStm(LPSTREAM pStm, const CLSID & rclsid);
extern "C" __declspec(dllimport) HRESULT __stdcall WriteFmtUserTypeStg (LPSTORAGE pstg, CLIPFORMAT cf, LPOLESTR lpszUserType);
extern "C" __declspec(dllimport) HRESULT __stdcall ReadFmtUserTypeStg (LPSTORAGE pstg, CLIPFORMAT * pcf, LPOLESTR * lplpszUserType);




extern "C" __declspec(dllimport) HRESULT __stdcall OleInitialize(LPVOID pvReserved);
extern "C" __declspec(dllimport) void __stdcall OleUninitialize(void);





extern "C" __declspec(dllimport) HRESULT __stdcall  OleQueryLinkFromData(LPDATAOBJECT pSrcDataObject);
extern "C" __declspec(dllimport) HRESULT __stdcall  OleQueryCreateFromData(LPDATAOBJECT pSrcDataObject);




extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreate(const CLSID & rclsid, const IID & riid, DWORD renderopt,
                LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite,
                LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateEx(const CLSID & rclsid, const IID & riid, DWORD dwFlags,
                DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
                LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
                DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
                LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateFromData(LPDATAOBJECT pSrcDataObj, const IID & riid,
                DWORD renderopt, LPFORMATETC pFormatEtc,
                LPOLECLIENTSITE pClientSite, LPSTORAGE pStg,
                LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateFromDataEx(LPDATAOBJECT pSrcDataObj, const IID & riid,
                DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
                LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
                DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
                LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateLinkFromData(LPDATAOBJECT pSrcDataObj, const IID & riid,
                DWORD renderopt, LPFORMATETC pFormatEtc,
                LPOLECLIENTSITE pClientSite, LPSTORAGE pStg,
                LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateLinkFromDataEx(LPDATAOBJECT pSrcDataObj, const IID & riid,
                DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
                LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
                DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
                LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateStaticFromData(LPDATAOBJECT pSrcDataObj, const IID & iid,
                DWORD renderopt, LPFORMATETC pFormatEtc,
                LPOLECLIENTSITE pClientSite, LPSTORAGE pStg,
                LPVOID * ppvObj);


extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateLink(LPMONIKER pmkLinkSrc, const IID & riid,
            DWORD renderopt, LPFORMATETC lpFormatEtc,
            LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateLinkEx(LPMONIKER pmkLinkSrc, const IID & riid,
            DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
            LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
            DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
            LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateLinkToFile(LPCOLESTR lpszFileName, const IID & riid,
            DWORD renderopt, LPFORMATETC lpFormatEtc,
            LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateLinkToFileEx(LPCOLESTR lpszFileName, const IID & riid,
            DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
            LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
            DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
            LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateFromFile(const CLSID & rclsid, LPCOLESTR lpszFileName, const IID & riid,
            DWORD renderopt, LPFORMATETC lpFormatEtc,
            LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateFromFileEx(const CLSID & rclsid, LPCOLESTR lpszFileName, const IID & riid,
            DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
            LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
            DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
            LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleLoad(LPSTORAGE pStg, const IID & riid, LPOLECLIENTSITE pClientSite,
            LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleSave(LPPERSISTSTORAGE pPS, LPSTORAGE pStg, BOOL fSameAsLoad);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleLoadFromStream( LPSTREAM pStm, const IID & iidInterface, LPVOID * ppvObj);
extern "C" __declspec(dllimport) HRESULT __stdcall  OleSaveToStream( LPPERSISTSTREAM pPStm, LPSTREAM pStm );


extern "C" __declspec(dllimport) HRESULT __stdcall  OleSetContainedObject(LPUNKNOWN pUnknown, BOOL fContained);
extern "C" __declspec(dllimport) HRESULT __stdcall  OleNoteObjectVisible(LPUNKNOWN pUnknown, BOOL fVisible);




extern "C" __declspec(dllimport) HRESULT __stdcall  RegisterDragDrop(HWND hwnd, LPDROPTARGET pDropTarget);
extern "C" __declspec(dllimport) HRESULT __stdcall  RevokeDragDrop(HWND hwnd);
extern "C" __declspec(dllimport) HRESULT __stdcall  DoDragDrop(LPDATAOBJECT pDataObj, LPDROPSOURCE pDropSource,
            DWORD dwOKEffects, LPDWORD pdwEffect);



extern "C" __declspec(dllimport) HRESULT __stdcall  OleSetClipboard(LPDATAOBJECT pDataObj);
extern "C" __declspec(dllimport) HRESULT __stdcall  OleGetClipboard(LPDATAOBJECT * ppDataObj);
extern "C" __declspec(dllimport) HRESULT __stdcall  OleFlushClipboard(void);
extern "C" __declspec(dllimport) HRESULT __stdcall  OleIsCurrentClipboard(LPDATAOBJECT pDataObj);




extern "C" __declspec(dllimport) HOLEMENU __stdcall   OleCreateMenuDescriptor (HMENU hmenuCombined,
                                LPOLEMENUGROUPWIDTHS lpMenuWidths);
extern "C" __declspec(dllimport) HRESULT __stdcall              OleSetMenuDescriptor (HOLEMENU holemenu, HWND hwndFrame,
                                HWND hwndActiveObject,
                                LPOLEINPLACEFRAME lpFrame,
                                LPOLEINPLACEACTIVEOBJECT lpActiveObj);
extern "C" __declspec(dllimport) HRESULT __stdcall              OleDestroyMenuDescriptor (HOLEMENU holemenu);

extern "C" __declspec(dllimport) HRESULT __stdcall              OleTranslateAccelerator (LPOLEINPLACEFRAME lpFrame,
                            LPOLEINPLACEFRAMEINFO lpFrameInfo, LPMSG lpmsg);



extern "C" __declspec(dllimport) HANDLE __stdcall OleDuplicateData (HANDLE hSrc, CLIPFORMAT cfFormat,
                        UINT uiFlags);

extern "C" __declspec(dllimport) HRESULT __stdcall          OleDraw (LPUNKNOWN pUnknown, DWORD dwAspect, HDC hdcDraw,
                    LPCRECT lprcBounds);

extern "C" __declspec(dllimport) HRESULT __stdcall          OleRun(LPUNKNOWN pUnknown);
extern "C" __declspec(dllimport) BOOL __stdcall   OleIsRunning(LPOLEOBJECT pObject);
extern "C" __declspec(dllimport) HRESULT __stdcall          OleLockRunning(LPUNKNOWN pUnknown, BOOL fLock, BOOL fLastUnlockCloses);
extern "C" __declspec(dllimport) void __stdcall   ReleaseStgMedium(LPSTGMEDIUM);
extern "C" __declspec(dllimport) HRESULT __stdcall          CreateOleAdviseHolder(LPOLEADVISEHOLDER * ppOAHolder);

extern "C" __declspec(dllimport) HRESULT __stdcall          OleCreateDefaultHandler(const CLSID & clsid, LPUNKNOWN pUnkOuter,
                    const IID & riid, LPVOID * lplpObj);

extern "C" __declspec(dllimport) HRESULT __stdcall          OleCreateEmbeddingHelper(const CLSID & clsid, LPUNKNOWN pUnkOuter,
                    DWORD flags, LPCLASSFACTORY pCF,
                                        const IID & riid, LPVOID * lplpObj);

extern "C" __declspec(dllimport) BOOL __stdcall   IsAccelerator(HACCEL hAccel, int cAccelEntries, LPMSG lpMsg,
                                        WORD * lpwCmd);


extern "C" __declspec(dllimport) HGLOBAL __stdcall OleGetIconOfFile(LPOLESTR lpszPath, BOOL fUseFileAsLabel);

extern "C" __declspec(dllimport) HGLOBAL __stdcall OleGetIconOfClass(const CLSID & rclsid,     LPOLESTR lpszLabel,
                                        BOOL fUseTypeAsLabel);

extern "C" __declspec(dllimport) HGLOBAL __stdcall OleMetafilePictFromIconAndLabel(HICON hIcon, LPOLESTR lpszLabel,
                                        LPOLESTR lpszSourceFile, UINT iIconIndex);





extern "C" __declspec(dllimport) HRESULT __stdcall                  OleRegGetUserType (const CLSID & clsid, DWORD dwFormOfType,
                                        LPOLESTR * pszUserType);

extern "C" __declspec(dllimport) HRESULT __stdcall                  OleRegGetMiscStatus     (const CLSID & clsid, DWORD dwAspect,
                                        DWORD * pdwStatus);

extern "C" __declspec(dllimport) HRESULT __stdcall                  OleRegEnumFormatEtc     (const CLSID & clsid, DWORD dwDirection,
                                        LPENUMFORMATETC * ppenum);

extern "C" __declspec(dllimport) HRESULT __stdcall                  OleRegEnumVerbs (const CLSID & clsid, LPENUMOLEVERB * ppenum);


























typedef struct _OLESTREAM *  LPOLESTREAM;

typedef struct _OLESTREAMVTBL
{
    DWORD (__stdcall* Get)(LPOLESTREAM, void *, DWORD);
    DWORD (__stdcall* Put)(LPOLESTREAM, const void *, DWORD);
} OLESTREAMVTBL;
typedef  OLESTREAMVTBL *  LPOLESTREAMVTBL;

typedef struct _OLESTREAM
{
    LPOLESTREAMVTBL lpstbl;
} OLESTREAM;


extern "C" __declspec(dllimport) HRESULT __stdcall OleConvertOLESTREAMToIStorage
    (LPOLESTREAM                lpolestream,
    LPSTORAGE                   pstg,
    const DVTARGETDEVICE *   ptd);

extern "C" __declspec(dllimport) HRESULT __stdcall OleConvertIStorageToOLESTREAM
    (LPSTORAGE      pstg,
    LPOLESTREAM     lpolestream);



extern "C" __declspec(dllimport) HRESULT __stdcall GetHGlobalFromILockBytes (LPLOCKBYTES plkbyt, HGLOBAL * phglobal);
extern "C" __declspec(dllimport) HRESULT __stdcall CreateILockBytesOnHGlobal (HGLOBAL hGlobal, BOOL fDeleteOnRelease,
                                    LPLOCKBYTES * pplkbyt);

extern "C" __declspec(dllimport) HRESULT __stdcall GetHGlobalFromStream (LPSTREAM pstm, HGLOBAL * phglobal);
extern "C" __declspec(dllimport) HRESULT __stdcall CreateStreamOnHGlobal (HGLOBAL hGlobal, BOOL fDeleteOnRelease,
                                LPSTREAM * ppstm);




extern "C" __declspec(dllimport) HRESULT __stdcall OleDoAutoConvert(LPSTORAGE pStg, LPCLSID pClsidNew);
extern "C" __declspec(dllimport) HRESULT __stdcall OleGetAutoConvert(const CLSID & clsidOld, LPCLSID pClsidNew);
extern "C" __declspec(dllimport) HRESULT __stdcall OleSetAutoConvert(const CLSID & clsidOld, const CLSID & clsidNew);
extern "C" __declspec(dllimport) HRESULT __stdcall GetConvertStg(LPSTORAGE pStg);
extern "C" __declspec(dllimport) HRESULT __stdcall SetConvertStg(LPSTORAGE pStg, BOOL fConvert);


extern "C" __declspec(dllimport) HRESULT __stdcall OleConvertIStorageToOLESTREAMEx
    (LPSTORAGE          pstg,
                                    
     CLIPFORMAT         cfFormat,   
     LONG               lWidth,     
     LONG               lHeight,    
     DWORD              dwSize,     
     LPSTGMEDIUM        pmedium,    
     LPOLESTREAM        polestm);

extern "C" __declspec(dllimport) HRESULT __stdcall OleConvertOLESTREAMToIStorageEx
    (LPOLESTREAM        polestm,
     LPSTORAGE          pstg,
                                    
     CLIPFORMAT *    pcfFormat,  
     LONG *          plwWidth,   
     LONG *          plHeight,   
     DWORD *         pdwSize,    
     LPSTGMEDIUM        pmedium);   



#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"


#line 36 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"
#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\poppack.h"
#line 410 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"
#line 411 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"











#line 423 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"

#line 425 "c:\\programme\\microsoft visual studio\\vc98\\include\\ole2.h"

#line 220 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"
#line 221 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"
#line 222 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"
#line 223 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"
#line 224 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"












#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsvc.h"






























#line 32 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsvc.h"


extern "C" {
#line 36 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsvc.h"




































#line 73 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsvc.h"







































































































typedef struct _SERVICE_DESCRIPTIONA {
    LPSTR       lpDescription;
} SERVICE_DESCRIPTIONA, *LPSERVICE_DESCRIPTIONA;



typedef struct _SERVICE_DESCRIPTIONW {
    LPWSTR      lpDescription;
} SERVICE_DESCRIPTIONW, *LPSERVICE_DESCRIPTIONW;




typedef SERVICE_DESCRIPTIONA SERVICE_DESCRIPTION;
typedef LPSERVICE_DESCRIPTIONA LPSERVICE_DESCRIPTION;
#line 192 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsvc.h"




typedef enum _SC_ACTION_TYPE {
        SC_ACTION_NONE          = 0,
        SC_ACTION_RESTART       = 1,
        SC_ACTION_REBOOT        = 2,
        SC_ACTION_RUN_COMMAND   = 3
} SC_ACTION_TYPE;

typedef struct _SC_ACTION {
    SC_ACTION_TYPE  Type;
    DWORD           Delay;
} SC_ACTION, *LPSC_ACTION;

typedef struct _SERVICE_FAILURE_ACTIONSA {
    DWORD       dwResetPeriod;
    LPSTR       lpRebootMsg;
    LPSTR       lpCommand;
    DWORD       cActions;



    SC_ACTION * lpsaActions;
} SERVICE_FAILURE_ACTIONSA, *LPSERVICE_FAILURE_ACTIONSA;
typedef struct _SERVICE_FAILURE_ACTIONSW {
    DWORD       dwResetPeriod;
    LPWSTR      lpRebootMsg;
    LPWSTR      lpCommand;
    DWORD       cActions;



    SC_ACTION * lpsaActions;
} SERVICE_FAILURE_ACTIONSW, *LPSERVICE_FAILURE_ACTIONSW;




typedef SERVICE_FAILURE_ACTIONSA SERVICE_FAILURE_ACTIONS;
typedef LPSERVICE_FAILURE_ACTIONSA LPSERVICE_FAILURE_ACTIONS;
#line 235 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsvc.h"






typedef HANDLE      SC_HANDLE;
typedef SC_HANDLE   *LPSC_HANDLE;

typedef DWORD       SERVICE_STATUS_HANDLE;





typedef struct _SERVICE_STATUS {
    DWORD   dwServiceType;
    DWORD   dwCurrentState;
    DWORD   dwControlsAccepted;
    DWORD   dwWin32ExitCode;
    DWORD   dwServiceSpecificExitCode;
    DWORD   dwCheckPoint;
    DWORD   dwWaitHint;
} SERVICE_STATUS, *LPSERVICE_STATUS;







typedef struct _ENUM_SERVICE_STATUSA {
    LPSTR          lpServiceName;
    LPSTR          lpDisplayName;
    SERVICE_STATUS ServiceStatus;
} ENUM_SERVICE_STATUSA, *LPENUM_SERVICE_STATUSA;
typedef struct _ENUM_SERVICE_STATUSW {
    LPWSTR         lpServiceName;
    LPWSTR         lpDisplayName;
    SERVICE_STATUS ServiceStatus;
} ENUM_SERVICE_STATUSW, *LPENUM_SERVICE_STATUSW;




typedef ENUM_SERVICE_STATUSA ENUM_SERVICE_STATUS;
typedef LPENUM_SERVICE_STATUSA LPENUM_SERVICE_STATUS;
#line 283 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsvc.h"






typedef LPVOID  SC_LOCK;

typedef struct _QUERY_SERVICE_LOCK_STATUSA {
    DWORD   fIsLocked;
    LPSTR   lpLockOwner;
    DWORD   dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSA, *LPQUERY_SERVICE_LOCK_STATUSA;
typedef struct _QUERY_SERVICE_LOCK_STATUSW {
    DWORD   fIsLocked;
    LPWSTR  lpLockOwner;
    DWORD   dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSW, *LPQUERY_SERVICE_LOCK_STATUSW;




typedef QUERY_SERVICE_LOCK_STATUSA QUERY_SERVICE_LOCK_STATUS;
typedef LPQUERY_SERVICE_LOCK_STATUSA LPQUERY_SERVICE_LOCK_STATUS;
#line 308 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsvc.h"







typedef struct _QUERY_SERVICE_CONFIGA {
    DWORD   dwServiceType;
    DWORD   dwStartType;
    DWORD   dwErrorControl;
    LPSTR   lpBinaryPathName;
    LPSTR   lpLoadOrderGroup;
    DWORD   dwTagId;
    LPSTR   lpDependencies;
    LPSTR   lpServiceStartName;
    LPSTR   lpDisplayName;
} QUERY_SERVICE_CONFIGA, *LPQUERY_SERVICE_CONFIGA;
typedef struct _QUERY_SERVICE_CONFIGW {
    DWORD   dwServiceType;
    DWORD   dwStartType;
    DWORD   dwErrorControl;
    LPWSTR  lpBinaryPathName;
    LPWSTR  lpLoadOrderGroup;
    DWORD   dwTagId;
    LPWSTR  lpDependencies;
    LPWSTR  lpServiceStartName;
    LPWSTR  lpDisplayName;
} QUERY_SERVICE_CONFIGW, *LPQUERY_SERVICE_CONFIGW;




typedef QUERY_SERVICE_CONFIGA QUERY_SERVICE_CONFIG;
typedef LPQUERY_SERVICE_CONFIGA LPQUERY_SERVICE_CONFIG;
#line 344 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsvc.h"







typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONW)(
    DWORD   dwNumServicesArgs,
    LPWSTR  *lpServiceArgVectors
    );

typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONA)(
    DWORD   dwNumServicesArgs,
    LPSTR   *lpServiceArgVectors
    );





#line 366 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsvc.h"






typedef struct _SERVICE_TABLE_ENTRYA {
    LPSTR                       lpServiceName;
    LPSERVICE_MAIN_FUNCTIONA    lpServiceProc;
}SERVICE_TABLE_ENTRYA, *LPSERVICE_TABLE_ENTRYA;
typedef struct _SERVICE_TABLE_ENTRYW {
    LPWSTR                      lpServiceName;
    LPSERVICE_MAIN_FUNCTIONW    lpServiceProc;
}SERVICE_TABLE_ENTRYW, *LPSERVICE_TABLE_ENTRYW;




typedef SERVICE_TABLE_ENTRYA SERVICE_TABLE_ENTRY;
typedef LPSERVICE_TABLE_ENTRYA LPSERVICE_TABLE_ENTRY;
#line 387 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsvc.h"





typedef void (__stdcall *LPHANDLER_FUNCTION)(
    DWORD    dwControl
    );







__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfigA(
    SC_HANDLE    hService,
    DWORD        dwServiceType,
    DWORD        dwStartType,
    DWORD        dwErrorControl,
    LPCSTR     lpBinaryPathName,
    LPCSTR     lpLoadOrderGroup,
    LPDWORD      lpdwTagId,
    LPCSTR     lpDependencies,
    LPCSTR     lpServiceStartName,
    LPCSTR     lpPassword,
    LPCSTR     lpDisplayName
    );
__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfigW(
    SC_HANDLE    hService,
    DWORD        dwServiceType,
    DWORD        dwStartType,
    DWORD        dwErrorControl,
    LPCWSTR     lpBinaryPathName,
    LPCWSTR     lpLoadOrderGroup,
    LPDWORD      lpdwTagId,
    LPCWSTR     lpDependencies,
    LPCWSTR     lpServiceStartName,
    LPCWSTR     lpPassword,
    LPCWSTR     lpDisplayName
    );




#line 439 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfig2A(
    SC_HANDLE    hService,
    DWORD        dwInfoLevel,
    LPVOID       lpInfo
    );	
__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfig2W(
    SC_HANDLE    hService,
    DWORD        dwInfoLevel,
    LPVOID       lpInfo
    );	




#line 461 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
CloseServiceHandle(
    SC_HANDLE   hSCObject
    );

__declspec(dllimport)
BOOL
__stdcall
ControlService(
    SC_HANDLE           hService,
    DWORD               dwControl,
    LPSERVICE_STATUS    lpServiceStatus
    );

__declspec(dllimport)
SC_HANDLE
__stdcall
CreateServiceA(
    SC_HANDLE    hSCManager,
    LPCSTR     lpServiceName,
    LPCSTR     lpDisplayName,
    DWORD        dwDesiredAccess,
    DWORD        dwServiceType,
    DWORD        dwStartType,
    DWORD        dwErrorControl,
    LPCSTR     lpBinaryPathName,
    LPCSTR     lpLoadOrderGroup,
    LPDWORD      lpdwTagId,
    LPCSTR     lpDependencies,
    LPCSTR     lpServiceStartName,
    LPCSTR     lpPassword
    );
__declspec(dllimport)
SC_HANDLE
__stdcall
CreateServiceW(
    SC_HANDLE    hSCManager,
    LPCWSTR     lpServiceName,
    LPCWSTR     lpDisplayName,
    DWORD        dwDesiredAccess,
    DWORD        dwServiceType,
    DWORD        dwStartType,
    DWORD        dwErrorControl,
    LPCWSTR     lpBinaryPathName,
    LPCWSTR     lpLoadOrderGroup,
    LPDWORD      lpdwTagId,
    LPCWSTR     lpDependencies,
    LPCWSTR     lpServiceStartName,
    LPCWSTR     lpPassword
    );




#line 519 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
DeleteService(
    SC_HANDLE   hService
    );

__declspec(dllimport)
BOOL
__stdcall
EnumDependentServicesA(
    SC_HANDLE               hService,
    DWORD                   dwServiceState,
    LPENUM_SERVICE_STATUSA  lpServices,
    DWORD                   cbBufSize,
    LPDWORD                 pcbBytesNeeded,
    LPDWORD                 lpServicesReturned
    );
__declspec(dllimport)
BOOL
__stdcall
EnumDependentServicesW(
    SC_HANDLE               hService,
    DWORD                   dwServiceState,
    LPENUM_SERVICE_STATUSW  lpServices,
    DWORD                   cbBufSize,
    LPDWORD                 pcbBytesNeeded,
    LPDWORD                 lpServicesReturned
    );




#line 554 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusA(
    SC_HANDLE               hSCManager,
    DWORD                   dwServiceType,
    DWORD                   dwServiceState,
    LPENUM_SERVICE_STATUSA  lpServices,
    DWORD                   cbBufSize,
    LPDWORD                 pcbBytesNeeded,
    LPDWORD                 lpServicesReturned,
    LPDWORD                 lpResumeHandle
    );
__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusW(
    SC_HANDLE               hSCManager,
    DWORD                   dwServiceType,
    DWORD                   dwServiceState,
    LPENUM_SERVICE_STATUSW  lpServices,
    DWORD                   cbBufSize,
    LPDWORD                 pcbBytesNeeded,
    LPDWORD                 lpServicesReturned,
    LPDWORD                 lpResumeHandle
    );




#line 586 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
GetServiceKeyNameA(
    SC_HANDLE               hSCManager,
    LPCSTR                lpDisplayName,
    LPSTR                 lpServiceName,
    LPDWORD                 lpcchBuffer
    );
__declspec(dllimport)
BOOL
__stdcall
GetServiceKeyNameW(
    SC_HANDLE               hSCManager,
    LPCWSTR                lpDisplayName,
    LPWSTR                 lpServiceName,
    LPDWORD                 lpcchBuffer
    );




#line 610 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
GetServiceDisplayNameA(
    SC_HANDLE               hSCManager,
    LPCSTR                lpServiceName,
    LPSTR                 lpDisplayName,
    LPDWORD                 lpcchBuffer
    );
__declspec(dllimport)
BOOL
__stdcall
GetServiceDisplayNameW(
    SC_HANDLE               hSCManager,
    LPCWSTR                lpServiceName,
    LPWSTR                 lpDisplayName,
    LPDWORD                 lpcchBuffer
    );




#line 634 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsvc.h"

__declspec(dllimport)
SC_LOCK
__stdcall
LockServiceDatabase(
    SC_HANDLE   hSCManager
    );

__declspec(dllimport)
BOOL
__stdcall
NotifyBootConfigStatus(
    BOOL     BootAcceptable
    );

__declspec(dllimport)
SC_HANDLE
__stdcall
OpenSCManagerA(
    LPCSTR lpMachineName,
    LPCSTR lpDatabaseName,
    DWORD   dwDesiredAccess
    );
__declspec(dllimport)
SC_HANDLE
__stdcall
OpenSCManagerW(
    LPCWSTR lpMachineName,
    LPCWSTR lpDatabaseName,
    DWORD   dwDesiredAccess
    );




#line 670 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsvc.h"

__declspec(dllimport)
SC_HANDLE
__stdcall
OpenServiceA(
    SC_HANDLE   hSCManager,
    LPCSTR    lpServiceName,
    DWORD       dwDesiredAccess
    );
__declspec(dllimport)
SC_HANDLE
__stdcall
OpenServiceW(
    SC_HANDLE   hSCManager,
    LPCWSTR    lpServiceName,
    DWORD       dwDesiredAccess
    );




#line 692 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfigA(
    SC_HANDLE               hService,
    LPQUERY_SERVICE_CONFIGA lpServiceConfig,
    DWORD                   cbBufSize,
    LPDWORD                 pcbBytesNeeded
    );
__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfigW(
    SC_HANDLE               hService,
    LPQUERY_SERVICE_CONFIGW lpServiceConfig,
    DWORD                   cbBufSize,
    LPDWORD                 pcbBytesNeeded
    );




#line 716 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfig2A(
    SC_HANDLE   hService,
    DWORD       dwInfoLevel,
    LPBYTE      lpBuffer,
    DWORD       cbBufSize,
    LPDWORD     pcbBytesNeeded
    );
__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfig2W(
    SC_HANDLE   hService,
    DWORD       dwInfoLevel,
    LPBYTE      lpBuffer,
    DWORD       cbBufSize,
    LPDWORD     pcbBytesNeeded
    );




#line 742 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
QueryServiceLockStatusA(
    SC_HANDLE                       hSCManager,
    LPQUERY_SERVICE_LOCK_STATUSA    lpLockStatus,
    DWORD                           cbBufSize,
    LPDWORD                         pcbBytesNeeded
    );
__declspec(dllimport)
BOOL
__stdcall
QueryServiceLockStatusW(
    SC_HANDLE                       hSCManager,
    LPQUERY_SERVICE_LOCK_STATUSW    lpLockStatus,
    DWORD                           cbBufSize,
    LPDWORD                         pcbBytesNeeded
    );




#line 766 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
QueryServiceObjectSecurity(
    SC_HANDLE               hService,
    SECURITY_INFORMATION    dwSecurityInformation,
    PSECURITY_DESCRIPTOR    lpSecurityDescriptor,
    DWORD                   cbBufSize,
    LPDWORD                 pcbBytesNeeded
    );

__declspec(dllimport)
BOOL
__stdcall
QueryServiceStatus(
    SC_HANDLE           hService,
    LPSERVICE_STATUS    lpServiceStatus
    );

__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerA(
    LPCSTR             lpServiceName,
    LPHANDLER_FUNCTION   lpHandlerProc
    );
__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerW(
    LPCWSTR             lpServiceName,
    LPHANDLER_FUNCTION   lpHandlerProc
    );




#line 805 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
SetServiceObjectSecurity(
    SC_HANDLE               hService,
    SECURITY_INFORMATION    dwSecurityInformation,
    PSECURITY_DESCRIPTOR    lpSecurityDescriptor
    );

__declspec(dllimport)
BOOL
__stdcall
SetServiceStatus(
    SERVICE_STATUS_HANDLE   hServiceStatus,
    LPSERVICE_STATUS        lpServiceStatus
    );

__declspec(dllimport)
BOOL
__stdcall
StartServiceCtrlDispatcherA(
    const SERVICE_TABLE_ENTRYA *lpServiceStartTable
    );
__declspec(dllimport)
BOOL
__stdcall
StartServiceCtrlDispatcherW(
    const SERVICE_TABLE_ENTRYW *lpServiceStartTable
    );




#line 840 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsvc.h"


__declspec(dllimport)
BOOL
__stdcall
StartServiceA(
    SC_HANDLE            hService,
    DWORD                dwNumServiceArgs,
    LPCSTR             *lpServiceArgVectors
    );
__declspec(dllimport)
BOOL
__stdcall
StartServiceW(
    SC_HANDLE            hService,
    DWORD                dwNumServiceArgs,
    LPCWSTR             *lpServiceArgVectors
    );




#line 863 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
UnlockServiceDatabase(
    SC_LOCK     ScLock
    );



}
#line 875 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsvc.h"

#line 877 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsvc.h"
#line 237 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"
#line 238 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"



#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\mcx.h"











typedef struct _MODEMDEVCAPS {
    DWORD   dwActualSize;
    DWORD   dwRequiredSize;
    DWORD   dwDevSpecificOffset;
    DWORD   dwDevSpecificSize;

    
    DWORD   dwModemProviderVersion;
    DWORD   dwModemManufacturerOffset;
    DWORD   dwModemManufacturerSize;
    DWORD   dwModemModelOffset;
    DWORD   dwModemModelSize;
    DWORD   dwModemVersionOffset;
    DWORD   dwModemVersionSize;

    
    DWORD   dwDialOptions;          
    DWORD   dwCallSetupFailTimer;   
    DWORD   dwInactivityTimeout;    
    DWORD   dwSpeakerVolume;        
    DWORD   dwSpeakerMode;          
    DWORD   dwModemOptions;         
    DWORD   dwMaxDTERate;           
    DWORD   dwMaxDCERate;           

    
    BYTE    abVariablePortion [1];
} MODEMDEVCAPS, *PMODEMDEVCAPS, *LPMODEMDEVCAPS;

typedef struct _MODEMSETTINGS {
    DWORD   dwActualSize;
    DWORD   dwRequiredSize;
    DWORD   dwDevSpecificOffset;
    DWORD   dwDevSpecificSize;

    
    DWORD   dwCallSetupFailTimer;       
    DWORD   dwInactivityTimeout;        
    DWORD   dwSpeakerVolume;            
    DWORD   dwSpeakerMode;              
    DWORD   dwPreferredModemOptions;    

    
    DWORD   dwNegotiatedModemOptions;   
    DWORD   dwNegotiatedDCERate;        

    
    BYTE    abVariablePortion [1];
} MODEMSETTINGS, *PMODEMSETTINGS, *LPMODEMSETTINGS;









































#line 103 "c:\\programme\\microsoft visual studio\\vc98\\include\\mcx.h"
#line 242 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"
#line 243 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"
                   

#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\imm.h"











extern "C" {
#line 14 "c:\\programme\\microsoft visual studio\\vc98\\include\\imm.h"




#line 19 "c:\\programme\\microsoft visual studio\\vc98\\include\\imm.h"
typedef DWORD   HIMC;
typedef DWORD   HIMCC;
#line 22 "c:\\programme\\microsoft visual studio\\vc98\\include\\imm.h"

typedef HKL   *LPHKL;
typedef UINT  *LPUINT;


typedef struct tagCOMPOSITIONFORM {
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT  rcArea;
} COMPOSITIONFORM, *PCOMPOSITIONFORM,  *NPCOMPOSITIONFORM,  *LPCOMPOSITIONFORM;


typedef struct tagCANDIDATEFORM {
    DWORD dwIndex;
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT  rcArea;
} CANDIDATEFORM, *PCANDIDATEFORM,  *NPCANDIDATEFORM,  *LPCANDIDATEFORM;


typedef struct tagCANDIDATELIST {
    DWORD dwSize;
    DWORD dwStyle;
    DWORD dwCount;
    DWORD dwSelection;
    DWORD dwPageStart;
    DWORD dwPageSize;
    DWORD dwOffset[1];
} CANDIDATELIST, *PCANDIDATELIST,  *NPCANDIDATELIST,  *LPCANDIDATELIST;

typedef struct tagREGISTERWORDA {
    LPSTR   lpReading;
    LPSTR   lpWord;
} REGISTERWORDA, *PREGISTERWORDA,  *NPREGISTERWORDA,  *LPREGISTERWORDA;
typedef struct tagREGISTERWORDW {
    LPWSTR  lpReading;
    LPWSTR  lpWord;
} REGISTERWORDW, *PREGISTERWORDW,  *NPREGISTERWORDW,  *LPREGISTERWORDW;






typedef REGISTERWORDA REGISTERWORD;
typedef PREGISTERWORDA PREGISTERWORD;
typedef NPREGISTERWORDA NPREGISTERWORD;
typedef LPREGISTERWORDA LPREGISTERWORD;
#line 71 "c:\\programme\\microsoft visual studio\\vc98\\include\\imm.h"













#line 85 "c:\\programme\\microsoft visual studio\\vc98\\include\\imm.h"



typedef struct tagSTYLEBUFA {
    DWORD       dwStyle;
    CHAR        szDescription[32];
} STYLEBUFA, *PSTYLEBUFA,  *NPSTYLEBUFA,  *LPSTYLEBUFA;
typedef struct tagSTYLEBUFW {
    DWORD       dwStyle;
    WCHAR       szDescription[32];
} STYLEBUFW, *PSTYLEBUFW,  *NPSTYLEBUFW,  *LPSTYLEBUFW;






typedef STYLEBUFA STYLEBUF;
typedef PSTYLEBUFA PSTYLEBUF;
typedef NPSTYLEBUFA NPSTYLEBUF;
typedef LPSTYLEBUFA LPSTYLEBUF;
#line 107 "c:\\programme\\microsoft visual studio\\vc98\\include\\imm.h"






































#line 146 "c:\\programme\\microsoft visual studio\\vc98\\include\\imm.h"



HKL  __stdcall ImmInstallIMEA(LPCSTR lpszIMEFileName, LPCSTR lpszLayoutText);
HKL  __stdcall ImmInstallIMEW(LPCWSTR lpszIMEFileName, LPCWSTR lpszLayoutText);




#line 156 "c:\\programme\\microsoft visual studio\\vc98\\include\\imm.h"

HWND __stdcall ImmGetDefaultIMEWnd(HWND);

UINT __stdcall ImmGetDescriptionA(HKL, LPSTR, UINT uBufLen);
UINT __stdcall ImmGetDescriptionW(HKL, LPWSTR, UINT uBufLen);




#line 166 "c:\\programme\\microsoft visual studio\\vc98\\include\\imm.h"

UINT __stdcall ImmGetIMEFileNameA(HKL, LPSTR, UINT uBufLen);
UINT __stdcall ImmGetIMEFileNameW(HKL, LPWSTR, UINT uBufLen);




#line 174 "c:\\programme\\microsoft visual studio\\vc98\\include\\imm.h"

DWORD __stdcall ImmGetProperty(HKL, DWORD);


BOOL __stdcall ImmIsIME(HKL);
BOOL __stdcall ImmSimulateHotKey(HWND, DWORD);

HIMC __stdcall ImmCreateContext(void);
BOOL __stdcall ImmDestroyContext(HIMC);
HIMC __stdcall ImmGetContext(HWND);
BOOL __stdcall ImmReleaseContext(HWND, HIMC);
HIMC __stdcall ImmAssociateContext(HWND, HIMC);


#line 189 "c:\\programme\\microsoft visual studio\\vc98\\include\\imm.h"

LONG  __stdcall ImmGetCompositionStringA(HIMC, DWORD, LPVOID, DWORD);
LONG  __stdcall ImmGetCompositionStringW(HIMC, DWORD, LPVOID, DWORD);




#line 197 "c:\\programme\\microsoft visual studio\\vc98\\include\\imm.h"

BOOL  __stdcall ImmSetCompositionStringA(HIMC, DWORD dwIndex, LPCVOID lpComp, DWORD, LPCVOID lpRead, DWORD);
BOOL  __stdcall ImmSetCompositionStringW(HIMC, DWORD dwIndex, LPCVOID lpComp, DWORD, LPCVOID lpRead, DWORD);




#line 205 "c:\\programme\\microsoft visual studio\\vc98\\include\\imm.h"

DWORD __stdcall ImmGetCandidateListCountA(HIMC, LPDWORD lpdwListCount);
DWORD __stdcall ImmGetCandidateListCountW(HIMC, LPDWORD lpdwListCount);




#line 213 "c:\\programme\\microsoft visual studio\\vc98\\include\\imm.h"

DWORD __stdcall ImmGetCandidateListA(HIMC, DWORD deIndex, LPCANDIDATELIST, DWORD dwBufLen);
DWORD __stdcall ImmGetCandidateListW(HIMC, DWORD deIndex, LPCANDIDATELIST, DWORD dwBufLen);




#line 221 "c:\\programme\\microsoft visual studio\\vc98\\include\\imm.h"

DWORD __stdcall ImmGetGuideLineA(HIMC, DWORD dwIndex, LPSTR, DWORD dwBufLen);
DWORD __stdcall ImmGetGuideLineW(HIMC, DWORD dwIndex, LPWSTR, DWORD dwBufLen);




#line 229 "c:\\programme\\microsoft visual studio\\vc98\\include\\imm.h"

BOOL __stdcall ImmGetConversionStatus(HIMC, LPDWORD, LPDWORD);
BOOL __stdcall ImmSetConversionStatus(HIMC, DWORD, DWORD);
BOOL __stdcall ImmGetOpenStatus(HIMC);
BOOL __stdcall ImmSetOpenStatus(HIMC, BOOL);



BOOL __stdcall ImmGetCompositionFontA(HIMC, LPLOGFONTA);
BOOL __stdcall ImmGetCompositionFontW(HIMC, LPLOGFONTW);




#line 244 "c:\\programme\\microsoft visual studio\\vc98\\include\\imm.h"

BOOL __stdcall ImmSetCompositionFontA(HIMC, LPLOGFONTA);
BOOL __stdcall ImmSetCompositionFontW(HIMC, LPLOGFONTW);




#line 252 "c:\\programme\\microsoft visual studio\\vc98\\include\\imm.h"
#line 253 "c:\\programme\\microsoft visual studio\\vc98\\include\\imm.h"
#line 254 "c:\\programme\\microsoft visual studio\\vc98\\include\\imm.h"

BOOL    __stdcall ImmConfigureIMEA(HKL, HWND, DWORD, LPVOID);
BOOL    __stdcall ImmConfigureIMEW(HKL, HWND, DWORD, LPVOID);




#line 262 "c:\\programme\\microsoft visual studio\\vc98\\include\\imm.h"

LRESULT __stdcall ImmEscapeA(HKL, HIMC, UINT, LPVOID);
LRESULT __stdcall ImmEscapeW(HKL, HIMC, UINT, LPVOID);




#line 270 "c:\\programme\\microsoft visual studio\\vc98\\include\\imm.h"

DWORD   __stdcall ImmGetConversionListA(HKL, HIMC, LPCSTR, LPCANDIDATELIST, DWORD dwBufLen, UINT uFlag);
DWORD   __stdcall ImmGetConversionListW(HKL, HIMC, LPCWSTR, LPCANDIDATELIST, DWORD dwBufLen, UINT uFlag);




#line 278 "c:\\programme\\microsoft visual studio\\vc98\\include\\imm.h"

BOOL    __stdcall ImmNotifyIME(HIMC, DWORD dwAction, DWORD dwIndex, DWORD dwValue);


BOOL __stdcall ImmGetStatusWindowPos(HIMC, LPPOINT);
BOOL __stdcall ImmSetStatusWindowPos(HIMC, LPPOINT);
BOOL __stdcall ImmGetCompositionWindow(HIMC, LPCOMPOSITIONFORM);
BOOL __stdcall ImmSetCompositionWindow(HIMC, LPCOMPOSITIONFORM);
BOOL __stdcall ImmGetCandidateWindow(HIMC, DWORD, LPCANDIDATEFORM);
BOOL __stdcall ImmSetCandidateWindow(HIMC, LPCANDIDATEFORM);

BOOL __stdcall ImmIsUIMessageA(HWND, UINT, WPARAM, LPARAM);
BOOL __stdcall ImmIsUIMessageW(HWND, UINT, WPARAM, LPARAM);




#line 296 "c:\\programme\\microsoft visual studio\\vc98\\include\\imm.h"


UINT __stdcall ImmGetVirtualKey(HWND);

typedef int (__stdcall *REGISTERWORDENUMPROCA)(LPCSTR, DWORD, LPCSTR, LPVOID);
typedef int (__stdcall *REGISTERWORDENUMPROCW)(LPCWSTR, DWORD, LPCWSTR, LPVOID);




#line 307 "c:\\programme\\microsoft visual studio\\vc98\\include\\imm.h"

BOOL __stdcall ImmRegisterWordA(HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister);
BOOL __stdcall ImmRegisterWordW(HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister);




#line 315 "c:\\programme\\microsoft visual studio\\vc98\\include\\imm.h"

BOOL __stdcall ImmUnregisterWordA(HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszUnregister);
BOOL __stdcall ImmUnregisterWordW(HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszUnregister);




#line 323 "c:\\programme\\microsoft visual studio\\vc98\\include\\imm.h"

UINT __stdcall ImmGetRegisterWordStyleA(HKL, UINT nItem, LPSTYLEBUFA);
UINT __stdcall ImmGetRegisterWordStyleW(HKL, UINT nItem, LPSTYLEBUFW);




#line 331 "c:\\programme\\microsoft visual studio\\vc98\\include\\imm.h"

UINT __stdcall ImmEnumRegisterWordA(HKL, REGISTERWORDENUMPROCA, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister, LPVOID);
UINT __stdcall ImmEnumRegisterWordW(HKL, REGISTERWORDENUMPROCW, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister, LPVOID);




#line 339 "c:\\programme\\microsoft visual studio\\vc98\\include\\imm.h"











#line 351 "c:\\programme\\microsoft visual studio\\vc98\\include\\imm.h"











































































































































































































































































#line 619 "c:\\programme\\microsoft visual studio\\vc98\\include\\imm.h"



































































#line 687 "c:\\programme\\microsoft visual studio\\vc98\\include\\imm.h"









}
#line 698 "c:\\programme\\microsoft visual studio\\vc98\\include\\imm.h"


#line 701 "c:\\programme\\microsoft visual studio\\vc98\\include\\imm.h"


#line 246 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"
#line 247 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"
#line 248 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"
#line 249 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"



#pragma warning(default:4001)
#pragma warning(default:4201)
#pragma warning(default:4214)

#line 257 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"
#line 258 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"

#line 260 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"

#line 262 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"
#line 263 "c:\\programme\\microsoft visual studio\\vc98\\include\\windows.h"

#line 21 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsock.h"
#line 22 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsock.h"




typedef unsigned char   u_char;
typedef unsigned short  u_short;
typedef unsigned int    u_int;
typedef unsigned long   u_long;





typedef u_int           SOCKET;











#line 48 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsock.h"

typedef struct fd_set {
        u_int   fd_count;               
        SOCKET  fd_array[64];   
} fd_set;


extern "C" {
#line 57 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsock.h"

extern int __stdcall  __WSAFDIsSet(SOCKET, fd_set  *);


}
#line 63 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsock.h"





























struct timeval {
        long    tv_sec;         
        long    tv_usec;        
};



























                                        
























struct  hostent {
        char     * h_name;           
        char     *  * h_aliases;  
        short   h_addrtype;             
        short   h_length;               
        char     *  * h_addr_list; 

};





struct  netent {
        char     * n_name;           
        char     *  * n_aliases;  
        short   n_addrtype;             
        u_long  n_net;                  
};

struct  servent {
        char     * s_name;           
        char     *  * s_aliases;  
        short   s_port;                 
        char     * s_proto;          
};

struct  protoent {
        char     * p_name;           
        char     *  * p_aliases;  
        short   p_proto;                
};





























































                                        

















struct in_addr {
        union {
                struct { u_char s_b1,s_b2,s_b3,s_b4; } S_un_b;
                struct { u_short s_w1,s_w2; } S_un_w;
                u_long S_addr;
        } S_un;

                                

                                

                                

                                

                                

                                
};































struct sockaddr_in {
        short   sin_family;
        u_short sin_port;
        struct  in_addr sin_addr;
        char    sin_zero[8];
};




typedef struct WSAData {
        WORD                    wVersion;
        WORD                    wHighVersion;
        char                    szDescription[256+1];
        char                    szSystemStatus[128+1];
        unsigned short          iMaxSockets;
        unsigned short          iMaxUdpDg;
        char  *              lpVendorInfo;
} WSADATA;

typedef WSADATA  *LPWSADATA;






















struct ip_mreq {
        struct in_addr  imr_multiaddr;  
        struct in_addr  imr_interface;  
};






















































































































struct sockaddr {
        u_short sa_family;              
        char    sa_data[14];            
};





struct sockproto {
        u_short sp_family;              
        u_short sp_protocol;            
};

































struct  linger {
        u_short l_onoff;                
        u_short l_linger;               
};















































































































































































#line 700 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsock.h"




extern "C" {
#line 706 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsock.h"

SOCKET __stdcall  accept (SOCKET s, struct sockaddr  *addr,
                          int  *addrlen);

int __stdcall  bind (SOCKET s, const struct sockaddr  *addr, int namelen);

int __stdcall  closesocket (SOCKET s);

int __stdcall  connect (SOCKET s, const struct sockaddr  *name, int namelen);

int __stdcall  ioctlsocket (SOCKET s, long cmd, u_long  *argp);

int __stdcall  getpeername (SOCKET s, struct sockaddr  *name,
                            int  * namelen);

int __stdcall  getsockname (SOCKET s, struct sockaddr  *name,
                            int  * namelen);

int __stdcall  getsockopt (SOCKET s, int level, int optname,
                           char  * optval, int  *optlen);

u_long __stdcall  htonl (u_long hostlong);

u_short __stdcall  htons (u_short hostshort);

unsigned long __stdcall  inet_addr (const char  * cp);

char  * __stdcall  inet_ntoa (struct in_addr in);

int __stdcall  listen (SOCKET s, int backlog);

u_long __stdcall  ntohl (u_long netlong);

u_short __stdcall  ntohs (u_short netshort);

int __stdcall  recv (SOCKET s, char  * buf, int len, int flags);

int __stdcall  recvfrom (SOCKET s, char  * buf, int len, int flags,
                         struct sockaddr  *from, int  * fromlen);

int __stdcall  select (int nfds, fd_set  *readfds, fd_set  *writefds,
                       fd_set  *exceptfds, const struct timeval  *timeout);

int __stdcall  send (SOCKET s, const char  * buf, int len, int flags);

int __stdcall  sendto (SOCKET s, const char  * buf, int len, int flags,
                       const struct sockaddr  *to, int tolen);

int __stdcall  setsockopt (SOCKET s, int level, int optname,
                           const char  * optval, int optlen);

int __stdcall  shutdown (SOCKET s, int how);

SOCKET __stdcall  socket (int af, int type, int protocol);



struct hostent  * __stdcall  gethostbyaddr(const char  * addr,
                                              int len, int type);

struct hostent  * __stdcall  gethostbyname(const char  * name);

int __stdcall  gethostname (char  * name, int namelen);

struct servent  * __stdcall  getservbyport(int port, const char  * proto);

struct servent  * __stdcall  getservbyname(const char  * name,
                                              const char  * proto);

struct protoent  * __stdcall  getprotobynumber(int proto);

struct protoent  * __stdcall  getprotobyname(const char  * name);



int __stdcall  WSAStartup(WORD wVersionRequired, LPWSADATA lpWSAData);

int __stdcall  WSACleanup(void);

void __stdcall  WSASetLastError(int iError);

int __stdcall  WSAGetLastError(void);

BOOL __stdcall  WSAIsBlocking(void);

int __stdcall  WSAUnhookBlockingHook(void);

FARPROC __stdcall  WSASetBlockingHook(FARPROC lpBlockFunc);

int __stdcall  WSACancelBlockingCall(void);

HANDLE __stdcall  WSAAsyncGetServByName(HWND hWnd, u_int wMsg,
                                        const char  * name,
                                        const char  * proto,
                                        char  * buf, int buflen);

HANDLE __stdcall  WSAAsyncGetServByPort(HWND hWnd, u_int wMsg, int port,
                                        const char  * proto, char  * buf,
                                        int buflen);

HANDLE __stdcall  WSAAsyncGetProtoByName(HWND hWnd, u_int wMsg,
                                         const char  * name, char  * buf,
                                         int buflen);

HANDLE __stdcall  WSAAsyncGetProtoByNumber(HWND hWnd, u_int wMsg,
                                           int number, char  * buf,
                                           int buflen);

HANDLE __stdcall  WSAAsyncGetHostByName(HWND hWnd, u_int wMsg,
                                        const char  * name, char  * buf,
                                        int buflen);

HANDLE __stdcall  WSAAsyncGetHostByAddr(HWND hWnd, u_int wMsg,
                                        const char  * addr, int len, int type,
                                        char  * buf, int buflen);

int __stdcall  WSACancelAsyncRequest(HANDLE hAsyncTaskHandle);

int __stdcall  WSAAsyncSelect(SOCKET s, HWND hWnd, u_int wMsg,
                               long lEvent);

int __stdcall  WSARecvEx (SOCKET s, char  * buf, int len, int  *flags);

typedef struct _TRANSMIT_FILE_BUFFERS {
    PVOID Head;
    DWORD HeadLength;
    PVOID Tail;
    DWORD TailLength;
} TRANSMIT_FILE_BUFFERS, *PTRANSMIT_FILE_BUFFERS, *LPTRANSMIT_FILE_BUFFERS;





BOOL
__stdcall 
TransmitFile (
     SOCKET hSocket,
     HANDLE hFile,
     DWORD nNumberOfBytesToWrite,
     DWORD nNumberOfBytesPerSend,
     LPOVERLAPPED lpOverlapped,
     LPTRANSMIT_FILE_BUFFERS lpTransmitBuffers,
     DWORD dwReserved
    );

BOOL
__stdcall 
AcceptEx (
     SOCKET sListenSocket,
     SOCKET sAcceptSocket,
     PVOID lpOutputBuffer,
     DWORD dwReceiveDataLength,
     DWORD dwLocalAddressLength,
     DWORD dwRemoteAddressLength,
     LPDWORD lpdwBytesReceived,
     LPOVERLAPPED lpOverlapped
    );

void
__stdcall 
GetAcceptExSockaddrs (
     PVOID lpOutputBuffer,
     DWORD dwReceiveDataLength,
     DWORD dwLocalAddressLength,
     DWORD dwRemoteAddressLength,
     struct sockaddr **LocalSockaddr,
     LPINT LocalSockaddrLength,
     struct sockaddr **RemoteSockaddr,
     LPINT RemoteSockaddrLength
    );


}
#line 881 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsock.h"


typedef struct sockaddr SOCKADDR;
typedef struct sockaddr *PSOCKADDR;
typedef struct sockaddr  *LPSOCKADDR;

typedef struct sockaddr_in SOCKADDR_IN;
typedef struct sockaddr_in *PSOCKADDR_IN;
typedef struct sockaddr_in  *LPSOCKADDR_IN;

typedef struct linger LINGER;
typedef struct linger *PLINGER;
typedef struct linger  *LPLINGER;

typedef struct in_addr IN_ADDR;
typedef struct in_addr *PIN_ADDR;
typedef struct in_addr  *LPIN_ADDR;

typedef struct fd_set FD_SET;
typedef struct fd_set *PFD_SET;
typedef struct fd_set  *LPFD_SET;

typedef struct hostent HOSTENT;
typedef struct hostent *PHOSTENT;
typedef struct hostent  *LPHOSTENT;

typedef struct servent SERVENT;
typedef struct servent *PSERVENT;
typedef struct servent  *LPSERVENT;

typedef struct protoent PROTOENT;
typedef struct protoent *PPROTOENT;
typedef struct protoent  *LPPROTOENT;

typedef struct timeval TIMEVAL;
typedef struct timeval *PTIMEVAL;
typedef struct timeval  *LPTIMEVAL;







































#line 958 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsock.h"


#line 9 "h:\\c_projekte\\elansim\\iointerface.h"
#line 1 "h:\\c_projekte\\elansim\\soqtlib.h"



#line 1 "c:\\coin3d\\include\\inventor\\qt\\soqt.h"




























#line 1 "c:\\coin3d\\include\\inventor\\qt\\soqtbasic.h"






































template <class Type>
inline Type SoQtAbs(Type Val) {
  return (Val < 0) ? -Val : Val;
}

template <class Type>
inline Type SoQtMin(Type a, Type b) {
  return (b < a) ? b : a;
}

template <class Type>
inline Type SoQtMax(Type a, Type b) {
  return (b > a) ? b : a;
}

template <class Type>
inline Type SoQtClamp(Type val, Type min, Type max) {
  return SoQtMax(min, SoQtMin(max, val));
}

template <class Type>
inline void SoQtSwap(Type & a, Type & b) {
  Type t = a; a = b; b = t;
}







#line 71 "c:\\coin3d\\include\\inventor\\qt\\soqtbasic.h"


#line 74 "c:\\coin3d\\include\\inventor\\qt\\soqtbasic.h"


#line 77 "c:\\coin3d\\include\\inventor\\qt\\soqtbasic.h"


#line 80 "c:\\coin3d\\include\\inventor\\qt\\soqtbasic.h"

















































#line 130 "c:\\coin3d\\include\\inventor\\qt\\soqtbasic.h"
#line 131 "c:\\coin3d\\include\\inventor\\qt\\soqtbasic.h"
#line 132 "c:\\coin3d\\include\\inventor\\qt\\soqtbasic.h"








#line 141 "c:\\coin3d\\include\\inventor\\qt\\soqtbasic.h"
#line 30 "c:\\coin3d\\include\\inventor\\qt\\soqt.h"





#line 1 "c:\\qt\\include\\qobject.h"























































































































































































































































#line 36 "c:\\coin3d\\include\\inventor\\qt\\soqt.h"
#line 37 "c:\\coin3d\\include\\inventor\\qt\\soqt.h"

















#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"





























#line 1 "c:\\coin3d\\include\\inventor\\c\\basic.h"



































typedef int SbBool;




























#line 1 "c:\\coin3d\\include\\inventor\\system\\inttypes.h"









































































































#line 107 "c:\\coin3d\\include\\inventor\\system\\inttypes.h"












#line 120 "c:\\coin3d\\include\\inventor\\system\\inttypes.h"

#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\sys\\types.h"















#pragma once
#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\sys\\types.h"






#line 25 "c:\\programme\\microsoft visual studio\\vc98\\include\\sys\\types.h"



typedef long time_t;

#line 31 "c:\\programme\\microsoft visual studio\\vc98\\include\\sys\\types.h"




typedef unsigned short _ino_t;          



typedef unsigned short ino_t;
#line 41 "c:\\programme\\microsoft visual studio\\vc98\\include\\sys\\types.h"


#line 44 "c:\\programme\\microsoft visual studio\\vc98\\include\\sys\\types.h"




typedef unsigned int _dev_t;            



typedef unsigned int dev_t;
#line 54 "c:\\programme\\microsoft visual studio\\vc98\\include\\sys\\types.h"


#line 57 "c:\\programme\\microsoft visual studio\\vc98\\include\\sys\\types.h"




typedef long _off_t;                    



typedef long off_t;
#line 67 "c:\\programme\\microsoft visual studio\\vc98\\include\\sys\\types.h"


#line 70 "c:\\programme\\microsoft visual studio\\vc98\\include\\sys\\types.h"

#line 72 "c:\\programme\\microsoft visual studio\\vc98\\include\\sys\\types.h"
#line 122 "c:\\coin3d\\include\\inventor\\system\\inttypes.h"
#line 123 "c:\\coin3d\\include\\inventor\\system\\inttypes.h"

#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\stddef.h"















#pragma once
#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\stddef.h"






#line 25 "c:\\programme\\microsoft visual studio\\vc98\\include\\stddef.h"



extern "C" {
#line 30 "c:\\programme\\microsoft visual studio\\vc98\\include\\stddef.h"

















#line 48 "c:\\programme\\microsoft visual studio\\vc98\\include\\stddef.h"





























__declspec(dllimport) extern int * __cdecl _errno(void);



#line 82 "c:\\programme\\microsoft visual studio\\vc98\\include\\stddef.h"





typedef int ptrdiff_t;

#line 90 "c:\\programme\\microsoft visual studio\\vc98\\include\\stddef.h"















__declspec(dllimport) extern unsigned long  __cdecl __threadid(void);

__declspec(dllimport) extern unsigned long  __cdecl __threadhandle(void);
#line 109 "c:\\programme\\microsoft visual studio\\vc98\\include\\stddef.h"



}
#line 114 "c:\\programme\\microsoft visual studio\\vc98\\include\\stddef.h"

#line 116 "c:\\programme\\microsoft visual studio\\vc98\\include\\stddef.h"
#line 125 "c:\\coin3d\\include\\inventor\\system\\inttypes.h"
#line 126 "c:\\coin3d\\include\\inventor\\system\\inttypes.h"



typedef char int8_t;

#line 132 "c:\\coin3d\\include\\inventor\\system\\inttypes.h"


typedef unsigned char uint8_t;

#line 137 "c:\\coin3d\\include\\inventor\\system\\inttypes.h"


typedef short int16_t;

#line 142 "c:\\coin3d\\include\\inventor\\system\\inttypes.h"


typedef unsigned short uint16_t;

#line 147 "c:\\coin3d\\include\\inventor\\system\\inttypes.h"


typedef int int32_t;

#line 152 "c:\\coin3d\\include\\inventor\\system\\inttypes.h"


typedef unsigned int uint32_t;

#line 157 "c:\\coin3d\\include\\inventor\\system\\inttypes.h"


typedef __int64 int64_t;

#line 162 "c:\\coin3d\\include\\inventor\\system\\inttypes.h"


typedef unsigned __int64 uint64_t;

#line 167 "c:\\coin3d\\include\\inventor\\system\\inttypes.h"


typedef int intptr_t;

#line 172 "c:\\coin3d\\include\\inventor\\system\\inttypes.h"


typedef unsigned int uintptr_t;

#line 177 "c:\\coin3d\\include\\inventor\\system\\inttypes.h"

#line 179 "c:\\coin3d\\include\\inventor\\system\\inttypes.h"
#line 66 "c:\\coin3d\\include\\inventor\\c\\basic.h"







#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\math.h"















#pragma once
#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\math.h"






#line 25 "c:\\programme\\microsoft visual studio\\vc98\\include\\math.h"







#pragma pack(push,8)
#line 34 "c:\\programme\\microsoft visual studio\\vc98\\include\\math.h"


extern "C" {
#line 38 "c:\\programme\\microsoft visual studio\\vc98\\include\\math.h"


















#line 57 "c:\\programme\\microsoft visual studio\\vc98\\include\\math.h"

















struct _exception {
        int type;       
        char *name;     
        double arg1;    
        double arg2;    
        double retval;  
        } ;


#line 84 "c:\\programme\\microsoft visual studio\\vc98\\include\\math.h"







struct _complex {
        double x,y; 
        } ;




#line 99 "c:\\programme\\microsoft visual studio\\vc98\\include\\math.h"


#line 102 "c:\\programme\\microsoft visual studio\\vc98\\include\\math.h"
#line 103 "c:\\programme\\microsoft visual studio\\vc98\\include\\math.h"





















__declspec(dllimport) extern double _HUGE;
#line 126 "c:\\programme\\microsoft visual studio\\vc98\\include\\math.h"



























#line 154 "c:\\programme\\microsoft visual studio\\vc98\\include\\math.h"
        int     __cdecl abs(int);
        double  __cdecl acos(double);
        double  __cdecl asin(double);
        double  __cdecl atan(double);
        double  __cdecl atan2(double, double);
        double  __cdecl cos(double);
        double  __cdecl cosh(double);
        double  __cdecl exp(double);
        double  __cdecl fabs(double);
        double  __cdecl fmod(double, double);
        long    __cdecl labs(long);
        double  __cdecl log(double);
        double  __cdecl log10(double);
        double  __cdecl pow(double, double);
        double  __cdecl sin(double);
        double  __cdecl sinh(double);
        double  __cdecl tan(double);
        double  __cdecl tanh(double);
        double  __cdecl sqrt(double);
#line 174 "c:\\programme\\microsoft visual studio\\vc98\\include\\math.h"
__declspec(dllimport) double  __cdecl atof(const char *);
__declspec(dllimport) double  __cdecl _cabs(struct _complex);



#line 180 "c:\\programme\\microsoft visual studio\\vc98\\include\\math.h"
__declspec(dllimport) double  __cdecl ceil(double);
__declspec(dllimport) double  __cdecl floor(double);
#line 183 "c:\\programme\\microsoft visual studio\\vc98\\include\\math.h"
__declspec(dllimport) double  __cdecl frexp(double, int *);
__declspec(dllimport) double  __cdecl _hypot(double, double);
__declspec(dllimport) double  __cdecl _j0(double);
__declspec(dllimport) double  __cdecl _j1(double);
__declspec(dllimport) double  __cdecl _jn(int, double);
__declspec(dllimport) double  __cdecl ldexp(double, int);
        int     __cdecl _matherr(struct _exception *);
__declspec(dllimport) double  __cdecl modf(double, double *);

__declspec(dllimport) double  __cdecl _y0(double);
__declspec(dllimport) double  __cdecl _y1(double);
__declspec(dllimport) double  __cdecl _yn(int, double);








































#line 236 "c:\\programme\\microsoft visual studio\\vc98\\include\\math.h"







































#line 276 "c:\\programme\\microsoft visual studio\\vc98\\include\\math.h"


































inline long double acosl(long double _X)
        {return (acos((double)_X)); }
inline long double asinl(long double _X)
        {return (asin((double)_X)); }
inline long double atanl(long double _X)
        {return (atan((double)_X)); }
inline long double atan2l(long double _X, long double _Y)
        {return (atan2((double)_X, (double)_Y)); }
inline long double ceill(long double _X)
        {return (ceil((double)_X)); }
inline long double cosl(long double _X)
        {return (cos((double)_X)); }
inline long double coshl(long double _X)
        {return (cosh((double)_X)); }
inline long double expl(long double _X)
        {return (exp((double)_X)); }
inline long double fabsl(long double _X)
        {return (fabs((double)_X)); }
inline long double floorl(long double _X)
        {return (floor((double)_X)); }
inline long double fmodl(long double _X, long double _Y)
        {return (fmod((double)_X, (double)_Y)); }
inline long double frexpl(long double _X, int *_Y)
        {return (frexp((double)_X, _Y)); }
inline long double ldexpl(long double _X, int _Y)
        {return (ldexp((double)_X, _Y)); }
inline long double logl(long double _X)
        {return (log((double)_X)); }
inline long double log10l(long double _X)
        {return (log10((double)_X)); }
inline long double modfl(long double _X, long double *_Y)
        {double _Di, _Df = modf((double)_X, &_Di);
        *_Y = (long double)_Di;
        return (_Df); }
inline long double powl(long double _X, long double _Y)
        {return (pow((double)_X, (double)_Y)); }
inline long double sinl(long double _X)
        {return (sin((double)_X)); }
inline long double sinhl(long double _X)
        {return (sinh((double)_X)); }
inline long double sqrtl(long double _X)
        {return (sqrt((double)_X)); }
inline long double tanl(long double _X)
        {return (tan((double)_X)); }
inline long double tanhl(long double _X)
        {return (tanh((double)_X)); }

inline float frexpf(float _X, int *_Y)
        {return ((float)frexp((double)_X, _Y)); }
inline float ldexpf(float _X, int _Y)
        {return ((float)ldexp((double)_X, _Y)); }

inline float acosf(float _X)
        {return ((float)acos((double)_X)); }
inline float asinf(float _X)
        {return ((float)asin((double)_X)); }
inline float atanf(float _X)
        {return ((float)atan((double)_X)); }
inline float atan2f(float _X, float _Y)
        {return ((float)atan2((double)_X, (double)_Y)); }
inline float ceilf(float _X)
        {return ((float)ceil((double)_X)); }
inline float cosf(float _X)
        {return ((float)cos((double)_X)); }
inline float coshf(float _X)
        {return ((float)cosh((double)_X)); }
inline float expf(float _X)
        {return ((float)exp((double)_X)); }
inline float fabsf(float _X)
        {return ((float)fabs((double)_X)); }
inline float floorf(float _X)
        {return ((float)floor((double)_X)); }
inline float fmodf(float _X, float _Y)
        {return ((float)fmod((double)_X, (double)_Y)); }
inline float logf(float _X)
        {return ((float)log((double)_X)); }
inline float log10f(float _X)
        {return ((float)log10((double)_X)); }
inline float modff(float _X, float *_Y)
        { double _Di, _Df = modf((double)_X, &_Di);
        *_Y = (float)_Di;
        return ((float)_Df); }
inline float powf(float _X, float _Y)
        {return ((float)pow((double)_X, (double)_Y)); }
inline float sinf(float _X)
        {return ((float)sin((double)_X)); }
inline float sinhf(float _X)
        {return ((float)sinh((double)_X)); }
inline float sqrtf(float _X)
        {return ((float)sqrt((double)_X)); }
inline float tanf(float _X)
        {return ((float)tan((double)_X)); }
inline float tanhf(float _X)
        {return ((float)tanh((double)_X)); }
#line 405 "c:\\programme\\microsoft visual studio\\vc98\\include\\math.h"
#line 406 "c:\\programme\\microsoft visual studio\\vc98\\include\\math.h"
#line 407 "c:\\programme\\microsoft visual studio\\vc98\\include\\math.h"
#line 408 "c:\\programme\\microsoft visual studio\\vc98\\include\\math.h"














#line 423 "c:\\programme\\microsoft visual studio\\vc98\\include\\math.h"



__declspec(dllimport) extern double HUGE;

__declspec(dllimport) double  __cdecl cabs(struct _complex);
__declspec(dllimport) double  __cdecl hypot(double, double);
__declspec(dllimport) double  __cdecl j0(double);
__declspec(dllimport) double  __cdecl j1(double);
__declspec(dllimport) double  __cdecl jn(int, double);
        int     __cdecl _matherr(struct _exception *);
__declspec(dllimport) double  __cdecl y0(double);
__declspec(dllimport) double  __cdecl y1(double);
__declspec(dllimport) double  __cdecl yn(int, double);

#line 439 "c:\\programme\\microsoft visual studio\\vc98\\include\\math.h"

#line 441 "c:\\programme\\microsoft visual studio\\vc98\\include\\math.h"




































































}




template<class _Ty> inline
        _Ty _Pow_int(_Ty _X, int _Y)
        {unsigned int _N;
        if (_Y >= 0)
                _N = _Y;
        else
                _N = -_Y;
        for (_Ty _Z = _Ty(1); ; _X *= _X)
                {if ((_N & 1) != 0)
                        _Z *= _X;
                if ((_N >>= 1) == 0)
                        return (_Y < 0 ? _Ty(1) / _Z : _Z); }}













































































































#line 636 "c:\\programme\\microsoft visual studio\\vc98\\include\\math.h"
#line 637 "c:\\programme\\microsoft visual studio\\vc98\\include\\math.h"


#pragma pack(pop)
#line 641 "c:\\programme\\microsoft visual studio\\vc98\\include\\math.h"

#line 643 "c:\\programme\\microsoft visual studio\\vc98\\include\\math.h"
#line 74 "c:\\coin3d\\include\\inventor\\c\\basic.h"






#line 81 "c:\\coin3d\\include\\inventor\\c\\basic.h"


#line 84 "c:\\coin3d\\include\\inventor\\c\\basic.h"


#line 87 "c:\\coin3d\\include\\inventor\\c\\basic.h"


#line 90 "c:\\coin3d\\include\\inventor\\c\\basic.h"


#line 93 "c:\\coin3d\\include\\inventor\\c\\basic.h"


#line 96 "c:\\coin3d\\include\\inventor\\c\\basic.h"


#line 99 "c:\\coin3d\\include\\inventor\\c\\basic.h"


#line 102 "c:\\coin3d\\include\\inventor\\c\\basic.h"


#line 105 "c:\\coin3d\\include\\inventor\\c\\basic.h"


#line 108 "c:\\coin3d\\include\\inventor\\c\\basic.h"


#line 111 "c:\\coin3d\\include\\inventor\\c\\basic.h"


#line 114 "c:\\coin3d\\include\\inventor\\c\\basic.h"


#line 117 "c:\\coin3d\\include\\inventor\\c\\basic.h"


#line 120 "c:\\coin3d\\include\\inventor\\c\\basic.h"


#line 123 "c:\\coin3d\\include\\inventor\\c\\basic.h"


#line 126 "c:\\coin3d\\include\\inventor\\c\\basic.h"


#line 129 "c:\\coin3d\\include\\inventor\\c\\basic.h"


#line 132 "c:\\coin3d\\include\\inventor\\c\\basic.h"


#line 135 "c:\\coin3d\\include\\inventor\\c\\basic.h"


#line 138 "c:\\coin3d\\include\\inventor\\c\\basic.h"


#line 141 "c:\\coin3d\\include\\inventor\\c\\basic.h"


#line 144 "c:\\coin3d\\include\\inventor\\c\\basic.h"




































#line 181 "c:\\coin3d\\include\\inventor\\c\\basic.h"














#line 196 "c:\\coin3d\\include\\inventor\\c\\basic.h"


#line 199 "c:\\coin3d\\include\\inventor\\c\\basic.h"


#line 202 "c:\\coin3d\\include\\inventor\\c\\basic.h"


#line 205 "c:\\coin3d\\include\\inventor\\c\\basic.h"


#line 208 "c:\\coin3d\\include\\inventor\\c\\basic.h"


#line 211 "c:\\coin3d\\include\\inventor\\c\\basic.h"


#line 214 "c:\\coin3d\\include\\inventor\\c\\basic.h"


#line 217 "c:\\coin3d\\include\\inventor\\c\\basic.h"


#line 220 "c:\\coin3d\\include\\inventor\\c\\basic.h"
#line 221 "c:\\coin3d\\include\\inventor\\c\\basic.h"
















#line 238 "c:\\coin3d\\include\\inventor\\c\\basic.h"































































#line 302 "c:\\coin3d\\include\\inventor\\c\\basic.h"
#line 303 "c:\\coin3d\\include\\inventor\\c\\basic.h"
#line 304 "c:\\coin3d\\include\\inventor\\c\\basic.h"







#line 312 "c:\\coin3d\\include\\inventor\\c\\basic.h"
#line 31 "c:\\coin3d\\include\\inventor\\sbbasic.h"



























template <class Type>
inline Type SbAbs( Type Val ) {
  return (Val < 0) ? 0 - Val : Val;
}

template <class Type>
inline Type SbMax( const Type A, const Type B ) {
  return (A < B) ? B : A;
}

template <class Type>
inline Type SbMin( const Type A, const Type B ) {
  return (A < B) ? A : B;
}

template <class Type>
inline Type SbClamp( const Type Val, const Type Min, const Type Max ) {
  return (Val < Min) ? Min : (Val > Max) ? Max : Val;
}

template <class Type>
inline void SbSwap( Type & A, Type & B ) {
  Type T; T = A; A = B; B = T;
}

template <class Type>
inline Type SbSqr(const Type val) {
  return val * val;
}



#line 91 "c:\\coin3d\\include\\inventor\\sbbasic.h"
#line 55 "c:\\coin3d\\include\\inventor\\qt\\soqt.h"
#line 1 "c:\\coin3d\\include\\inventor\\sblinear.h"











































#line 1 "c:\\coin3d\\include\\inventor\\sbvec2f.h"


























#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdio.h"















#pragma once
#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdio.h"






#line 25 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdio.h"







#pragma pack(push,8)
#line 34 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdio.h"


extern "C" {
#line 38 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdio.h"


















#line 57 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdio.h"






























#line 88 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdio.h"



















#line 108 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdio.h"

#line 110 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdio.h"






























#line 141 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdio.h"





struct _iobuf {
        char *_ptr;
        int   _cnt;
        char *_base;
        int   _flag;
        int   _file;
        int   _charbuf;
        int   _bufsiz;
        char *_tmpfname;
        };
typedef struct _iobuf FILE;

#line 159 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdio.h"












#line 172 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdio.h"












#line 185 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdio.h"



































__declspec(dllimport) extern FILE _iob[];
#line 222 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdio.h"









#line 232 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdio.h"


typedef __int64 fpos_t;







#line 243 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdio.h"
#line 244 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdio.h"


#line 247 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdio.h"




























__declspec(dllimport) int __cdecl _filbuf(FILE *);
__declspec(dllimport) int __cdecl _flsbuf(int, FILE *);




__declspec(dllimport) FILE * __cdecl _fsopen(const char *, const char *, int);
#line 283 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdio.h"

__declspec(dllimport) void __cdecl clearerr(FILE *);
__declspec(dllimport) int __cdecl fclose(FILE *);
__declspec(dllimport) int __cdecl _fcloseall(void);




__declspec(dllimport) FILE * __cdecl _fdopen(int, const char *);
#line 293 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdio.h"

__declspec(dllimport) int __cdecl feof(FILE *);
__declspec(dllimport) int __cdecl ferror(FILE *);
__declspec(dllimport) int __cdecl fflush(FILE *);
__declspec(dllimport) int __cdecl fgetc(FILE *);
__declspec(dllimport) int __cdecl _fgetchar(void);
__declspec(dllimport) int __cdecl fgetpos(FILE *, fpos_t *);
__declspec(dllimport) char * __cdecl fgets(char *, int, FILE *);




__declspec(dllimport) int __cdecl _fileno(FILE *);
#line 307 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdio.h"

__declspec(dllimport) int __cdecl _flushall(void);
__declspec(dllimport) FILE * __cdecl fopen(const char *, const char *);
__declspec(dllimport) int __cdecl fprintf(FILE *, const char *, ...);
__declspec(dllimport) int __cdecl fputc(int, FILE *);
__declspec(dllimport) int __cdecl _fputchar(int);
__declspec(dllimport) int __cdecl fputs(const char *, FILE *);
__declspec(dllimport) size_t __cdecl fread(void *, size_t, size_t, FILE *);
__declspec(dllimport) FILE * __cdecl freopen(const char *, const char *, FILE *);
__declspec(dllimport) int __cdecl fscanf(FILE *, const char *, ...);
__declspec(dllimport) int __cdecl fsetpos(FILE *, const fpos_t *);
__declspec(dllimport) int __cdecl fseek(FILE *, long, int);
__declspec(dllimport) long __cdecl ftell(FILE *);
__declspec(dllimport) size_t __cdecl fwrite(const void *, size_t, size_t, FILE *);
__declspec(dllimport) int __cdecl getc(FILE *);
__declspec(dllimport) int __cdecl getchar(void);
__declspec(dllimport) int __cdecl _getmaxstdio(void);
__declspec(dllimport) char * __cdecl gets(char *);
__declspec(dllimport) int __cdecl _getw(FILE *);
__declspec(dllimport) void __cdecl perror(const char *);
__declspec(dllimport) int __cdecl _pclose(FILE *);
__declspec(dllimport) FILE * __cdecl _popen(const char *, const char *);
__declspec(dllimport) int __cdecl printf(const char *, ...);
__declspec(dllimport) int __cdecl putc(int, FILE *);
__declspec(dllimport) int __cdecl putchar(int);
__declspec(dllimport) int __cdecl puts(const char *);
__declspec(dllimport) int __cdecl _putw(int, FILE *);
__declspec(dllimport) int __cdecl remove(const char *);
__declspec(dllimport) int __cdecl rename(const char *, const char *);
__declspec(dllimport) void __cdecl rewind(FILE *);
__declspec(dllimport) int __cdecl _rmtmp(void);
__declspec(dllimport) int __cdecl scanf(const char *, ...);
__declspec(dllimport) void __cdecl setbuf(FILE *, char *);
__declspec(dllimport) int __cdecl _setmaxstdio(int);
__declspec(dllimport) int __cdecl setvbuf(FILE *, char *, int, size_t);
__declspec(dllimport) int __cdecl _snprintf(char *, size_t, const char *, ...);
__declspec(dllimport) int __cdecl sprintf(char *, const char *, ...);
__declspec(dllimport) int __cdecl sscanf(const char *, const char *, ...);
__declspec(dllimport) char * __cdecl _tempnam(const char *, const char *);
__declspec(dllimport) FILE * __cdecl tmpfile(void);
__declspec(dllimport) char * __cdecl tmpnam(char *);
__declspec(dllimport) int __cdecl ungetc(int, FILE *);
__declspec(dllimport) int __cdecl _unlink(const char *);
__declspec(dllimport) int __cdecl vfprintf(FILE *, const char *, va_list);
__declspec(dllimport) int __cdecl vprintf(const char *, va_list);
__declspec(dllimport) int __cdecl _vsnprintf(char *, size_t, const char *, va_list);
__declspec(dllimport) int __cdecl vsprintf(char *, const char *, va_list);













__declspec(dllimport) FILE * __cdecl _wfsopen(const wchar_t *, const wchar_t *, int);
#line 369 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdio.h"

__declspec(dllimport) wint_t __cdecl fgetwc(FILE *);
__declspec(dllimport) wint_t __cdecl _fgetwchar(void);
__declspec(dllimport) wint_t __cdecl fputwc(wint_t, FILE *);
__declspec(dllimport) wint_t __cdecl _fputwchar(wint_t);
__declspec(dllimport) wint_t __cdecl getwc(FILE *);
__declspec(dllimport) wint_t __cdecl getwchar(void);
__declspec(dllimport) wint_t __cdecl putwc(wint_t, FILE *);
__declspec(dllimport) wint_t __cdecl putwchar(wint_t);
__declspec(dllimport) wint_t __cdecl ungetwc(wint_t, FILE *);

__declspec(dllimport) wchar_t * __cdecl fgetws(wchar_t *, int, FILE *);
__declspec(dllimport) int __cdecl fputws(const wchar_t *, FILE *);
__declspec(dllimport) wchar_t * __cdecl _getws(wchar_t *);
__declspec(dllimport) int __cdecl _putws(const wchar_t *);

__declspec(dllimport) int __cdecl fwprintf(FILE *, const wchar_t *, ...);
__declspec(dllimport) int __cdecl wprintf(const wchar_t *, ...);
__declspec(dllimport) int __cdecl _snwprintf(wchar_t *, size_t, const wchar_t *, ...);
__declspec(dllimport) int __cdecl swprintf(wchar_t *, const wchar_t *, ...);
__declspec(dllimport) int __cdecl vfwprintf(FILE *, const wchar_t *, va_list);
__declspec(dllimport) int __cdecl vwprintf(const wchar_t *, va_list);
__declspec(dllimport) int __cdecl _vsnwprintf(wchar_t *, size_t, const wchar_t *, va_list);
__declspec(dllimport) int __cdecl vswprintf(wchar_t *, const wchar_t *, va_list);
__declspec(dllimport) int __cdecl fwscanf(FILE *, const wchar_t *, ...);
__declspec(dllimport) int __cdecl swscanf(const wchar_t *, const wchar_t *, ...);
__declspec(dllimport) int __cdecl wscanf(const wchar_t *, ...);






__declspec(dllimport) FILE * __cdecl _wfdopen(int, const wchar_t *);
__declspec(dllimport) FILE * __cdecl _wfopen(const wchar_t *, const wchar_t *);
__declspec(dllimport) FILE * __cdecl _wfreopen(const wchar_t *, const wchar_t *, FILE *);
__declspec(dllimport) void __cdecl _wperror(const wchar_t *);
__declspec(dllimport) FILE * __cdecl _wpopen(const wchar_t *, const wchar_t *);
__declspec(dllimport) int __cdecl _wremove(const wchar_t *);
__declspec(dllimport) wchar_t * __cdecl _wtempnam(const wchar_t *, const wchar_t *);
__declspec(dllimport) wchar_t * __cdecl _wtmpnam(wchar_t *);



#line 414 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdio.h"
#line 415 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdio.h"


#line 418 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdio.h"





















#line 440 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdio.h"










__declspec(dllimport) int __cdecl fcloseall(void);
__declspec(dllimport) FILE * __cdecl fdopen(int, const char *);
__declspec(dllimport) int __cdecl fgetchar(void);
__declspec(dllimport) int __cdecl fileno(FILE *);
__declspec(dllimport) int __cdecl flushall(void);
__declspec(dllimport) int __cdecl fputchar(int);
__declspec(dllimport) int __cdecl getw(FILE *);
__declspec(dllimport) int __cdecl putw(int, FILE *);
__declspec(dllimport) int __cdecl rmtmp(void);
__declspec(dllimport) char * __cdecl tempnam(const char *, const char *);
__declspec(dllimport) int __cdecl unlink(const char *);

#line 463 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdio.h"


}
#line 467 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdio.h"


#pragma pack(pop)
#line 471 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdio.h"

#line 473 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdio.h"
#line 28 "c:\\coin3d\\include\\inventor\\sbvec2f.h"

#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 30 "c:\\coin3d\\include\\inventor\\sbvec2f.h"

class __declspec(dllimport) SbVec2f {
public:
  SbVec2f(void);
  SbVec2f(const float v[2]);
  SbVec2f(const float x, const float y);
  float dot(const SbVec2f & v) const;
  SbBool equals(const SbVec2f & v, const float tolerance) const;
  const float * getValue(void) const;
  void getValue(float & x, float & y) const;
  float length(void) const;
  void negate(void);
  float normalize(void);
  SbVec2f & setValue(const float v[2]);
  SbVec2f & setValue(const float x, const float y);
  float & operator [] (const int i);
  const float & operator [] (const int i) const;
  SbVec2f & operator *= (const float d);
  SbVec2f & operator /= (const float d);
  SbVec2f & operator += (const SbVec2f & u);
  SbVec2f & operator -= (const SbVec2f & u);
  SbVec2f operator-(void) const;

  friend __declspec(dllimport) SbVec2f operator * (const SbVec2f & v, const float d);
  friend __declspec(dllimport) SbVec2f operator * (const float d, const SbVec2f & v);
  friend __declspec(dllimport) SbVec2f operator / (const SbVec2f & v, const float d);
  friend __declspec(dllimport) SbVec2f operator + (const SbVec2f & v1, const SbVec2f & v2);
  friend __declspec(dllimport) SbVec2f operator - (const SbVec2f & v1, const SbVec2f & v2);
  friend __declspec(dllimport) int operator == (const SbVec2f & v1, const SbVec2f & v2);
  friend __declspec(dllimport) int operator != (const SbVec2f & v1, const SbVec2f & v2);

  void print(FILE * fp) const;

private:
  float vec[2];
};

__declspec(dllimport) SbVec2f operator * (const SbVec2f & v, const float d);
__declspec(dllimport) SbVec2f operator * (const float d, const SbVec2f & v);
__declspec(dllimport) SbVec2f operator / (const SbVec2f & v, const float d);
__declspec(dllimport) SbVec2f operator + (const SbVec2f & v1, const SbVec2f & v2);
__declspec(dllimport) SbVec2f operator - (const SbVec2f & v1, const SbVec2f & v2);
__declspec(dllimport) int operator == (const SbVec2f & v1, const SbVec2f & v2);
__declspec(dllimport) int operator != (const SbVec2f & v1, const SbVec2f & v2);



#line 78 "c:\\coin3d\\include\\inventor\\sbvec2f.h"
#line 45 "c:\\coin3d\\include\\inventor\\sblinear.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbvec2s.h"



























#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 29 "c:\\coin3d\\include\\inventor\\sbvec2s.h"
#line 1 "c:\\coin3d\\include\\inventor\\system\\inttypes.h"


















































































































































































#line 30 "c:\\coin3d\\include\\inventor\\sbvec2s.h"


class __declspec(dllimport) SbVec2s {
public:
  SbVec2s(void);
  SbVec2s(const short v[2]);
  SbVec2s(const short x, const short y);
  int32_t dot(const SbVec2s& v) const;
  const short * getValue(void) const;
  void getValue(short& x, short& y) const;
  void negate(void);
  SbVec2s& setValue(const short v[2]);
  SbVec2s& setValue(short x, short y);
  short& operator [](const int i);
  const short& operator [](const int i) const;
  SbVec2s& operator *=(int d);
  SbVec2s& operator *=(double d);
  SbVec2s& operator /=(int d);
  SbVec2s& operator /=(double d);
  SbVec2s& operator +=(const SbVec2s& u);
  SbVec2s& operator -=(const SbVec2s& u);
  SbVec2s operator-(void) const;
  friend __declspec(dllimport) SbVec2s operator *(const SbVec2s& v, int d);
  friend __declspec(dllimport) SbVec2s operator *(const SbVec2s& v, double d);
  friend __declspec(dllimport) SbVec2s operator *(int d, const SbVec2s& v);
  friend __declspec(dllimport) SbVec2s operator *(double d, const SbVec2s& v);
  friend __declspec(dllimport) SbVec2s operator /(const SbVec2s& v, int d);
  friend __declspec(dllimport) SbVec2s operator /(const SbVec2s& v, double d);
  friend __declspec(dllimport) SbVec2s operator +(const SbVec2s& v1, const SbVec2s& v2);
  friend __declspec(dllimport) SbVec2s operator -(const SbVec2s& v1, const SbVec2s& v2);
  friend __declspec(dllimport) int operator ==(const SbVec2s& v1, const SbVec2s& v2);
  friend __declspec(dllimport) int operator !=(const SbVec2s& v1, const SbVec2s& v2);

  void print(FILE * fp) const;

private:
  short vec[2];
};

__declspec(dllimport) SbVec2s operator *(const SbVec2s& v, int d);
__declspec(dllimport) SbVec2s operator *(const SbVec2s& v, double d);
__declspec(dllimport) SbVec2s operator *(int d, const SbVec2s& v);
__declspec(dllimport) SbVec2s operator *(double d, const SbVec2s& v);
__declspec(dllimport) SbVec2s operator /(const SbVec2s& v, int d);
__declspec(dllimport) SbVec2s operator /(const SbVec2s& v, double d);
__declspec(dllimport) SbVec2s operator +(const SbVec2s& v1, const SbVec2s& v2);
__declspec(dllimport) SbVec2s operator -(const SbVec2s& v1, const SbVec2s& v2);
__declspec(dllimport) int operator ==(const SbVec2s& v1, const SbVec2s& v2);
__declspec(dllimport) int operator !=(const SbVec2s& v1, const SbVec2s& v2);

#line 81 "c:\\coin3d\\include\\inventor\\sbvec2s.h"
#line 46 "c:\\coin3d\\include\\inventor\\sblinear.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbvec3f.h"




























#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 30 "c:\\coin3d\\include\\inventor\\sbvec3f.h"

class SbPlane;
class SbVec3d;

class __declspec(dllimport) SbVec3f {
public:
  SbVec3f(void) { }
  SbVec3f(const float v[3]);
  SbVec3f(const float x, const float y, const float z);
  SbVec3f(const SbPlane & p0, const SbPlane & p1, const SbPlane & p2);
  SbVec3f(const SbVec3d & v);
  SbVec3f cross(const SbVec3f & v) const;
  float dot(const SbVec3f & v) const;
  SbBool equals(const SbVec3f & v, const float tolerance) const;
  SbVec3f getClosestAxis(void) const;
  const float * getValue(void) const;
  void getValue(float & x, float & y, float & z) const;
  float length(void) const;
  float sqrLength() const;
  void negate(void);
  float normalize(void);
  SbVec3f & setValue(const float v[3]);
  SbVec3f & setValue(const float x, const float y, const float z);
  SbVec3f & setValue(const SbVec3f & barycentric,
                     const SbVec3f & v0,
                     const SbVec3f & v1,
                     const SbVec3f & v2);
  SbVec3f & setValue(const SbVec3d & v);
  float & operator [](const int i);
  const float & operator [](const int i) const;
  SbVec3f & operator *=(const float d);
  SbVec3f & operator /=(const float d);
  SbVec3f & operator +=(const SbVec3f & u);
  SbVec3f & operator -=(const SbVec3f & u);
  SbVec3f operator-(void) const;
  friend __declspec(dllimport) SbVec3f operator *(const SbVec3f & v, const float d);
  friend __declspec(dllimport) SbVec3f operator *(const float d, const SbVec3f & v);
  friend __declspec(dllimport) SbVec3f operator /(const SbVec3f & v, const float d);
  friend __declspec(dllimport) SbVec3f operator +(const SbVec3f & v1, const SbVec3f & v2);
  friend __declspec(dllimport) SbVec3f operator -(const SbVec3f & v1, const SbVec3f & v2);
  friend __declspec(dllimport) int operator ==(const SbVec3f & v1, const SbVec3f & v2);
  friend __declspec(dllimport) int operator !=(const SbVec3f & v1, const SbVec3f & v2);

  void print(FILE * fp) const;

private:
  float vec[3];
};

__declspec(dllimport) SbVec3f operator *(const SbVec3f & v, const float d);
__declspec(dllimport) SbVec3f operator *(const float d, const SbVec3f & v);
__declspec(dllimport) SbVec3f operator /(const SbVec3f & v, const float d);
__declspec(dllimport) SbVec3f operator +(const SbVec3f & v1, const SbVec3f & v2);
__declspec(dllimport) SbVec3f operator -(const SbVec3f & v1, const SbVec3f & v2);
__declspec(dllimport) int operator ==(const SbVec3f & v1, const SbVec3f & v2);
__declspec(dllimport) int operator !=(const SbVec3f & v1, const SbVec3f & v2);




inline float &
SbVec3f::operator [](const int i)
{
  return this->vec[i];
}

inline const float &
SbVec3f::operator [](const int i) const
{
  return this->vec[i];
}

#line 103 "c:\\coin3d\\include\\inventor\\sbvec3f.h"
#line 47 "c:\\coin3d\\include\\inventor\\sblinear.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbvec3s.h"



























#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 29 "c:\\coin3d\\include\\inventor\\sbvec3s.h"

class __declspec(dllimport) SbVec3s {
public:
  SbVec3s(void);
  SbVec3s(const short v[3]);
  SbVec3s(const short x, const short y, const short z);

  int32_t dot(const SbVec3s & v) const;
  const short * getValue(void) const;
  void getValue(short & x, short & y, short & z) const;
  void negate(void);
  SbVec3s & setValue(const short v[3]);
  SbVec3s & setValue(const short x, const short y, const short z);

  short & operator [](const int i);
  const short & operator [](const int i) const;
  SbVec3s & operator *=(int d);
  SbVec3s & operator *=(double  d);
  SbVec3s & operator /=(int d);
  SbVec3s & operator /=(double d);
  SbVec3s & operator +=(const SbVec3s & u);
  SbVec3s & operator -=(const SbVec3s & u);
  SbVec3s operator-(void) const;
  friend __declspec(dllimport) SbVec3s operator *(const SbVec3s & v, int d);
  friend __declspec(dllimport) SbVec3s operator *(const SbVec3s & v, double d);
  friend __declspec(dllimport) SbVec3s operator *(int d, const SbVec3s & v);
  friend __declspec(dllimport) SbVec3s operator *(double d, const SbVec3s & v);
  friend __declspec(dllimport) SbVec3s operator /(const SbVec3s & v, int d);
  friend __declspec(dllimport) SbVec3s operator /(const SbVec3s & v, double d);
  friend __declspec(dllimport) SbVec3s operator +(const SbVec3s & v1, const SbVec3s & v2);
  friend __declspec(dllimport) SbVec3s operator -(const SbVec3s & v1, const SbVec3s & v2);
  friend __declspec(dllimport) int operator ==(const SbVec3s & v1, const SbVec3s & v2);
  friend __declspec(dllimport) int operator !=(const SbVec3s & v1, const SbVec3s & v2);

  void print(FILE * fp) const;

private:
  short vec[3];
};

__declspec(dllimport) SbVec3s operator *(const SbVec3s & v, int d);
__declspec(dllimport) SbVec3s operator *(const SbVec3s & v, double d);
__declspec(dllimport) SbVec3s operator *(int d, const SbVec3s & v);
__declspec(dllimport) SbVec3s operator *(double d, const SbVec3s & v);
__declspec(dllimport) SbVec3s operator /(const SbVec3s & v, int d);
__declspec(dllimport) SbVec3s operator /(const SbVec3s & v, double d);
__declspec(dllimport) SbVec3s operator +(const SbVec3s & v1, const SbVec3s & v2);
__declspec(dllimport) SbVec3s operator -(const SbVec3s & v1, const SbVec3s & v2);
__declspec(dllimport) int operator ==(const SbVec3s & v1, const SbVec3s & v2);
__declspec(dllimport) int operator !=(const SbVec3s & v1, const SbVec3s & v2);



inline short &
SbVec3s::operator [](const int i)
{
  return this->vec[i];
}

inline const short &
SbVec3s::operator [](const int i) const
{
  return this->vec[i];
}

#line 95 "c:\\coin3d\\include\\inventor\\sbvec3s.h"
#line 48 "c:\\coin3d\\include\\inventor\\sblinear.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbvec4f.h"




























#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 30 "c:\\coin3d\\include\\inventor\\sbvec4f.h"

class SbVec3f;

class __declspec(dllimport) SbVec4f {
public:
  SbVec4f(void);
  SbVec4f(const float v[4]);
  SbVec4f(const float x, const float y, const float z, const float w);
  float dot(const SbVec4f& v) const;
  SbBool equals(const SbVec4f& v, const float tolerance) const;
  void getReal(SbVec3f& v) const;
  const float* getValue(void) const;
  void getValue(float& x, float& y, float& z, float& w) const;
  float length(void) const;
  void negate(void);
  float normalize(void);
  SbVec4f& setValue(const float v[4]);
  SbVec4f& setValue(const float x, const float y, const float z,
                    const float w);
  float& operator [](const int i);
  const float& operator [](const int i) const;
  SbVec4f& operator *=(const float d);
  SbVec4f& operator /=(const float d);
  SbVec4f& operator +=(const SbVec4f& u);
  SbVec4f& operator -=(const SbVec4f& u);
  SbVec4f operator-(void) const;
  friend __declspec(dllimport) SbVec4f operator *(const SbVec4f& v, const float d);
  friend __declspec(dllimport) SbVec4f operator *(const float d, const SbVec4f& v);
  friend __declspec(dllimport) SbVec4f operator /(const SbVec4f& v, const float d);
  friend __declspec(dllimport) SbVec4f operator +(const SbVec4f& v1, const SbVec4f& v2);
  friend __declspec(dllimport) SbVec4f operator -(const SbVec4f& v1, const SbVec4f& v2);
  friend __declspec(dllimport) int operator ==(const SbVec4f& v1, const SbVec4f& v2);
  friend __declspec(dllimport) int operator !=(const SbVec4f& v1, const SbVec4f& v2);

  void print(FILE * fp) const;

private:
  float vec[4];
};

__declspec(dllimport) SbVec4f operator *(const SbVec4f& v, const float d);
__declspec(dllimport) SbVec4f operator *(const float d, const SbVec4f& v);
__declspec(dllimport) SbVec4f operator /(const SbVec4f& v, const float d);
__declspec(dllimport) SbVec4f operator +(const SbVec4f& v1, const SbVec4f& v2);
__declspec(dllimport) SbVec4f operator -(const SbVec4f& v1, const SbVec4f& v2);
__declspec(dllimport) int operator ==(const SbVec4f& v1, const SbVec4f& v2);
__declspec(dllimport) int operator !=(const SbVec4f& v1, const SbVec4f& v2);

#line 79 "c:\\coin3d\\include\\inventor\\sbvec4f.h"
#line 49 "c:\\coin3d\\include\\inventor\\sblinear.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbsphere.h"



























#line 1 "c:\\coin3d\\include\\inventor\\sbvec3f.h"






































































































#line 29 "c:\\coin3d\\include\\inventor\\sbsphere.h"

class SbLine;
class SbBox3f;

class __declspec(dllimport) SbSphere {
public:
  SbSphere(void);
  SbSphere(const SbVec3f & center, const float radius);
  void setValue(const SbVec3f & center, const float radius);
  void setCenter(const SbVec3f & center);
  void setRadius(const float radius);
  const SbVec3f &  getCenter(void) const;
  float getRadius(void) const;
  void circumscribe(const SbBox3f & box);
  SbBool intersect(const SbLine & l, SbVec3f & intersection) const;
  SbBool intersect(const SbLine & l, SbVec3f & enter, SbVec3f & exit) const;
  SbBool pointInside(const SbVec3f & p) const;

  void print(FILE * file) const;

private:
  SbVec3f center;
  float radius;
};

#line 55 "c:\\coin3d\\include\\inventor\\sbsphere.h"
#line 50 "c:\\coin3d\\include\\inventor\\sblinear.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbrotation.h"



























#line 1 "c:\\coin3d\\include\\inventor\\sbvec4f.h"














































































#line 29 "c:\\coin3d\\include\\inventor\\sbrotation.h"

class SbMatrix;
class SbVec3f;

class __declspec(dllimport) SbRotation {
public:
  SbRotation(void);
  SbRotation(const SbVec3f & axis, const float radians);
  SbRotation(const float q[4]);
  SbRotation(const float q0, const float q1, const float q2, const float q3);
  SbRotation(const SbMatrix & m);
  SbRotation(const SbVec3f & rotateFrom, const SbVec3f & rotateTo);
  const float * getValue(void) const;
  void getValue(float & q0, float & q1, float & q2, float & q3) const;
  SbRotation & setValue(const float q0, const float q1,
                        const float q2, const float q3);
  void getValue(SbVec3f & axis, float & radians) const;
  void getValue(SbMatrix & matrix) const;
  SbRotation & invert(void);
  SbRotation inverse(void) const;
  SbRotation & setValue(const float q[4]);
  SbRotation & setValue(const SbMatrix & m);
  SbRotation & setValue(const SbVec3f & axis, const float radians);
  SbRotation & setValue(const SbVec3f & rotateFrom, const SbVec3f & rotateTo);
  SbRotation & operator*=(const SbRotation & q);
  SbRotation & operator*=(const float s);
  friend __declspec(dllimport) int operator==(const SbRotation & q1, const SbRotation & q2);
  friend __declspec(dllimport) int operator!=(const SbRotation & q1, const SbRotation & q2);
  SbBool equals(const SbRotation & r, const float tolerance) const;
  friend __declspec(dllimport) SbRotation operator *(const SbRotation & q1, const SbRotation & q2);
  void multVec(const SbVec3f & src, SbVec3f & dst) const;

  void scaleAngle(const float scaleFactor);
  static SbRotation slerp(const SbRotation & rot0, const SbRotation & rot1,
                          float t);
  static SbRotation identity(void);

  void print(FILE * fp) const;

private:
  SbVec4f quat;
};

__declspec(dllimport) int operator ==(const SbRotation & q1, const SbRotation & q2);
__declspec(dllimport) int operator !=(const SbRotation & q1, const SbRotation & q2);
__declspec(dllimport) SbRotation operator *(const SbRotation & q1, const SbRotation & q2);

#line 77 "c:\\coin3d\\include\\inventor\\sbrotation.h"
#line 51 "c:\\coin3d\\include\\inventor\\sblinear.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbline.h"




























#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 30 "c:\\coin3d\\include\\inventor\\sbline.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbvec3f.h"






































































































#line 31 "c:\\coin3d\\include\\inventor\\sbline.h"

class __declspec(dllimport) SbLine {
public:
  SbLine(void);
  SbLine(const SbVec3f & origin, const SbVec3f & point);
  void setValue(const SbVec3f & origin, const SbVec3f & point);
  SbBool getClosestPoints(const SbLine & line2,
                          SbVec3f & ptOnThis, SbVec3f & ptOnLine2) const;
  SbVec3f getClosestPoint(const SbVec3f & point) const;
  const SbVec3f & getPosition(void) const;
  const SbVec3f & getDirection(void) const;

  void print(FILE * file) const;

private:
  SbVec3f pos, dir;
};

#line 50 "c:\\coin3d\\include\\inventor\\sbline.h"
#line 52 "c:\\coin3d\\include\\inventor\\sblinear.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbcylinder.h"




























#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 30 "c:\\coin3d\\include\\inventor\\sbcylinder.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbline.h"

















































#line 31 "c:\\coin3d\\include\\inventor\\sbcylinder.h"

class __declspec(dllimport) SbCylinder {
public:
  SbCylinder(void);
  SbCylinder(const SbLine& a, const float r);
  void setValue(const SbLine& a, const float r);
  void setAxis(const SbLine& a);
  void setRadius(const float r);
  const SbLine& getAxis(void) const;
  float getRadius(void) const;
  SbBool intersect(const SbLine& l, SbVec3f& intersection) const;
  SbBool intersect(const SbLine& l, SbVec3f& enter, SbVec3f& exit) const;

  void print(FILE * file) const;

private:
  SbLine axis;
  float radius;
};

#line 52 "c:\\coin3d\\include\\inventor\\sbcylinder.h"
#line 53 "c:\\coin3d\\include\\inventor\\sblinear.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbplane.h"




























#line 1 "c:\\coin3d\\include\\inventor\\sbvec3f.h"






































































































#line 30 "c:\\coin3d\\include\\inventor\\sbplane.h"

class SbLine;
class SbMatrix;

class __declspec(dllimport) SbPlane {
public:
  SbPlane(void);
  SbPlane(const SbVec3f& normal, const float D);
  SbPlane(const SbVec3f& p0, const SbVec3f& p1, const SbVec3f& p2);
  SbPlane(const SbVec3f& normal, const SbVec3f& point);

  void offset(const float d);
  SbBool intersect(const SbLine& l, SbVec3f& intersection) const;
  void transform(const SbMatrix& matrix);
  SbBool isInHalfSpace(const SbVec3f& point) const;
  float getDistance(const SbVec3f &point) const;
  const SbVec3f& getNormal(void) const;
  float getDistanceFromOrigin(void) const;
  friend __declspec(dllimport) int operator ==(const SbPlane& p1, const SbPlane& p2);
  friend __declspec(dllimport) int operator !=(const SbPlane& p1, const SbPlane& p2);

  void print(FILE * file) const;

  SbBool intersect(const SbPlane & pl, SbLine & line);

private:
  SbVec3f normal;
  float distance;
};

__declspec(dllimport) int operator ==(const SbPlane& p1, const SbPlane& p2);
__declspec(dllimport) int operator !=(const SbPlane& p1, const SbPlane& p2);

#line 64 "c:\\coin3d\\include\\inventor\\sbplane.h"
#line 54 "c:\\coin3d\\include\\inventor\\sblinear.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbmatrix.h"



























#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 29 "c:\\coin3d\\include\\inventor\\sbmatrix.h"

class SbLine;
class SbRotation;
class SbVec3f;
class SbVec4f;

typedef float SbMat[4][4];

class __declspec(dllimport) SbMatrix {
public:
  SbMatrix(void);
  SbMatrix(const float a11, const float a12, const float a13, const float a14,
           const float a21, const float a22, const float a23, const float a24,
           const float a31, const float a32, const float a33, const float a34,
           const float a41, const float a42, const float a43, const float a44);
  SbMatrix(const SbMat & matrix);
  SbMatrix(const SbMat * matrix);
  ~SbMatrix(void);

  SbMatrix & operator =(const SbMat & m);

  operator float*(void);
  SbMatrix & operator =(const SbMatrix & m);
  void setValue(const SbMat & m);
  const SbMat & getValue(void) const;

  void makeIdentity(void);
  void setRotate(const SbRotation & q);
  SbMatrix inverse(void) const;
  float det3(int r1, int r2, int r3,
             int c1, int c2, int c3) const;
  float det3(void) const;
  float det4(void) const;

  SbBool equals(const SbMatrix & m, float tolerance) const;


  operator SbMat&(void);
  float * operator [](int i);
  const float * operator [](int i) const;
  SbMatrix & operator =(const SbRotation & q);
  SbMatrix & operator *=(const SbMatrix & m);
  friend __declspec(dllimport) SbMatrix operator *(const SbMatrix & m1, const SbMatrix & m2);
  friend __declspec(dllimport) int operator ==(const SbMatrix & m1, const SbMatrix & m2);
  friend __declspec(dllimport) int operator !=(const SbMatrix & m1, const SbMatrix & m2);
  void getValue(SbMat & m) const;
  static SbMatrix identity(void);
  void setScale(const float s);
  void setScale(const SbVec3f & s);
  void setTranslate(const SbVec3f & t);
  void setTransform(const SbVec3f & t, const SbRotation & r, const SbVec3f & s);
  void setTransform(const SbVec3f & t, const SbRotation & r, const SbVec3f & s,
                    const SbRotation & so);
  void setTransform(const SbVec3f & translation,
                    const SbRotation & rotation, const SbVec3f & scaleFactor,
                    const SbRotation & scaleOrientation, const SbVec3f & center);
  void getTransform(SbVec3f & t, SbRotation & r,
                    SbVec3f & s, SbRotation & so) const;
  void getTransform(SbVec3f & translation, SbRotation & rotation,
                    SbVec3f & scaleFactor, SbRotation & scaleOrientation,
                    const SbVec3f & center) const;
  SbBool factor(SbMatrix & r, SbVec3f & s, SbMatrix & u, SbVec3f & t,
                SbMatrix & proj);
  SbBool LUDecomposition(int index[4], float & d);
  void LUBackSubstitution(int index[4], float b[4]) const;
  SbMatrix transpose(void) const;
  SbMatrix & multRight(const SbMatrix & m);
  SbMatrix & multLeft(const SbMatrix & m);
  void multMatrixVec(const SbVec3f & src, SbVec3f & dst) const;
  void multVecMatrix(const SbVec3f & src, SbVec3f & dst) const;
  void multDirMatrix(const SbVec3f & src, SbVec3f & dst) const;
  void multLineMatrix(const SbLine & src, SbLine & dst) const;
  void multVecMatrix(const SbVec4f & src, SbVec4f & dst) const;

  void print(FILE * fp) const;

private:
  float matrix[4][4];

  void operator /=(const float v);
  void operator *=(const float v);
};

__declspec(dllimport) SbMatrix operator *(const SbMatrix & m1, const SbMatrix & m2);
__declspec(dllimport) int operator ==(const SbMatrix & m1, const SbMatrix & m2);
__declspec(dllimport) int operator !=(const SbMatrix & m1, const SbMatrix & m2);

#line 117 "c:\\coin3d\\include\\inventor\\sbmatrix.h"
#line 55 "c:\\coin3d\\include\\inventor\\sblinear.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbrotation.h"












































































#line 56 "c:\\coin3d\\include\\inventor\\sblinear.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbplane.h"































































#line 57 "c:\\coin3d\\include\\inventor\\sblinear.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbviewvolume.h"




























#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 30 "c:\\coin3d\\include\\inventor\\sbviewvolume.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbvec3f.h"






































































































#line 31 "c:\\coin3d\\include\\inventor\\sbviewvolume.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbdpviewvolume.h"




























#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 30 "c:\\coin3d\\include\\inventor\\sbdpviewvolume.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbvec3d.h"



























#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 29 "c:\\coin3d\\include\\inventor\\sbvec3d.h"

class SbVec3f;

class __declspec(dllimport) SbVec3d {
public:
  SbVec3d(void) { }
  SbVec3d(const double v[3]);
  SbVec3d(const double x, const double y, const double z);
  SbVec3d(const SbVec3f & v);
  SbVec3d cross(const SbVec3d & v) const;
  double dot(const SbVec3d & v) const;
  SbBool equals(const SbVec3d & v, const double tolerance) const;
  SbVec3d getClosestAxis(void) const;
  const double * getValue(void) const;
  void getValue(double & x, double & y, double & z) const;
  double length(void) const;
  double sqrLength() const;
  void negate(void);
  double normalize(void);
  SbVec3d & setValue(const double v[3]);
  SbVec3d & setValue(const double x, const double y, const double z);
  SbVec3d & setValue(const SbVec3d & barycentric,
                     const SbVec3d & v0,
                     const SbVec3d & v1,
                     const SbVec3d & v2);
  SbVec3d & setValue(const SbVec3f & v);
  double & operator [](const int i);
  const double & operator [](const int i) const;
  SbVec3d & operator *=(const double d);
  SbVec3d & operator /=(const double d);
  SbVec3d & operator +=(const SbVec3d & u);
  SbVec3d & operator -=(const SbVec3d & u);
  SbVec3d operator -(void) const;
  friend __declspec(dllimport) SbVec3d operator *(const SbVec3d & v, const double d);
  friend __declspec(dllimport) SbVec3d operator *(const double d, const SbVec3d & v);
  friend __declspec(dllimport) SbVec3d operator /(const SbVec3d & v, const double d);
  friend __declspec(dllimport) SbVec3d operator +(const SbVec3d & v1, const SbVec3d & v2);
  friend __declspec(dllimport) SbVec3d operator -(const SbVec3d & v1, const SbVec3d & v2);
  friend __declspec(dllimport) int operator ==(const SbVec3d & v1, const SbVec3d & v2);
  friend __declspec(dllimport) int operator !=(const SbVec3d & v1, const SbVec3d & v2);

  void print(FILE * fp) const;

private:
  double vec[3];
};

__declspec(dllimport) SbVec3d operator *(const SbVec3d & v, const double d);
__declspec(dllimport) SbVec3d operator *(const double d, const SbVec3d & v);
__declspec(dllimport) SbVec3d operator /(const SbVec3d & v, const double d);
__declspec(dllimport) SbVec3d operator +(const SbVec3d & v1, const SbVec3d & v2);
__declspec(dllimport) SbVec3d operator -(const SbVec3d & v1, const SbVec3d & v2);
__declspec(dllimport) int operator ==(const SbVec3d & v1, const SbVec3d & v2);
__declspec(dllimport) int operator !=(const SbVec3d & v1, const SbVec3d & v2);




inline double &
SbVec3d::operator [](const int i)
{
  return this->vec[i];
}

inline const double &
SbVec3d::operator [](const int i) const
{
  return this->vec[i];
}

#line 100 "c:\\coin3d\\include\\inventor\\sbvec3d.h"
#line 31 "c:\\coin3d\\include\\inventor\\sbdpviewvolume.h"

class SbBox3f;
class SbDPLine;
class SbDPMatrix;
class SbPlane;
class SbDPRotation;
class SbVec2d;
class SbViewVolume;

class __declspec(dllimport) SbDPViewVolume {
public:
  enum ProjectionType { ORTHOGRAPHIC = 0, PERSPECTIVE = 1 };

public:
  SbDPViewVolume(void);
  ~SbDPViewVolume(void);
  void getMatrices(SbDPMatrix& affine, SbDPMatrix& proj) const;
  SbDPMatrix getMatrix(void) const;
  SbDPMatrix getCameraSpaceMatrix(void) const;
  void projectPointToLine(const SbVec2d& pt, SbDPLine& line) const;
  void projectPointToLine(const SbVec2d& pt,
                          SbVec3d& line0, SbVec3d& line1) const;
  void projectToScreen(const SbVec3d& src, SbVec3d& dst) const;
  SbPlane getPlane(const double distFromEye) const;
  SbVec3d getSightPoint(const double distFromEye) const;
  SbVec3d getPlanePoint(const double distFromEye,
                        const SbVec2d& normPoint) const;
  SbDPRotation getAlignRotation(SbBool rightAngleOnly = 0) const;
  double getWorldToScreenScale(const SbVec3d& worldCenter,
                              double normRadius) const;
  SbVec2d projectBox(const SbBox3f& box) const;
  SbDPViewVolume narrow(double left, double bottom,
                      double right, double top) const;
  SbDPViewVolume narrow(const SbBox3f& box) const;
  void ortho(double left, double right,
             double bottom, double top,
             double nearval, double farval);
  void perspective(double fovy, double aspect,
                   double nearval, double farval);
  void frustum(double left, double right,
               double bottom, double top,
               double nearval, double farval);
  void rotateCamera(const SbDPRotation& q);
  void translateCamera(const SbVec3d& v);
  SbVec3d zVector(void) const;
  SbDPViewVolume zNarrow(double nearval, double farval) const;
  void scale(double factor);
  void scaleWidth(double ratio);
  void scaleHeight(double ratio);
  ProjectionType getProjectionType(void) const;
  const SbVec3d& getProjectionPoint(void) const;
  const SbVec3d& getProjectionDirection(void) const;
  double getNearDist(void) const;
  double getWidth(void) const;
  double getHeight(void) const;
  double getDepth(void) const;

  void print(FILE * fp) const;
  void getViewVolumePlanes(SbPlane planes[6]) const;
  void transform(const SbDPMatrix &matrix);
  SbVec3d getViewUp(void) const;

  void copyValues(SbViewVolume & vv);

private:

  ProjectionType type;
  SbVec3d projPoint;
  SbVec3d projDir;
  double nearDist;
  double nearToFar;
  SbVec3d llf;
  SbVec3d lrf;
  SbVec3d ulf;

  void getPlaneRectangle(const double depth, SbVec3d & lowerleft,
                         SbVec3d & lowerright, SbVec3d & upperleft,
                         SbVec3d & upperright) const;
};

#line 112 "c:\\coin3d\\include\\inventor\\sbdpviewvolume.h"
#line 32 "c:\\coin3d\\include\\inventor\\sbviewvolume.h"

class SbBox3f;
class SbLine;
class SbMatrix;
class SbPlane;
class SbRotation;
class SbVec2f;
class SbVec3f;

class __declspec(dllimport) SbViewVolume {
public:
  enum ProjectionType { ORTHOGRAPHIC = 0, PERSPECTIVE = 1 };

public:
  SbViewVolume(void);
  ~SbViewVolume(void);
  void getMatrices(SbMatrix& affine, SbMatrix& proj) const;
  SbMatrix getMatrix(void) const;
  SbMatrix getCameraSpaceMatrix(void) const;
  void projectPointToLine(const SbVec2f& pt, SbLine& line) const;
  void projectPointToLine(const SbVec2f& pt,
                          SbVec3f& line0, SbVec3f& line1) const;
  void projectToScreen(const SbVec3f& src, SbVec3f& dst) const;
  SbPlane getPlane(const float distFromEye) const;
  SbVec3f getSightPoint(const float distFromEye) const;
  SbVec3f getPlanePoint(const float distFromEye,
                        const SbVec2f& normPoint) const;
  SbRotation getAlignRotation(SbBool rightAngleOnly = 0) const;
  float getWorldToScreenScale(const SbVec3f& worldCenter,
                              float normRadius) const;
  SbVec2f projectBox(const SbBox3f& box) const;
  SbViewVolume narrow(float left, float bottom,
                      float right, float top) const;
  SbViewVolume narrow(const SbBox3f& box) const;
  void ortho(float left, float right,
             float bottom, float top,
             float nearval, float farval);
  void perspective(float fovy, float aspect,
                   float nearval, float farval);
  void frustum(float left, float right,
               float bottom, float top,
               float nearval, float farval);
  void rotateCamera(const SbRotation& q);
  void translateCamera(const SbVec3f& v);
  SbVec3f zVector(void) const;
  SbViewVolume zNarrow(float nearval, float farval) const;
  void scale(float factor);
  void scaleWidth(float ratio);
  void scaleHeight(float ratio);
  ProjectionType getProjectionType(void) const;
  const SbVec3f& getProjectionPoint(void) const;
  const SbVec3f& getProjectionDirection(void) const;
  float getNearDist(void) const;
  float getWidth(void) const;
  float getHeight(void) const;
  float getDepth(void) const;

  void print(FILE * fp) const;
  void getViewVolumePlanes(SbPlane planes[6]) const;
  void transform(const SbMatrix &matrix);
  SbVec3f getViewUp(void) const;
  
  SbBool intersect(const SbVec3f & p) const;
  SbBool intersect(const SbVec3f & p0, const SbVec3f & p1,
                   SbVec3f & closestpoint) const;
  SbBool intersect(const SbBox3f & box) const;
  
  SbBool outsideTest(const SbPlane & p,
                     const SbVec3f & bmin, const SbVec3f & bmax) const;

public:
  
  
  
  
  
  
  ProjectionType type;
  SbVec3f projPoint;
  SbVec3f projDir;
  float nearDist;
  float nearToFar;
  SbVec3f llf;
  SbVec3f lrf;
  SbVec3f ulf;

private:
  
  SbDPViewVolume dpvv;
};

#line 124 "c:\\coin3d\\include\\inventor\\sbviewvolume.h"
#line 58 "c:\\coin3d\\include\\inventor\\sblinear.h"

#line 60 "c:\\coin3d\\include\\inventor\\sblinear.h"
#line 56 "c:\\coin3d\\include\\inventor\\qt\\soqt.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbstring.h"


























#line 1 "c:\\coin3d\\include\\inventor\\system\\inttypes.h"


















































































































































































#line 28 "c:\\coin3d\\include\\inventor\\sbstring.h"
#line 1 "c:\\coin3d\\include\\inventor\\c\\base\\string.h"


























#line 1 "c:\\coin3d\\include\\inventor\\c\\basic.h"























































































































































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\c\\base\\string.h"




extern "C" {
#line 34 "c:\\coin3d\\include\\inventor\\c\\base\\string.h"



enum cc_string_constants {
  CC_STRING_MIN_SIZE = 128 - sizeof(char *) + sizeof(int)
};

struct cc_string {
  char * pointer;
  int bufsize;
  char buffer[CC_STRING_MIN_SIZE];
};

typedef  struct cc_string  cc_string;

typedef char (*cc_apply_f)(char);



__declspec(dllimport) void cc_string_construct(cc_string * me);
__declspec(dllimport) cc_string * cc_string_construct_new(void);
__declspec(dllimport) cc_string * cc_string_clone(cc_string * str);
__declspec(dllimport) void cc_string_clean(cc_string * str);
__declspec(dllimport) void cc_string_destruct(cc_string * str);

__declspec(dllimport) void cc_string_set_string(cc_string * str, const cc_string * str2);
__declspec(dllimport) void cc_string_set_text(cc_string * str, const char * text);
__declspec(dllimport) void cc_string_set_subtext(cc_string * str, const char * text, int start, int end);
__declspec(dllimport) void cc_string_set_integer(cc_string * str, int integer);

__declspec(dllimport) void cc_string_append_string(cc_string * str, const cc_string * str2);
__declspec(dllimport) void cc_string_append_text(cc_string * str, const char * text);
__declspec(dllimport) void cc_string_append_integer(cc_string * str, const int digits);
__declspec(dllimport) void cc_string_append_char(cc_string * str, const char c);

__declspec(dllimport) unsigned int cc_string_length(const cc_string * str);
__declspec(dllimport) int cc_string_is(const cc_string * str);
__declspec(dllimport) void cc_string_clear(cc_string * str);
__declspec(dllimport) void cc_string_clear_no_free(cc_string * str);
__declspec(dllimport) uint32_t cc_string_hash(const cc_string * str);
__declspec(dllimport) uint32_t cc_string_hash_text(const char * text);

__declspec(dllimport) const char * cc_string_get_text(const cc_string * str);
__declspec(dllimport) void cc_string_remove_substring(cc_string * str, int start, int end);

__declspec(dllimport) int cc_string_compare(const cc_string * lhs, const cc_string * rhs);
__declspec(dllimport) int cc_string_compare_text(const char * lhs, const char * rhs);
__declspec(dllimport) int cc_string_compare_subtext(const cc_string * str, const char * text, int offset);

__declspec(dllimport) void cc_string_apply(cc_string * str, cc_apply_f function);

__declspec(dllimport) void cc_string_sprintf(cc_string * str, const char * formatstr, ...);
__declspec(dllimport) void cc_string_vsprintf(cc_string * str, const char * formatstr, va_list args);




} 
#line 93 "c:\\coin3d\\include\\inventor\\c\\base\\string.h"

#line 95 "c:\\coin3d\\include\\inventor\\c\\base\\string.h"
#line 29 "c:\\coin3d\\include\\inventor\\sbstring.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\sbintlist.h"


























#line 1 "c:\\coin3d\\include\\inventor\\lists\\sbplist.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 28 "c:\\coin3d\\include\\inventor\\lists\\sbplist.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"















#line 17 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"



















#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"




















extern "C" {
#line 59 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"

__declspec(dllimport) void __cdecl _assert(void *, void *, unsigned);


}
#line 65 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"



#line 69 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"
#line 29 "c:\\coin3d\\include\\inventor\\lists\\sbplist.h"


class __declspec(dllimport) SbPList {
  enum { DEFAULTSIZE = 4 };

public:
  SbPList(const int sizehint = DEFAULTSIZE);
  SbPList(const SbPList & l);
  ~SbPList();

  void copy(const SbPList & l);
  SbPList & operator=(const SbPList & l);
  void fit(void);

  void append(void * item);
  int find(void * item) const;
  void insert(void * item, const int insertbefore);
  void removeItem(void * item);
  void remove(const int index);
  void removeFast(const int index);
  int getLength(void) const;
  void truncate(const int length, const int fit = 0);

  void ** getArrayPtr(const int start = 0) const;
  void *& operator[](const int index) const;

  int operator==(const SbPList & l) const;
  int operator!=(const SbPList & l) const;  
  void * get(const int index) const;
  void set(const int index, void * item);
  
protected:

  void expand(const int size);
  int getArraySize(void) const;

private:
  void expandlist(const int size) const; 
  void grow(const int size = -1);

  int itembuffersize;
  int numitems;
  void ** itembuffer;
  void * builtinbuffer[DEFAULTSIZE];
};



inline void 
SbPList::append(void * item) 
{
  if (this->numitems == this->itembuffersize) this->grow();
  this->itembuffer[this->numitems++] = item;
}

inline void 
SbPList::removeFast(const int index) 
{



  this->itembuffer[index] = this->itembuffer[--this->numitems];
}

inline int 
SbPList::getLength(void) const 
{
  return this->numitems;
}

inline void 
SbPList::truncate(const int length, const int dofit) 
{



  this->numitems = length;
  if (dofit) this->fit();
}

inline void ** 
SbPList::getArrayPtr(const int start) const 
{



  return &this->itembuffer[start];
}

inline void *& 
SbPList::operator[](const int index) const 
{



  if (index >= this->getLength()) this->expandlist(index + 1);
  return this->itembuffer[index];
}

inline int 
SbPList::operator!=(const SbPList & l) const 
{
  return !(*this == l);
}

inline void * 
SbPList::get(const int index) const 
{ 
  return this->itembuffer[index]; 
}

inline void 
SbPList::set(const int index, void * item) 
{ 
  this->itembuffer[index] = item; 
}

inline void 
SbPList::expand(const int size) 
{
  this->grow(size);
  this->numitems = size;
}

inline int 
SbPList::getArraySize(void) const 
{
  return this->itembuffersize;
}


#line 161 "c:\\coin3d\\include\\inventor\\lists\\sbplist.h"
#line 28 "c:\\coin3d\\include\\inventor\\lists\\sbintlist.h"

class  __declspec(dllimport) SbIntList : public SbPList {
public:
  SbIntList(void) : SbPList () { }
  SbIntList(const int sizehint) : SbPList(sizehint) { }
  
  void append(const int item) {
    ((SbPList*)this)->append((void*)((unsigned long)item));
  }
  int find(const int item) {
    return ((SbPList*)this)->find((void *)((unsigned long)item));
  }
  void insert(const int item, const int addbefore) {
    ((SbPList*)this)->insert((void *)((unsigned long)item), addbefore);
  }
  int & operator[](const int idx) const {
    return (int&) ((*(const SbPList*)this)[idx]);
  }
};

#line 49 "c:\\coin3d\\include\\inventor\\lists\\sbintlist.h"
#line 30 "c:\\coin3d\\include\\inventor\\sbstring.h"



class __declspec(dllimport) SbString {
public:
  SbString(void) { cc_string_construct(&this->str); }

  SbString(const char * s)
  { cc_string_construct(&this->str); cc_string_set_text(&this->str, s); }

  SbString(const char * s, int start, int end)
  { cc_string_construct(&this->str); cc_string_set_subtext(&this->str, s, start, end); }

  SbString(const SbString & s)
  { cc_string_construct(&this->str); cc_string_set_string(&this->str, &s.str); }

  SbString(const int digits)
  { cc_string_construct(&this->str); cc_string_set_integer(&this->str, digits); }

  ~SbString() { cc_string_clean(&this->str); }

  uint32_t hash(void) const { return cc_string_hash(&this->str); }
  static uint32_t hash(const char * s) { return cc_string_hash_text(s); }

  int getLength(void) const { return cc_string_length(&this->str); }

  void makeEmpty(SbBool freeold = 1)
  {
    if ( freeold ) cc_string_clear(&this->str);
    else cc_string_clear_no_free(&this->str);
  }

  const char * getString(void) const { return cc_string_get_text(&this->str); }

  SbString getSubString(int startidx, int endidx = -1) const
  {
    SbString s;
    cc_string_set_subtext(&s.str, cc_string_get_text(&this->str), startidx, endidx);
    return s;
  }
  void deleteSubString(int startidx, int endidx = -1)
  {
    cc_string_remove_substring(&this->str, startidx, endidx);
  }

  void addIntString(const int value) { cc_string_append_integer(&this->str, value); }

  char operator[](int index) const { return this->str.pointer[index]; }

  SbString & operator=(const char * s)
  { cc_string_set_text(&this->str, s); return *this; }
  SbString & operator=(const SbString & s)
  { cc_string_set_text(&this->str, s.str.pointer); return *this; }

  SbString & operator+=(const char * s)
  { cc_string_append_text(&this->str, s); return *this; }
  SbString & operator+=(const SbString & s)
  { cc_string_append_string(&this->str, &s.str); return *this; }
  SbString & operator+=(const char c)
  { cc_string_append_char(&this->str, c); return *this; }

  int operator!(void) const { return ! cc_string_is(&this->str); }

  int compareSubString(const char * text, int offset = 0) const
  { return cc_string_compare_subtext(&this->str, text, offset); }

  SbString & sprintf(const char * formatstr, ...)
  {
    va_list args; ( args = (va_list)&formatstr + ( (sizeof(formatstr) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) );
    cc_string_vsprintf(&this->str, formatstr, args);
    ( args = (va_list)0 ); return *this;
  }
  SbString & vsprintf(const char * formatstr, va_list args)
  { cc_string_vsprintf(&this->str, formatstr, args); return *this; }

  void apply(char (*func)(char input)) { cc_string_apply(&this->str, (cc_apply_f)func); }

  int find(const SbString & s) const;
  SbBool findAll(const SbString & s, SbIntList & found) const;

  friend int operator==(const SbString & sbstr, const char * s);
  friend int operator==(const char * s, const SbString & sbstr);
  friend int operator==(const SbString & str1, const SbString & str2);
  friend int operator!=(const SbString & sbstr, const char * s);
  friend int operator!=(const char * s, const SbString & sbstr);
  friend int operator!=(const SbString & str1, const SbString & str2);

private:
  struct cc_string str;
};

inline int operator==(const SbString & sbstr, const char * s)
{ return (cc_string_compare_text(sbstr.str.pointer, s) == 0); }
inline int operator==(const char * s, const SbString & sbstr)
{ return (cc_string_compare_text(s, sbstr.str.pointer) == 0); }
inline int operator==(const SbString & str1, const SbString & str2)
{ return (cc_string_compare_text(str1.str.pointer, str2.str.pointer) == 0); }

inline int operator!=(const SbString & sbstr, const char * s)
{ return (cc_string_compare_text(sbstr.str.pointer, s) != 0); }
inline int operator!=(const char * s, const SbString & sbstr)
{ return (cc_string_compare_text(s, sbstr.str.pointer) != 0); }
inline int operator!=(const SbString & str1, const SbString & str2)
{ return (cc_string_compare_text(str1.str.pointer, str2.str.pointer) != 0); }



#line 1 "c:\\coin3d\\include\\inventor\\sbname.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 28 "c:\\coin3d\\include\\inventor\\sbname.h"

class SbString;

class __declspec(dllimport) SbName {
public:
  SbName(void);
  SbName(const char * nameString);
  SbName(const SbString & str);
  SbName(const SbName & name);
  ~SbName(void);

  const char * getString(void) const;
  int getLength(void) const;
  static SbBool isIdentStartChar(const char c);
  static SbBool isIdentChar(const char c);
  static SbBool isBaseNameStartChar(const char c);
  static SbBool isBaseNameChar(const char c);

  int operator ! (void) const;
  friend __declspec(dllimport) int operator == (const SbName & lhs, const char * rhs);
  friend __declspec(dllimport) int operator == (const char * lhs, const SbName & rhs);
  friend __declspec(dllimport) int operator == (const SbName & lhs, const SbName & rhs);
  friend __declspec(dllimport) int operator != (const SbName & lhs, const char * rhs);
  friend __declspec(dllimport) int operator != (const char * lhs, const SbName & rhs);
  friend __declspec(dllimport) int operator != (const SbName & lhs, const SbName & rhs);

  operator const char * (void) const;

private:
  const class SbNameEntry * entry;
};
__declspec(dllimport) int operator == (const SbName & lhs, const char * rhs);
__declspec(dllimport) int operator == (const char * lhs, const SbName & rhs);
__declspec(dllimport) int operator == (const SbName & lhs, const SbName & rhs);
__declspec(dllimport) int operator != (const SbName & lhs, const char * rhs);
__declspec(dllimport) int operator != (const char * lhs, const SbName & rhs);
__declspec(dllimport) int operator != (const SbName & lhs, const SbName & rhs);

#line 67 "c:\\coin3d\\include\\inventor\\sbname.h"
#line 138 "c:\\coin3d\\include\\inventor\\sbstring.h"
#line 139 "c:\\coin3d\\include\\inventor\\sbstring.h"

#line 141 "c:\\coin3d\\include\\inventor\\sbstring.h"
#line 57 "c:\\coin3d\\include\\inventor\\qt\\soqt.h"
#line 1 "c:\\coin3d\\include\\inventor\\sodb.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 28 "c:\\coin3d\\include\\inventor\\sodb.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbstring.h"












































































































































#line 29 "c:\\coin3d\\include\\inventor\\sodb.h"
#line 1 "c:\\coin3d\\include\\inventor\\sotype.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 28 "c:\\coin3d\\include\\inventor\\sotype.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbdict.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 28 "c:\\coin3d\\include\\inventor\\sbdict.h"
#line 1 "c:\\coin3d\\include\\inventor\\c\\base\\hash.h"




























#line 1 "c:\\coin3d\\include\\inventor\\c\\basic.h"























































































































































































































































































































#line 30 "c:\\coin3d\\include\\inventor\\c\\base\\hash.h"


extern "C" {
#line 34 "c:\\coin3d\\include\\inventor\\c\\base\\hash.h"

  typedef struct cc_hash cc_hash;
  typedef unsigned long cc_hash_func(const unsigned long key);
  typedef void cc_hash_apply_func(unsigned long key, void * val, void * closure);

  __declspec(dllimport) cc_hash * cc_hash_construct(unsigned int size, float loadfactor);
  __declspec(dllimport) void cc_hash_destruct(cc_hash * ht);
  __declspec(dllimport) void cc_hash_clear(cc_hash * ht);

  __declspec(dllimport) SbBool cc_hash_put(cc_hash * ht, unsigned long key, void * val);
  __declspec(dllimport) SbBool cc_hash_get(cc_hash * ht, unsigned long key, void ** val);
  __declspec(dllimport) SbBool cc_hash_remove(cc_hash * ht, unsigned long key);
  __declspec(dllimport) void cc_hash_apply(cc_hash * ht, cc_hash_apply_func * func, void * closure);

  __declspec(dllimport) unsigned int cc_hash_get_num_elements(cc_hash * ht);

  __declspec(dllimport) void cc_hash_set_hash_func(cc_hash * ht, cc_hash_func * func);
  __declspec(dllimport) void cc_hash_print_stat(cc_hash * ht);




} 
#line 58 "c:\\coin3d\\include\\inventor\\c\\base\\hash.h"

#line 60 "c:\\coin3d\\include\\inventor\\c\\base\\hash.h"
#line 29 "c:\\coin3d\\include\\inventor\\sbdict.h"


class SbPList;

class __declspec(dllimport) SbDict {
public:
  SbDict(const int entries = 251);
  SbDict(const SbDict & from);
  ~SbDict();

  SbDict & operator=(const SbDict & from);

  void applyToAll(void (* rtn)(unsigned long key, void * value)) const;
  void applyToAll(void (* rtn)(unsigned long key, void * value, void * data),
                  void * data) const;
  void clear(void);

  SbBool enter(const unsigned long key, void * const value);
  SbBool find(const unsigned long key, void *& value) const;
  void makePList(SbPList & keys, SbPList & values);
  SbBool remove(const unsigned long key);

  void setHashingFunction(unsigned long (*func)(const unsigned long key));

private:
  cc_hash * hashtable;
  static void copyval(unsigned long key, void * value, void * data);
};

#line 59 "c:\\coin3d\\include\\inventor\\sbdict.h"
#line 29 "c:\\coin3d\\include\\inventor\\sotype.h"


class SbName;
class SoTypedObject;
class SoTypeList;
class SoFieldData;
struct SoTypeData;
template <class Type> class SbList;

class __declspec(dllimport) SoType {
public:
  typedef void * (*instantiationMethod)(void);

  static SoType fromName(const SbName name);
  SbName getName(void) const;
  const SoType getParent(void) const;
  SbBool isDerivedFrom(const SoType type) const;

  static int getAllDerivedFrom(const SoType type, SoTypeList & list);

  SbBool canCreateInstance(void) const;
  void * createInstance(void) const;

  uint16_t getData(void) const;
  int16_t getKey(void) const;

  SbBool operator == (const SoType type) const;
  SbBool operator != (const SoType type) const;

  SbBool operator <  (const SoType type) const;
  SbBool operator <= (const SoType type) const;
  SbBool operator >= (const SoType type) const;
  SbBool operator >  (const SoType type) const;

  static const SoType createType(const SoType parent, const SbName name,
                                 const instantiationMethod method = (instantiationMethod) 0,
                                 const uint16_t data = 0);

  static const SoType overrideType(const SoType originalType,
                                   const instantiationMethod method = (instantiationMethod) 0);

  static void init(void);

  static SoType fromKey(uint16_t key);
  static SoType badType(void);
  SbBool isBad(void) const;

  void makeInternal(void);
  SbBool isInternal(void) const;

  static int getNumTypes(void);

  instantiationMethod getInstantiationMethod(void) const;

private:
  static void clean(void);

  int16_t index;

  static SbList<SoTypeData *> * typedatalist;
  static SbDict * typedict;
  static SbDict * moduledict;
};



inline int16_t
SoType::getKey(void) const
{
  return this->index;
}

inline SbBool
SoType::operator != (const SoType type) const
{
  return (this->getKey() != type.getKey());
}

inline SbBool
SoType::operator == (const SoType type) const
{
  return (this->getKey() == type.getKey());
}

inline SbBool
SoType::operator <  (const SoType type) const
{
  return (this->getKey() < type.getKey());
}

inline SbBool
SoType::operator <= (const SoType type) const
{
  return (this->getKey() <= type.getKey());
}

inline SbBool
SoType::operator >= (const SoType type) const
{
  return (this->getKey() >= type.getKey());
}

inline SbBool
SoType::operator >  (const SoType type) const
{
  return (this->getKey() > type.getKey());
}

inline SbBool
SoType::isBad(void) const
{
  return (this->index == 0);
}

#line 144 "c:\\coin3d\\include\\inventor\\sotype.h"
#line 30 "c:\\coin3d\\include\\inventor\\sodb.h"
#line 1 "c:\\coin3d\\include\\inventor\\sensors\\sosensormanager.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 28 "c:\\coin3d\\include\\inventor\\sensors\\sosensormanager.h"

class SoDelayQueueSensor;
class SoTimerQueueSensor;
class SoTimerSensor;
class SbTime;

class __declspec(dllimport) SoSensorManager {
public:
  SoSensorManager(void);
  ~SoSensorManager();

  void insertDelaySensor(SoDelayQueueSensor * s);
  void insertTimerSensor(SoTimerQueueSensor * s);
  void removeDelaySensor(SoDelayQueueSensor * s);
  void removeTimerSensor(SoTimerQueueSensor * s);

  void setChangedCallback(void (*func)(void *), void * data);

  void rescheduleTimer(SoTimerSensor * s);
  void removeRescheduledTimer(SoTimerQueueSensor * s);

  void processDelayQueue(SbBool isidle);
  void processImmediateQueue(void);
  void processTimerQueue(void);

  SbBool isDelaySensorPending(void);
  SbBool isTimerSensorPending(SbTime & tm);

  void setDelaySensorTimeout(const SbTime & t);
  const SbTime & getDelaySensorTimeout(void);

  int doSelect(int nfds, void * readfds, void * writefds,
               void * exceptfds, struct timeval * userTimeOut);

private:
  void notifyChanged(void);

  int mergeTimerQueues(void);
  int mergeDelayQueues(void);
  
  class SoSensorManagerP * pimpl;
  friend class SoSensorManagerP;
};

#line 73 "c:\\coin3d\\include\\inventor\\sensors\\sosensormanager.h"
#line 31 "c:\\coin3d\\include\\inventor\\sodb.h"

class SbName;
class SbTime;
class SoBase;
class SoField;
class SoInput;
class SoNode;
class SoPath;
class SoSeparator;
class SoVRMLGroup;
class SoGroup;

typedef void SoDBHeaderCB(void * data, SoInput * in);


class __declspec(dllimport) SoDB {
public:
  static void init(void);
  static void cleanup(void);

  static const char * getVersion(void);
  static SbBool read(SoInput * in, SoPath *& path);
  static SbBool read(SoInput * in, SoBase *& base);
  static SbBool read(SoInput * in, SoNode *& rootnode);
  static SoSeparator * readAll(SoInput * in);
  static SoVRMLGroup * readAllVRML(SoInput * in);
  static SbBool isValidHeader(const char * teststring);
  static SbBool registerHeader(const SbString & headerstring,
                               SbBool isbinary,
                               float ivversion,
                               SoDBHeaderCB * precallback,
                               SoDBHeaderCB * postcallback,
                               void * userdata = 0);
  static SbBool getHeaderData(const SbString & headerstring,
                              SbBool & isbinary,
                              float & ivversion,
                              SoDBHeaderCB *& precallback,
                              SoDBHeaderCB *& postcallback,
                              void *& userdata,
                              SbBool substringok = 0);
  static int getNumHeaders(void);
  static SbString getHeaderString(const int i);
  static SoField * createGlobalField(const SbName & name, SoType type);
  static SoField * getGlobalField(const SbName & name);
  static void renameGlobalField(const SbName & from, const SbName & to);

  static void setRealTimeInterval(const SbTime & interval);
  static const SbTime & getRealTimeInterval(void);
  static void enableRealTimeSensor(SbBool on);

  static SoSensorManager * getSensorManager(void);
  static void setDelaySensorTimeout(const SbTime & t);
  static const SbTime & getDelaySensorTimeout(void);
  static int doSelect(int nfds, void * readfds, void * writefds,
                      void * exceptfds, struct timeval * usertimeout);

  static void addConverter(SoType from, SoType to, SoType converter);
  static SoType getConverter(SoType from, SoType to);

  static SbBool isInitialized(void);

  static void startNotify(void);
  static SbBool isNotifying(void);
  static void endNotify(void);

  typedef SbBool ProgressCallbackType(const SbName & itemid, float fraction,
                                      SbBool interruptible, void * userdata);
  static void addProgressCallback(ProgressCallbackType * func, void * userdata);
  static void removeProgressCallback(ProgressCallbackType * func, void * userdata);

  static SbBool isMultiThread(void);
  static void readlock(void);
  static void readunlock(void);
  static void writelock(void);
  static void writeunlock(void);

private:
  static SoGroup * readAllWrapper(SoInput * in, const SoType & grouptype);
};

#line 112 "c:\\coin3d\\include\\inventor\\sodb.h"
#line 58 "c:\\coin3d\\include\\inventor\\qt\\soqt.h"
#line 1 "c:\\coin3d\\include\\inventor\\errors\\sodebugerror.h"


























#line 1 "c:\\coin3d\\include\\inventor\\errors\\soerror.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 28 "c:\\coin3d\\include\\inventor\\errors\\soerror.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbstring.h"












































































































































#line 29 "c:\\coin3d\\include\\inventor\\errors\\soerror.h"
#line 1 "c:\\coin3d\\include\\inventor\\c\\errors\\error.h"






























#line 1 "c:\\coin3d\\include\\inventor\\c\\base\\string.h"






























































































#line 32 "c:\\coin3d\\include\\inventor\\c\\errors\\error.h"



extern "C" {
#line 37 "c:\\coin3d\\include\\inventor\\c\\errors\\error.h"



typedef struct cc_error {
  cc_string debugstring;
} cc_error;

typedef void cc_error_cb(const cc_error * err, void * data);



__declspec(dllimport) void cc_error_init(cc_error * me);
__declspec(dllimport) void cc_error_clean(cc_error * me);
__declspec(dllimport) void cc_error_copy(const cc_error * src, cc_error * dst);

  
__declspec(dllimport) const cc_string * cc_error_get_debug_string(const cc_error * me);



__declspec(dllimport) void cc_error_set_handler_callback(cc_error_cb * func, void * data);



__declspec(dllimport) cc_error_cb * cc_error_get_handler_callback(void);



__declspec(dllimport) void * cc_error_get_handler_data(void);


__declspec(dllimport) void cc_error_post(const char * format, ...);
__declspec(dllimport) void cc_error_post_arglist(const char * format, va_list args);

  
  

__declspec(dllimport) void cc_error_set_debug_string(cc_error * me, const char * str);

  
  

__declspec(dllimport) void cc_error_append_to_debug_string(cc_error * me, const char * str);

  
  

__declspec(dllimport) void cc_error_handle(cc_error * me);

  
  
__declspec(dllimport) cc_error_cb * cc_error_get_handler(void ** data);

  
  
__declspec(dllimport) void cc_error_default_handler_cb(const cc_error * err, void * data);




} 
#line 99 "c:\\coin3d\\include\\inventor\\c\\errors\\error.h"

#line 101 "c:\\coin3d\\include\\inventor\\c\\errors\\error.h"
#line 30 "c:\\coin3d\\include\\inventor\\errors\\soerror.h"
#line 1 "c:\\coin3d\\include\\inventor\\sotype.h"















































































































































#line 31 "c:\\coin3d\\include\\inventor\\errors\\soerror.h"

class SoBase;
class SoNode;
class SoPath;
class SoEngine;

typedef void SoErrorCB(const class SoError * error, void * data);
typedef SoErrorCB * SoErrorCBPtr;


class __declspec(dllimport) SoError {
public:
  SoError(void) { cc_error_init(&this->err); }
  virtual ~SoError() { cc_error_clean(&this->err); }

  static void setHandlerCallback(SoErrorCB * const func, void * const data);
  static SoErrorCB * getHandlerCallback(void);
  static void * getHandlerData(void);

  const SbString & getDebugString(void) const;

  static SoType getClassTypeId(void);
  virtual SoType getTypeId(void) const;
  SbBool isOfType(const SoType type) const;

  static void post(const char * const format, ...);

  static SbString getString(const SoNode * const node);
  static SbString getString(const SoPath * const path);
  static SbString getString(const SoEngine * const engine);

  static void initClass(void);
  static void initClasses(void);

protected:
  static void defaultHandlerCB(const SoError * error, void * userdata);
  virtual SoErrorCBPtr getHandler(void * & data) const;

  void setDebugString(const char * const str);
  void appendToDebugString(const char * const str);

  void handleError(void);

private:
  SoError(const cc_error * error);
  static void generateBaseString(SbString & str, const SoBase * const base,
                                 const char * const what);

  static void callbackForwarder(const cc_error * err, void * data);

  static SoType classTypeId;
  static SoErrorCB * callback;
  static void * callbackData;
  SbString debugstring;

  cc_error err;
};

#line 90 "c:\\coin3d\\include\\inventor\\errors\\soerror.h"
#line 28 "c:\\coin3d\\include\\inventor\\errors\\sodebugerror.h"






#line 35 "c:\\coin3d\\include\\inventor\\errors\\sodebugerror.h"


class __declspec(dllimport) SoDebugError : public SoError {
  typedef SoError inherited;

public:
  enum Severity { ERROR, WARNING, INFO };

  static void setHandlerCallback(SoErrorCB * const function,
                                 void * const data);
  static SoErrorCB * getHandlerCallback(void);
  static void * getHandlerData(void);

  static SoType getClassTypeId(void);
  virtual SoType getTypeId(void) const;

  SoDebugError::Severity getSeverity(void) const;

  static void post(const char * const source, const char * const format, ...);
  static void postWarning(const char * const source, const char * const format, ...);
  static void postInfo(const char * const source, const char * const format, ...);

  static void initClass(void);

protected:
  virtual SoErrorCBPtr getHandler(void * & data) const;

private:
  static void callbackForwarder(const struct cc_debugerror * error, void * data);
  static void commonPostHandling(Severity severity, const char * type,
                                 const char * source, const SbString & s);

  static SoType classTypeId;
  static SoErrorCB * callback;
  static void * callbackData;
  Severity severity;
};





#line 78 "c:\\coin3d\\include\\inventor\\errors\\sodebugerror.h"

#line 80 "c:\\coin3d\\include\\inventor\\errors\\sodebugerror.h"
#line 59 "c:\\coin3d\\include\\inventor\\qt\\soqt.h"



class __declspec(dllimport) SoQt
{

public:
  static QWidget * init(const char * appname, const char * classname = "SoQt");
  static QWidget * init(int & argc, char ** argv,
                       const char * appname, const char * classname = "SoQt");
  static void init(QWidget * toplevelwidget);

  static void mainLoop(void);
  static void exitMainLoop(void);
  static void done(void);

  static QWidget * getTopLevelWidget(void);
  static QWidget * getShellWidget(const QWidget * w);

  static void show(QWidget * const widget);
  static void hide(QWidget * const widget);

  static void setWidgetSize(QWidget * const widget, const SbVec2s size);
  static SbVec2s getWidgetSize(const QWidget * widget);

  static void createSimpleErrorDialog(QWidget * widget,
                                      const char * title,
                                      const char * string1,
                                      const char * string2 = 0);

  static void getVersionInfo(int * major = 0,
                             int * minor = 0,
                             int * micro = 0);
  static const char * getVersionString(void);

  enum FatalErrors {
    UNSPECIFIED_ERROR = 0,
    NO_OPENGL_CANVAS,
    INTERNAL_ASSERT
  };
  typedef void FatalErrorCB(const SbString errmsg, SoQt::FatalErrors errcode,
                            void * userdata);
  static FatalErrorCB * setFatalErrorHandler(SoQt::FatalErrorCB * cb,
                                             void * userdata);

  static SbBool isDebugLibrary(void);
  static SbBool isCompatible(unsigned int major, unsigned int minor);

  enum ABIType { DLL, LIB, UNKNOWN };
  static ABIType getABIType(void);

private:
  
  
  
  SoQt(void);
  virtual ~SoQt();


  friend class SoGuiP;
  friend class SoQtP;
#line 121 "c:\\coin3d\\include\\inventor\\qt\\soqt.h"
























































































};



#line 214 "c:\\coin3d\\include\\inventor\\qt\\soqt.h"
#line 5 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\socube.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sbname.h"


































































#line 28 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"
#line 1 "c:\\coin3d\\include\\inventor\\sotype.h"















































































































































#line 29 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sofielddata.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 28 "c:\\coin3d\\include\\inventor\\fields\\sofielddata.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\sblist.h"


























#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"















#line 17 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"



















#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"




















extern "C" {
#line 59 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"

__declspec(dllimport) void __cdecl _assert(void *, void *, unsigned);


}
#line 65 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"



#line 69 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"
#line 28 "c:\\coin3d\\include\\inventor\\lists\\sblist.h"

#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 30 "c:\\coin3d\\include\\inventor\\lists\\sblist.h"












#pragma warning(disable:4251)
#pragma warning(disable:4275)
#line 45 "c:\\coin3d\\include\\inventor\\lists\\sblist.h"

template <class Type>
class SbList {
  
  
  
  enum { DEFAULTSIZE = 4 };

public:

  SbList(const int sizehint = DEFAULTSIZE)
    : itembuffersize(DEFAULTSIZE), numitems(0), itembuffer(builtinbuffer) {
    if (sizehint > DEFAULTSIZE) this->grow(sizehint);
  }

  SbList(const SbList<Type> & l)
    : itembuffersize(DEFAULTSIZE), numitems(0), itembuffer(builtinbuffer) {
    this->copy(l);
  }

  ~SbList() {
    if (this->itembuffer != builtinbuffer) delete[] this->itembuffer;
  }

  void copy(const SbList<Type> & l) {
    if (this == &l) return;
    const int n = l.numitems;
    this->expand(n);
    for (int i = 0; i < n; i++) this->itembuffer[i] = l.itembuffer[i];
  }

  SbList <Type> & operator=(const SbList<Type> & l) {
    this->copy(l);
    return *this;
  }

  void fit(void) {
    const int items = this->numitems;

    if (items < this->itembuffersize) {
      Type * newitembuffer = this->builtinbuffer;
      if (items > DEFAULTSIZE) newitembuffer = new Type[items];

      if (newitembuffer != this->itembuffer) {
        for (int i = 0; i < items; i++) newitembuffer[i] = this->itembuffer[i];
      }

      if (this->itembuffer != this->builtinbuffer) delete[] this->itembuffer;
      this->itembuffer = newitembuffer;
      this->itembuffersize = items > DEFAULTSIZE ? items : DEFAULTSIZE;
    }
  }

  void append(const Type item) {
    if (this->numitems == this->itembuffersize) this->grow();
    this->itembuffer[this->numitems++] = item;
  }

  int find(const Type item) const {
    for (int i = 0; i < this->numitems; i++)
      if (this->itembuffer[i] == item) return i;
    return -1;
  }

  void insert(const Type item, const int insertbefore) {



    if (this->numitems == this->itembuffersize) this->grow();

    for (int i = this->numitems; i > insertbefore; i--)
      this->itembuffer[i] = this->itembuffer[i-1];
    this->itembuffer[insertbefore] = item;
    this->numitems++;
  }

  void removeItem(const Type item) {
    int idx = this->find(item);



    this->remove(idx);
  }

  void remove(const int index) {



    this->numitems--;
    for (int i = index; i < this->numitems; i++)
      this->itembuffer[i] = this->itembuffer[i + 1];
  }

  void removeFast(const int index) {



    this->itembuffer[index] = this->itembuffer[--this->numitems];
  }

  int getLength(void) const {
    return this->numitems;
  }

  void truncate(const int length, const int dofit = 0) {



    this->numitems = length;
    if (dofit) this->fit();
  }

  void push(const Type item) {
    this->append(item);
  }

  Type pop(void) {



    return this->itembuffer[--this->numitems];
  }

  const Type * getArrayPtr(const int start = 0) const {
    return &this->itembuffer[start];
  }

  Type operator[](const int index) const {



    return this->itembuffer[index];
  }

  Type & operator[](const int index) {



    return this->itembuffer[index];
  }

  int operator==(const SbList<Type> & l) const {
    if (this == &l) return 1;
    if (this->numitems != l.numitems) return 0;
    for (int i = 0; i < this->numitems; i++)
      if (this->itembuffer[i] != l.itembuffer[i]) return 0;
    return 1;
  }

  int operator!=(const SbList<Type> & l) const {
    return !(*this == l);
  }

protected:

  void expand(const int size) {
    this->grow(size);
    this->numitems = size;
  }

  int getArraySize(void) const {
    return this->itembuffersize;
  }

private:
  void grow(const int size = -1) {
    
    if (size == -1) this->itembuffersize <<= 1;
    else if (size <= this->itembuffersize) return;
    else { this->itembuffersize = size; }

    Type * newbuffer = new Type[this->itembuffersize];
    const int n = this->numitems;
    for (int i = 0; i < n; i++) newbuffer[i] = this->itembuffer[i];
    if (this->itembuffer != this->builtinbuffer) delete[] this->itembuffer;
    this->itembuffer = newbuffer;
  }

  int itembuffersize;
  int numitems;
  Type * itembuffer;
  Type builtinbuffer[DEFAULTSIZE];
};

#line 230 "c:\\coin3d\\include\\inventor\\lists\\sblist.h"
#line 29 "c:\\coin3d\\include\\inventor\\fields\\sofielddata.h"

class SbName;
class SoField;
class SoFieldContainer;
class SoInput;
class SoOutput;

class SoEnumEntry;
class SoFieldEntry;

class __declspec(dllimport) SoFieldData {
public:
  SoFieldData(void);
  SoFieldData(const SoFieldData & fd);
  SoFieldData(const SoFieldData * fd);
  SoFieldData(int numfields);
  ~SoFieldData();

  void addField(SoFieldContainer * base, const char * name,
                const SoField * field);

  void overlay(SoFieldContainer * to, const SoFieldContainer * from,
               SbBool copyconnections) const;

  int getNumFields(void) const;
  const SbName & getFieldName(int index) const;
  SoField * getField(const SoFieldContainer * object, int index) const;
  int getIndex(const SoFieldContainer * fc, const SoField * field) const;

  void addEnumValue(const char * enumname, const char * valuename, int value);
  void getEnumData(const char * enumname,
                   int & num, const int *& values, const SbName *& names);

  SbBool read(SoInput * in, SoFieldContainer * object,
              SbBool erroronunknownfield, SbBool & notbuiltin) const;
  SbBool read(SoInput * in, SoFieldContainer * object,
              const SbName & fieldname, SbBool & foundname) const;
  void write(SoOutput * out, const SoFieldContainer * object) const;
  void copy(const SoFieldData * src);
  SbBool isSame(const SoFieldContainer * c1,
                const SoFieldContainer * c2) const;

  SbBool readFieldDescriptions(SoInput * in, SoFieldContainer * object,
                               int numdescriptionsexpected,
                               const SbBool readfieldvalues = 1) const;
  void writeFieldDescriptions(SoOutput * out,
                              const SoFieldContainer * object) const;

private:
  SbBool hasField(const char * name) const;
  SbBool hasEnumValue(const char * enumname, const char * valuename);

  
  enum ControlWord {
    NOTBUILTIN = 0x40
  };

  int operator==(const SoFieldData * fd) const;
  int operator!=(const SoFieldData * fd) const { return ! operator==(fd); }
  int operator==(const SoFieldData & fd) const { return operator==(&fd); }
  int operator!=(const SoFieldData & fd) const { return ! operator==(&fd); }

  void freeResources(void);

  SbList<SoFieldEntry *> fields;
  SbList<SoEnumEntry *> enums;
};

#line 98 "c:\\coin3d\\include\\inventor\\fields\\sofielddata.h"
#line 30 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sonode.h"


























#line 1 "c:\\coin3d\\include\\inventor\\fields\\sofieldcontainer.h"


























#line 1 "c:\\coin3d\\include\\inventor\\misc\\sobase.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sotype.h"















































































































































#line 28 "c:\\coin3d\\include\\inventor\\misc\\sobase.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\soauditorlist.h"


























#line 1 "c:\\coin3d\\include\\inventor\\lists\\sbplist.h"
































































































































































#line 28 "c:\\coin3d\\include\\inventor\\lists\\soauditorlist.h"
#line 1 "c:\\coin3d\\include\\inventor\\misc\\sonotification.h"


























#line 1 "c:\\coin3d\\include\\inventor\\misc\\sonotrec.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 28 "c:\\coin3d\\include\\inventor\\misc\\sonotrec.h"


class SoBase;


class __declspec(dllimport) SoNotRec {
public:
  enum Type {
    CONTAINER,
    PARENT,
    SENSOR,
    FIELD,
    ENGINE
  };

  SoNotRec(SoBase * const notifbase);
  void setType(const SoNotRec::Type type);
  SoBase * getBase(void) const;
  SoNotRec::Type getType(void) const;
  const SoNotRec * getPrevious(void) const;
  void setPrevious(const SoNotRec * const prev);
  void print(FILE * const file) const;

private:
  Type type;
  SoBase * base;
  const SoNotRec * prev;
};

#line 58 "c:\\coin3d\\include\\inventor\\misc\\sonotrec.h"
#line 28 "c:\\coin3d\\include\\inventor\\misc\\sonotification.h"


class SoEngineOutput;
class SoField;


class __declspec(dllimport) SoNotList {
public:
  SoNotList(void);
  SoNotList(const SoNotList * nl);

  void append(SoNotRec * const rec);
  void append(SoNotRec * const rec, SoField * const field);
  void append(SoNotRec * const rec, SoEngineOutput * const engineout);
  void setLastType(const SoNotRec::Type type);
  SoNotRec * getFirstRec(void) const;
  SoNotRec * getLastRec(void) const;
  SoNotRec * getFirstRecAtNode(void) const;
  SoField * getLastField(void) const;
  SoEngineOutput * getLastEngineOutput(void) const;
  uint32_t getTimeStamp(void) const;

  void print(FILE * const file = (&_iob[1])) const;

private:
  SoNotRec * head;
  SoNotRec * tail;
  SoNotRec * firstnoderec;
  SoField * lastfield;
  SoEngineOutput * lastengine;
  uint32_t stamp;
};

#line 62 "c:\\coin3d\\include\\inventor\\misc\\sonotification.h"
#line 29 "c:\\coin3d\\include\\inventor\\lists\\soauditorlist.h"














class __declspec(dllimport) SoAuditorList : private SbPList {
  typedef SbPList inherited;

public:
  SoAuditorList(void);
  ~SoAuditorList();

  void append(void * const auditor, const SoNotRec::Type type);

  void set(const int index, void * const auditor, const SoNotRec::Type type);
  void * getObject(const int index) const;
  SoNotRec::Type getType(const int index) const;

  int getLength(void) const;
  int find(void * const auditor, const SoNotRec::Type type) const;

  void remove(const int index);
  void remove(void * const auditor, const SoNotRec::Type type);

  void notify(SoNotList * l);

private:
  
  
  SoAuditorList(const int) { }
  SoAuditorList(const SoAuditorList & l) : SbPList(l) { }
  void * get(const int) const { return 0; }
  void set(const int, void * const) { }
  void copy(const SbPList &) { }
  void append(const void *) { }
  int find(const void *) const { return -1; }
  void insert(const void *, const int) { }
  void removeFast(const int) { }
  void truncate(const int, const int = 0) { }
  void push(const void *) { }
  void * pop(void) { return 0; }
  SbPList & operator=(const SbPList &) { return *this; }
  operator void ** (void) { return (void **) 0; }
  operator const void ** (void) const { return (const void **) 0; }
  void * operator[](const int) const { return 0; }
  void * & operator[](const int) { return SbPList::operator[](0); }
  int operator==(const SbPList &) const { return 0; }
  int operator!=(const SbPList &) const { return 0; }

  void doNotify(SoNotList * l, const void * auditor, const SoNotRec::Type type);

};

#line 92 "c:\\coin3d\\include\\inventor\\lists\\soauditorlist.h"
#line 29 "c:\\coin3d\\include\\inventor\\misc\\sobase.h"
#line 1 "c:\\coin3d\\include\\inventor\\c\\base\\rbptree.h"


























#line 1 "c:\\coin3d\\include\\inventor\\c\\basic.h"























































































































































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\c\\base\\rbptree.h"




extern "C" {
#line 34 "c:\\coin3d\\include\\inventor\\c\\base\\rbptree.h"


typedef struct cc_rbptree_node cc_rbptree_node;

typedef struct cc_rbptree {
  cc_rbptree_node * root;
  
  
  void * inlinepointer[2];
  void * inlinedata[2];
  uint32_t counter;
} cc_rbptree;

void cc_rbptree_init(cc_rbptree * t);
void cc_rbptree_clean(cc_rbptree * t);

void cc_rbptree_insert(cc_rbptree * t, void * p, void * data);
SbBool cc_rbptree_remove(cc_rbptree * t, void * p);
uint32_t cc_rbptree_size(const cc_rbptree * t);


typedef void cc_rbptree_traversecb(void * p, void * data, void * closure);
void cc_rbptree_traverse(const cc_rbptree * t, cc_rbptree_traversecb * func, void * closure);


void cc_rbptree_debug(const cc_rbptree * t);


} 
#line 64 "c:\\coin3d\\include\\inventor\\c\\base\\rbptree.h"

#line 66 "c:\\coin3d\\include\\inventor\\c\\base\\rbptree.h"
#line 30 "c:\\coin3d\\include\\inventor\\misc\\sobase.h"

class SbString;
class SoBaseList;
class SoInput;
class SoOutput;

class __declspec(dllimport) SoBase {

public:
  static void initClass(void);

  void ref(void) const;
  void unref(void) const;
  void unrefNoDelete(void) const;
  int32_t getRefCount(void) const;

  void touch(void);

  virtual SoType getTypeId(void) const = 0;
  SbBool isOfType(SoType type) const;
  static SoType getClassTypeId(void);

  virtual SbName getName(void) const;
  virtual void setName(const SbName & newname);

  static void addName(SoBase * const base, const char * const name);
  static void removeName(SoBase * const base, const char * const name);

  virtual void startNotify(void);
  virtual void notify(SoNotList * l);

  void addAuditor(void * const auditor, const SoNotRec::Type type);
  void removeAuditor(void * const auditor, const SoNotRec::Type type);
  const SoAuditorList & getAuditors(void) const;

  virtual void addWriteReference(SoOutput * out, SbBool isfromfield = 0);
  SbBool shouldWrite(void);

  static void incrementCurrentWriteCounter(void);
  static void decrementCurrentWriteCounter(void);

  static SoBase * getNamedBase(const SbName & name, SoType type);
  static int getNamedBases(const SbName & name, SoBaseList & baselist,
                           SoType type);

  static SbBool read(SoInput * in, SoBase *& base, SoType expectedtype);
  static void setInstancePrefix(const SbString & c);

  static void setTraceRefs(SbBool trace);
  static SbBool getTraceRefs(void);

  static SbBool connectRoute(SoInput * in,
                             const SbName & fromnodename, const SbName & fromfieldname,
                             const SbName & tonodename, const SbName & tofieldname);

  void assertAlive(void) const;
  static SbBool readRoute(SoInput * in);

protected:
  
  enum BaseFlags { IS_ENGINE = 0x01, IS_GROUP = 0x02 };

  SoBase(void);
  virtual ~SoBase();

  virtual void destroy(void);

  SbBool hasMultipleWriteRefs(void) const;
  SbBool writeHeader(SoOutput * out, SbBool isgroup, SbBool isengine) const;
  void writeFooter(SoOutput * out) const;
  virtual const char * getFileFormatName(void) const;

  virtual SbBool readInstance(SoInput * in, unsigned short flags) = 0;

  static uint32_t getCurrentWriteCounter(void);
  static void staticDataLock(void);
  static void staticDataUnlock(void);

private:
  static SbBool readReference(SoInput * in, SoBase *& base);
  static SbBool readBase(SoInput * in, SbName & classname, SoBase *& base);
  static SbBool readBaseInstance(SoInput * in, const SbName & classname,
                                 const SbName & refname, SoBase *& base);

  static SoBase * createInstance(SoInput * in, const SbName & classname);
  static void flushInput(SoInput * in);

  static void cleanClass(void);
  static void freeLists(unsigned long, void * value);

  static SoType classTypeId;

  struct {
    int32_t referencecount  : 27;
    unsigned int ingraph    :  1;
    unsigned int alive      :  4;
    
    
  } objdata;

  void doNotify(SoNotList * l, const void * auditor, const SoNotRec::Type type);
  static void rbptree_notify_cb(void * auditor, void * type, void * closure);
  cc_rbptree auditortree;

  static SbDict * name2obj;
  static SbDict * obj2name;

  static SbString * refwriteprefix;

  static SbBool tracerefs;
  static uint32_t writecounter;
};

#line 144 "c:\\coin3d\\include\\inventor\\misc\\sobase.h"
#line 28 "c:\\coin3d\\include\\inventor\\fields\\sofieldcontainer.h"

class SbString;
class SoFieldData;
class SoFieldList;
class SoOutput;


class __declspec(dllimport) SoFieldContainer : public SoBase {
  typedef SoBase inherited;

public:
  static void initClass(void);
  static SoType getClassTypeId(void);

  void setToDefaults(void);
  SbBool hasDefaultValues(void) const;

  SbBool fieldsAreEqual(const SoFieldContainer * container) const;
  void copyFieldValues(const SoFieldContainer * container,
                       SbBool copyconnections = 0);

  SbBool set(const char * const fielddata);
  void get(SbString & fielddata);

  virtual int getFields(SoFieldList & l) const;
  virtual int getAllFields(SoFieldList & l) const;
  virtual SoField * getField(const SbName & name) const;
  virtual SoField * getEventIn(const SbName & name) const;
  virtual SoField * getEventOut(const SbName & name) const;
  SbBool getFieldName(const SoField * const field, SbName & name) const;

  SbBool enableNotify(const SbBool flag);
  SbBool isNotifyEnabled(void) const;

  SbBool set(const char * fielddata, SoInput * in);
  void get(SbString & fielddata, SoOutput * out);

  virtual void notify(SoNotList * l);

  virtual SbBool validateNewFieldValue(SoField * field, void * newval);

  virtual void addWriteReference(SoOutput * out, SbBool isfromfield = 0);
  virtual void writeInstance(SoOutput * out);

  SbBool getIsBuiltIn(void) const;
  virtual const SoFieldData * getFieldData(void) const;

  virtual void copyContents(const SoFieldContainer * from,
                            SbBool copyconnections);
  virtual SoFieldContainer * copyThroughConnection(void) const;

  static void initCopyDict(void);
  static void addCopy(const SoFieldContainer * orig,
                      const SoFieldContainer * copy);
  static SoFieldContainer * checkCopy(const SoFieldContainer * orig);
  static SoFieldContainer * findCopy(const SoFieldContainer * orig,
                                     const SbBool copyconnections);
  static void copyDone(void);

  void setUserData(void * userdata) const;
  void * getUserData(void) const;

protected:
  SoFieldContainer(void);
  ~SoFieldContainer();

  virtual SbBool readInstance(SoInput * in, unsigned short flags);
  SbBool isBuiltIn;

private:
  static SoType classTypeId;
  SbBool donotify;
};

#line 103 "c:\\coin3d\\include\\inventor\\fields\\sofieldcontainer.h"
#line 28 "c:\\coin3d\\include\\inventor\\nodes\\sonode.h"

class SoAction;
class SoCallbackAction;
class SoChildList;
class SoGLRenderAction;
class SoGetBoundingBoxAction;
class SoGetMatrixAction;
class SoGetPrimitiveCountAction;
class SoHandleEventAction;
class SoNodeList;
class SoNotList;
class SoOutput;
class SoPickAction;
class SoRayPickAction;
class SoSearchAction;
class SoWriteAction;
class SoAudioRenderAction;
class SbDict;

class __declspec(dllimport) SoNode : public SoFieldContainer {
  typedef SoFieldContainer inherited;

public:
  

  enum Stage { FIRST_INSTANCE, PROTO_INSTANCE, OTHER_INSTANCE };
#line 55 "c:\\coin3d\\include\\inventor\\nodes\\sonode.h"

  void setOverride(const SbBool state);
  SbBool isOverride(void) const;

  enum NodeType {
    INVENTOR     = 0x0000,
    VRML1        = 0x0001,
    VRML2        = 0x0002,
    INVENTOR_1   = 0x0004,
    INVENTOR_2_0 = 0x0008,
    INVENTOR_2_1 = 0x0010,
    INVENTOR_2_5 = 0x0020,
    INVENTOR_2_6 = 0x0040,
    COIN_1_0     = 0x0080,
    COIN_2_0     = 0x0100,
    EXTENSION    = 0x0200,
    COIN_2_2     = 0x0400,
    COIN_2_3     = 0x0800
  };

  static uint32_t getCompatibilityTypes(const SoType & nodetype);
  void setNodeType(const NodeType type);
  NodeType getNodeType(void) const;

  virtual SoNode * copy(SbBool copyconnections = 0) const;
  virtual SbBool affectsState(void) const;

  virtual void doAction(SoAction * action);
  virtual void GLRender(SoGLRenderAction * action);
  virtual void GLRenderBelowPath(SoGLRenderAction * action);
  virtual void GLRenderInPath(SoGLRenderAction * action);
  virtual void GLRenderOffPath(SoGLRenderAction * action);
  virtual void callback(SoCallbackAction * action);
  virtual void getBoundingBox(SoGetBoundingBoxAction * action);
  virtual void getMatrix(SoGetMatrixAction * action);
  virtual void handleEvent(SoHandleEventAction * action);
  virtual void pick(SoPickAction * action);
  virtual void rayPick(SoRayPickAction * action);
  virtual void search(SoSearchAction * action);
  virtual void write(SoWriteAction * action);
  virtual void audioRender(SoAudioRenderAction * action);
  virtual void getPrimitiveCount(SoGetPrimitiveCountAction * action);

  virtual void grabEventsSetup(void);
  virtual void grabEventsCleanup(void);

  virtual void startNotify(void);
  virtual void notify(SoNotList * l);

  uint32_t getNodeId(void) const;
  virtual SoChildList * getChildren(void) const;

  virtual void writeInstance(SoOutput * out);
  virtual SoNode * addToCopyDict(void) const;
  virtual void copyContents(const SoFieldContainer * from,
                            SbBool copyconnections);
  virtual SoFieldContainer * copyThroughConnection(void) const;


  static SoType getClassTypeId(void);
  static SoNode * getByName(const SbName & name);
  static int getByName(const SbName & name, SoNodeList & l);

  static void initClass(void);
  static void initClasses(void);

  static uint32_t getNextNodeId(void);
  static int getActionMethodIndex(const SoType type);

  static void getBoundingBoxS(SoAction * action, SoNode * node);
  static void GLRenderS(SoAction * action, SoNode * node);
  static void callbackS(SoAction * action, SoNode * node);
  static void getMatrixS(SoAction * action, SoNode * node);
  static void handleEventS(SoAction * action, SoNode * node);
  static void pickS(SoAction * action, SoNode * node);
  static void rayPickS(SoAction * action, SoNode * node);
  static void searchS(SoAction * action, SoNode * node);
  static void writeS(SoAction * action, SoNode * node);
  static void audioRenderS(SoAction * action, SoNode * node);
  static void getPrimitiveCountS(SoAction * action, SoNode * node);

protected:
  SoNode(void);
  virtual ~SoNode();

  virtual SbBool readInstance(SoInput * in, unsigned short flags);

  static const SoFieldData ** getFieldDataPtr(void);

  
  
  
  
  static void setNextActionMethodIndex(int index);
  static int getNextActionMethodIndex(void);
  static void incNextActionMethodIndex(void);

  static void setCompatibilityTypes(const SoType & nodetype, const uint32_t bitmask);

  uint32_t uniqueId;
  static uint32_t nextUniqueId;
  static int nextActionMethodIndex;

private:
  static SoType classTypeId;
  uint32_t stateflags;
  void clearStateFlags(const unsigned int bits);
  void setStateFlags(const unsigned int bits);
  SbBool getState(const unsigned int bits) const;
  static SbDict * compatibilitydict;
  static void cleanupClass(void);
};

#line 169 "c:\\coin3d\\include\\inventor\\nodes\\sonode.h"
#line 31 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"





























#line 61 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"




























































































































































#line 218 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"
#line 28 "c:\\coin3d\\include\\inventor\\nodes\\socube.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosffloat.h"


























#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfield.h"


























#line 1 "c:\\coin3d\\include\\inventor\\fields\\sofield.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sotype.h"















































































































































#line 28 "c:\\coin3d\\include\\inventor\\fields\\sofield.h"
#line 1 "c:\\coin3d\\include\\inventor\\misc\\sonotification.h"





























































#line 29 "c:\\coin3d\\include\\inventor\\fields\\sofield.h"

class SbString;
class SoEngineOutput;
class SoFieldContainer;
class SoFieldConverter;
class SoFieldList;
class SoInput;
class SoOutput;

class __declspec(dllimport) SoField {

public:
  virtual ~SoField();

  static void initClass(void);
  static void initClasses(void);

  void setIgnored(SbBool ignore);
  SbBool isIgnored(void) const;

  void setDefault(SbBool def);
  SbBool isDefault(void) const;

  virtual SoType getTypeId(void) const = 0;

  static SoType getClassTypeId(void);
  SbBool isOfType(const SoType type) const;

  void enableConnection(SbBool flag);
  SbBool isConnectionEnabled(void) const;

  
  SbBool connectFrom(SoEngineOutput * master,
                     SbBool notnotify = 0, SbBool append = 0);
  SbBool appendConnection(SoEngineOutput * master, SbBool notnotify = 0);
  void disconnect(SoEngineOutput * engineoutput);
  SbBool isConnectedFromEngine(void) const;
  SbBool getConnectedEngine(SoEngineOutput *& master) const;

  
  SbBool connectFrom(SoField * master,
                     SbBool notnotify = 0, SbBool append = 0);
  SbBool appendConnection(SoField * master, SbBool notnotify = 0);
  void disconnect(SoField * field);
  SbBool isConnectedFromField(void) const;
  SbBool getConnectedField(SoField *& master) const;
  int getNumConnections(void) const;
  int getForwardConnections(SoFieldList & slavelist) const;
  int getConnections(SoFieldList & masterlist) const;

  void disconnect(void);
  SbBool isConnected(void) const;

  void setContainer(SoFieldContainer * cont);
  SoFieldContainer * getContainer(void) const;

  SbBool set(const char * valuestring);
  void get(SbString & valuestring);

  SbBool shouldWrite(void) const;

  virtual void touch(void);
  virtual void startNotify(void);
  virtual void notify(SoNotList * nlist);
  SbBool enableNotify(SbBool on);
  SbBool isNotifyEnabled(void) const;

  void addAuditor(void * f, SoNotRec::Type type);
  void removeAuditor(void * f, SoNotRec::Type type);

  int operator ==(const SoField & f) const;
  int operator !=(const SoField & f) const;

  virtual void connectionStatusChanged(int numconnections);
  SbBool isReadOnly(void) const;
  virtual SbBool isSame(const SoField & f) const = 0;
  virtual void copyFrom(const SoField & f) = 0;

  virtual void fixCopy(SbBool copyconnections);
  virtual SbBool referencesCopy(void) const;
  void copyConnection(const SoField * fromfield);

  virtual SbBool read(SoInput * in, const SbName & name);
  virtual void write(SoOutput * out, const SbName & name) const;

  virtual void countWriteRefs(SoOutput * out) const;

  
  enum FieldType {
    NORMAL_FIELD = 0,
    EVENTIN_FIELD,
    EVENTOUT_FIELD,
    EXPOSED_FIELD
  };

  void setFieldType(int type);
  int getFieldType(void) const;

  SbBool getDirty(void) const;
  void setDirty(SbBool dirty);

  void evaluate(void) const {
    if ((this->statusbits & (FLAG_EXTSTORAGE|FLAG_NEEDEVALUATION)) == 
        (FLAG_EXTSTORAGE|FLAG_NEEDEVALUATION)) this->evaluateField();
  }

protected:
  SoField(void);

  void valueChanged(SbBool resetdefault = 1);
  virtual void evaluateConnection(void) const;
  virtual SbBool readValue(SoInput * in) = 0;
  virtual void writeValue(SoOutput * out) const = 0;
  virtual SbBool readConnection(SoInput * in);
  virtual void writeConnection(SoOutput * out) const;

  SbBool isDestructing(void) const;

private:

  enum FieldFlags {
    FLAG_TYPEMASK = 0x0007,  
    FLAG_ISDEFAULT = 0x0008,
    FLAG_IGNORE = 0x0010,
    FLAG_EXTSTORAGE = 0x0020,
    FLAG_ENABLECONNECTS = 0x0040,
    FLAG_NEEDEVALUATION = 0x0080,
    FLAG_READONLY = 0x0100,
    FLAG_DONOTIFY = 0x0200,
    FLAG_ISDESTRUCTING = 0x0400,
    FLAG_ISEVALUATING = 0x0800,
    FLAG_ISNOTIFIED = 0x1000
  };

  void evaluateField(void) const;
  void extendStorageIfNecessary(void);
  SoFieldConverter * createConverter(SoType from) const;
  SoFieldContainer * resolveWriteConnection(SbName & mastername) const;

  void notifyAuditors(SoNotList * l);

  static SoType classTypeId;

  
  enum FileFormatFlags {
    IGNORED = 0x01,
    CONNECTED = 0x02,
    DEFAULT = 0x04,
    ALLFILEFLAGS = IGNORED|CONNECTED|DEFAULT
  };

  SbBool changeStatusBits(const unsigned int bits, const SbBool onoff);
  void clearStatusBits(const unsigned int bits);
  void setStatusBits(const unsigned int bits);
  SbBool getStatus(const unsigned int bits) const;
  unsigned int statusbits;
  union {
    SoFieldContainer * container;
    class SoConnectStorage * storage;
  };

  SbBool hasExtendedStorage(void) const;
};




#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfield.h"













































#line 197 "c:\\coin3d\\include\\inventor\\fields\\sofield.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfield.h"


























#line 1 "c:\\coin3d\\include\\inventor\\fields\\sofield.h"








































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\fields\\somfield.h"

class SoInput;
class SoOutput;

class __declspec(dllimport) SoMField : public SoField {
  typedef SoField inherited;

public:
  virtual ~SoMField();

  static SoType getClassTypeId(void);

  int getNum(void) const;
  void setNum(const int num);

  virtual void deleteValues(int start, int num = -1);
  virtual void insertSpace(int start, int num);

  SbBool set1(const int index, const char * const valuestring);
  void get1(const int index, SbString & valuestring);

  static void initClass(void);

  virtual void enableDeleteValues(void);
  virtual SbBool isDeleteValuesEnabled(void);

protected:
  SoMField(void);
  virtual void makeRoom(int newnum);


  virtual int fieldSizeof(void) const = 0;
  virtual void * valuesPtr(void) = 0;
  virtual void setValuesPtr(void * ptr) = 0;
  virtual void allocValues(int num);
#line 64 "c:\\coin3d\\include\\inventor\\fields\\somfield.h"

  int num;
  int maxNum;
  SbBool userDataIsUsed;

private:
  virtual void deleteAllValues(void) = 0;
  virtual void copyValue(int to, int from) = 0;
  virtual SbBool readValue(SoInput * in);
  virtual SbBool read1Value(SoInput * in, int idx) = 0;
  virtual void writeValue(SoOutput * out) const;
  virtual void write1Value(SoOutput * out, int idx) const = 0;
  virtual SbBool readBinaryValues(SoInput * in, int num);
  virtual void writeBinaryValues(SoOutput * out) const;
  virtual int getNumValuesPerLine(void) const;

  static SoType classTypeId;
};



inline int
SoMField::getNum(void) const
{
  this->evaluate();
  return this->num;
}

#line 93 "c:\\coin3d\\include\\inventor\\fields\\somfield.h"
#line 198 "c:\\coin3d\\include\\inventor\\fields\\sofield.h"
#line 199 "c:\\coin3d\\include\\inventor\\fields\\sofield.h"

#line 201 "c:\\coin3d\\include\\inventor\\fields\\sofield.h"
#line 28 "c:\\coin3d\\include\\inventor\\fields\\sosfield.h"

class __declspec(dllimport) SoSField : public SoField {
  typedef SoField inherited;

public:
  virtual ~SoSField();

  static void initClass(void);
  static SoType getClassTypeId(void);

protected:
  SoSField(void);

private:
  static SoType classTypeId;
};

#line 46 "c:\\coin3d\\include\\inventor\\fields\\sosfield.h"
#line 28 "c:\\coin3d\\include\\inventor\\fields\\sosffloat.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosubfield.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 28 "c:\\coin3d\\include\\inventor\\fields\\sosubfield.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbname.h"


































































#line 29 "c:\\coin3d\\include\\inventor\\fields\\sosubfield.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"















#line 17 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"



















#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"




















extern "C" {
#line 59 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"

__declspec(dllimport) void __cdecl _assert(void *, void *, unsigned);


}
#line 65 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"



#line 69 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"
#line 30 "c:\\coin3d\\include\\inventor\\fields\\sosubfield.h"



#line 1 "c:\\coin3d\\include\\inventor\\fields\\sofield.h"








































































































































































































#line 34 "c:\\coin3d\\include\\inventor\\fields\\sosubfield.h"
#line 1 "c:\\coin3d\\include\\inventor\\soinput.h"


























#line 1 "c:\\coin3d\\include\\inventor\\system\\inttypes.h"


















































































































































































#line 28 "c:\\coin3d\\include\\inventor\\soinput.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 29 "c:\\coin3d\\include\\inventor\\soinput.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbdict.h"


























































#line 30 "c:\\coin3d\\include\\inventor\\soinput.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\sblist.h"





































































































































































































































#line 31 "c:\\coin3d\\include\\inventor\\soinput.h"


 
 #line 1 "c:\\coin3d\\include\\inventor\\sodb.h"















































































































#line 35 "c:\\coin3d\\include\\inventor\\soinput.h"
#line 36 "c:\\coin3d\\include\\inventor\\soinput.h"

class SoBase;
class SbString;
class SbTime;
class SbName;
class SbStringList;
class SoInput_FileInfo;
class SoProto;
class SoField;
class SoFieldContainer;

class __declspec(dllimport) SoInput {
public:
  SoInput(void);
  SoInput(SoInput * dictIn);

  SoProto * findProto(const SbName & name);
  void addProto(SoProto * proto);
  void pushProto(SoProto * proto);
  SoProto * getCurrentProto(void) const;
  void popProto(void);

  void addRoute(const SbName & fromnode, const SbName & fromfield,
                const SbName & tonode, const SbName & tofield);
  SbBool checkISReference(SoFieldContainer * container, const SbName & fieldname, 
                          SbBool & readok);
  
  virtual ~SoInput(void);

  virtual void setFilePointer(FILE * newFP);
  virtual SbBool openFile(const char * fileName, SbBool okIfNotFound = 0);
  virtual SbBool pushFile(const char * fileName);
  virtual void closeFile(void);
  virtual SbBool isValidFile(void);
  virtual SbBool isValidBuffer(void);
  virtual FILE * getCurFile(void) const;
  virtual const char * getCurFileName(void) const;
  virtual void setBuffer(void * bufpointer, size_t bufsize);
          void setStringArray(const char * strings[]);
  virtual size_t getNumBytesRead(void) const;
  virtual SbString getHeader(void);
  virtual float getIVVersion(void);
  virtual SbBool isBinary(void);

  virtual SbBool get(char & c);
  virtual SbBool getASCIIBuffer(char & c);
  virtual SbBool getASCIIFile(char & c);
  virtual SbBool readHex(uint32_t & l);
  virtual SbBool read(char & c);
  virtual SbBool read(char & c, SbBool skip);
  virtual SbBool read(SbString & s);
  virtual SbBool read(SbName & n, SbBool validIdent = 0);
  virtual SbBool read(int & i);
  virtual SbBool read(unsigned int & i);
  virtual SbBool read(short & s);
  virtual SbBool read(unsigned short & s);
  virtual SbBool read(float & f);
  virtual SbBool read(double & d);
  virtual SbBool readBinaryArray(unsigned char * c, int length);
  virtual SbBool readBinaryArray(int32_t * l, int length);
  virtual SbBool readBinaryArray(float * f, int length);
  virtual SbBool readBinaryArray(double * d, int length);
  virtual SbBool eof(void) const;

  SbBool isFileVRML1(void);
  SbBool isFileVRML2(void);
  virtual void resetFilePointer(FILE * fptr);

  virtual void getLocationString(SbString & string) const;
  virtual void putBack(const char c);
  virtual void putBack(const char * str);
  virtual void addReference(const SbName & name, SoBase * base,
                            SbBool addToGlobalDict = 1);
  virtual void removeReference(const SbName & name);
  virtual SoBase * findReference(const SbName & name) const;

  static void addDirectoryFirst(const char * dirName);
  static void addDirectoryLast(const char * dirName);
  static void addEnvDirectoriesFirst(const char * envVarName,
                                     const char * separator = ":\t ");
  static void addEnvDirectoriesLast(const char * envVarName,
                                    const char * separator = ":\t ");
  static void removeDirectory(const char * dirName);
  static void clearDirectories(void);
  static const SbStringList & getDirectories(void);

  static void init(void);

  static SbString getPathname(const char * const filename);
  static SbString getPathname(const SbString & s);
  static SbString getBasename(const char * const filename);
  static SbString getBasename(const SbString & s);

  static SbString searchForFile(const SbString & basename,
                                const SbStringList & directories,
                                const SbStringList & subdirectories);


protected:
  virtual SbBool popFile(void);
  void setIVVersion(float version);
  FILE * findFile(const char * fileName, SbString & fullName);
  void initFile(FILE * newFP, const char * fileName, SbString * fullName,
                SbBool openedHere, SbDict * refDict = (SbDict *) 0);
  SbBool checkHeader(SbBool bValidateBufferHeader = 0);
  SbBool fromBuffer(void) const;
  SbBool skipWhiteSpace(void);
  size_t freeBytesInBuf(void) const;
  SbBool readInteger(int32_t & l);
  SbBool readUnsignedInteger(uint32_t & l);
  SbBool readReal(double & d);
  SbBool readUnsignedIntegerString(char * str);
  int readDigits(char * str);
  int readHexDigits(char * str);
  int readChar(char * str, char charToRead);

  SbBool makeRoomInBuf(size_t nBytes);
  void convertShort(char * from, short * s);
  void convertInt32(char * from, int32_t * l);
  void convertFloat(char * from, float * f);
  void convertDouble(char * from, double * d);
  void convertShortArray(char * from, short * to, int len);
  void convertInt32Array(char * from, int32_t * to, int len);
  void convertFloatArray(char * from, float * to, int len);
  void convertDoubleArray(char * from, double * to, int len);
  SbBool isFileURL(const char * url);
  char * URLToFile(char * out_buf, const char * in_buf);
  SbBool IsURL(const char * c_strng);

  static void setDirectories(SbStringList * dirs);

private:
  friend class SoDB;

  static void clean(void);
  void constructorsCommon(void);

  static void addDirectoryIdx(const int idx, const char * dirName);
  static void addEnvDirectoriesIdx(int startidx, const char * envVarName,
                                   const char * separator);
  static SbStringList * dirsearchlist;

  SbList<SoInput_FileInfo *> filestack;
  SoInput_FileInfo * getTopOfStack(void) const;

  SbDict refdict;
};

#line 185 "c:\\coin3d\\include\\inventor\\soinput.h"
#line 35 "c:\\coin3d\\include\\inventor\\fields\\sosubfield.h"
#line 1 "c:\\coin3d\\include\\inventor\\sooutput.h"


























#line 1 "c:\\coin3d\\include\\inventor\\system\\inttypes.h"


















































































































































































#line 28 "c:\\coin3d\\include\\inventor\\sooutput.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 29 "c:\\coin3d\\include\\inventor\\sooutput.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbstring.h"












































































































































#line 30 "c:\\coin3d\\include\\inventor\\sooutput.h"


class SbDict;
class SbName;
class SoBase;
class SoOutputP;
class SoProto;
class SoField;
class SoFieldContainer;

typedef void * SoOutputReallocCB(void * ptr, size_t newSize);

class __declspec(dllimport) SoOutput {
public:
  enum Stage { COUNT_REFS, WRITE };
  
  enum Annotations { ADDRESSES = 0x01, REF_COUNTS = 0x02 };

  SoOutput(void);
  SoOutput(SoOutput * dictOut);
  virtual ~SoOutput();

  virtual void setFilePointer(FILE * newFP);
  virtual FILE * getFilePointer(void) const;
  virtual SbBool openFile(const char * const fileName);
  virtual void closeFile(void);

  SbBool setCompression(const SbName & compmethod,
                        const float level = 0.5f);
  static const SbName * getAvailableCompressionMethods(unsigned int & num);

  virtual void setBuffer(void * bufPointer, size_t initSize,
                         SoOutputReallocCB * reallocFunc, int32_t offset = 0);
  virtual SbBool getBuffer(void * & bufPointer, size_t & nBytes) const;
  virtual size_t getBufferSize(void) const;
  virtual void resetBuffer(void);
  virtual void setBinary(const SbBool flag);
  virtual SbBool isBinary(void) const;
  virtual void setHeaderString(const SbString & str);
  virtual void resetHeaderString(void);
  virtual void setFloatPrecision(const int precision);

  void setStage(Stage stage);
  Stage getStage(void) const;

  void incrementIndent(const int levels = 1);
  void decrementIndent(const int levels = 1);

  virtual void write(const char c);
  virtual void write(const char * s);
  virtual void write(const SbString & s);
  virtual void write(const SbName & n);
  virtual void write(const int i);
  virtual void write(const unsigned int i);
  virtual void write(const short s);
  virtual void write(const unsigned short s);
  virtual void write(const float f);
  virtual void write(const double d);
  virtual void writeBinaryArray(const unsigned char * c, const int length);
  virtual void writeBinaryArray(const int32_t * const l, const int length);
  virtual void writeBinaryArray(const float * const f, const int length);
  virtual void writeBinaryArray(const double * const d, const int length);

  virtual void indent(void);
  virtual void reset(void);
  void setCompact(SbBool flag);
  SbBool isCompact(void) const;
  void setAnnotation(uint32_t bits);
  uint32_t getAnnotation(void);

  static SbString getDefaultASCIIHeader(void);
  static SbString getDefaultBinaryHeader(void);

  int addReference(const SoBase * base);
  int findReference(const SoBase * base) const;
  void setReference(const SoBase * base, int refid);

  void addDEFNode(SbName name);
  SbBool lookupDEFNode(SbName name);
  void removeDEFNode(SbName name);

  void pushProto(SoProto * proto);
  SoProto * getCurrentProto(void) const;
  void popProto(void);
  
  void addRoute(SoFieldContainer * from, const SbName & fromfield,
                SoFieldContainer * to, const SbName & tofield);
  void resolveRoutes(void);
  
protected:
  SbBool isToBuffer(void) const;
  size_t bytesInBuf(void) const;
  SbBool makeRoomInBuf(size_t nBytes);
  void convertShort(short s, char * to);
  void convertInt32(int32_t l, char * to);
  void convertFloat(float f, char * to);
  void convertDouble(double d, char * to);
  void convertShortArray(short * from, char * to, int len);
  void convertInt32Array(int32_t * from, char * to, int len);
  void convertFloatArray(float * from, char * to, int len);
  void convertDoubleArray(double * from, char * to, int len);

  static SbString padHeader(const SbString & inString);

  SbBool wroteHeader;

private:
  SoOutputP * pimpl;

  void constructorCommon(void);

  void checkHeader(void);
  void writeBytesWithPadding(const char * const p, const size_t nr);
  
  friend class SoBase; 
  void removeSoBase2IdRef(const SoBase * base);
};

#line 149 "c:\\coin3d\\include\\inventor\\sooutput.h"
#line 36 "c:\\coin3d\\include\\inventor\\fields\\sosubfield.h"
#line 37 "c:\\coin3d\\include\\inventor\\fields\\sosubfield.h"


































































































































































































































   









































































































































































































































#line 498 "c:\\coin3d\\include\\inventor\\fields\\sosubfield.h"
#line 29 "c:\\coin3d\\include\\inventor\\fields\\sosffloat.h"

class __declspec(dllimport) SoSFFloat : public SoSField {
  typedef SoSField inherited;

  public: SoSFFloat(void); virtual ~SoSFFloat(); private: static SoType classTypeId; public: static void * createInstance(void); static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; virtual void copyFrom(const SoField & field); const SoSFFloat & operator=(const SoSFFloat & field); virtual SbBool isSame(const SoField & field) const; private: virtual SbBool readValue(SoInput * in); virtual void writeValue(SoOutput * out) const; protected: float value; public: float getValue(void) const { this->evaluate(); return this->value; } void setValue(float newvalue); float operator=(float newvalue) { this->setValue(newvalue); return this->value; } int operator==(const SoSFFloat & field) const; int operator!=(const SoSFFloat & field) const { return ! operator==(field); };

public:
  static void initClass(void);
};

#line 40 "c:\\coin3d\\include\\inventor\\fields\\sosffloat.h"
#line 29 "c:\\coin3d\\include\\inventor\\nodes\\socube.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\soshape.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodes\\soshape.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbmatrix.h"




















































































































#line 29 "c:\\coin3d\\include\\inventor\\nodes\\soshape.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbvec2s.h"
















































































#line 30 "c:\\coin3d\\include\\inventor\\nodes\\soshape.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbbox3f.h"




























#line 1 "c:\\coin3d\\include\\inventor\\sbvec3f.h"






































































































#line 30 "c:\\coin3d\\include\\inventor\\sbbox3f.h"

class SbMatrix;

class __declspec(dllimport) SbBox3f {
public:
  SbBox3f(void);
  SbBox3f(const float minx, const float miny, const float minz,
          const float maxx, const float maxy, const float maxz);
  SbBox3f(const SbVec3f & min, const SbVec3f & max);
  ~SbBox3f();

  const SbVec3f & getMin(void) const;
  const SbVec3f & getMax(void) const;
  SbVec3f & getMin(void);
  SbVec3f & getMax(void);

  SbVec3f getCenter(void) const;

  void extendBy(const SbVec3f & point);
  void extendBy(const SbBox3f & box);

  SbBool intersect(const SbVec3f & point) const;
  SbBool intersect(const SbBox3f & box) const;

  void setBounds(const float minx, const float miny, const float minz,
                 const float maxx, const float maxy, const float maxz);
  void setBounds(const SbVec3f & min, const SbVec3f & max);
  void getBounds(float & minx, float & miny, float & minz,
                 float & maxx, float & maxy, float & maxz) const;
  void getBounds(SbVec3f & min, SbVec3f & max) const;

  void getOrigin(float & x0, float & y0, float & z0) const;
  void getSize(float & dx, float & dy, float & dz) const;

  void makeEmpty(void);
  SbBool isEmpty(void) const;
  SbBool hasVolume(void) const;

  void getSpan(const SbVec3f & dir, float & dmin, float & dmax) const;
  void transform(const SbMatrix & matrix);
  float getVolume(void) const;

  SbBool outside(const SbMatrix & mvp, int & cullbits) const;
  SbVec3f getClosestPoint(const SbVec3f & point) const;

  friend __declspec(dllimport) int operator ==(const SbBox3f & b1, const SbBox3f & b2);
  friend __declspec(dllimport) int operator !=(const SbBox3f & b1, const SbBox3f & b2);

  void print(FILE * file) const;

private:
  SbVec3f min, max;
};

__declspec(dllimport) int operator ==(const SbBox3f & b1, const SbBox3f & b2);
__declspec(dllimport) int operator !=(const SbBox3f & b1, const SbBox3f & b2);

#line 88 "c:\\coin3d\\include\\inventor\\sbbox3f.h"
#line 31 "c:\\coin3d\\include\\inventor\\nodes\\soshape.h"

class SoPrimitiveVertex;
class SoDetail;
class SoPickedPoint;
class SoFaceDetail;
class SoState;
class SoTextureCoordinateElement;
class SbVec2f;
class SoMaterialBundle;
class SoBoundingBoxCache;

class __declspec(dllimport) SoShape : public SoNode {
  typedef SoNode inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances;

public:
  static void initClass(void);

  enum TriangleShape {
    TRIANGLE_STRIP, TRIANGLE_FAN, TRIANGLES, POLYGON,
    
    QUADS, QUAD_STRIP, POINTS, LINES, LINE_STRIP
  };

  virtual SbBool affectsState(void) const;
  virtual void notify(SoNotList * nl);

  virtual void getBoundingBox(SoGetBoundingBoxAction * action);
  virtual void GLRender(SoGLRenderAction * action);
  virtual void rayPick(SoRayPickAction * action);
  virtual void callback(SoCallbackAction * action);
  virtual void computeBBox(SoAction * action, SbBox3f & box,
                           SbVec3f & center) =  0;
  virtual void getPrimitiveCount(SoGetPrimitiveCountAction * action);

  static void getScreenSize(SoState * const state, const SbBox3f & boundingbox,
                            SbVec2s & rectsize);
  static float getDecimatedComplexity(SoState * state, float complexity);
  const SoBoundingBoxCache * getBoundingBoxCache(void) const;
  
protected:
  SoShape(void);
  virtual ~SoShape();

  float getComplexityValue(SoAction * action);
  virtual void generatePrimitives(SoAction * action) =  0;
  virtual SbBool shouldGLRender(SoGLRenderAction * action);
  void beginSolidShape(SoGLRenderAction * action);
  void endSolidShape(SoGLRenderAction * action);
  void GLRenderBoundingBox(SoGLRenderAction * action);
  SbBool shouldPrimitiveCount(SoGetPrimitiveCountAction * action);

  SbBool shouldRayPick(SoRayPickAction * const action);
  void computeObjectSpaceRay(SoRayPickAction * const action);
  void computeObjectSpaceRay(SoRayPickAction * const action,
                             const SbMatrix & matrix);
  virtual SoDetail * createTriangleDetail(SoRayPickAction * action,
                                          const SoPrimitiveVertex * v1,
                                          const SoPrimitiveVertex * v2,
                                          const SoPrimitiveVertex * v3,
                                          SoPickedPoint * pp);
  virtual SoDetail * createLineSegmentDetail(SoRayPickAction * action,
                                             const SoPrimitiveVertex * v1,
                                             const SoPrimitiveVertex * v2,
                                             SoPickedPoint * pp);
  virtual SoDetail * createPointDetail(SoRayPickAction * action,
                                       const SoPrimitiveVertex * v,
                                       SoPickedPoint * pp);

  void invokeTriangleCallbacks(SoAction * const action,
                               const SoPrimitiveVertex * const v1,
                               const SoPrimitiveVertex * const v2,
                               const SoPrimitiveVertex * const v3);
  void invokeLineSegmentCallbacks(SoAction * const action,
                                  const SoPrimitiveVertex * const v1,
                                  const SoPrimitiveVertex * const v2);
  void invokePointCallbacks(SoAction * const action,
                            const SoPrimitiveVertex * const v);
  void beginShape(SoAction * const action, const TriangleShape shapetype,
                  SoDetail * const detail = 0);
  void shapeVertex(const SoPrimitiveVertex * const v);
  void endShape(void);

  void generateVertex(SoPrimitiveVertex * const pv,
                      const SbVec3f & point,
                      const SbBool useTexFunc,
                      const SoTextureCoordinateElement * const tce,
                      const float s,
                      const float t,
                      const SbVec3f & normal);
  void generateVertex(SoPrimitiveVertex * const pv,
                      const SbVec3f & point,
                      const SbBool useTexFunc,
                      const SoTextureCoordinateElement * const tce,
                      const float s,
                      const float t,
                      const float r,
                      const SbVec3f & normal);

private:
  class SoShapeP * pimpl;

  void getBBox(SoAction * action, SbBox3f & box, SbVec3f & center);
  void rayPickBoundingBox(SoRayPickAction * action);
  friend class soshape_primdata;           
  friend class so_generate_prim_private;   
};

#line 141 "c:\\coin3d\\include\\inventor\\nodes\\soshape.h"
#line 30 "c:\\coin3d\\include\\inventor\\nodes\\socube.h"

class SoIndexedFaceSet;

class __declspec(dllimport) SoCube : public SoShape {
  typedef SoShape inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoCube(void);

  SoSFFloat width;
  SoSFFloat height;
  SoSFFloat depth;

  virtual void GLRender(SoGLRenderAction * action);
  virtual void rayPick(SoRayPickAction * action);
  virtual void getPrimitiveCount(SoGetPrimitiveCountAction * action);

protected:
  virtual ~SoCube();

  virtual void generatePrimitives(SoAction * action);
  virtual void computeBBox(SoAction * action, SbBox3f & box, SbVec3f & center);

private:
  void getHalfSize(float & w, float & h, float & d);
};

#line 61 "c:\\coin3d\\include\\inventor\\nodes\\socube.h"
#line 6 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\socone.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodes\\socone.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfbitmask.h"


























#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfenum.h"


























#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfield.h"













































#line 28 "c:\\coin3d\\include\\inventor\\fields\\sosfenum.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosubfield.h"

















































































































































































































































































































































































































































































































#line 29 "c:\\coin3d\\include\\inventor\\fields\\sosfenum.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbstring.h"












































































































































#line 30 "c:\\coin3d\\include\\inventor\\fields\\sosfenum.h"

class __declspec(dllimport) SoSFEnum : public SoSField {
  typedef SoSField inherited;

  public: SoSFEnum(void); virtual ~SoSFEnum(); private: static SoType classTypeId; public: static void * createInstance(void); static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; virtual void copyFrom(const SoField & field); const SoSFEnum & operator=(const SoSFEnum & field); virtual SbBool isSame(const SoField & field) const; private: virtual SbBool readValue(SoInput * in); virtual void writeValue(SoOutput * out) const; protected: int value; public: int getValue(void) const { this->evaluate(); return this->value; } void setValue(int newvalue); int operator=(int newvalue) { this->setValue(newvalue); return this->value; } int operator==(const SoSFEnum & field) const; int operator!=(const SoSFEnum & field) const { return ! operator==(field); };

public:
  static void initClass(void);

  void setValue(const SbName name);
  void setEnums(const int num, const int * vals, const SbName * names);

  int getNumEnums(void) const;
  int getEnum(const int idx, SbName & name) const;

protected:
  virtual SbBool findEnumValue(const SbName & name, int & val);
  virtual SbBool findEnumName(int value, const SbName * & name) const;

  int numEnums;
  int * enumValues;
  SbName * enumNames;
  SbBool legalValuesSet;
};






















#line 77 "c:\\coin3d\\include\\inventor\\fields\\sosfenum.h"
#line 28 "c:\\coin3d\\include\\inventor\\fields\\sosfbitmask.h"

class __declspec(dllimport) SoSFBitMask : public SoSFEnum {
  typedef SoSFEnum inherited;

  public: SoSFBitMask(void); virtual ~SoSFBitMask(); private: static SoType classTypeId; public: static void * createInstance(void); static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; virtual void copyFrom(const SoField & field); const SoSFBitMask & operator=(const SoSFBitMask & field); virtual SbBool isSame(const SoField & field) const; private: virtual SbBool readValue(SoInput * in); virtual void writeValue(SoOutput * out) const; public: int operator=(int newvalue) { this->setValue(newvalue); return this->value; };

public:
  static void initClass(void);

  friend class SoMFBitMask; 
};

#line 41 "c:\\coin3d\\include\\inventor\\fields\\sosfbitmask.h"
#line 29 "c:\\coin3d\\include\\inventor\\nodes\\socone.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosffloat.h"







































#line 30 "c:\\coin3d\\include\\inventor\\nodes\\socone.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\soshape.h"












































































































































#line 31 "c:\\coin3d\\include\\inventor\\nodes\\socone.h"

class __declspec(dllimport) SoCone : public SoShape {
  typedef SoShape inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoCone(void);

  enum Part {
    SIDES = 1,
    BOTTOM,
    ALL
  };

  SoSFBitMask parts;
  SoSFFloat bottomRadius;
  SoSFFloat height;

  void addPart(SoCone::Part part);
  void removePart(SoCone::Part part);
  SbBool hasPart(SoCone::Part part) const;

  virtual void GLRender(SoGLRenderAction * action);
  virtual void rayPick(SoRayPickAction * action);
  virtual void getPrimitiveCount(SoGetPrimitiveCountAction * action);

protected:
  virtual ~SoCone();

  virtual void generatePrimitives(SoAction * action);
  virtual void computeBBox(SoAction * action, SbBox3f & box, SbVec3f & center);
};

#line 67 "c:\\coin3d\\include\\inventor\\nodes\\socone.h"
#line 7 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosphere.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodes\\sosphere.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\soshape.h"












































































































































#line 29 "c:\\coin3d\\include\\inventor\\nodes\\sosphere.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosffloat.h"







































#line 30 "c:\\coin3d\\include\\inventor\\nodes\\sosphere.h"

class __declspec(dllimport) SoSphere : public SoShape {
  typedef SoShape inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoSphere(void);

  SoSFFloat radius;

  virtual void GLRender(SoGLRenderAction * action);
  virtual void rayPick(SoRayPickAction * action);
  virtual void getPrimitiveCount(SoGetPrimitiveCountAction * action);

protected:
  virtual ~SoSphere();

  virtual void generatePrimitives(SoAction * action);
  virtual void computeBBox(SoAction * action, SbBox3f & box, SbVec3f & center);
};

#line 54 "c:\\coin3d\\include\\inventor\\nodes\\sosphere.h"
#line 8 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\socylinder.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodes\\socylinder.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\soshape.h"












































































































































#line 29 "c:\\coin3d\\include\\inventor\\nodes\\socylinder.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosffloat.h"







































#line 30 "c:\\coin3d\\include\\inventor\\nodes\\socylinder.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfbitmask.h"








































#line 31 "c:\\coin3d\\include\\inventor\\nodes\\socylinder.h"

class __declspec(dllimport) SoCylinder : public SoShape {
  typedef SoShape inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoCylinder(void);

  enum Part {
    SIDES =  0x1,
    TOP =    0x2,
    BOTTOM = 0x4,
    ALL =    SIDES|TOP|BOTTOM
  };

  SoSFFloat radius;
  SoSFFloat height;
  SoSFBitMask parts;

  void addPart(SoCylinder::Part part);
  void removePart(SoCylinder::Part part);
  SbBool hasPart(SoCylinder::Part part) const;

  virtual void rayPick(SoRayPickAction * action);
  virtual void getPrimitiveCount(SoGetPrimitiveCountAction * action);
  virtual void GLRender(SoGLRenderAction * action);

protected:
  virtual ~SoCylinder();

  virtual void generatePrimitives(SoAction * action);
  virtual void computeBBox(SoAction * action, SbBox3f & box, SbVec3f & center);
};

#line 68 "c:\\coin3d\\include\\inventor\\nodes\\socylinder.h"
#line 9 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sonode.h"








































































































































































#line 10 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sotransform.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodes\\sotransform.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfrotation.h"


























#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfield.h"













































#line 28 "c:\\coin3d\\include\\inventor\\fields\\sosfrotation.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosubfield.h"

















































































































































































































































































































































































































































































































#line 29 "c:\\coin3d\\include\\inventor\\fields\\sosfrotation.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbrotation.h"












































































#line 30 "c:\\coin3d\\include\\inventor\\fields\\sosfrotation.h"

class __declspec(dllimport) SoSFRotation : public SoSField {
  typedef SoSField inherited;

  public: SoSFRotation(void); virtual ~SoSFRotation(); private: static SoType classTypeId; public: static void * createInstance(void); static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; virtual void copyFrom(const SoField & field); const SoSFRotation & operator=(const SoSFRotation & field); virtual SbBool isSame(const SoField & field) const; private: virtual SbBool readValue(SoInput * in); virtual void writeValue(SoOutput * out) const; protected: SbRotation value; public: const SbRotation & getValue(void) const { this->evaluate(); return this->value; } void setValue(const SbRotation & newvalue); const SbRotation & operator=(const SbRotation & newvalue) { this->setValue(newvalue); return this->value; } int operator==(const SoSFRotation & field) const; int operator!=(const SoSFRotation & field) const { return ! operator==(field); };

public:
  static void initClass(void);

  void getValue(SbVec3f & axis, float & angle) const;
  void setValue(const float q0, const float q1, const float q2, const float q3);
  void setValue(const float q[4]);
  void setValue(const SbVec3f & axis, const float angle);
};

#line 46 "c:\\coin3d\\include\\inventor\\fields\\sosfrotation.h"
#line 29 "c:\\coin3d\\include\\inventor\\nodes\\sotransform.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfvec3f.h"


























#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfield.h"













































#line 28 "c:\\coin3d\\include\\inventor\\fields\\sosfvec3f.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosubfield.h"

















































































































































































































































































































































































































































































































#line 29 "c:\\coin3d\\include\\inventor\\fields\\sosfvec3f.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbvec3f.h"






































































































#line 30 "c:\\coin3d\\include\\inventor\\fields\\sosfvec3f.h"

class __declspec(dllimport) SoSFVec3f : public SoSField {
  typedef SoSField inherited;

  public: SoSFVec3f(void); virtual ~SoSFVec3f(); private: static SoType classTypeId; public: static void * createInstance(void); static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; virtual void copyFrom(const SoField & field); const SoSFVec3f & operator=(const SoSFVec3f & field); virtual SbBool isSame(const SoField & field) const; private: virtual SbBool readValue(SoInput * in); virtual void writeValue(SoOutput * out) const; protected: SbVec3f value; public: const SbVec3f & getValue(void) const { this->evaluate(); return this->value; } void setValue(const SbVec3f & newvalue); const SbVec3f & operator=(const SbVec3f & newvalue) { this->setValue(newvalue); return this->value; } int operator==(const SoSFVec3f & field) const; int operator!=(const SoSFVec3f & field) const { return ! operator==(field); };

public:
  static void initClass(void);

  void setValue(const float x, const float y, const float z);
  void setValue(const float xyz[3]);
};

#line 44 "c:\\coin3d\\include\\inventor\\fields\\sosfvec3f.h"
#line 30 "c:\\coin3d\\include\\inventor\\nodes\\sotransform.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sotransformation.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodes\\sotransformation.h"

class __declspec(dllimport) SoTransformation : public SoNode {
  typedef SoNode inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances;

public:
  static void initClass(void);

protected:
  SoTransformation(void);
  virtual ~SoTransformation();
};

#line 43 "c:\\coin3d\\include\\inventor\\nodes\\sotransformation.h"
#line 31 "c:\\coin3d\\include\\inventor\\nodes\\sotransform.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbmatrix.h"




















































































































#line 32 "c:\\coin3d\\include\\inventor\\nodes\\sotransform.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbvec3f.h"






































































































#line 33 "c:\\coin3d\\include\\inventor\\nodes\\sotransform.h"

class __declspec(dllimport) SoTransform : public SoTransformation {
  typedef SoTransformation inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoTransform(void);

  SoSFVec3f translation;
  SoSFRotation rotation;
  SoSFVec3f scaleFactor;
  SoSFRotation scaleOrientation;
  SoSFVec3f center;

  void pointAt(const SbVec3f & frompoint, const SbVec3f & topoint);
  void getScaleSpaceMatrix(SbMatrix & mat, SbMatrix & inv) const;
  void getRotationSpaceMatrix(SbMatrix & mat, SbMatrix & inv) const;
  void getTranslationSpaceMatrix(SbMatrix & mat, SbMatrix & inv) const;
  void multLeft(const SbMatrix & mat);
  void multRight(const SbMatrix & mat);
  void combineLeft(SoTransformation * nodeonright);
  void combineRight(SoTransformation * nodeonleft);
  void setMatrix(const SbMatrix & mat);
  void recenter(const SbVec3f & newcenter);

  virtual void doAction(SoAction * action);
  virtual void GLRender(SoGLRenderAction * action);
  virtual void callback(SoCallbackAction * action);
  virtual void getBoundingBox(SoGetBoundingBoxAction * action);
  virtual void getMatrix(SoGetMatrixAction * action);
  virtual void pick(SoPickAction * action);
  virtual void getPrimitiveCount(SoGetPrimitiveCountAction * action);

protected:
  virtual ~SoTransform();
};

#line 73 "c:\\coin3d\\include\\inventor\\nodes\\sotransform.h"
#line 11 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\actions\\solinehighlightrenderaction.h"


























#line 1 "c:\\coin3d\\include\\inventor\\actions\\soglrenderaction.h"


























#line 1 "c:\\coin3d\\include\\inventor\\actions\\soaction.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 28 "c:\\coin3d\\include\\inventor\\actions\\soaction.h"
#line 1 "c:\\coin3d\\include\\inventor\\sotype.h"















































































































































#line 29 "c:\\coin3d\\include\\inventor\\actions\\soaction.h"
#line 1 "c:\\coin3d\\include\\inventor\\misc\\sotemppath.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sofullpath.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sopath.h"


























#line 1 "c:\\coin3d\\include\\inventor\\misc\\sobase.h"















































































































































#line 28 "c:\\coin3d\\include\\inventor\\sopath.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\sblist.h"





































































































































































































































#line 29 "c:\\coin3d\\include\\inventor\\sopath.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\sonodelist.h"


























#line 1 "c:\\coin3d\\include\\inventor\\lists\\sobaselist.h"


























class SoBase;

#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 30 "c:\\coin3d\\include\\inventor\\lists\\sobaselist.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\sbplist.h"
































































































































































#line 31 "c:\\coin3d\\include\\inventor\\lists\\sobaselist.h"

class __declspec(dllimport) SoBaseList : public SbPList {
public:
  SoBaseList(void);
  SoBaseList(const int size);
  SoBaseList(const SoBaseList & l);
  ~SoBaseList();

  void append(SoBase * ptr);
  void insert(SoBase * ptr, const int addbefore);
  void remove(const int index);
  void removeItem(SoBase * item);
  void truncate(const int length);
  void copy(const SoBaseList & l);
  SoBaseList & operator=(const SoBaseList & l);
  SoBase * operator[](const int i) const;
  void set(const int i, SoBase * const ptr);
  void addReferences(const SbBool flag);
  SbBool isReferencing(void) const;

private:
  SbBool referencing;
};

#line 56 "c:\\coin3d\\include\\inventor\\lists\\sobaselist.h"
#line 28 "c:\\coin3d\\include\\inventor\\lists\\sonodelist.h"

class SoNode;

class __declspec(dllimport) SoNodeList : public SoBaseList {
  typedef SoBaseList inherited;

public:
  SoNodeList(void);
  SoNodeList(const int size);
  SoNodeList(const SoNodeList & nl);
  ~SoNodeList();

  void append(SoNode * const ptr);
  SoNode * operator[](const int i) const;
  SoNodeList & operator=(const SoNodeList & nl);
};

#line 46 "c:\\coin3d\\include\\inventor\\lists\\sonodelist.h"
#line 30 "c:\\coin3d\\include\\inventor\\sopath.h"



#line 1 "c:\\coin3d\\include\\inventor\\solists.h"




























#line 30 "c:\\coin3d\\include\\inventor\\solists.h"




#line 1 "c:\\coin3d\\include\\inventor\\lists\\sbintlist.h"
















































#line 35 "c:\\coin3d\\include\\inventor\\solists.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\sbplist.h"
































































































































































#line 36 "c:\\coin3d\\include\\inventor\\solists.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\sobaselist.h"























































#line 37 "c:\\coin3d\\include\\inventor\\solists.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\sodetaillist.h"


























#line 1 "c:\\coin3d\\include\\inventor\\lists\\sbplist.h"
































































































































































#line 28 "c:\\coin3d\\include\\inventor\\lists\\sodetaillist.h"

class SoDetail;

class __declspec(dllimport) SoDetailList : public SbPList {
public:
  SoDetailList(void) : SbPList() { }
  SoDetailList(const int sizehint) : SbPList (sizehint) { }
  SoDetailList(const SoDetailList & l);
  ~SoDetailList();

  void append(SoDetail * detail) {
    SbPList::append((void*) detail);
  }
  void insert(SoDetail * detail, const int insertbefore) {
    SbPList::insert((void*) detail, insertbefore);
  }
  void truncate(const int length, const int fit = 0); 
  void copy(const SoDetailList & l);
  SoDetailList & operator=(const SoDetailList & l) {
    this->copy(l);
    return *this;
  }
  SoDetail * operator[](const int idx) const {
    return (SoDetail*) ((*(const SbPList*)this)[idx]);
  }
  void set(const int index, SoDetail * item);
};

#line 57 "c:\\coin3d\\include\\inventor\\lists\\sodetaillist.h"
#line 38 "c:\\coin3d\\include\\inventor\\solists.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\soenabledelementslist.h"


























#line 1 "c:\\coin3d\\include\\inventor\\lists\\sotypelist.h"


























#line 1 "c:\\coin3d\\include\\inventor\\lists\\sbplist.h"
































































































































































#line 28 "c:\\coin3d\\include\\inventor\\lists\\sotypelist.h"
#line 1 "c:\\coin3d\\include\\inventor\\sotype.h"















































































































































#line 29 "c:\\coin3d\\include\\inventor\\lists\\sotypelist.h"

class __declspec(dllimport) SoTypeList : public SbPList {
public:
  SoTypeList(void) : SbPList() { }
  SoTypeList(const int sizehint) : SbPList(sizehint) { }
  SoTypeList(const SoTypeList & l) : SbPList(l) { }

  void append(const SoType type);
  int find(const SoType type) const;
  void insert(const SoType type, const int insertbefore);
  SoType operator[](const int idx) const;
  void set(const int index, const SoType item);
};

#line 44 "c:\\coin3d\\include\\inventor\\lists\\sotypelist.h"
#line 28 "c:\\coin3d\\include\\inventor\\lists\\soenabledelementslist.h"

class __declspec(dllimport) SoEnabledElementsList {
public:
  SoEnabledElementsList(SoEnabledElementsList * const parentlist);
  ~SoEnabledElementsList();

  const SoTypeList & getElements(void) const;
  void enable(const SoType elementtype, const int stackindex);
  void merge(const SoEnabledElementsList & eel);

  static int getCounter(void);

private:
  class SoEnabledElementsListP * pimpl;
};

#line 45 "c:\\coin3d\\include\\inventor\\lists\\soenabledelementslist.h"
#line 39 "c:\\coin3d\\include\\inventor\\solists.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\soengineoutputlist.h"


























#line 1 "c:\\coin3d\\include\\inventor\\lists\\sbplist.h"
































































































































































#line 28 "c:\\coin3d\\include\\inventor\\lists\\soengineoutputlist.h"

class SoEngineOutput;

class __declspec(dllimport) SoEngineOutputList : public SbPList {
public:
  SoEngineOutputList(void) : SbPList() { }
  SoEngineOutputList(const int sizehint) : SbPList(sizehint) { }
  SoEngineOutputList(const SoEngineOutputList & l) : SbPList(l) { }
  
  void append(SoEngineOutput * output) {
    SbPList::append((void *) output);
  }
  void insert(SoEngineOutput * output, const int insertbefore) { 
    SbPList::insert((void *) output, insertbefore); 
  }
  SoEngineOutput * operator [](const int idx) const {
    return (SoEngineOutput*) SbPList::operator[](idx);
  }
  void set(const int idx, SoEngineOutput * item) {
    SbPList::operator[](idx) = (void*) item;
  }
};

#line 52 "c:\\coin3d\\include\\inventor\\lists\\soengineoutputlist.h"
#line 40 "c:\\coin3d\\include\\inventor\\solists.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\soenginelist.h"


























#line 1 "c:\\coin3d\\include\\inventor\\lists\\sobaselist.h"























































#line 28 "c:\\coin3d\\include\\inventor\\lists\\soenginelist.h"

class SoEngine;

class __declspec(dllimport) SoEngineList : public SoBaseList {
  typedef SoBaseList inherited;

public:
  SoEngineList(void);
  SoEngineList(const int size);
  SoEngineList(const SoEngineList & el);
  ~SoEngineList();

  void append(SoEngine * const ptr);
  SoEngine * operator[](const int i) const;
  SoEngineList & operator=(const SoEngineList & el);
};

#line 46 "c:\\coin3d\\include\\inventor\\lists\\soenginelist.h"
#line 41 "c:\\coin3d\\include\\inventor\\solists.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\sofieldlist.h"


























#line 1 "c:\\coin3d\\include\\inventor\\lists\\sbplist.h"
































































































































































#line 28 "c:\\coin3d\\include\\inventor\\lists\\sofieldlist.h"

class SoField;

class __declspec(dllimport) SoFieldList : public SbPList {
public:
  SoFieldList(void) : SbPList() { }
  SoFieldList(const int sizehint) : SbPList(sizehint) { }
  SoFieldList(const SoFieldList & l) : SbPList(l) { }
  
  void append(SoField * field) { 
    SbPList::append((void *) field); 
  }
  void insert(SoField * field, const int insertbefore) {
    SbPList::insert((void *) field, insertbefore); 
  }

  SoField * operator [](const int idx) const {
    return (SoField*) SbPList::operator[](idx);
  }
  void set(const int idx, SoField * field) {
    SbPList::operator[](idx) = (void*) field;
  }
  SoField * get(const int idx) const {
    return (SoField*) SbPList::get(idx);
  }
};

#line 56 "c:\\coin3d\\include\\inventor\\lists\\sofieldlist.h"
#line 42 "c:\\coin3d\\include\\inventor\\solists.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\sonodelist.h"













































#line 43 "c:\\coin3d\\include\\inventor\\solists.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\sopathlist.h"


























#line 1 "c:\\coin3d\\include\\inventor\\lists\\sobaselist.h"























































#line 28 "c:\\coin3d\\include\\inventor\\lists\\sopathlist.h"

class SoPath;

class __declspec(dllimport) SoPathList : public SoBaseList {
  typedef SoBaseList inherited;

public:
  SoPathList(void);
  SoPathList(const int size);
  SoPathList(const SoPathList & pl);
  ~SoPathList();

  void append(SoPath * const path);
  SoPath * operator[](const int i) const;
  SoPathList & operator=(const SoPathList & pl);
  int findPath(const SoPath & path) const;
  void sort(void);
  void uniquify(void);
};

#line 49 "c:\\coin3d\\include\\inventor\\lists\\sopathlist.h"
#line 44 "c:\\coin3d\\include\\inventor\\solists.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\sopickedpointlist.h"


























#line 1 "c:\\coin3d\\include\\inventor\\lists\\sbplist.h"
































































































































































#line 28 "c:\\coin3d\\include\\inventor\\lists\\sopickedpointlist.h"

class SoPickedPoint;

class __declspec(dllimport) SoPickedPointList : public SbPList {
public:
  SoPickedPointList(void) : SbPList() { }
  SoPickedPointList(const int sizehint) : SbPList(sizehint) { }
  SoPickedPointList(const SoPickedPointList & l);
  ~SoPickedPointList() { this->truncate(0); }
  
  void append(SoPickedPoint * pp) { 
    SbPList::append((void *) pp); 
  }
  void insert(SoPickedPoint * pp, const int insertbefore) { 
    SbPList::insert((void *) pp, insertbefore); 
  }
  SoPickedPoint * operator[](const int idx) const {
    return (SoPickedPoint*) SbPList::operator[](idx);
  } 

  void truncate(const int start, const int fit = 0);
  void set(const int idx, SoPickedPoint * pp);

};

#line 54 "c:\\coin3d\\include\\inventor\\lists\\sopickedpointlist.h"
#line 45 "c:\\coin3d\\include\\inventor\\solists.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\sotypelist.h"











































#line 46 "c:\\coin3d\\include\\inventor\\solists.h"

#line 48 "c:\\coin3d\\include\\inventor\\solists.h"
#line 34 "c:\\coin3d\\include\\inventor\\sopath.h"
#line 35 "c:\\coin3d\\include\\inventor\\sopath.h"


class SoWriteAction;
class SoNotList;
class SoInput;
class SoPathList;


class __declspec(dllimport) SoPath : public SoBase {
  typedef SoBase inherited;

public:
  static void initClass(void);

  SoPath(const int approxlength = 4);
  SoPath(SoNode * const head);
  SoPath(const SoPath & rhs);

  SoPath & operator=(const SoPath & rhs);

  static SoType getClassTypeId(void);
  virtual SoType getTypeId(void) const;

  void setHead(SoNode * const head);
  SoNode * getHead(void) const;
  void append(const int childindex);
  void append(SoNode * const node);
  void append(const SoPath * const frompath);
  void push(const int childindex);
  void pop(void);
  SoNode * getTail(void) const;
  SoNode * getNode(const int index) const;
  SoNode * getNodeFromTail(const int index) const;
  int getIndex(const int index) const;
  int getIndexFromTail(const int index) const;
  int getLength(void) const;
  void truncate(const int length);

  int findFork(const SoPath * const path) const;
  int findNode(const SoNode * const node) const;

  SbBool containsNode(const SoNode * const node) const;
  SbBool containsPath(const SoPath * const path) const;
  SoPath * copy(const int startfromnodeindex = 0, int numnodes = 0) const;
  friend __declspec(dllimport) SbBool operator==(const SoPath & lhs, const SoPath & rhs);
  friend __declspec(dllimport) SbBool operator!=(const SoPath & lhs, const SoPath & rhs);

  static SoPath * getByName(const SbName name);
  static int getByName(const SbName name, SoPathList & l);

  void insertIndex(SoNode * const parent, const int newindex);
  void removeIndex(SoNode * const parent, const int oldindex);
  void replaceIndex(SoNode * const parent, const int index,
                    SoNode * const newchild);
  SbBool isRelevantNotification(SoNotList * const l) const;

  virtual void write(SoWriteAction * action);

protected:
  virtual ~SoPath();
  void auditPath(const SbBool flag);

private:
  static void * createInstance(void);
  void append(SoNode * const node, const int index);
  int getFullLength(void) const;
  void truncate(const int length, const SbBool donotify);
  virtual SbBool readInstance(SoInput * in, unsigned short flags);
  void setFirstHidden(void);

  SoNodeList nodes;
  SbList<int> indices;
  SbBool isauditing;
  int firsthidden;
  SbBool firsthiddendirty;
  static SoType classTypeId;

  friend class SoFullPath;
  friend class SoNodeKitPath;
  friend class SoAction;
  friend class SoTempPath;
};



inline int
SoPath::getFullLength(void) const
{
  return this->nodes.getLength();
}

inline void
SoPath::push(const int childindex)
{
  this->append(childindex);
}

inline void
SoPath::pop(void)
{
  this->truncate(this->getFullLength() - 1);
}






#line 1 "c:\\coin3d\\include\\inventor\\sofullpath.h"





















































#line 144 "c:\\coin3d\\include\\inventor\\sopath.h"
#line 1 "c:\\coin3d\\include\\inventor\\misc\\solightpath.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 28 "c:\\coin3d\\include\\inventor\\misc\\solightpath.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\sblist.h"





































































































































































































































#line 29 "c:\\coin3d\\include\\inventor\\misc\\solightpath.h"

class SoNode;
class SoTempPath;

class __declspec(dllimport) SoLightPath {
public:
  SoLightPath(SoNode *node, const int approxlength);
  SoLightPath(const int approxlength);
  ~SoLightPath();

  void setHead(SoNode * const node);
  void append(const int childindex);
  void push(const int childindex);
  void pop(void);
  void setTail(const int childindex);
  SoNode *getTail(void) const;
  SoNode *getHead(void) const;
  SoNode *getNode(const int index) const;
  int getIndex(const int index) const;
  int getFullLength() const;
  void truncate(const int startindex);

  void makeTempPath(SoTempPath *path) const;
private:
  SoNode *headnode;
  SbList <int> indices;
};

#line 58 "c:\\coin3d\\include\\inventor\\misc\\solightpath.h"
#line 145 "c:\\coin3d\\include\\inventor\\sopath.h"
#line 146 "c:\\coin3d\\include\\inventor\\sopath.h"

#line 148 "c:\\coin3d\\include\\inventor\\sopath.h"
#line 28 "c:\\coin3d\\include\\inventor\\sofullpath.h"

class __declspec(dllimport) SoFullPath : public SoPath {
  typedef SoPath inherited;
  friend class SoTempPath;

private:
  SoFullPath(const int approxLength);
  virtual ~SoFullPath(void);

public:
  void pop(void);
  SoNode * getTail(void) const;
  SoNode * getNodeFromTail(const int index) const;
  int getIndexFromTail(const int index) const;
  int getLength(void) const;
};



inline void
SoFullPath::pop(void)
{
  this->truncate(this->nodes.getLength() - 1);
}

#line 54 "c:\\coin3d\\include\\inventor\\sofullpath.h"
#line 28 "c:\\coin3d\\include\\inventor\\misc\\sotemppath.h"

class __declspec(dllimport) SoTempPath : public SoFullPath {
public:
  SoTempPath(const int approxlength);
  
  
  void simpleAppend(SoNode * const node, const int index);
  void replaceTail(SoNode * const node, const int index);
};

#line 39 "c:\\coin3d\\include\\inventor\\misc\\sotemppath.h"
#line 30 "c:\\coin3d\\include\\inventor\\actions\\soaction.h"




#line 1 "c:\\coin3d\\include\\inventor\\lists\\soactionmethodlist.h"


























#line 1 "c:\\coin3d\\include\\inventor\\lists\\sbplist.h"
































































































































































#line 28 "c:\\coin3d\\include\\inventor\\lists\\soactionmethodlist.h"
#line 1 "c:\\coin3d\\include\\inventor\\sotype.h"















































































































































#line 29 "c:\\coin3d\\include\\inventor\\lists\\soactionmethodlist.h"

class SoAction;
class SoNode;

typedef void (* SoActionMethod)(SoAction *, SoNode *);

class __declspec(dllimport) SoActionMethodList : public SbPList {
  typedef SbPList inherited;

public:
  SoActionMethodList(SoActionMethodList * const parentlist);
  ~SoActionMethodList();

  SoActionMethod & operator[](const int index);

  void addMethod(const SoType node, const SoActionMethod method);
  void setUp(void);

private:
  class SoActionMethodListP * pimpl;
};

#line 52 "c:\\coin3d\\include\\inventor\\lists\\soactionmethodlist.h"
#line 35 "c:\\coin3d\\include\\inventor\\actions\\soaction.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\soenabledelementslist.h"












































#line 36 "c:\\coin3d\\include\\inventor\\actions\\soaction.h"
























class SoEnabledElementsList;
class SoNode;
class SoPath;
class SoPathList;
class SoState;
class SoActionP;

class __declspec(dllimport) SoAction {
public:
  enum AppliedCode { NODE = 0, PATH = 1, PATH_LIST = 2 };
  enum PathCode { NO_PATH = 0, IN_PATH = 1, BELOW_PATH = 2, OFF_PATH = 3 };

  virtual ~SoAction();

  static void initClass(void);
  static void initClasses(void);

  static SoType getClassTypeId(void);
  virtual SoType getTypeId(void) const = 0;
  virtual SbBool isOfType(SoType type) const;


  virtual void apply(SoNode * root);
  virtual void apply(SoPath * path);
  virtual void apply(const SoPathList & pathlist, SbBool obeysrules = 0);
  void apply(SoAction * beingApplied);
  virtual void invalidateState(void);

  static void nullAction(SoAction * action, SoNode * node);

  AppliedCode getWhatAppliedTo(void) const;
  SoNode * getNodeAppliedTo(void) const;
  SoPath * getPathAppliedTo(void) const;
  const SoPathList * getPathListAppliedTo(void) const;
  const SoPathList * getOriginalPathListAppliedTo(void) const;

  SbBool isLastPathListAppliedTo(void) const;

  PathCode getPathCode(int & numindices, const int * & indices);

  void traverse(SoNode * const node);
  SbBool hasTerminated(void) const;

  const SoPath * getCurPath(void);
  SoState * getState(void) const;

  PathCode getCurPathCode(void) const;
  virtual SoNode * getCurPathTail(void);
  void usePathCode(int & numindices, const int * & indices);
  
  void pushCurPath(const int childindex, SoNode * node = 0);
  void popCurPath(const PathCode prevpathcode);
  void pushCurPath(void);
  
  void popPushCurPath(const int childindex, SoNode * node = 0);
  void popCurPath(void);

public:
  void switchToPathTraversal(SoPath * path);
  void switchToNodeTraversal(SoNode * node);


protected:
  SoAction(void);

  virtual void beginTraversal(SoNode * node);
  virtual void endTraversal(SoNode * node);
  void setTerminated(const SbBool flag);

  virtual const SoEnabledElementsList & getEnabledElements(void) const;
  virtual SbBool shouldCompactPathList(void) const;

  SoState * state;
  SoActionMethodList * traversalMethods;

  


  static SoEnabledElementsList * getClassEnabledElements(void);
  static SoActionMethodList * getClassActionMethods(void);

private:
  static SoType classTypeId;
  



  static void atexit_cleanup(void);
  static SoEnabledElementsList * enabledElements;
  static SoActionMethodList * methods;
  SoTempPath currentpath;
  PathCode currentpathcode;

  SoActionP * pimpl;
};



inline SoAction::PathCode
SoAction::getCurPathCode(void) const
{
  return this->currentpathcode;
}

inline void
SoAction::popCurPath(const PathCode prevpathcode)
{
  this->currentpath.pop();
  this->currentpathcode = prevpathcode;
}

#line 172 "c:\\coin3d\\include\\inventor\\actions\\soaction.h"
#line 28 "c:\\coin3d\\include\\inventor\\actions\\soglrenderaction.h"
#line 1 "c:\\coin3d\\include\\inventor\\actions\\sosubaction.h"




























#line 1 "c:\\coin3d\\include\\inventor\\sbstring.h"












































































































































#line 30 "c:\\coin3d\\include\\inventor\\actions\\sosubaction.h"
#line 1 "c:\\coin3d\\include\\inventor\\actions\\soaction.h"











































































































































































#line 31 "c:\\coin3d\\include\\inventor\\actions\\sosubaction.h"



#line 35 "c:\\coin3d\\include\\inventor\\actions\\sosubaction.h"























































































#line 123 "c:\\coin3d\\include\\inventor\\actions\\sosubaction.h"
#line 29 "c:\\coin3d\\include\\inventor\\actions\\soglrenderaction.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 30 "c:\\coin3d\\include\\inventor\\actions\\soglrenderaction.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbviewportregion.h"



























#line 1 "c:\\coin3d\\include\\inventor\\sbvec2s.h"
















































































#line 29 "c:\\coin3d\\include\\inventor\\sbviewportregion.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbvec2f.h"













































































#line 30 "c:\\coin3d\\include\\inventor\\sbviewportregion.h"

class __declspec(dllimport) SbViewportRegion {
public:
  SbViewportRegion(void);
  SbViewportRegion(short width, short height);
  SbViewportRegion(SbVec2s winSize);
  SbViewportRegion(const SbViewportRegion & vpReg);

  void setWindowSize(short width, short height);
  void setWindowSize(SbVec2s winSize);
  void setViewport(float left, float bottom,
                   float width, float height);
  void setViewport(SbVec2f origin, SbVec2f size);
  void setViewportPixels(short left, short bottom,
                         short width, short height);
  void setViewportPixels(SbVec2s origin, SbVec2s size);
  const SbVec2s & getWindowSize(void) const;
  const SbVec2f & getViewportOrigin(void) const;
  const SbVec2s & getViewportOriginPixels(void) const;
  const SbVec2f & getViewportSize(void) const;
  const SbVec2s & getViewportSizePixels(void) const;
  float getViewportAspectRatio(void) const;
  void scaleWidth(float ratio);
  void scaleHeight(float ratio);
  void setPixelsPerInch(float ppi);
  float getPixelsPerInch(void) const;
  float getPixelsPerPoint(void) const;
  friend __declspec(dllimport) int operator ==(const SbViewportRegion & reg1,
                         const SbViewportRegion & reg2);

  void print(FILE * file) const;

private:
  SbVec2s winsize;
  SbVec2f vporigin;
  SbVec2f vpsize;
  SbVec2s vporigin_s;
  SbVec2s vpsize_s;
  float pixperinch;
};

__declspec(dllimport) int operator ==(const SbViewportRegion & reg1, const SbViewportRegion & reg2);

#line 74 "c:\\coin3d\\include\\inventor\\sbviewportregion.h"
#line 31 "c:\\coin3d\\include\\inventor\\actions\\soglrenderaction.h"
#line 1 "c:\\coin3d\\include\\inventor\\system\\inttypes.h"


















































































































































































#line 32 "c:\\coin3d\\include\\inventor\\actions\\soglrenderaction.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\sopathlist.h"
















































#line 33 "c:\\coin3d\\include\\inventor\\actions\\soglrenderaction.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\sblist.h"





































































































































































































































#line 34 "c:\\coin3d\\include\\inventor\\actions\\soglrenderaction.h"

typedef void SoGLRenderPassCB(void * userdata);
typedef void SoGLPreRenderCB(void * userdata, class SoGLRenderAction * action);

class __declspec(dllimport) SoGLRenderAction : public SoAction {
  typedef SoAction inherited;

  public: virtual SoType getTypeId(void) const; static SoType getClassTypeId(void); static void addMethod(const SoType type, SoActionMethod method); static void enableElement(const SoType type, const int stackindex); protected: virtual const SoEnabledElementsList & getEnabledElements(void) const; static SoEnabledElementsList * getClassEnabledElements(void); static SoActionMethodList * getClassActionMethods(void); private: static void atexit_cleanup(void); static SoEnabledElementsList * enabledElements; static SoActionMethodList * methods; static SoType classTypeId;

public:
  SoGLRenderAction(const SbViewportRegion & viewportregion);
  virtual ~SoGLRenderAction();

  static void initClass(void);

  enum TransparencyType {
    SCREEN_DOOR,
    ADD, DELAYED_ADD, SORTED_OBJECT_ADD,
    BLEND, DELAYED_BLEND, SORTED_OBJECT_BLEND,
    
    SORTED_OBJECT_SORTED_TRIANGLE_ADD,
    SORTED_OBJECT_SORTED_TRIANGLE_BLEND,
    NONE, SORTED_LAYERS_BLEND
  };

  enum AbortCode {
    CONTINUE, ABORT, PRUNE, DELAY
  };

  typedef AbortCode SoGLRenderAbortCB(void * userdata);

  void setViewportRegion(const SbViewportRegion & newregion);
  const SbViewportRegion & getViewportRegion(void) const;
  void setUpdateArea(const SbVec2f & origin, const SbVec2f & size);
  void getUpdateArea(SbVec2f & origin, SbVec2f & size) const;
  void setAbortCallback(SoGLRenderAbortCB * const func, void * const userdata);
  void setTransparencyType(const TransparencyType type);
  TransparencyType getTransparencyType(void) const;
  void setSmoothing(const SbBool smooth);
  SbBool isSmoothing(void) const;
  void setNumPasses(const int num);
  int getNumPasses(void) const;
  void setPassUpdate(const SbBool flag);
  SbBool isPassUpdate(void) const;
  void setPassCallback(SoGLRenderPassCB * const func, void * const userdata);
  void setCacheContext(const uint32_t context);
  uint32_t getCacheContext(void) const;

  void addDelayedPath(SoPath * path);
  SbBool isRenderingDelayedPaths(void) const;

  SbBool handleTransparency(SbBool istransparent = 0);
  int getCurPass(void) const;
  SbBool abortNow(void);

  void setRenderingIsRemote(SbBool isremote);
  SbBool getRenderingIsRemote(void) const;

  virtual void invalidateState(void);

  void addPreRenderCallback(SoGLPreRenderCB * func, void * userdata);
  void removePreRenderCallback(SoGLPreRenderCB * func, void * userdata);
 
  void setSortedLayersNumPasses(int num);
  int getSortedLayersNumPasses() const;
  
protected:
  virtual void beginTraversal(SoNode * node);
  virtual void endTraversal(SoNode * node);

private:
  void addTransPath(SoPath * path);
  void doPathSort(void);

  class SoGLRenderActionP * pimpl;
  friend class SoGLRenderActionP;
};

#line 113 "c:\\coin3d\\include\\inventor\\actions\\soglrenderaction.h"
#line 28 "c:\\coin3d\\include\\inventor\\actions\\solinehighlightrenderaction.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbcolor.h"


























#line 1 "c:\\coin3d\\include\\inventor\\system\\inttypes.h"


















































































































































































#line 28 "c:\\coin3d\\include\\inventor\\sbcolor.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbvec3f.h"






































































































#line 29 "c:\\coin3d\\include\\inventor\\sbcolor.h"

class __declspec(dllimport) SbColor : public SbVec3f {
public:
  SbColor(void);
  SbColor(const SbVec3f& v);
  SbColor(const float* const rgb);
  SbColor(const float r, const float g, const float b);

  SbColor & setHSVValue(float h, float s, float v);
  SbColor & setHSVValue(const float hsv[3]);
  void getHSVValue(float &h, float &s, float &v) const;
  void getHSVValue(float hsv[3]) const;
  SbColor & setPackedValue(const uint32_t rgba, float& transparency);
  uint32_t getPackedValue(const float transparency = 0.0f) const;

private:
  float red(void) const { return (*this)[0]; }
  float green(void) const { return (*this)[1]; }
  float blue(void) const { return (*this)[2]; }
  uint32_t convertToUInt(const float val) { return (uint32_t)(val*255.0f);}
};

#line 52 "c:\\coin3d\\include\\inventor\\sbcolor.h"
#line 29 "c:\\coin3d\\include\\inventor\\actions\\solinehighlightrenderaction.h"

class __declspec(dllimport) SoLineHighlightRenderAction : public SoGLRenderAction {
  typedef SoGLRenderAction inherited;

  public: virtual SoType getTypeId(void) const; static SoType getClassTypeId(void); static void addMethod(const SoType type, SoActionMethod method); static void enableElement(const SoType type, const int stackindex); protected: virtual const SoEnabledElementsList & getEnabledElements(void) const; static SoEnabledElementsList * getClassEnabledElements(void); static SoActionMethodList * getClassActionMethods(void); private: static void atexit_cleanup(void); static SoEnabledElementsList * enabledElements; static SoActionMethodList * methods; static SoType classTypeId;

public:
  SoLineHighlightRenderAction(void);
  SoLineHighlightRenderAction(const SbViewportRegion & viewportregion);
  virtual ~SoLineHighlightRenderAction();

  static void initClass(void);

  virtual void apply(SoNode * node);
  virtual void apply(SoPath * path);
  virtual void apply(const SoPathList & pathlist, SbBool obeysrules = 0);
  void setVisible(const SbBool visible);
  SbBool isVisible(void) const;
  void setColor(const SbColor & color);
  const SbColor & getColor(void);
  void setLinePattern(uint16_t pattern);
  uint16_t getLinePattern(void) const;
  void setLineWidth(const float width);
  float getLineWidth(void) const;

protected:
  SbBool hlVisible;
  
  
  
  
  
  

private:
  class SoLineHighlightRenderActionP * pimpl;
  friend class SoLineHighlightRenderActionP;
};

#line 69 "c:\\coin3d\\include\\inventor\\actions\\solinehighlightrenderaction.h"
#line 12 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\soeventcallback.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodes\\soeventcallback.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\sblist.h"





































































































































































































































#line 29 "c:\\coin3d\\include\\inventor\\nodes\\soeventcallback.h"



#line 1 "c:\\coin3d\\include\\inventor\\actions\\sohandleeventaction.h"


























#line 1 "c:\\coin3d\\include\\inventor\\actions\\soaction.h"











































































































































































#line 28 "c:\\coin3d\\include\\inventor\\actions\\sohandleeventaction.h"
#line 1 "c:\\coin3d\\include\\inventor\\actions\\sosubaction.h"


























































































































#line 29 "c:\\coin3d\\include\\inventor\\actions\\sohandleeventaction.h"

class SbViewportRegion;
class SoEvent;
class SoPickedPoint;
class SoPickedPointList;


class __declspec(dllimport) SoHandleEventAction : public SoAction {
  typedef SoAction inherited;

  public: virtual SoType getTypeId(void) const; static SoType getClassTypeId(void); static void addMethod(const SoType type, SoActionMethod method); static void enableElement(const SoType type, const int stackindex); protected: virtual const SoEnabledElementsList & getEnabledElements(void) const; static SoEnabledElementsList * getClassEnabledElements(void); static SoActionMethodList * getClassActionMethods(void); private: static void atexit_cleanup(void); static SoEnabledElementsList * enabledElements; static SoActionMethodList * methods; static SoType classTypeId;

public:
  SoHandleEventAction(const SbViewportRegion & viewportregion);
  virtual ~SoHandleEventAction();
  static void initClass(void);

  void setViewportRegion(const SbViewportRegion & newregion);
  const SbViewportRegion & getViewportRegion(void) const;
  void setEvent(const SoEvent * ev);
  const SoEvent * getEvent(void) const;
  void setHandled(void);
  SbBool isHandled(void) const;
  void setGrabber(SoNode * node);
  void releaseGrabber(void);
  SoNode * getGrabber(void) const;
  void setPickRoot(SoNode * node);
  SoNode * getPickRoot(void) const;
  void setPickRadius(const float radiusinpixels);
  const SoPickedPoint * getPickedPoint(void);
  const SoPickedPointList & getPickedPointList(void);

protected:
  virtual void beginTraversal(SoNode * node);

private:
  class SoHandleEventActionP * pimpl;
};

#line 69 "c:\\coin3d\\include\\inventor\\actions\\sohandleeventaction.h"
#line 33 "c:\\coin3d\\include\\inventor\\nodes\\soeventcallback.h"
#line 34 "c:\\coin3d\\include\\inventor\\nodes\\soeventcallback.h"

class SoEventCallback;
class SoPath;
class SoEvent;
class SoPickedPoint;
class SoHandleEventAction;

typedef void SoEventCallbackCB(void * userdata, SoEventCallback * node);

class __declspec(dllimport) SoEventCallback : public SoNode {
  typedef SoNode inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoEventCallback(void);

  void setPath(SoPath * path);
  const SoPath * getPath(void);

  void addEventCallback(SoType eventtype, SoEventCallbackCB * f,
                        void * userdata = 0);
  void removeEventCallback(SoType eventtype, SoEventCallbackCB * f,
                           void * userdata = 0);

  SoHandleEventAction * getAction(void) const;
  const SoEvent * getEvent(void) const;
  const SoPickedPoint * getPickedPoint(void) const;

  void setHandled(void);
  SbBool isHandled(void) const;

  void grabEvents(void);
  void releaseEvents(void);

protected:
  virtual ~SoEventCallback();

  virtual void handleEvent(SoHandleEventAction * action);

private:

  struct CallbackInfo {
    SoEventCallbackCB * func;
    SoType eventtype;
    void * userdata;

    
    
    

    SbBool operator==(const CallbackInfo & cbi) {
      return this->func == cbi.func && this->eventtype == cbi.eventtype && this->userdata == cbi.userdata;
    }
    SbBool operator!=(const CallbackInfo & cbi) {
      return !(*this == cbi);
    }
  };

  SbList<CallbackInfo> callbacks;
  SoHandleEventAction * heaction;
  SoPath * path;

};

#line 101 "c:\\coin3d\\include\\inventor\\nodes\\soeventcallback.h"
#line 13 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\events\\somousebuttonevent.h"


























#line 1 "c:\\coin3d\\include\\inventor\\events\\sobuttonevent.h"


























#line 1 "c:\\coin3d\\include\\inventor\\events\\sosubevent.h"


























#line 1 "c:\\coin3d\\include\\inventor\\events\\soevent.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sotype.h"















































































































































#line 28 "c:\\coin3d\\include\\inventor\\events\\soevent.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbvec2s.h"
















































































#line 29 "c:\\coin3d\\include\\inventor\\events\\soevent.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbtime.h"




























#line 1 "c:\\coin3d\\include\\inventor\\system\\inttypes.h"


















































































































































































#line 30 "c:\\coin3d\\include\\inventor\\sbtime.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 31 "c:\\coin3d\\include\\inventor\\sbtime.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbstring.h"












































































































































#line 32 "c:\\coin3d\\include\\inventor\\sbtime.h"






#line 39 "c:\\coin3d\\include\\inventor\\sbtime.h"


class __declspec(dllimport) SbTime {
public:
  SbTime(void);
  SbTime(const double sec);
  SbTime(const int32_t sec, const long usec);
  SbTime(const struct timeval * const tv);
  static SbTime getTimeOfDay(void);
  void setToTimeOfDay(void);
  static SbTime zero(void);

  static SbTime max(void);
  static SbTime maxTime(void);
  void setValue(const double sec);
  void setValue(const int32_t sec, const long usec);
  void setValue(const struct timeval * const tv);
  void setMsecValue(const unsigned long msec);
  double getValue(void) const;
  void getValue(time_t & sec, long & usec) const;
  void getValue(struct timeval * tv) const;
  unsigned long getMsecValue(void) const;
  SbString format(const char * const fmt = "%S.%i") const;
  SbString formatDate(const char * const fmt = 0) const;
  SbBool parsedate(const char * const date);
  friend __declspec(dllimport) SbTime operator +(const SbTime & t0, const SbTime & t1);
  friend __declspec(dllimport) SbTime operator -(const SbTime & t0, const SbTime & t1);
  SbTime & operator +=(const SbTime & tm);
  SbTime & operator -=(const SbTime & tm);
  SbTime operator-(void) const;
  friend __declspec(dllimport) SbTime operator *(const double s, const SbTime & tm);
  friend __declspec(dllimport) SbTime operator *(const SbTime & tm, const double s);
  friend __declspec(dllimport) SbTime operator /(const SbTime & tm, const double s);
  SbTime & operator *=(const double s);
  SbTime & operator /=(const double s);
  double operator /(const SbTime & tm) const;
  SbTime operator %(const SbTime & tm) const;
  int operator ==(const SbTime & tm) const;
  int operator !=(const SbTime & tm) const;
  SbBool operator <(const SbTime & tm) const;
  SbBool operator >(const SbTime & tm) const;
  SbBool operator <=(const SbTime & tm) const;
  SbBool operator >=(const SbTime & tm) const;

  void print(FILE * fp) const;

private:
  double dtime;
  void addToString(SbString & str, const double val) const;
};

__declspec(dllimport) SbTime operator +(const SbTime & t0, const SbTime & t1);
__declspec(dllimport) SbTime operator -(const SbTime & t0, const SbTime & t1);
__declspec(dllimport) SbTime operator *(const double s, const SbTime & tm);
__declspec(dllimport) SbTime operator *(const SbTime & tm, const double s);
__declspec(dllimport) SbTime operator /(const SbTime & tm, const double s);







#line 103 "c:\\coin3d\\include\\inventor\\sbtime.h"

#line 105 "c:\\coin3d\\include\\inventor\\sbtime.h"
#line 30 "c:\\coin3d\\include\\inventor\\events\\soevent.h"

class SbViewportRegion;
class SbVec2f;

class __declspec(dllimport) SoEvent {

public:
  SoEvent(void);
  virtual ~SoEvent();

  SbBool isOfType(SoType type) const;
  static SoType getClassTypeId(void);
  virtual SoType getTypeId(void) const;

  void setTime(const SbTime t);
  SbTime getTime(void) const;

  void setPosition(const SbVec2s & p);
  const SbVec2s & getPosition(void) const;
  const SbVec2s getPosition(const SbViewportRegion & vpRgn) const;
  const SbVec2f getNormalizedPosition(const SbViewportRegion & vpRgn) const;

  void setShiftDown(SbBool isDown);
  SbBool wasShiftDown(void) const;
  void setCtrlDown(SbBool isDown);
  SbBool wasCtrlDown(void) const;
  void setAltDown(SbBool isDown);
  SbBool wasAltDown(void) const;

  static void initClass(void);

private:
  static SoType classTypeId;

  SbTime timeofevent;
  SbVec2s positionofevent;

  static void initEvents(void);

  struct {
    unsigned int shiftdown : 1;
    unsigned int ctrldown  : 1;
    unsigned int altdown   : 1;
  } modifiers;
};

#line 77 "c:\\coin3d\\include\\inventor\\events\\soevent.h"
#line 28 "c:\\coin3d\\include\\inventor\\events\\sosubevent.h"




























#line 57 "c:\\coin3d\\include\\inventor\\events\\sosubevent.h"
#line 28 "c:\\coin3d\\include\\inventor\\events\\sobuttonevent.h"

class __declspec(dllimport) SoButtonEvent : public SoEvent {
  typedef SoEvent inherited;

  private: static SoType classTypeId; public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const;

public:
  enum State {
    UP, DOWN, UNKNOWN
  };

  SoButtonEvent(void);
  virtual ~SoButtonEvent();

  void setState(SoButtonEvent::State state);
  SoButtonEvent::State getState(void) const;

  static void initClass(void);

private:
  State buttonstate;
};

#line 52 "c:\\coin3d\\include\\inventor\\events\\sobuttonevent.h"
#line 28 "c:\\coin3d\\include\\inventor\\events\\somousebuttonevent.h"







class __declspec(dllimport) SoMouseButtonEvent : public SoButtonEvent {
  typedef SoButtonEvent inherited;

  private: static SoType classTypeId; public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const;

public:
  enum Button {
    ANY, BUTTON1, BUTTON2, BUTTON3, BUTTON4, BUTTON5
  };

  SoMouseButtonEvent(void);
  virtual ~SoMouseButtonEvent();

  void setButton(SoMouseButtonEvent::Button button);
  SoMouseButtonEvent::Button getButton(void) const;

  static SbBool isButtonPressEvent(const SoEvent * e,
                                   SoMouseButtonEvent::Button whichButton);
  static SbBool isButtonReleaseEvent(const SoEvent * e,
                                     SoMouseButtonEvent::Button whichButton);

  static void initClass(void);

private:
  Button button;
};

#line 63 "c:\\coin3d\\include\\inventor\\events\\somousebuttonevent.h"
#line 14 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\qt\\viewers\\soqtfullviewer.h"


























#line 1 "c:\\coin3d\\include\\inventor\\qt\\viewers\\soqtviewer.h"












































#line 1 "c:\\coin3d\\include\\inventor\\sbtime.h"








































































































#line 46 "c:\\coin3d\\include\\inventor\\qt\\viewers\\soqtviewer.h"
#line 1 "c:\\coin3d\\include\\inventor\\sotype.h"















































































































































#line 47 "c:\\coin3d\\include\\inventor\\qt\\viewers\\soqtviewer.h"
#line 1 "c:\\coin3d\\include\\inventor\\sblinear.h"



























































#line 48 "c:\\coin3d\\include\\inventor\\qt\\viewers\\soqtviewer.h"

#line 1 "c:\\coin3d\\include\\inventor\\qt\\soqtrenderarea.h"




























#line 1 "c:\\coin3d\\include\\inventor\\sbcolor.h"



















































#line 30 "c:\\coin3d\\include\\inventor\\qt\\soqtrenderarea.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbviewportregion.h"









































































#line 31 "c:\\coin3d\\include\\inventor\\qt\\soqtrenderarea.h"
#line 1 "c:\\coin3d\\include\\inventor\\actions\\soglrenderaction.h"
















































































































#line 32 "c:\\coin3d\\include\\inventor\\qt\\soqtrenderarea.h"
#line 1 "c:\\coin3d\\include\\inventor\\soscenemanager.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sbcolor.h"



















































#line 28 "c:\\coin3d\\include\\inventor\\soscenemanager.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbvec2s.h"
















































































#line 29 "c:\\coin3d\\include\\inventor\\soscenemanager.h"

class SbViewportRegion;
class SoEvent;
class SoGLRenderAction;
class SoAudioRenderAction;
class SoHandleEventAction;
class SoNode;
class SoNodeSensor;
class SoOneShotSensor;
class SoSensor;

class SoSceneManager;
typedef void SoSceneManagerRenderCB(void * userdata, SoSceneManager * mgr);


class __declspec(dllimport) SoSceneManager {
public:
  SoSceneManager(void);
  virtual ~SoSceneManager();
  virtual void render(const SbBool clearwindow = 1,
                      const SbBool clearzbuffer = 1);
  virtual void render(SoGLRenderAction * action,
                      const SbBool initmatrices = 1,
                      const SbBool clearwindow = 1,
                      const SbBool clearzbuffer = 1);
  virtual SbBool processEvent(const SoEvent * const event);
  void reinitialize(void);
  void scheduleRedraw(void);
  virtual void setSceneGraph(SoNode * const sceneroot);
  virtual SoNode * getSceneGraph(void) const;
  void setWindowSize(const SbVec2s & newsize);
  const SbVec2s & getWindowSize(void) const;
  void setSize(const SbVec2s & newsize);
  const SbVec2s & getSize(void) const;
  void setOrigin(const SbVec2s & newOrigin);
  const SbVec2s & getOrigin(void) const;
  void setViewportRegion(const SbViewportRegion & newRegion);
  const SbViewportRegion & getViewportRegion(void) const;
  void setBackgroundColor(const SbColor & color);
  const SbColor & getBackgroundColor(void) const;
  void setBackgroundIndex(const int index);
  int getBackgroundIndex(void) const;
  void setRGBMode(const SbBool onOrOff);
  SbBool isRGBMode(void) const;
  virtual void activate(void);
  virtual void deactivate(void);
  void setRenderCallback(SoSceneManagerRenderCB * f,
                         void * const userData = 0);
  SbBool isAutoRedraw(void) const;
  void setRedrawPriority(const uint32_t priority);
  uint32_t getRedrawPriority(void) const;
  void setAntialiasing(const SbBool smoothing, const int numPasses);
  void getAntialiasing(SbBool & smoothing, int & numPasses) const;
  void setGLRenderAction(SoGLRenderAction * const action);
  SoGLRenderAction * getGLRenderAction(void) const;
  void setAudioRenderAction(SoAudioRenderAction * const action);
  SoAudioRenderAction * getAudioRenderAction(void) const;
  void setHandleEventAction(SoHandleEventAction * hea);
  SoHandleEventAction * getHandleEventAction(void) const;

  static uint32_t getDefaultRedrawPriority(void);
  static void enableRealTimeUpdate(const SbBool flag);
  static SbBool isRealTimeUpdateEnabled(void);

protected:
  int isActive(void) const;
  void redraw(void);

private:
  class SoSceneManagerP * pimpl;
  friend class SoSceneManagerP;
};

#line 103 "c:\\coin3d\\include\\inventor\\soscenemanager.h"
#line 33 "c:\\coin3d\\include\\inventor\\qt\\soqtrenderarea.h"

#line 1 "c:\\coin3d\\include\\inventor\\qt\\soqtglwidget.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 28 "c:\\coin3d\\include\\inventor\\qt\\soqtglwidget.h"
#line 1 "c:\\coin3d\\include\\inventor\\qt\\soqtbasic.h"












































































































































#line 29 "c:\\coin3d\\include\\inventor\\qt\\soqtglwidget.h"
#line 1 "c:\\coin3d\\include\\inventor\\qt\\soqtcomponent.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sblinear.h"



























































#line 28 "c:\\coin3d\\include\\inventor\\qt\\soqtcomponent.h"
#line 1 "c:\\coin3d\\include\\inventor\\qt\\soqtobject.h"


























#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"















#line 17 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"



















#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"




















extern "C" {
#line 59 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"

__declspec(dllimport) void __cdecl _assert(void *, void *, unsigned);


}
#line 65 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"



#line 69 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"
#line 28 "c:\\coin3d\\include\\inventor\\qt\\soqtobject.h"

#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 30 "c:\\coin3d\\include\\inventor\\qt\\soqtobject.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbstring.h"












































































































































#line 31 "c:\\coin3d\\include\\inventor\\qt\\soqtobject.h"
#line 1 "c:\\coin3d\\include\\inventor\\sotype.h"















































































































































#line 32 "c:\\coin3d\\include\\inventor\\qt\\soqtobject.h"

#line 1 "c:\\coin3d\\include\\inventor\\qt\\soqtbasic.h"












































































































































#line 34 "c:\\coin3d\\include\\inventor\\qt\\soqtobject.h"



class __declspec(dllimport) SoQtObject {
  static SoType classTypeId;

public:
  static void initClass(void);
  static SoType getClassTypeId(void);
  virtual SoType getTypeId(void) const = 0;
  SbBool isOfType(SoType type) const;

  static void init(void);

}; 

































































#line 115 "c:\\coin3d\\include\\inventor\\qt\\soqtobject.h"
#line 29 "c:\\coin3d\\include\\inventor\\qt\\soqtcomponent.h"


class QWidget;
#line 33 "c:\\coin3d\\include\\inventor\\qt\\soqtcomponent.h"











class SoQtComponent;
class SoQtCursor;

typedef void SoQtComponentCB(void * user, SoQtComponent * component);
typedef void SoQtComponentVisibilityCB(void * user, SbBool visible);



class __declspec(dllimport) SoQtComponent : public SoQtObject {
  public: static void initClass(void); static SoType getClassTypeId(void); virtual SoType getTypeId(void) const ; private: typedef SoQtObject inherited; static SoType classTypeId;

public:
  virtual ~SoQtComponent();

  virtual void show(void);
  virtual void hide(void);

  virtual void setComponentCursor(const SoQtCursor & cursor);
  static void setWidgetCursor(QWidget * w, const SoQtCursor & cursor);

  SbBool isFullScreen(void) const;
  SbBool setFullScreen(const SbBool onoff);

  SbBool isVisible(void);
  SbBool isTopLevelShell(void) const;

  QWidget * getWidget(void) const;
  QWidget * getBaseWidget(void) const;
  QWidget * getShellWidget(void) const;
  QWidget * getParentWidget(void) const;

  void setSize(const SbVec2s size);
  SbVec2s getSize(void) const;

  void setTitle(const char * const title);
  const char * getTitle(void) const;
  void setIconTitle(const char * const title);
  const char * getIconTitle(void) const;

  const char * getWidgetName(void) const;
  const char * getClassName(void) const;

  void setWindowCloseCallback(SoQtComponentCB * const func,
                              void * const user = 0);
  static SoQtComponent * getComponent(QWidget * widget);

  static void initClasses(void);

protected:
  SoQtComponent(QWidget * const parent = 0,
                   const char * const name = 0,
                   const SbBool embed = 1);

  virtual void afterRealizeHook(void);

  void setClassName(const char * const name);
  void setBaseWidget(QWidget * widget);

  void registerWidget(QWidget * widget);
  void unregisterWidget(QWidget * widget);

  virtual const char * getDefaultWidgetName(void) const;
  virtual const char * getDefaultTitle(void) const;
  virtual const char * getDefaultIconTitle(void) const;

  virtual void sizeChanged(const SbVec2s & size);

  void addVisibilityChangeCallback(SoQtComponentVisibilityCB * const func,
                                   void * const user = 0);
  void removeVisibilityChangeCallback(SoQtComponentVisibilityCB * const func,
                                      void * const user = 0);

private:
  class SoQtComponentP * pimpl;

  friend class SoGuiComponentP;
  friend class SoQtComponentP;
#line 122 "c:\\coin3d\\include\\inventor\\qt\\soqtcomponent.h"

  

















































};



#line 178 "c:\\coin3d\\include\\inventor\\qt\\soqtcomponent.h"
#line 30 "c:\\coin3d\\include\\inventor\\qt\\soqtglwidget.h"


class QEvent;
#line 34 "c:\\coin3d\\include\\inventor\\qt\\soqtglwidget.h"












enum GLModes {
  SO_GL_RGB      = 0x01, SO_GLX_RGB      = SO_GL_RGB,
  SO_GL_DOUBLE   = 0x02, SO_GLX_DOUBLE   = SO_GL_DOUBLE,
  SO_GL_ZBUFFER  = 0x04, SO_GLX_ZBUFFER  = SO_GL_ZBUFFER,
  SO_GL_OVERLAY  = 0x08, SO_GLX_OVERLAY  = SO_GL_OVERLAY,
  SO_GL_STEREO   = 0x10, SO_GLX_STEREO   = SO_GL_STEREO
};



class __declspec(dllimport) SoQtGLWidget : public SoQtComponent {
  public: static void initClass(void); static SoType getClassTypeId(void); virtual SoType getTypeId(void) const ; private: typedef SoQtComponent inherited; static SoType classTypeId;

public:

  void setBorder(const SbBool enable);
  SbBool isBorder(void) const;

  virtual void setDoubleBuffer(const SbBool enable);
  SbBool isDoubleBuffer(void) const;

  void setDrawToFrontBufferEnable(const SbBool enable);
  SbBool isDrawToFrontBufferEnable(void) const;
  
  void setQuadBufferStereo(const SbBool enable);
  SbBool isQuadBufferStereo(void) const;

  void setAccumulationBuffer(const SbBool enable);
  SbBool getAccumulationBuffer(void) const;

  void setStencilBuffer(const SbBool enable);
  SbBool getStencilBuffer(void) const;

  void setOverlayRender(const SbBool onoff);
  SbBool isOverlayRender(void) const;

  QWidget * getGLWidget(void) const;
  QWidget * getNormalWidget(void) const;
  QWidget * getOverlayWidget(void) const;

  SbBool hasOverlayGLArea(void) const;
  SbBool hasNormalGLArea(void) const;

  unsigned long getOverlayTransparentPixel(void);

  
  void getPointSizeLimits(SbVec2f & range, float & granularity);
  void getLineWidthLimits(SbVec2f & range, float & granularity);

protected:
  SoQtGLWidget(QWidget * const parent = 0,
                  const char * const name = 0,
                  const SbBool embed = 1,
                  const int glmodes = SO_GL_RGB,
                  const SbBool build = 1);
  ~SoQtGLWidget();

  virtual void processEvent(QEvent * event);

  QWidget * buildWidget(QWidget * parent);

  virtual void redraw(void) = 0;
  virtual void redrawOverlay(void);

  virtual void initGraphic(void);
  virtual void initOverlayGraphic(void);

  virtual void sizeChanged(const SbVec2s & size);
  virtual void widgetChanged(QWidget * w);

  void setGLSize(const SbVec2s size);
  SbVec2s getGLSize(void) const;
  float getGLAspectRatio(void) const;

  
  void setGlxSize(const SbVec2s size) { this->setGLSize(size); }
  SbVec2s getGlxSize(void) const { return this->getGLSize(); }
  float getGlxAspectRatio(void) const { return this->getGLAspectRatio(); }

  void setStereoBuffer(SbBool flag);
  SbBool isStereoBuffer(void) const;

  SbBool isRGBMode(void);

  SbBool waitForExpose;
  SbBool drawToFrontBuffer;

  void glLockNormal(void);
  void glUnlockNormal(void);

  void glLockOverlay(void);
  void glUnlockOverlay(void);

  void glSwapBuffers(void);
  void glFlushBuffer(void);

  virtual SbBool glScheduleRedraw(void);

private:
  class SoQtGLWidgetP * pimpl;

  friend class SoGuiGLWidgetP;
  friend class SoQtGLWidgetP;
#line 150 "c:\\coin3d\\include\\inventor\\qt\\soqtglwidget.h"

  







































};



#line 196 "c:\\coin3d\\include\\inventor\\qt\\soqtglwidget.h"
#line 35 "c:\\coin3d\\include\\inventor\\qt\\soqtrenderarea.h"

class SbColor;
class SoNode;
class SoSelection;

class SoQtDevice;



class SoQtRenderAreaP;

typedef SbBool SoQtRenderAreaEventCB(void * closure, QEvent * event);



class __declspec(dllimport) SoQtRenderArea : public SoQtGLWidget {
  public: static void initClass(void); static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; static void * createInstance(void); private: typedef SoQtGLWidget inherited; static SoType classTypeId;

public:
  SoQtRenderArea(QWidget * parent = 0,
                    const char * name = 0,
                    SbBool embed = 1,
                    SbBool mouseInput = 1,
                    SbBool keyboardInput = 1);
  ~SoQtRenderArea();

  virtual void setSceneGraph(SoNode * scene);
  virtual SoNode * getSceneGraph(void);
  void setOverlaySceneGraph(SoNode * scene);
  SoNode * getOverlaySceneGraph(void);

  void setBackgroundColor(const SbColor & color);
  const SbColor & getBackgroundColor(void) const;
  void setBackgroundIndex(int idx);
  int getBackgroundIndex(void) const;
  void setOverlayBackgroundIndex(int idx);
  int getOverlayBackgroundIndex(void) const;
  void setColorMap(int start, int num, const SbColor * colors);
  void setOverlayColorMap(int start, int num, const SbColor * colors);
  void setViewportRegion(const SbViewportRegion & newRegion);
  const SbViewportRegion & getViewportRegion(void) const;
  void setTransparencyType(SoGLRenderAction::TransparencyType type);
  SoGLRenderAction::TransparencyType getTransparencyType(void) const;
  void setAntialiasing(SbBool smoothing, int numPasses);
  void getAntialiasing(SbBool & smoothing, int & numPasses) const;
  void setClearBeforeRender(SbBool enable, SbBool zbEnable = 1);
  SbBool isClearBeforeRender(void) const;
  SbBool isClearZBufferBeforeRender(void) const;
  void setClearBeforeOverlayRender(SbBool enable);
  SbBool isClearBeforeOverlayRender(void) const;
  void setAutoRedraw(SbBool enable);
  SbBool isAutoRedraw(void) const;
  void setRedrawPriority(uint32_t priority);
  uint32_t getRedrawPriority(void) const;
  static uint32_t getDefaultRedrawPriority(void);
  void render(void);
  void renderOverlay(void);
  void scheduleRedraw(void);
  void scheduleOverlayRedraw(void);
  void redrawOnSelectionChange(SoSelection * selection);
  void redrawOverlayOnSelectionChange(SoSelection * selection);
  void setEventCallback(SoQtRenderAreaEventCB * func, void * user = 0);
  void setSceneManager(SoSceneManager * manager);
  SoSceneManager * getSceneManager(void) const;
  void setOverlaySceneManager(SoSceneManager * manager);
  SoSceneManager * getOverlaySceneManager(void) const;
  void setGLRenderAction(SoGLRenderAction * action);
  SoGLRenderAction * getGLRenderAction(void) const;
  void setOverlayGLRenderAction(SoGLRenderAction * action);
  SoGLRenderAction * getOverlayGLRenderAction(void) const;

  SbBool sendSoEvent(const SoEvent * event);

  void registerDevice(SoQtDevice * device);
  void unregisterDevice(SoQtDevice * device);


protected:
  SoQtRenderArea(QWidget * parent,
                    const char * name,
                    SbBool embed,
                    SbBool mouseInput,
                    SbBool keyboardInput,
                    SbBool build);

  virtual void redraw(void);
  virtual void actualRedraw(void);
  virtual void redrawOverlay(void);
  virtual void actualOverlayRedraw(void);

  virtual SbBool processSoEvent(const SoEvent * const event);
  virtual void processEvent(QEvent * event);
  virtual void initGraphic(void);
  virtual void initOverlayGraphic(void);
  virtual void sizeChanged(const SbVec2s & size);
  virtual void widgetChanged(QWidget * widget);
  virtual void afterRealizeHook(void);

  QWidget * buildWidget(QWidget * parent);

  virtual const char * getDefaultWidgetName(void) const;
  virtual const char * getDefaultTitle(void) const;
  virtual const char * getDefaultIconTitle(void) const;

  virtual SbBool glScheduleRedraw(void);

private:
  class SoQtRenderAreaP * pimpl;

  friend class SoQtRenderAreaP;
#line 146 "c:\\coin3d\\include\\inventor\\qt\\soqtrenderarea.h"
};



#line 151 "c:\\coin3d\\include\\inventor\\qt\\soqtrenderarea.h"
#line 50 "c:\\coin3d\\include\\inventor\\qt\\viewers\\soqtviewer.h"

class SoCallbackList;
class SoBaseColor;
class SoCamera;
class SoComplexity;
class SoDirectionalLight;
class SoDrawStyle;
class SoGetBoundingBoxAction;
class SoGroup;
class SoLightModel;
class SoMaterialBinding;
class SoNode;
class SoPolygonOffset;
class SoSensor;
class SoSeparator;
class SoSwitch;
class SoTimerSensor;

class SoQtViewer;

typedef void SoQtViewerCB(void * data, SoQtViewer * viewer);
typedef void SoQtViewerFPSCB(float fps, void * data, SoQtViewer * viewer);

typedef SbVec2f SoQtAutoClippingCB(void * data, const SbVec2f & nearfar);



class __declspec(dllimport) SoQtViewer : public SoQtRenderArea {
  public: static void initClass(void); static SoType getClassTypeId(void); virtual SoType getTypeId(void) const ; private: typedef SoQtRenderArea inherited; static SoType classTypeId;

public:
  enum Type {
    BROWSER,
    EDITOR
  };

  enum DrawStyle {
    VIEW_AS_IS,
    VIEW_HIDDEN_LINE,
    VIEW_NO_TEXTURE,
    VIEW_LOW_COMPLEXITY,
    VIEW_LINE,
    VIEW_POINT,
    VIEW_BBOX,
    VIEW_LOW_RES_LINE,
    VIEW_LOW_RES_POINT,
    VIEW_SAME_AS_STILL,
    VIEW_WIREFRAME_OVERLAY
  };

  enum DrawType {
    STILL = 0,
    INTERACTIVE
  };

  enum BufferType {
    BUFFER_SINGLE,
    BUFFER_DOUBLE,
    BUFFER_INTERACTIVE
  };

  enum AutoClippingStrategy {
    VARIABLE_NEAR_PLANE,
    CONSTANT_NEAR_PLANE
  };

  virtual void setCamera(SoCamera * camera);
  SoCamera * getCamera(void) const;

  virtual void setCameraType(SoType type);
  SoType getCameraType(void) const;

  virtual void toggleCameraType(void);

  virtual void viewAll(void);

  virtual void saveHomePosition(void);
  virtual void resetToHomePosition(void);

  virtual void setHeadlight(SbBool enable);
  SbBool isHeadlight(void) const;
  SoDirectionalLight * getHeadlight(void) const;

  virtual void setDrawStyle(SoQtViewer::DrawType type, SoQtViewer::DrawStyle style);
  SoQtViewer::DrawStyle getDrawStyle(const SoQtViewer::DrawType type) const;

  virtual void setBufferingType(SoQtViewer::BufferType type);
  SoQtViewer::BufferType getBufferingType(void) const;

  virtual void setViewing(SbBool enable);
  SbBool isViewing(void) const;

  virtual void setCursorEnabled(SbBool enable);
  SbBool isCursorEnabled(void) const;

  void setAutoClipping(SbBool enable);
  SbBool isAutoClipping(void) const;

  void setAutoClippingStrategy(const AutoClippingStrategy strategy,
                               const float value = 0.6f,
                               SoQtAutoClippingCB * cb = 0,
                               void * cbuserdata = 0);

  virtual void setStereoViewing(SbBool enable);
  SbBool isStereoViewing(void) const;

  virtual void setStereoOffset(const float dist);
  float getStereoOffset(void) const;

  void setDetailSeek(const SbBool enable);
  SbBool isDetailSeek(void) const;

  void setSeekTime(const float seconds);
  float getSeekTime(void) const;

  void addStartCallback(SoQtViewerCB * func, void * data = 0);
  void addFinishCallback(SoQtViewerCB * func, void * data = 0);
  void removeStartCallback(SoQtViewerCB * func, void * data = 0);
  void removeFinishCallback(SoQtViewerCB * func, void * data = 0);

  void setWireframeOverlayColor(const SbColor & color);
  const SbColor & getWireframeOverlayColor(void) const;

  virtual void setDoubleBuffer(const SbBool enable);

  virtual void setSceneGraph(SoNode * root);
  virtual SoNode * getSceneGraph(void);

protected:
  SoQtViewer(QWidget * parent,
                const char * name,
                SbBool embed,
                Type type,
                SbBool build);
  ~SoQtViewer();

  virtual void sizeChanged(const SbVec2s & size);
  virtual void setSeekMode(SbBool enable);
  SbBool isSeekMode(void) const;
  SbBool seekToPoint(const SbVec2s screenpos);
  virtual void computeSeekFinalOrientation(void);

  virtual void actualRedraw(void);
  virtual SbBool processSoEvent(const SoEvent * const event);

  void interactiveCountInc(void);
  void interactiveCountDec(void);
  int getInteractiveCount(void) const;

  void setSeekDistance(const float distance);
  float getSeekDistance(void) const;
  void setSeekValueAsPercentage(const SbBool on);
  SbBool isSeekValuePercentage(void) const;

  virtual void changeCameraValues(SoCamera * camera);

  void addSuperimposition(SoNode * scene);
  void removeSuperimposition(SoNode * scene);
  void setSuperimpositionEnabled(SoNode * scene, const SbBool enable);
  SbBool getSuperimpositionEnabled(SoNode * scene) const;

private:
  class SoQtViewerP * pimpl;

  friend class SoQtViewerP;
#line 216 "c:\\coin3d\\include\\inventor\\qt\\viewers\\soqtviewer.h"
};



#line 221 "c:\\coin3d\\include\\inventor\\qt\\viewers\\soqtviewer.h"
#line 28 "c:\\coin3d\\include\\inventor\\qt\\viewers\\soqtfullviewer.h"









class SoQtPopupMenu;



class __declspec(dllimport) SoQtFullViewer : public SoQtViewer {
  public: static void initClass(void); static SoType getClassTypeId(void); virtual SoType getTypeId(void) const ; private: typedef SoQtViewer inherited; static SoType classTypeId;

public:
  enum BuildFlag {
    BUILD_NONE       = 0x00,
    BUILD_DECORATION = 0x01,
    BUILD_POPUP      = 0x02,
    BUILD_ALL        = (BUILD_DECORATION | BUILD_POPUP)
  };

  void setDecoration(const SbBool on);
  SbBool isDecoration(void) const;

  void setPopupMenuEnabled(const SbBool on);
  SbBool isPopupMenuEnabled(void) const;

  QWidget * getAppPushButtonParent(void) const;
  void addAppPushButton(QWidget * newButton);
  void insertAppPushButton(QWidget * newButton, int index);
  void removeAppPushButton(QWidget * oldButton);
  int findAppPushButton(QWidget * oldButton) const;
  int lengthAppPushButton(void) const;

  QWidget * getRenderAreaWidget(void) const;

  virtual void setViewing(SbBool on);

  virtual void setComponentCursor(const SoQtCursor & cursor);

protected:
  SoQtFullViewer(QWidget * parent,
                    const char * name,
                    SbBool embed,
                    BuildFlag flag,
                    Type type,
                    SbBool build);
  ~SoQtFullViewer();

  virtual void sizeChanged(const SbVec2s & size);

  QWidget * buildWidget(QWidget * parent);

  virtual void buildDecoration(QWidget * parent);
  virtual QWidget * buildLeftTrim(QWidget * parent);
  virtual QWidget * buildBottomTrim(QWidget * parent);
  virtual QWidget * buildRightTrim(QWidget * parent);
  QWidget * buildAppButtons(QWidget * parent);
  QWidget * buildViewerButtons(QWidget * parent);
  virtual void createViewerButtons(QWidget * parent, SbPList * buttonlist);

  virtual void buildPopupMenu(void);
  virtual void setPopupMenuString(const char * title);
  virtual void openPopupMenu(const SbVec2s position);

  virtual void leftWheelStart(void);
  virtual void leftWheelMotion(float);
  virtual void leftWheelFinish(void);
  float getLeftWheelValue(void) const;
  void setLeftWheelValue(const float value);

  virtual void bottomWheelStart(void);
  virtual void bottomWheelMotion(float);
  virtual void bottomWheelFinish(void);
  float getBottomWheelValue(void) const;
  void setBottomWheelValue(const float value);

  virtual void rightWheelStart(void);
  virtual void rightWheelMotion(float);
  virtual void rightWheelFinish(void);
  float getRightWheelValue(void) const;
  void setRightWheelValue(const float value);

  void setLeftWheelString(const char * const name);
  QWidget * getLeftWheelLabelWidget(void) const;
  void setBottomWheelString(const char * const name);
  QWidget * getBottomWheelLabelWidget(void) const;
  void setRightWheelString(const char * const name);
  QWidget * getRightWheelLabelWidget(void) const;

  virtual SbBool processSoEvent(const SoEvent * const event);

protected:
  QWidget * leftDecoration;
  QWidget * rightDecoration;
  QWidget * bottomDecoration;


  QWidget * leftWheel;
  QWidget * rightWheel;
  QWidget * bottomWheel;
#line 133 "c:\\coin3d\\include\\inventor\\qt\\viewers\\soqtfullviewer.h"

  QWidget * leftWheelLabel;
  char * leftWheelStr;
  float leftWheelVal;

  QWidget * rightWheelLabel;
  char * rightWheelStr;
  float rightWheelVal;

  QWidget * bottomWheelLabel;
  char * bottomWheelStr;
  float bottomWheelVal;

  SoQtPopupMenu * prefmenu;

private:
  
  
  
  
  class SoQtFullViewerP * pimpl;

  friend class SoGuiFullViewerP;
  friend class SoQtFullViewerP;
#line 158 "c:\\coin3d\\include\\inventor\\qt\\viewers\\soqtfullviewer.h"













































};



#line 208 "c:\\coin3d\\include\\inventor\\qt\\viewers\\soqtfullviewer.h"
#line 15 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\qt\\viewers\\soqtconstrainedviewer.h"




























#line 1 "c:\\coin3d\\include\\inventor\\qt\\viewers\\soqtfullviewer.h"















































































































































































































#line 30 "c:\\coin3d\\include\\inventor\\qt\\viewers\\soqtconstrainedviewer.h"



class __declspec(dllimport) SoQtConstrainedViewer : public SoQtFullViewer {
  public: static void initClass(void); static SoType getClassTypeId(void); virtual SoType getTypeId(void) const ; private: typedef SoQtFullViewer inherited; static SoType classTypeId;

public:
  void setUpDirection(const SbVec3f & dir);
  const SbVec3f & getUpDirection(void) const;

  virtual void setCamera(SoCamera * newcam);
  virtual void saveHomePosition(void);
  virtual void resetToHomePosition(void);

protected:
  SoQtConstrainedViewer(QWidget * parent,
                           const char * const name,
                           SbBool embed,
                           SoQtFullViewer::BuildFlag flag, 
                           SoQtViewer::Type type, 
                           SbBool build);

  ~SoQtConstrainedViewer();

  virtual void tiltCamera(float delta);
  virtual void bottomWheelMotion(float value);
  virtual void leftWheelMotion(float value);

  virtual void changeCameraValues(SoCamera * camera);
  void findUpDirection(SbVec2s mouselocation);
  void checkForCameraUpConstrain(void);

private:
  class SoQtConstrainedViewerP * pimpl;
};



#line 69 "c:\\coin3d\\include\\inventor\\qt\\viewers\\soqtconstrainedviewer.h"
#line 16 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\soperspectivecamera.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodes\\soperspectivecamera.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\socamera.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodes\\socamera.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbviewportregion.h"









































































#line 29 "c:\\coin3d\\include\\inventor\\nodes\\socamera.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbviewvolume.h"



























































































































#line 30 "c:\\coin3d\\include\\inventor\\nodes\\socamera.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfrotation.h"













































#line 31 "c:\\coin3d\\include\\inventor\\nodes\\socamera.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfenum.h"












































































#line 32 "c:\\coin3d\\include\\inventor\\nodes\\socamera.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfvec3f.h"











































#line 33 "c:\\coin3d\\include\\inventor\\nodes\\socamera.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosffloat.h"







































#line 34 "c:\\coin3d\\include\\inventor\\nodes\\socamera.h"

#line 1 "c:\\coin3d\\include\\inventor\\sbvec3f.h"






































































































#line 36 "c:\\coin3d\\include\\inventor\\nodes\\socamera.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbbox3f.h"























































































#line 37 "c:\\coin3d\\include\\inventor\\nodes\\socamera.h"













class SoPath;

class SoCameraP;

class __declspec(dllimport) SoCamera : public SoNode {
  typedef SoNode inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances;

public:
  static void initClass(void);

  enum ViewportMapping {
    CROP_VIEWPORT_FILL_FRAME,
    CROP_VIEWPORT_LINE_FRAME,
    CROP_VIEWPORT_NO_FRAME,
    ADJUST_CAMERA,
    LEAVE_ALONE
  };

  SoSFEnum viewportMapping;
  SoSFVec3f position;
  SoSFRotation orientation;
  SoSFFloat aspectRatio;
  SoSFFloat nearDistance;
  SoSFFloat farDistance;
  SoSFFloat focalDistance;

  void pointAt(const SbVec3f & targetpoint);
  void pointAt(const SbVec3f & targetpoint, const SbVec3f & upvector);
  virtual void scaleHeight(float scalefactor) = 0;
  virtual SbViewVolume getViewVolume(float useaspectratio = 0.0f) const = 0;
  void viewAll(SoNode * const sceneroot, const SbViewportRegion & vpregion,
               const float slack = 1.0f);
  void viewAll(SoPath * const path, const SbViewportRegion & vpregion,
               const float slack = 1.0f);
  SbViewportRegion getViewportBounds(const SbViewportRegion & region) const;

  enum StereoMode {
    MONOSCOPIC,
    LEFT_VIEW,
    RIGHT_VIEW
  };

  void setStereoMode(StereoMode mode);
  StereoMode getStereoMode(void) const;

  void setStereoAdjustment(float adjustment);
  float getStereoAdjustment(void) const;
  void setBalanceAdjustment(float adjustment);
  float getBalanceAdjustment(void) const;

  virtual void doAction(SoAction * action);
  virtual void callback(SoCallbackAction * action);
  virtual void GLRender(SoGLRenderAction * action);
  virtual void audioRender(SoAudioRenderAction *action);
  virtual void getBoundingBox(SoGetBoundingBoxAction * action);
  virtual void handleEvent(SoHandleEventAction * action);
  virtual void rayPick(SoRayPickAction * action);
  virtual void getPrimitiveCount(SoGetPrimitiveCountAction * action);

protected:
  SoCamera(void);
  virtual ~SoCamera();

  virtual void viewBoundingBox(const SbBox3f & box, float aspect,
                               float slack) = 0;
  virtual void jitter(int numpasses, int curpass,
                      const SbViewportRegion & vpreg,
                      SbVec3f & jitteramount) const;

private:
  void getView(SoAction * action, SbViewVolume & resultvv,
               SbViewportRegion & resultvp,
               const SbBool considermodelmatrix = 1);

  void drawCroppedFrame(SoGLRenderAction * action,
                        const int viewportmapping,
                        const SbViewportRegion & oldvp,
                        const SbViewportRegion & newvp);

  void lookAt(const SbVec3f & dir, const SbVec3f & up);

  StereoMode stereomode;
  float stereoadjustment;
  float balanceadjustment;
private:
  SoCameraP *pimpl;
  friend class SoCameraP;
};

#line 142 "c:\\coin3d\\include\\inventor\\nodes\\socamera.h"
#line 29 "c:\\coin3d\\include\\inventor\\nodes\\soperspectivecamera.h"

class __declspec(dllimport) SoPerspectiveCamera : public SoCamera {
  typedef SoCamera inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoPerspectiveCamera(void);

  SoSFFloat heightAngle;

  virtual void scaleHeight(float scalefactor);
  virtual SbViewVolume getViewVolume(float useaspectratio = 0.0f) const;

protected:
  virtual ~SoPerspectiveCamera();

  virtual void viewBoundingBox(const SbBox3f & box, float aspect, float slack);
};

#line 51 "c:\\coin3d\\include\\inventor\\nodes\\soperspectivecamera.h"
#line 17 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\soselection.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodes\\soselection.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\soseparator.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodes\\soseparator.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfenum.h"












































































#line 29 "c:\\coin3d\\include\\inventor\\nodes\\soseparator.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sogroup.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodes\\sogroup.h"

class SoGroupP;

class __declspec(dllimport) SoGroup : public SoNode {
  typedef SoNode inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoGroup(void);

  SoGroup(int nchildren);
 
  virtual void addChild(SoNode * node);
  virtual void insertChild(SoNode * child, int newchildindex);
  virtual SoNode * getChild(int index) const;
  virtual int findChild(const SoNode * node) const;
  virtual int getNumChildren(void) const;
  virtual void removeChild(int childindex);
  virtual void removeChild(SoNode * child);
  virtual void removeAllChildren(void);
  virtual void replaceChild(int index, SoNode * newchild);
  virtual void replaceChild(SoNode * oldchild, SoNode * newchild);

  virtual void doAction(SoAction * action);
  virtual void GLRender(SoGLRenderAction * action);
  virtual void callback(SoCallbackAction * action);
  virtual void getBoundingBox(SoGetBoundingBoxAction * action);
  virtual void getMatrix(SoGetMatrixAction * action);
  virtual void handleEvent(SoHandleEventAction * action);
  virtual void pick(SoPickAction * action);
  virtual void search(SoSearchAction * action);
  virtual void write(SoWriteAction * action);
  virtual void getPrimitiveCount(SoGetPrimitiveCountAction * action);
  virtual void audioRender(SoAudioRenderAction * action);
  virtual SoChildList * getChildren(void) const;

protected:
  virtual ~SoGroup();

  virtual SbBool readInstance(SoInput * in, unsigned short flags);
  virtual SbBool readChildren(SoInput * in);

  virtual void copyContents(const SoFieldContainer * from,
                            SbBool copyconnections);

  SoChildList * children;

private:
  friend class SoUnknownNode; 
  SoGroupP * pimpl;
};

#line 83 "c:\\coin3d\\include\\inventor\\nodes\\sogroup.h"
#line 30 "c:\\coin3d\\include\\inventor\\nodes\\soseparator.h"

class SoState;
class SoSeparatorP;

class __declspec(dllimport) SoSeparator : public SoGroup {
  typedef SoGroup inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoSeparator(void);
  SoSeparator(const int nchildren);

  enum CacheEnabled {
    OFF, ON, AUTO
  };

  SoSFEnum renderCaching;
  SoSFEnum boundingBoxCaching;
  SoSFEnum renderCulling;
  SoSFEnum pickCulling;

  virtual void doAction(SoAction * action);
  virtual void GLRender(SoGLRenderAction * action);
  virtual void GLRenderBelowPath(SoGLRenderAction * action);
  virtual void GLRenderInPath(SoGLRenderAction * action);
  virtual void GLRenderOffPath(SoGLRenderAction * action);
  virtual void callback(SoCallbackAction * action);
  virtual void getBoundingBox(SoGetBoundingBoxAction * action);
  virtual void getMatrix(SoGetMatrixAction * action);
  virtual void handleEvent(SoHandleEventAction * action);
  virtual void rayPick(SoRayPickAction * action);
  virtual void search(SoSearchAction * action);
  virtual void getPrimitiveCount(SoGetPrimitiveCountAction * action);
  virtual void audioRender(SoAudioRenderAction * action);

  virtual void notify(SoNotList * nl);

  static void setNumRenderCaches(const int howmany);
  static int getNumRenderCaches(void);
  virtual SbBool affectsState(void) const;

protected:
  virtual ~SoSeparator();

  virtual SbBool cullTest(SoState * state);
  virtual SbBool cullTest(SoGLRenderAction * action, int & cullresults);
  virtual SbBool readInstance(SoInput * in, unsigned short flags);

private:
  void commonConstructor(void);
  SbBool cullTestNoPush(SoState * state);
  SoSeparatorP * pimpl;
  static int numrendercaches;
};

#line 88 "c:\\coin3d\\include\\inventor\\nodes\\soseparator.h"
#line 29 "c:\\coin3d\\include\\inventor\\nodes\\soselection.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfenum.h"












































































#line 30 "c:\\coin3d\\include\\inventor\\nodes\\soselection.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\sopathlist.h"
















































#line 31 "c:\\coin3d\\include\\inventor\\nodes\\soselection.h"

class SoSelection;
class SoPath;
class SoPickedPoint;
class SoCallbackList;

typedef void SoSelectionPathCB(void * data, SoPath * path);
typedef void SoSelectionClassCB(void * data, SoSelection * sel);
typedef SoPath * SoSelectionPickCB(void * data, const SoPickedPoint * pick);

class __declspec(dllimport) SoSelection : public SoSeparator {
  typedef SoSeparator inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoSelection(void);

  enum Policy {
    SINGLE, TOGGLE, SHIFT
  };

  SoSFEnum policy;

  SoSelection(const int nChildren);

  void select(const SoPath * path);
  void select(SoNode *node);
  void deselect(const SoPath * path);
  void deselect(const int which);
  void deselect(SoNode * node);
  void toggle(const SoPath * path);
  void toggle(SoNode * node);
  SbBool isSelected(const SoPath * path) const;
  SbBool isSelected(SoNode * node) const;
  void deselectAll(void);
  int getNumSelected(void) const;
  const SoPathList * getList(void) const;
  SoPath * getPath(const int index) const;
  SoPath * operator[](const int i) const;
  void addSelectionCallback(SoSelectionPathCB * f, void * userData = 0);
  void removeSelectionCallback(SoSelectionPathCB * f, void * userData = 0);
  void addDeselectionCallback(SoSelectionPathCB * f, void * userData = 0);
  void removeDeselectionCallback(SoSelectionPathCB * f,
                                 void * userData = 0);
  void addStartCallback(SoSelectionClassCB * f, void * userData = 0);
  void removeStartCallback(SoSelectionClassCB * f, void * userData = 0);
  void addFinishCallback(SoSelectionClassCB * f, void * userData = 0);
  void removeFinishCallback(SoSelectionClassCB * f, void * userData = 0);
  void setPickFilterCallback(SoSelectionPickCB * f, void * userData = 0,
                             const SbBool callOnlyIfSelectable = 1);
  void setPickMatching(const SbBool pickMatching);
  SbBool isPickMatching(void) const;
  SbBool getPickMatching(void) const;
  void addChangeCallback(SoSelectionClassCB * f, void * userData = 0);
  void removeChangeCallback(SoSelectionClassCB * f, void * userData = 0);

protected:
  virtual ~SoSelection();

  void invokeSelectionPolicy(SoPath *path, SbBool shiftDown);
  void performSingleSelection(SoPath *path);
  void performToggleSelection(SoPath *path);
  SoPath * copyFromThis(const SoPath * path) const;
  void addPath(SoPath *path);
  void removePath(const int which);
  int findPath(const SoPath *path) const;

  virtual void handleEvent(SoHandleEventAction * action);

protected: 

  SoPathList selectionList;

  SoCallbackList *selCBList;
  SoCallbackList *deselCBList;
  SoCallbackList *startCBList;
  SoCallbackList *finishCBList;

  SoSelectionPickCB *pickCBFunc;
  void *pickCBData;
  SbBool callPickCBOnlyIfSelectable;

  SoCallbackList *changeCBList;

  SoPath *mouseDownPickPath;
  SbBool pickMatching;

private:
  void init();
  SoPath *searchNode(SoNode * node) const;
  SoPath *getSelectionPath(SoHandleEventAction *action,
                           SbBool &ignorepick, SbBool &haltaction);
};

#line 128 "c:\\coin3d\\include\\inventor\\nodes\\soselection.h"
#line 18 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sodirectionallight.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodes\\sodirectionallight.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\solight.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodes\\solight.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfbool.h"


























#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfield.h"













































#line 28 "c:\\coin3d\\include\\inventor\\fields\\sosfbool.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosubfield.h"

















































































































































































































































































































































































































































































































#line 29 "c:\\coin3d\\include\\inventor\\fields\\sosfbool.h"

class __declspec(dllimport) SoSFBool : public SoSField {
  typedef SoSField inherited;

  public: SoSFBool(void); virtual ~SoSFBool(); private: static SoType classTypeId; public: static void * createInstance(void); static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; virtual void copyFrom(const SoField & field); const SoSFBool & operator=(const SoSFBool & field); virtual SbBool isSame(const SoField & field) const; private: virtual SbBool readValue(SoInput * in); virtual void writeValue(SoOutput * out) const; protected: SbBool value; public: SbBool getValue(void) const { this->evaluate(); return this->value; } void setValue(SbBool newvalue); SbBool operator=(SbBool newvalue) { this->setValue(newvalue); return this->value; } int operator==(const SoSFBool & field) const; int operator!=(const SoSFBool & field) const { return ! operator==(field); };

public:
  static void initClass(void);
};

#line 40 "c:\\coin3d\\include\\inventor\\fields\\sosfbool.h"
#line 29 "c:\\coin3d\\include\\inventor\\nodes\\solight.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosffloat.h"







































#line 30 "c:\\coin3d\\include\\inventor\\nodes\\solight.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfcolor.h"


























#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfield.h"













































#line 28 "c:\\coin3d\\include\\inventor\\fields\\sosfcolor.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosubfield.h"

















































































































































































































































































































































































































































































































#line 29 "c:\\coin3d\\include\\inventor\\fields\\sosfcolor.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbcolor.h"



















































#line 30 "c:\\coin3d\\include\\inventor\\fields\\sosfcolor.h"

class __declspec(dllimport) SoSFColor : public SoSField {
  typedef SoSField inherited;

  public: SoSFColor(void); virtual ~SoSFColor(); private: static SoType classTypeId; public: static void * createInstance(void); static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; virtual void copyFrom(const SoField & field); const SoSFColor & operator=(const SoSFColor & field); virtual SbBool isSame(const SoField & field) const; private: virtual SbBool readValue(SoInput * in); virtual void writeValue(SoOutput * out) const; protected: SbColor value; public: const SbColor & getValue(void) const { this->evaluate(); return this->value; } void setValue(const SbColor & newvalue); const SbColor & operator=(const SbColor & newvalue) { this->setValue(newvalue); return this->value; } int operator==(const SoSFColor & field) const; int operator!=(const SoSFColor & field) const { return ! operator==(field); };

public:
  static void initClass(void);

  void setValue(const SbVec3f & vec);
  void setValue(const float red, const float green, const float blue);
  void setValue(const float rgb[3]);
  void setHSVValue(const float h, const float s, const float v);
  void setHSVValue(const float hsv[3]);
};

#line 47 "c:\\coin3d\\include\\inventor\\fields\\sosfcolor.h"
#line 31 "c:\\coin3d\\include\\inventor\\nodes\\solight.h"

class __declspec(dllimport) SoLight : public SoNode {
  typedef SoNode inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances;

public:
  static void initClass(void);

  SoSFBool on;
  SoSFFloat intensity;
  SoSFColor color;

  virtual void callback(SoCallbackAction * action);

protected:
  SoLight(void);
  virtual ~SoLight();
};

#line 52 "c:\\coin3d\\include\\inventor\\nodes\\solight.h"
#line 29 "c:\\coin3d\\include\\inventor\\nodes\\sodirectionallight.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfvec3f.h"











































#line 30 "c:\\coin3d\\include\\inventor\\nodes\\sodirectionallight.h"

class __declspec(dllimport) SoDirectionalLight : public SoLight {
  typedef SoLight inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoDirectionalLight(void);

  SoSFVec3f direction;

  virtual void GLRender(SoGLRenderAction * action);

protected:
  virtual ~SoDirectionalLight();
};

#line 49 "c:\\coin3d\\include\\inventor\\nodes\\sodirectionallight.h"
#line 19 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\somaterial.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodes\\somaterial.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfcolor.h"


























#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfield.h"




























































































#line 28 "c:\\coin3d\\include\\inventor\\fields\\somfcolor.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosubfield.h"

















































































































































































































































































































































































































































































































#line 29 "c:\\coin3d\\include\\inventor\\fields\\somfcolor.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbcolor.h"



















































#line 30 "c:\\coin3d\\include\\inventor\\fields\\somfcolor.h"

class __declspec(dllimport) SoMFColor : public SoMField {
    typedef SoMField inherited;

  public: SoMFColor(void); virtual ~SoMFColor(); private: static SoType classTypeId; public: static void * createInstance(void); static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; virtual void copyFrom(const SoField & field); const SoMFColor & operator=(const SoMFColor & field); virtual SbBool isSame(const SoField & field) const; private: virtual SbBool read1Value(SoInput * in, int idx); virtual void write1Value(SoOutput * out, int idx) const; protected: virtual void deleteAllValues(void); virtual void copyValue(int to, int from); virtual int fieldSizeof(void) const; virtual void * valuesPtr(void); virtual void setValuesPtr(void * ptr); virtual void allocValues(int num); SbColor * values; public: const SbColor & operator[](const int idx) const { this->evaluate(); return this->values[idx]; } const SbColor * getValues(const int start) const { this->evaluate(); return (const SbColor *)(this->values + start); } int find(const SbColor & value, SbBool addifnotfound = 0); void setValues(const int start, const int num, const SbColor * newvals); void set1Value(const int idx, const SbColor & value); void setValue(const SbColor & value); const SbColor & operator=(const SbColor & val) { this->setValue(val); return val; } SbBool operator==(const SoMFColor & field) const; SbBool operator!=(const SoMFColor & field) const { return !operator==(field); } SbColor * startEditing(void) { this->evaluate(); return this->values; } void finishEditing(void) { this->valueChanged(); };

  void setValuesPointer(const int num, const float * userdata); void setValuesPointer(const int num, float * userdata);
  void setValuesPointer(const int num, const SbColor * userdata); void setValuesPointer(const int num, SbColor * userdata);

public:
  static void initClass(void);

  void setValues(const int start, const int num, const float rgb[][3]);
  void setHSVValues(const int start, const int num, const float hsv[][3]);

  void setValue(const SbVec3f & vec);
  void setValue(const float r, const float g, const float b);
  void setValue(const float rgb[3]);

  void setHSVValue(const float h, const float s, const float v);
  void setHSVValue(const float hsv[3]);

  void set1Value(const int idx, const SbVec3f & vec);
  void set1Value(const int idx, const float r, const float g, const float b);
  void set1Value(const int idx, const float rgb[3]);

  void set1HSVValue(const int idx, const float h, const float s, const float v);
  void set1HSVValue(const int idx, const float hsv[3]);
};

#line 61 "c:\\coin3d\\include\\inventor\\fields\\somfcolor.h"
#line 29 "c:\\coin3d\\include\\inventor\\nodes\\somaterial.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somffloat.h"


























#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfield.h"




























































































#line 28 "c:\\coin3d\\include\\inventor\\fields\\somffloat.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosubfield.h"

















































































































































































































































































































































































































































































































#line 29 "c:\\coin3d\\include\\inventor\\fields\\somffloat.h"

class __declspec(dllimport) SoMFFloat : public SoMField {
  typedef SoMField inherited;

  public: SoMFFloat(void); virtual ~SoMFFloat(); private: static SoType classTypeId; public: static void * createInstance(void); static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; virtual void copyFrom(const SoField & field); const SoMFFloat & operator=(const SoMFFloat & field); virtual SbBool isSame(const SoField & field) const; private: virtual SbBool read1Value(SoInput * in, int idx); virtual void write1Value(SoOutput * out, int idx) const; protected: virtual void deleteAllValues(void); virtual void copyValue(int to, int from); virtual int fieldSizeof(void) const; virtual void * valuesPtr(void); virtual void setValuesPtr(void * ptr); virtual void allocValues(int num); float * values; public: float operator[](const int idx) const { this->evaluate(); return this->values[idx]; } const float * getValues(const int start) const { this->evaluate(); return (const float *)(this->values + start); } int find(float value, SbBool addifnotfound = 0); void setValues(const int start, const int num, const float * newvals); void set1Value(const int idx, float value); void setValue(float value); float operator=(float val) { this->setValue(val); return val; } SbBool operator==(const SoMFFloat & field) const; SbBool operator!=(const SoMFFloat & field) const { return !operator==(field); } float * startEditing(void) { this->evaluate(); return this->values; } void finishEditing(void) { this->valueChanged(); };

  void setValuesPointer(const int num, const float * userdata); void setValuesPointer(const int num, float * userdata);

public:
  static void initClass(void);

private:
  virtual int getNumValuesPerLine(void) const;
};

#line 45 "c:\\coin3d\\include\\inventor\\fields\\somffloat.h"
#line 30 "c:\\coin3d\\include\\inventor\\nodes\\somaterial.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosffloat.h"







































#line 31 "c:\\coin3d\\include\\inventor\\nodes\\somaterial.h"

class SoMaterialP;

class __declspec(dllimport) SoMaterial : public SoNode {
  typedef SoNode inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoMaterial(void);

  SoMFColor ambientColor;
  SoMFColor diffuseColor;
  SoMFColor specularColor;
  SoMFColor emissiveColor;
  SoMFFloat shininess;
  SoMFFloat transparency;

  virtual void doAction(SoAction * action);
  virtual void GLRender(SoGLRenderAction * action);
  virtual void callback(SoCallbackAction * action);

protected:
  virtual ~SoMaterial();

  virtual void notify(SoNotList * list);

private:
  SoMaterialP * pimpl;
  int getMaterialType(void);
};

#line 65 "c:\\coin3d\\include\\inventor\\nodes\\somaterial.h"
#line 20 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\soseparator.h"























































































#line 21 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\sblinear.h"



























































#line 22 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\soeventcallback.h"




































































































#line 23 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\events\\sokeyboardevent.h"


























#line 1 "c:\\coin3d\\include\\inventor\\events\\sobuttonevent.h"



















































#line 28 "c:\\coin3d\\include\\inventor\\events\\sokeyboardevent.h"






#line 35 "c:\\coin3d\\include\\inventor\\events\\sokeyboardevent.h"









class __declspec(dllimport) SoKeyboardEvent : public SoButtonEvent {
  typedef SoButtonEvent inherited;

  private: static SoType classTypeId; public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const;

public:
  enum Key {
    ANY = 0,
    UNDEFINED = 1,

    LEFT_SHIFT = 0xffe1, RIGHT_SHIFT, LEFT_CONTROL, RIGHT_CONTROL,
    LEFT_ALT = 0xffe9, RIGHT_ALT,

    NUMBER_0 = 0x0030, NUMBER_1, NUMBER_2, NUMBER_3, NUMBER_4, NUMBER_5,
    NUMBER_6, NUMBER_7, NUMBER_8, NUMBER_9,

    A = 0x0061, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T,
    U, V, W, X, Y, Z,

    HOME = 0xff50, LEFT_ARROW, UP_ARROW, RIGHT_ARROW, DOWN_ARROW,
    PAGE_UP, PAGE_DOWN, END,
    PRIOR = 0xff55, NEXT,

    PAD_ENTER = 0xff8d,
    PAD_F1 = 0xff91, PAD_F2, PAD_F3, PAD_F4,
    PAD_0 = 0xff9e, PAD_1 = 0xff9c, PAD_2 = 0xff99, PAD_3 = 0xff9b,
    PAD_4 = 0xff96, PAD_5 = 0xff9d, PAD_6 = 0xff98, PAD_7 = 0xff95,
    PAD_8 = 0xff97, PAD_9 = 0xff9a,
    PAD_ADD = 0xffab, PAD_SUBTRACT = 0xffad,
    PAD_MULTIPLY = 0xffaa, PAD_DIVIDE = 0xffaf,
    PAD_SPACE = 0xff8d, PAD_TAB = 0xff89,
    PAD_INSERT = 0xff9e, PAD_DELETE = 0xff9f, PAD_PERIOD = 0xff9f,

    F1 = 0xffbe, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,

    BACKSPACE = 0xff08, TAB = 0xff09,
    RETURN = 0xff0d, ENTER = 0xff0d,
    PAUSE = 0xff13, SCROLL_LOCK = 0xff14,
    ESCAPE = 0xff1b, DELETE = 0xffff, KEY_DELETE = DELETE,
    PRINT = 0xff61, INSERT = 0xff63,
    NUM_LOCK = 0xff7f, CAPS_LOCK = 0xffe5, SHIFT_LOCK = 0xffe6,

    SPACE = 0x0020, APOSTROPHE = 0x0027,
    COMMA = 0x002c, MINUS = 0x002d, PERIOD = 0x002e, SLASH = 0x002f,
    SEMICOLON = 0x003b, EQUAL = 0x003d,
    BRACKETLEFT = 0x005b, BACKSLASH = 0x005c,
    BRACKETRIGHT = 0x005d, GRAVE = 0x0060
  };

  SoKeyboardEvent(void);
  virtual ~SoKeyboardEvent();

  void setKey(SoKeyboardEvent::Key key);
  SoKeyboardEvent::Key getKey(void) const;

  void setPrintableCharacter(const char c);
  char getPrintableCharacter(void) const;

  static SbBool isKeyPressEvent(const SoEvent * e,
                                SoKeyboardEvent::Key whichKey);
  static SbBool isKeyReleaseEvent(const SoEvent * e,
                                  SoKeyboardEvent::Key whichKey);

  static void initClass(void);

private:
  Key key;
  char printable;
  char isprintableset;
};







#line 122 "c:\\coin3d\\include\\inventor\\events\\sokeyboardevent.h"

#line 124 "c:\\coin3d\\include\\inventor\\events\\sokeyboardevent.h"
#line 24 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\sensors\\sotimersensor.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sensors\\sotimerqueuesensor.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sensors\\sosensor.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 28 "c:\\coin3d\\include\\inventor\\sensors\\sosensor.h"

class SoSensor;

typedef void SoSensorCB(void * data, SoSensor * sensor);
typedef SoSensorCB * SoSensorCBPtr;

class __declspec(dllimport) SoSensor {
public:
  SoSensor(void);
  SoSensor(SoSensorCB * func, void * data);
  virtual ~SoSensor(void);

  void setFunction(SoSensorCB * callbackfunction);
  SoSensorCBPtr getFunction(void) const;
  void setData(void * callbackdata);
  void * getData(void) const;

  virtual void schedule(void) = 0;
  virtual void unschedule(void) = 0;
  virtual SbBool isScheduled(void) const = 0;

  virtual void trigger(void);

  virtual SbBool isBefore(const SoSensor * s) const = 0;
  void setNextInQueue(SoSensor * next);
  SoSensor * getNextInQueue(void) const;

  static void initClass(void);

protected:
  SoSensorCB * func;
  void * funcData;
};

#line 63 "c:\\coin3d\\include\\inventor\\sensors\\sosensor.h"
#line 28 "c:\\coin3d\\include\\inventor\\sensors\\sotimerqueuesensor.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbtime.h"








































































































#line 29 "c:\\coin3d\\include\\inventor\\sensors\\sotimerqueuesensor.h"

class __declspec(dllimport) SoTimerQueueSensor : public SoSensor {
  typedef SoSensor inherited;

public:
  SoTimerQueueSensor(void);
  SoTimerQueueSensor(SoSensorCB * func, void * data);
  virtual ~SoTimerQueueSensor(void);

  const SbTime & getTriggerTime(void) const;
  virtual void schedule(void);
  virtual void unschedule(void);
  virtual SbBool isScheduled(void) const;
  virtual void trigger(void);

protected:
  void setTriggerTime(const SbTime & time);
  SbBool scheduled;

private:
  virtual SbBool isBefore(const SoSensor * s) const;
  SbTime triggertime;
};

#line 54 "c:\\coin3d\\include\\inventor\\sensors\\sotimerqueuesensor.h"
#line 28 "c:\\coin3d\\include\\inventor\\sensors\\sotimersensor.h"

class __declspec(dllimport) SoTimerSensor : public SoTimerQueueSensor {
  typedef SoTimerQueueSensor inherited;

public:
  SoTimerSensor(void);
  SoTimerSensor(SoSensorCB * func, void * data);
  virtual ~SoTimerSensor(void);

  void setBaseTime(const SbTime & base);
  const SbTime & getBaseTime(void) const;
  void setInterval(const SbTime & interval);
  const SbTime & getInterval(void) const;

  virtual void schedule(void);
  virtual void unschedule(void);
  void reschedule(const SbTime & schedtime);

private:
  virtual void trigger(void);

  SbTime base, interval;
  SbBool setbasetime;
  SbBool istriggering;
};

#line 55 "c:\\coin3d\\include\\inventor\\sensors\\sotimersensor.h"
#line 25 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\actions\\sowriteaction.h"


























#line 1 "c:\\coin3d\\include\\inventor\\actions\\soaction.h"











































































































































































#line 28 "c:\\coin3d\\include\\inventor\\actions\\sowriteaction.h"
#line 1 "c:\\coin3d\\include\\inventor\\actions\\sosubaction.h"


























































































































#line 29 "c:\\coin3d\\include\\inventor\\actions\\sowriteaction.h"


class __declspec(dllimport) SoWriteAction : public SoAction {
  typedef SoAction inherited;

  public: virtual SoType getTypeId(void) const; static SoType getClassTypeId(void); static void addMethod(const SoType type, SoActionMethod method); static void enableElement(const SoType type, const int stackindex); protected: virtual const SoEnabledElementsList & getEnabledElements(void) const; static SoEnabledElementsList * getClassEnabledElements(void); static SoActionMethodList * getClassActionMethods(void); private: static void atexit_cleanup(void); static SoEnabledElementsList * enabledElements; static SoActionMethodList * methods; static SoType classTypeId;

public:
  SoWriteAction(void);
  SoWriteAction(SoOutput * out);
  virtual ~SoWriteAction();

  static void initClass(void);

  SoOutput * getOutput(void) const;

  void continueToApply(SoNode * node);
  void continueToApply(SoPath * path);

protected:
  virtual void beginTraversal(SoNode * node);
  virtual SbBool shouldCompactPathLists(void) const;

private:
  void commonConstructor(SoOutput * out);

  SoOutput * outobj;
  SbBool localoutputalloc;
  SbBool continuing;
};

#line 61 "c:\\coin3d\\include\\inventor\\actions\\sowriteaction.h"
#line 26 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\actions\\soboxhighlightrenderaction.h"


























#line 1 "c:\\coin3d\\include\\inventor\\actions\\soglrenderaction.h"
















































































































#line 28 "c:\\coin3d\\include\\inventor\\actions\\soboxhighlightrenderaction.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbcolor.h"



















































#line 29 "c:\\coin3d\\include\\inventor\\actions\\soboxhighlightrenderaction.h"

class SoBoxHighlightRenderActionP;

class __declspec(dllimport) SoBoxHighlightRenderAction : public SoGLRenderAction {
  typedef SoGLRenderAction inherited;

  public: virtual SoType getTypeId(void) const; static SoType getClassTypeId(void); static void addMethod(const SoType type, SoActionMethod method); static void enableElement(const SoType type, const int stackindex); protected: virtual const SoEnabledElementsList & getEnabledElements(void) const; static SoEnabledElementsList * getClassEnabledElements(void); static SoActionMethodList * getClassActionMethods(void); private: static void atexit_cleanup(void); static SoEnabledElementsList * enabledElements; static SoActionMethodList * methods; static SoType classTypeId;

public:
  SoBoxHighlightRenderAction(void);
  SoBoxHighlightRenderAction(const SbViewportRegion & viewportregion);
  virtual ~SoBoxHighlightRenderAction();

  static void initClass(void);

  virtual void apply(SoNode * node);
  virtual void apply(SoPath * path);
  virtual void apply(const SoPathList & pathlist, SbBool obeysrules = 0);
  void setVisible(const SbBool visible);
  SbBool isVisible(void) const;
  void setColor(const SbColor & color);
  const SbColor & getColor(void);
  void setLinePattern(unsigned short pattern);
  unsigned short getLinePattern(void) const;
  void setLineWidth(const float width);
  float getLineWidth(void) const;

protected:

  SbBool hlVisible;

  
  
  
  
  
  

private:
  void init(void);
  void drawBoxes(SoPath * pathtothis, const SoPathList * pathlist);

  SoBoxHighlightRenderActionP * pimpl;
};

#line 75 "c:\\coin3d\\include\\inventor\\actions\\soboxhighlightrenderaction.h"
#line 27 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\sopickedpoint.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 28 "c:\\coin3d\\include\\inventor\\sopickedpoint.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbvec3f.h"






































































































#line 29 "c:\\coin3d\\include\\inventor\\sopickedpoint.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbvec4f.h"














































































#line 30 "c:\\coin3d\\include\\inventor\\sopickedpoint.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\sodetaillist.h"
























































#line 31 "c:\\coin3d\\include\\inventor\\sopickedpoint.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbviewportregion.h"









































































#line 32 "c:\\coin3d\\include\\inventor\\sopickedpoint.h"

class SoPath;
class SoDetail;
class SoNode;
class SoState;
class SbMatrix;

class __declspec(dllimport) SoPickedPoint {
public:
  SoPickedPoint(const SoPickedPoint & pp);
  SoPickedPoint(const SoPath * const path, SoState * const state,
                const SbVec3f & objSpacePoint);
  ~SoPickedPoint();
  SoPickedPoint *copy() const;
  const SbVec3f &getPoint() const;
  const SbVec3f &getNormal() const;
  const SbVec4f &getTextureCoords() const;
  int getMaterialIndex() const;
  SoPath *getPath() const;
  SbBool isOnGeometry() const;
  const SoDetail *getDetail(const SoNode * const node = 0) const;
  const SbMatrix &getObjectToWorld(const SoNode * const node = 0) const;
  const SbMatrix &getWorldToObject(const SoNode * const node = 0) const;
  const SbMatrix &getObjectToImage(const SoNode * const node = 0) const;
  const SbMatrix &getImageToObject(const SoNode * const node = 0) const;
  SbVec3f getObjectPoint(const SoNode * const node = 0) const;
  SbVec3f getObjectNormal(const SoNode * const node = 0) const;
  SbVec4f getObjectTextureCoords(const SoNode * const node = 0) const;

  void setObjectNormal(const SbVec3f &normal);
  void setObjectTextureCoords(const SbVec4f &texCoords);
  void setMaterialIndex(const int index);
  void setDetail(SoDetail * detail, SoNode * node);

private:

  SbVec3f point, objPoint;
  SbVec3f normal, objNormal;
  SbVec4f texCoords, objTexCoords;
  int materialIndex;
  SoPath *path;
  SbBool onGeometry;
  SoDetailList detailList;
  SoState *state;
  SbViewportRegion viewport;

  class SoGetMatrixAction *getMatrixAction() const;
  void applyMatrixAction(const SoNode * const node) const;
};

#line 83 "c:\\coin3d\\include\\inventor\\sopickedpoint.h"
#line 28 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\sbplist.h"
































































































































































#line 29 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\actions\\sosearchaction.h"


























#line 1 "c:\\coin3d\\include\\inventor\\actions\\soaction.h"











































































































































































#line 28 "c:\\coin3d\\include\\inventor\\actions\\sosearchaction.h"
#line 1 "c:\\coin3d\\include\\inventor\\actions\\sosubaction.h"


























































































































#line 29 "c:\\coin3d\\include\\inventor\\actions\\sosearchaction.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbname.h"


































































#line 30 "c:\\coin3d\\include\\inventor\\actions\\sosearchaction.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\sopathlist.h"
















































#line 31 "c:\\coin3d\\include\\inventor\\actions\\sosearchaction.h"

class __declspec(dllimport) SoSearchAction : public SoAction {
  typedef SoAction inherited;

  public: virtual SoType getTypeId(void) const; static SoType getClassTypeId(void); static void addMethod(const SoType type, SoActionMethod method); static void enableElement(const SoType type, const int stackindex); protected: virtual const SoEnabledElementsList & getEnabledElements(void) const; static SoEnabledElementsList * getClassEnabledElements(void); static SoActionMethodList * getClassActionMethods(void); private: static void atexit_cleanup(void); static SoEnabledElementsList * enabledElements; static SoActionMethodList * methods; static SoType classTypeId;

public:
  SoSearchAction(void);
  virtual ~SoSearchAction();

  static void initClass(void);

  enum LookFor { NODE = 1, TYPE = 2, NAME = 4 };
  enum Interest { FIRST, LAST, ALL };

  void setNode(SoNode * const node);
  SoNode * getNode(void) const;
  void setType(const SoType type, const SbBool chkderived = 1);
  SoType getType(SbBool & chkderived) const;
  void setName(const SbName name);
  SbName getName(void) const;
  void setFind(const int what);
  int getFind(void) const;
  void setInterest(const Interest interest);
  Interest getInterest(void) const;
  void setSearchingAll(const SbBool searchall);
  SbBool isSearchingAll(void) const;
  SoPath * getPath(void) const;
  SoPathList & getPaths(void);
  void reset(void);

  void setFound(void);
  SbBool isFound(void) const;
  void addPath(SoPath * const path);

  
  
  static SbBool duringSearchAll;

protected:
  virtual void beginTraversal(SoNode * node);

private:
  int lookfor;
  Interest interest;
  SbBool searchall, chkderived;
  SoNode * node;
  SoType type;
  SbName name;
  SoPath * path;
  SoPathList paths;
};

#line 85 "c:\\coin3d\\include\\inventor\\actions\\sosearchaction.h"
#line 30 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodekits\\sobasekit.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodekits\\sosubkit.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodekits\\sosubkit.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfnode.h"































#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfield.h"













































#line 33 "c:\\coin3d\\include\\inventor\\fields\\sosfnode.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosubfield.h"

















































































































































































































































































































































































































































































































#line 34 "c:\\coin3d\\include\\inventor\\fields\\sosfnode.h"

class SoNode;


class __declspec(dllimport) SoSFNode : public SoSField {
  typedef SoSField inherited;

  public: SoSFNode(void); virtual ~SoSFNode(); private: static SoType classTypeId; public: static void * createInstance(void); static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; virtual void copyFrom(const SoField & field); const SoSFNode & operator=(const SoSFNode & field); virtual SbBool isSame(const SoField & field) const; private: virtual SbBool readValue(SoInput * in); virtual void writeValue(SoOutput * out) const; protected: SoNode * value; public: SoNode * getValue(void) const { this->evaluate(); return this->value; } void setValue(SoNode * newvalue); SoNode * operator=(SoNode * newvalue) { this->setValue(newvalue); return this->value; } int operator==(const SoSFNode & field) const; int operator!=(const SoSFNode & field) const { return ! operator==(field); };

public:
  static void initClass(void);

  virtual void fixCopy(SbBool copyconnections);
  virtual SbBool referencesCopy(void) const;

private:
  virtual void countWriteRefs(SoOutput * out) const;

  
  friend class SoMFNode;
};

#line 57 "c:\\coin3d\\include\\inventor\\fields\\sosfnode.h"

#line 29 "c:\\coin3d\\include\\inventor\\nodekits\\sosubkit.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodekits\\sonodekitcatalog.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sotype.h"















































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodekits\\sonodekitcatalog.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\sblist.h"





































































































































































































































#line 29 "c:\\coin3d\\include\\inventor\\nodekits\\sonodekitcatalog.h"

class SbName;





class __declspec(dllimport) SoNodekitCatalog {
public:
  static void initClass(void);

  SoNodekitCatalog(void);
  ~SoNodekitCatalog();

  int getNumEntries(void) const;
  int getPartNumber(const SbName & name) const;
  const SbName & getName(int part) const;

  SoType getType(int part) const;
  SoType getType(const SbName & name) const;
  SoType getDefaultType(int part) const;
  SoType getDefaultType(const SbName & name) const;
  SbBool isNullByDefault(int part) const;
  SbBool isNullByDefault(const SbName & name) const;

  SbBool isLeaf(int part) const;
  SbBool isLeaf(const SbName & name) const;
  const SbName & getParentName(int part) const;
  const SbName & getParentName(const SbName & name) const;
  int getParentPartNumber(int part) const;
  int getParentPartNumber(const SbName & name) const;
  const SbName & getRightSiblingName(int part) const;
  const SbName & getRightSiblingName(const SbName & name) const;
  int getRightSiblingPartNumber(int part) const;
  int getRightSiblingPartNumber(const SbName & name) const;

  SbBool isList(int part) const;
  SbBool isList(const SbName & name) const;
  SoType getListContainerType(int part) const;
  SoType getListContainerType(const SbName & name) const;
  const SoTypeList & getListItemTypes(int part) const;
  const SoTypeList & getListItemTypes(const SbName & name) const;

  SbBool isPublic(int part) const;
  SbBool isPublic(const SbName & name) const;

  SoNodekitCatalog * clone(SoType type) const;

  SbBool addEntry(const SbName & name, SoType type, SoType defaulttype,
                  SbBool isdefaultnull, const SbName & parent,
                  const SbName & rightsibling, SbBool islist,
                  SoType listcontainertype, SoType listitemtype,
                  SbBool ispublic);
  void addListItemType(int part, SoType type);
  void addListItemType(const SbName & name, SoType type);

  void narrowTypes(const SbName & name, SoType newtype, SoType newdefaulttype);
  void setNullByDefault(const SbName & name, SbBool nullbydefault);

  SbBool recursiveSearch(int part, const SbName & name,
                         SoTypeList * checked) const;

  void printCheck(void) const;

private:
  SbBool hasEntry(const SbName & name) const;
  SbBool hasListItemType(const SbName & name, SoType type) const;
  SbBool reallyAddEntry(class CatalogItem * newitem);

  int getPartNumber(const SbList<class CatalogItem *> & l,
                    const SbName & name) const;
  void addListItemType(const SbList<class CatalogItem *> & l,
                       int part, SoType type);
  SbBool addListItemType(const SbList<class CatalogItem *> & l,
                         const SbName & name, SoType type);

  SbList<class CatalogItem *> items;
  SbList<class CatalogItem *> delayeditems;
};

#line 110 "c:\\coin3d\\include\\inventor\\nodekits\\sonodekitcatalog.h"
#line 30 "c:\\coin3d\\include\\inventor\\nodekits\\sosubkit.h"



#line 1 "c:\\coin3d\\include\\inventor\\nodekits\\sonodekitlistpart.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodekits\\sonodekitlistpart.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\sotypelist.h"











































#line 29 "c:\\coin3d\\include\\inventor\\nodekits\\sonodekitlistpart.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfnode.h"

























































#line 30 "c:\\coin3d\\include\\inventor\\nodekits\\sonodekitlistpart.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfname.h"


























#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfield.h"













































#line 28 "c:\\coin3d\\include\\inventor\\fields\\sosfname.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosubfield.h"

















































































































































































































































































































































































































































































































#line 29 "c:\\coin3d\\include\\inventor\\fields\\sosfname.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbname.h"


































































#line 30 "c:\\coin3d\\include\\inventor\\fields\\sosfname.h"

class __declspec(dllimport) SoSFName : public SoSField {
  typedef SoSField inherited;

  public: SoSFName(void); virtual ~SoSFName(); private: static SoType classTypeId; public: static void * createInstance(void); static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; virtual void copyFrom(const SoField & field); const SoSFName & operator=(const SoSFName & field); virtual SbBool isSame(const SoField & field) const; private: virtual SbBool readValue(SoInput * in); virtual void writeValue(SoOutput * out) const; protected: SbName value; public: const SbName & getValue(void) const { this->evaluate(); return this->value; } void setValue(const SbName & newvalue); const SbName & operator=(const SbName & newvalue) { this->setValue(newvalue); return this->value; } int operator==(const SoSFName & field) const; int operator!=(const SoSFName & field) const { return ! operator==(field); };

public:
  static void initClass(void);

  void setValue(const char * const name);
};

#line 43 "c:\\coin3d\\include\\inventor\\fields\\sosfname.h"
#line 31 "c:\\coin3d\\include\\inventor\\nodekits\\sonodekitlistpart.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfname.h"


























#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfield.h"




























































































#line 28 "c:\\coin3d\\include\\inventor\\fields\\somfname.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosubfield.h"

















































































































































































































































































































































































































































































































#line 29 "c:\\coin3d\\include\\inventor\\fields\\somfname.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbname.h"


































































#line 30 "c:\\coin3d\\include\\inventor\\fields\\somfname.h"

class __declspec(dllimport) SoMFName : public SoMField {
  typedef SoMField inherited;

  public: SoMFName(void); virtual ~SoMFName(); private: static SoType classTypeId; public: static void * createInstance(void); static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; virtual void copyFrom(const SoField & field); const SoMFName & operator=(const SoMFName & field); virtual SbBool isSame(const SoField & field) const; private: virtual SbBool read1Value(SoInput * in, int idx); virtual void write1Value(SoOutput * out, int idx) const; protected: virtual void deleteAllValues(void); virtual void copyValue(int to, int from); virtual int fieldSizeof(void) const; virtual void * valuesPtr(void); virtual void setValuesPtr(void * ptr); virtual void allocValues(int num); SbName * values; public: const SbName & operator[](const int idx) const { this->evaluate(); return this->values[idx]; } const SbName * getValues(const int start) const { this->evaluate(); return (const SbName *)(this->values + start); } int find(const SbName & value, SbBool addifnotfound = 0); void setValues(const int start, const int num, const SbName * newvals); void set1Value(const int idx, const SbName & value); void setValue(const SbName & value); const SbName & operator=(const SbName & val) { this->setValue(val); return val; } SbBool operator==(const SoMFName & field) const; SbBool operator!=(const SoMFName & field) const { return !operator==(field); } SbName * startEditing(void) { this->evaluate(); return this->values; } void finishEditing(void) { this->valueChanged(); };

public:
  static void initClass(void);

  void setValues(const int start, const int num, const char * strings[]);
  void setValue(const char * str);
};

#line 44 "c:\\coin3d\\include\\inventor\\fields\\somfname.h"
#line 32 "c:\\coin3d\\include\\inventor\\nodekits\\sonodekitlistpart.h"

class SoGroup;


class __declspec(dllimport) SoNodeKitListPart : public SoNode {
  typedef SoNode inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoNodeKitListPart(void);

  SoType getContainerType(void) const;
  void setContainerType(SoType newContainerType);
  const SoTypeList & getChildTypes(void) const;
  void addChildType(SoType typeToAdd);
  SbBool isTypePermitted(SoType typeToCheck) const;
  SbBool isChildPermitted(const SoNode * child) const;
  void containerSet(const char * fieldDataString);
  void lockTypes(void);
  SbBool isTypeLocked(void) const;
  void addChild(SoNode * child);
  void insertChild(SoNode * child, int childIndex);
  SoNode * getChild(int index) const;
  int findChild(SoNode * child) const;
  int getNumChildren(void) const;
  void removeChild(int index);
  void removeChild(SoNode * child);
  void replaceChild(int index, SoNode * newChild);
  void replaceChild(SoNode * oldChild, SoNode * newChild);
  virtual SbBool affectsState(void) const;
  virtual void doAction(SoAction * action);
  virtual void callback(SoCallbackAction * action);
  virtual void GLRender(SoGLRenderAction * action);
  virtual void getBoundingBox(SoGetBoundingBoxAction * action);
  virtual void getMatrix(SoGetMatrixAction * action);
  virtual void handleEvent(SoHandleEventAction * action);
  virtual void pick(SoPickAction * action);
  virtual void search(SoSearchAction * action);
  virtual void getPrimitiveCount(SoGetPrimitiveCountAction * action);
  virtual SoChildList * getChildren(void) const;

protected:
  virtual ~SoNodeKitListPart();

  SoGroup * getContainerNode(void);
  virtual SbBool readInstance(SoInput * in, unsigned short flags);
  virtual void copyContents(const SoFieldContainer * fromFC,
                            SbBool copyConnections);
  SoChildList * children;

private:
  void syncInternalData(void);

  SoSFNode containerNode;
  SoSFName containerTypeName;
  SoMFName childTypeNames;

  SbBool typelistlocked;
  SoTypeList allowedtypes;

  SbBool canCreateDefaultChild(void) const;
  SoNode * createAndAddDefaultChild(void);
  SoType getDefaultChildType(void) const;

  friend class SoBaseKit;
};

#line 102 "c:\\coin3d\\include\\inventor\\nodekits\\sonodekitlistpart.h"
#line 34 "c:\\coin3d\\include\\inventor\\nodekits\\sosubkit.h"
#line 35 "c:\\coin3d\\include\\inventor\\nodekits\\sosubkit.h"

































































































































































#line 197 "c:\\coin3d\\include\\inventor\\nodekits\\sosubkit.h"
#line 28 "c:\\coin3d\\include\\inventor\\nodekits\\sobasekit.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sonode.h"








































































































































































#line 29 "c:\\coin3d\\include\\inventor\\nodekits\\sobasekit.h"




#line 1 "c:\\coin3d\\include\\inventor\\sonodekitpath.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sopath.h"



















































































































































#line 28 "c:\\coin3d\\include\\inventor\\sonodekitpath.h"

class SoNode;
class SoBaseKit;
class SoSearchAction;

class __declspec(dllimport) SoNodeKitPath : public SoPath {
  typedef SoPath inherited;

public:
  int getLength(void) const;
  SoNode * getTail(void) const;
  SoNode * getNode(const int idx) const;
  SoNode * getNodeFromTail(const int idx) const;
  void truncate(const int length);
  void pop(void);
  void append(SoBaseKit * childKit);
  void append(const SoNodeKitPath * fromPath);
  SbBool containsNode(SoBaseKit * node) const;
  int findFork(const SoNodeKitPath * path) const;

  friend __declspec(dllimport) int operator==(const SoNodeKitPath & p1, const SoNodeKitPath & p2);

protected:
  SoNodeKitPath(const int approxLength);
  virtual ~SoNodeKitPath();

private:

  static void clean(void);
  static SoSearchAction *searchAction;
  SoSearchAction *getSearchAction(void);

  
  void append(const int childIndex);
  void append(SoNode *childNode);
  void append(const SoPath *fromPath);
  void push(const int childIndex);
  int getIndex(const int i) const;
  int getIndexFromTail(const int i) const;
  void insertIndex(SoNode *parent,const int newIndex);
  void removeIndex(SoNode *parent,const int oldIndex);
  void replaceIndex(SoNode *parent,const int index,SoNode *newChild);
};

__declspec(dllimport) int operator==(const SoNodeKitPath & p1, const SoNodeKitPath & p2);

#line 75 "c:\\coin3d\\include\\inventor\\sonodekitpath.h"
#line 34 "c:\\coin3d\\include\\inventor\\nodekits\\sobasekit.h"
#line 1 "c:\\coin3d\\include\\inventor\\misc\\sochildlist.h"


























#line 1 "c:\\coin3d\\include\\inventor\\lists\\sonodelist.h"













































#line 28 "c:\\coin3d\\include\\inventor\\misc\\sochildlist.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\sblist.h"





































































































































































































































#line 29 "c:\\coin3d\\include\\inventor\\misc\\sochildlist.h"

class SoPath;
class SoAction;

class __declspec(dllimport) SoChildList : public SoNodeList {
  typedef SoNodeList inherited;

public:
  SoChildList(SoNode * const parent);
  SoChildList(SoNode * const parent, const int size);
  SoChildList(SoNode * const parent, const SoChildList & cl);
  ~SoChildList();

  void append(SoNode * const node);
  void insert(SoNode * const ptr, const int addbefore);
  void remove(const int index);
  void truncate(const int length);
  void copy(const SoChildList & cl);
  void set(const int index, SoNode * const node);

  void traverseInPath(SoAction * const action, const int numindices,
                      const int * indices);
  void traverse(SoAction * const action);
  void traverse(SoAction * const action, const int index);
  void traverse(SoAction * const action, SoNode * node);
  void traverse(SoAction * const action, const int first, const int last);
  
public:
  void addPathAuditor(SoPath * const path);
  void removePathAuditor(SoPath * const path);

private:
  SoNode * parent;
  SbList<SoPath *> auditors;
};

#line 66 "c:\\coin3d\\include\\inventor\\misc\\sochildlist.h"
#line 35 "c:\\coin3d\\include\\inventor\\nodekits\\sobasekit.h"
#line 36 "c:\\coin3d\\include\\inventor\\nodekits\\sobasekit.h"

class SoGroup;
class SoNodekitParts;
class SoNodekitCatalog;
class SoPath;
















class __declspec(dllimport) SoBaseKit : public SoNode {
  typedef SoNode inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

  protected: SoSFNode callbackList;

public:
  static void initClass(void);
  SoBaseKit(void);

  static const SoNodekitCatalog * getClassNodekitCatalog(void);
  virtual const SoNodekitCatalog * getNodekitCatalog(void) const;

  virtual SoNode * getPart(const SbName & partname, SbBool makeifneeded);
  SbString getPartString(const SoBase * part);
  virtual SoNodeKitPath * createPathToPart(const SbName & partname,
                                           SbBool makeifneeded,
                                           const SoPath * pathtoextend = 0);
  virtual SbBool setPart(const SbName & partname, SoNode * from);
  SbBool set(const char * namevaluepairliststring);
  SbBool set(const char * partnamestring, const char * parameterstring);

  virtual void doAction(SoAction * action);
  virtual void callback(SoCallbackAction * action);
  virtual void GLRender(SoGLRenderAction * action);
  virtual void getBoundingBox(SoGetBoundingBoxAction * action);
  virtual void getMatrix(SoGetMatrixAction * action);
  virtual void handleEvent(SoHandleEventAction * action);
  virtual void rayPick(SoRayPickAction * action);
  virtual void search(SoSearchAction * action);
  virtual void write(SoWriteAction * action);
  virtual void getPrimitiveCount(SoGetPrimitiveCountAction * action);

  virtual SoChildList * getChildren(void) const;

  void printDiagram(void);
  void printSubDiagram(const SbName & rootname, int level);
  void printTable(void);

  virtual void addWriteReference(SoOutput * out, SbBool isfromfield = 0);
  SbBool forceChildDrivenWriteRefs(SoOutput * out);

  static SbBool isSearchingChildren(void);
  static void setSearchingChildren(const SbBool newval);
  static SoNode * typeCheck(const SbName & partname, const SoType & parttype,
                            SoNode * node);


protected:
  virtual ~SoBaseKit();

  static const SoNodekitCatalog ** getClassNodekitCatalogPtr(void);

  virtual SoNode * addToCopyDict(void) const;
  virtual void copyContents(const SoFieldContainer * fromfc,
                            SbBool copyconnections);

  SoGroup * getContainerNode(const SbName & listname,
                             SbBool makeifneeded = 1);
  virtual SoNode * getAnyPart(const SbName & partname, SbBool makeifneeded,
                              SbBool leafcheck = 0,
                              SbBool publiccheck = 0);
  virtual SoNodeKitPath * createPathToAnyPart(const SbName & partname,
                                              SbBool makeifneeded,
                                              SbBool leafcheck = 0,
                                              SbBool publiccheck = 0,
                                              const SoPath * pathtoextend = 0);
  virtual SbBool setAnyPart(const SbName & partname, SoNode * from,
                            SbBool anypart = 1);
  void createNodekitPartsList(void); 
  void createFieldList(void); 
  virtual void createDefaultParts(void);
  const SoNodekitParts * getNodekitPartsList(void) const; 
  const SbList<SoSFNode*> & getCatalogInstances(void) const; 

  void catalogError(void);
  virtual SbBool setUpConnections(SbBool onoff, SbBool doitalways = 0);
  virtual SbBool readInstance(SoInput * in, unsigned short flags);
  virtual void setDefaultOnNonWritingFields(void);
  void countMyFields(SoOutput * out);

  virtual SbBool setPart(const int partNum, SoNode * node);

  SoChildList * children;
  SbBool connectionsSetUp;

private:
  friend class SoInteractionKit;
  static SbBool findPart(const SbString & partname, SoBaseKit *& kit,
                         int & partnum, SbBool & islist, int & listidx,
                         const SbBool makeifneeded, SoPath * path = 0,
                         const SbBool recsearch = 0);

  SbBool makePart(const int partnum);
  int getRightSiblingIndex(const int partnum);
  int findNodeInThisKit(SoNode *node, const int parentnum = -1) const;

  static SoNodekitCatalog * classcatalog;
  static const SoNodekitCatalog ** parentcatalogptr;
  static SbBool searchchildren;

  class SoBaseKitP * pimpl;
  friend class SoBaseKitP;
};

#line 164 "c:\\coin3d\\include\\inventor\\nodekits\\sobasekit.h"
#line 31 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodekits\\soshapekit.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodekits\\soseparatorkit.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodekits\\sosubkit.h"




































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodekits\\soseparatorkit.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodekits\\sobasekit.h"



































































































































































#line 29 "c:\\coin3d\\include\\inventor\\nodekits\\soseparatorkit.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfenum.h"












































































#line 30 "c:\\coin3d\\include\\inventor\\nodekits\\soseparatorkit.h"

class __declspec(dllimport) SoSeparatorKit : public SoBaseKit {
  typedef SoBaseKit inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void); public: static const SoNodekitCatalog * getClassNodekitCatalog(void); virtual const SoNodekitCatalog * getNodekitCatalog(void) const; protected: static const SoNodekitCatalog ** getClassNodekitCatalogPtr(void); private: static SoNodekitCatalog * classcatalog; static const SoNodekitCatalog ** parentcatalogptr;

  protected: SoSFNode appearance;
  protected: SoSFNode childList;
  protected: SoSFNode pickStyle;
  protected: SoSFNode texture2Transform;
  protected: SoSFNode topSeparator;
  protected: SoSFNode transform;
  protected: SoSFNode units;

public:
  SoSeparatorKit(void);

  enum CacheEnabled {
    OFF,
    ON,
    AUTO
  };

  SoSFEnum renderCaching;
  SoSFEnum boundingBoxCaching;
  SoSFEnum renderCulling;
  SoSFEnum pickCulling;

  static void initClass(void);

protected:
  virtual ~SoSeparatorKit();
  virtual void setDefaultOnNonWritingFields(void);
  virtual SbBool setUpConnections(SbBool onoff, SbBool doitalways = 0);

private:
  class SoSeparatorKitP * pimpl;
  friend class SoSeparatorKitP;
};

#line 71 "c:\\coin3d\\include\\inventor\\nodekits\\soseparatorkit.h"
#line 28 "c:\\coin3d\\include\\inventor\\nodekits\\soshapekit.h"

class __declspec(dllimport) SoShapeKit : public SoSeparatorKit {
  typedef SoSeparatorKit inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void); public: static const SoNodekitCatalog * getClassNodekitCatalog(void); virtual const SoNodekitCatalog * getNodekitCatalog(void) const; protected: static const SoNodekitCatalog ** getClassNodekitCatalogPtr(void); private: static SoNodekitCatalog * classcatalog; static const SoNodekitCatalog ** parentcatalogptr;

  protected: SoSFNode coordinate3;
  protected: SoSFNode coordinate4;
  protected: SoSFNode localTransform;
  protected: SoSFNode materialBinding;
  protected: SoSFNode normal;
  protected: SoSFNode normalBinding;
  protected: SoSFNode profileCoordinate2;
  protected: SoSFNode profileCoordinate3;
  protected: SoSFNode profileList;
  protected: SoSFNode shape;
  protected: SoSFNode shapeHints;
  protected: SoSFNode shapeSeparator;
  protected: SoSFNode textureCoordinate2;
  protected: SoSFNode textureCoordinateBinding;
  protected: SoSFNode textureCoordinateFunction;

public:
  SoShapeKit(void);

  static void initClass(void);

protected:
  virtual ~SoShapeKit();

  virtual void setDefaultOnNonWritingFields(void);
};

#line 62 "c:\\coin3d\\include\\inventor\\nodekits\\soshapekit.h"
#line 32 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\soinfo.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodes\\soinfo.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfstring.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sbstring.h"












































































































































#line 28 "c:\\coin3d\\include\\inventor\\fields\\sosfstring.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfield.h"













































#line 29 "c:\\coin3d\\include\\inventor\\fields\\sosfstring.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosubfield.h"

















































































































































































































































































































































































































































































































#line 30 "c:\\coin3d\\include\\inventor\\fields\\sosfstring.h"

class __declspec(dllimport) SoSFString : public SoSField {
  typedef SoSField inherited;

  public: SoSFString(void); virtual ~SoSFString(); private: static SoType classTypeId; public: static void * createInstance(void); static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; virtual void copyFrom(const SoField & field); const SoSFString & operator=(const SoSFString & field); virtual SbBool isSame(const SoField & field) const; private: virtual SbBool readValue(SoInput * in); virtual void writeValue(SoOutput * out) const; protected: SbString value; public: const SbString & getValue(void) const { this->evaluate(); return this->value; } void setValue(const SbString & newvalue); const SbString & operator=(const SbString & newvalue) { this->setValue(newvalue); return this->value; } int operator==(const SoSFString & field) const; int operator!=(const SoSFString & field) const { return ! operator==(field); };

public:
  static void initClass(void);

  void setValue(const char * str);
};

#line 43 "c:\\coin3d\\include\\inventor\\fields\\sosfstring.h"
#line 29 "c:\\coin3d\\include\\inventor\\nodes\\soinfo.h"

class __declspec(dllimport) SoInfo : public SoNode {
  typedef SoNode inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoInfo(void);

  SoSFString string;

protected:
  virtual ~SoInfo();
};

#line 46 "c:\\coin3d\\include\\inventor\\nodes\\soinfo.h"
#line 33 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\socallback.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodes\\socallback.h"

typedef void SoCallbackCB(void * userdata, SoAction * action);

class __declspec(dllimport) SoCallback : public SoNode {
    typedef SoNode inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoCallback(void);

  void setCallback(SoCallbackCB * function, void * userdata = 0);

  virtual void doAction(SoAction * action);
  virtual void callback(SoCallbackAction * action);
  virtual void GLRender(SoGLRenderAction * action);
  virtual void getBoundingBox(SoGetBoundingBoxAction * action);
  virtual void getMatrix(SoGetMatrixAction * action);
  virtual void handleEvent(SoHandleEventAction * action);
  virtual void pick(SoPickAction * action);
  virtual void search(SoSearchAction * action);
  virtual void write(SoWriteAction * action);
  virtual void getPrimitiveCount(SoGetPrimitiveCountAction * action);

protected:
  virtual ~SoCallback();

  virtual void copyContents(const SoFieldContainer * from,
                            SbBool copyconnections);

private:
  SoCallbackCB * cbfunc;
  void * cbdata;
};

#line 65 "c:\\coin3d\\include\\inventor\\nodes\\socallback.h"
#line 34 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlgroup.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlgroup.h"
#line 1 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlparent.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sogroup.h"


















































































#line 28 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlparent.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 29 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlparent.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfnode.h"


























#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfield.h"




























































































#line 28 "c:\\coin3d\\include\\inventor\\fields\\somfnode.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosubfield.h"

















































































































































































































































































































































































































































































































#line 29 "c:\\coin3d\\include\\inventor\\fields\\somfnode.h"

class SoNode;

class __declspec(dllimport) SoMFNode : public SoMField {
  typedef SoMField inherited;

  public: SoMFNode(void); virtual ~SoMFNode(); private: static SoType classTypeId; public: static void * createInstance(void); static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; virtual void copyFrom(const SoField & field); const SoMFNode & operator=(const SoMFNode & field); virtual SbBool isSame(const SoField & field) const; private: virtual SbBool read1Value(SoInput * in, int idx); virtual void write1Value(SoOutput * out, int idx) const; protected: virtual void deleteAllValues(void); virtual void copyValue(int to, int from); virtual int fieldSizeof(void) const; virtual void * valuesPtr(void); virtual void setValuesPtr(void * ptr); virtual void allocValues(int num); SoNode * * values; public: SoNode * operator[](const int idx) const { this->evaluate(); return this->values[idx]; } const SoNode * * getValues(const int start) const { this->evaluate(); return (const SoNode * *)(this->values + start); } int find(SoNode * value, SbBool addifnotfound = 0); void setValues(const int start, const int num, const SoNode * * newvals); void set1Value(const int idx, SoNode * value); void setValue(SoNode * value); SoNode * operator=(SoNode * val) { this->setValue(val); return val; } SbBool operator==(const SoMFNode & field) const; SbBool operator!=(const SoMFNode & field) const { return !operator==(field); } SoNode * * startEditing(void) { this->evaluate(); return this->values; } void finishEditing(void) { this->valueChanged(); };

public:
  static void initClass(void);

  virtual void fixCopy(SbBool copyconnections);
  virtual SbBool referencesCopy(void) const;

  void addNode(SoNode * node);
  void insertNode(SoNode * node, int idx);
  SoNode * getNode(int idx) const;
  int findNode(const SoNode * node) const;
  int getNumNodes(void) const;
  void removeNode(int index);
  void removeNode(SoNode * node);
  void removeAllNodes(void);
  void replaceNode(int idx, SoNode * newnode);
  void replaceNode(SoNode * oldnode, SoNode * newnode);
  
  virtual void deleteValues(int start, int num = -1);
  virtual void insertSpace(int start, int num);

private:
  virtual void countWriteRefs(SoOutput * out) const;
};

#line 62 "c:\\coin3d\\include\\inventor\\fields\\somfnode.h"
#line 30 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlparent.h"

class SoVRMLParentP;
class SoSensor;

class __declspec(dllimport) SoVRMLParent : public SoGroup
{
  typedef SoGroup inherited;
  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances;

public:
  static void initClass(void);

  SoMFNode children;

  virtual SbBool affectsState(void) const;
  virtual void addChild(SoNode * child);
  virtual void insertChild(SoNode * child, int idx);
  virtual SoNode * getChild(int idx) const;
  virtual int findChild(const SoNode * child) const;
  virtual int getNumChildren(void) const;
  virtual void removeChild(int idx);
  virtual void removeChild(SoNode * child);
  virtual void removeAllChildren(void);
  virtual void replaceChild(int idx, SoNode * child);
  virtual void replaceChild(SoNode * old, SoNode * child);
  virtual SoChildList * getChildren(void) const;

  virtual void doAction(SoAction * action);
  virtual void search(SoSearchAction * action);
  virtual void write(SoWriteAction * action);
  virtual void getPrimitiveCount(SoGetPrimitiveCountAction * action);

  static void updateChildList(const SoNode * const * nodes, const int numnodes,
                              SoChildList & cl);
  static void updateChildList(SoNode * nodewithsfnode,
                              SoChildList & cl);

protected:
  SoVRMLParent(void);
  SoVRMLParent(int approxchildren);
  virtual ~SoVRMLParent();

  SoMFNode addChildren;
  SoMFNode removeChildren;

  virtual void notify(SoNotList * list);
  virtual SbBool readInstance(SoInput * in, unsigned short flags);
  virtual void copyContents(const SoFieldContainer * from, SbBool copyConn);

private:
  static void field_sensor_cb(void * data, SoSensor * sensor);
  void commonConstructor(void);
  void processAddChildren(void);
  void processRemoveChildren(void);
  SoFieldData * makeWriteData(void);
  
  SoVRMLParentP * pimpl;
}; 

#line 90 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlparent.h"
#line 29 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlgroup.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfenum.h"












































































#line 30 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlgroup.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfvec3f.h"











































#line 31 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlgroup.h"

class SoState;
class SoVRMLGroupP;

class __declspec(dllimport) SoVRMLGroup : public SoVRMLParent
{
  typedef SoVRMLParent inherited;
  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoVRMLGroup(void);
  SoVRMLGroup(int numChildren);

  enum CacheEnabled {
    OFF,
    ON,
    AUTO
  };

  SoSFEnum renderCaching;
  SoSFEnum boundingBoxCaching;
  SoSFEnum renderCulling;
  SoSFEnum pickCulling;
  SoSFVec3f bboxCenter;
  SoSFVec3f bboxSize;

  static void setNumRenderCaches(int num);
  static int getNumRenderCaches(void);

  virtual void doAction(SoAction * action);
  virtual void callback(SoCallbackAction * action);
  virtual void GLRender(SoGLRenderAction * action);
  virtual void getBoundingBox(SoGetBoundingBoxAction * action);
  virtual void getMatrix(SoGetMatrixAction * action);
  virtual void rayPick(SoRayPickAction * action);
  virtual void search(SoSearchAction * action);
  virtual void write(SoWriteAction * action);
  virtual void getPrimitiveCount(SoGetPrimitiveCountAction * action);
  virtual void audioRender(SoAudioRenderAction * action);

  virtual void GLRenderBelowPath(SoGLRenderAction * action);
  virtual void GLRenderInPath(SoGLRenderAction * action);
  virtual void GLRenderOffPath(SoGLRenderAction * action);

  virtual void notify(SoNotList * list);

protected:
  virtual ~SoVRMLGroup();

  virtual SbBool cullTest(SoState * state);

  static int numRenderCaches;

private:
  SoVRMLGroupP * pimpl;

  SbBool cullTestNoPush(SoState * state);
  void commonConstructor(void);

}; 

#line 94 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlgroup.h"
#line 35 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\solabel.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodes\\solabel.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfname.h"










































#line 29 "c:\\coin3d\\include\\inventor\\nodes\\solabel.h"

class __declspec(dllimport) SoLabel : public SoNode {
  typedef SoNode inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoLabel(void);

  SoSFName label;

protected:
  virtual ~SoLabel();
};

#line 46 "c:\\coin3d\\include\\inventor\\nodes\\solabel.h"
#line 36 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sotexture2.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodes\\sotexture2.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfenum.h"












































































#line 29 "c:\\coin3d\\include\\inventor\\nodes\\sotexture2.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfimage.h"


























#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfield.h"













































#line 28 "c:\\coin3d\\include\\inventor\\fields\\sosfimage.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosubfield.h"

















































































































































































































































































































































































































































































































#line 29 "c:\\coin3d\\include\\inventor\\fields\\sosfimage.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbvec2s.h"
















































































#line 30 "c:\\coin3d\\include\\inventor\\fields\\sosfimage.h"


class __declspec(dllimport) SoSFImage : public SoSField {
  typedef SoSField inherited;

  public: SoSFImage(void); virtual ~SoSFImage();
  private: static SoType classTypeId; public: static void * createInstance(void); static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; virtual void copyFrom(const SoField & field); const SoSFImage & operator=(const SoSFImage & field); virtual SbBool isSame(const SoField & field) const;

public:
  enum CopyPolicy {
    COPY,
    NO_COPY,
    NO_COPY_AND_DELETE,
    NO_COPY_AND_FREE
  };

  static void initClass(void);

  const unsigned char * getValue(SbVec2s & size, int & nc) const;
  void setValue(const SbVec2s & size, const int nc,
                const unsigned char * pixels, CopyPolicy copypolicy = COPY);

  int operator==(const SoSFImage & field) const;
  int operator!=(const SoSFImage & field) const { return ! operator == (field); }

  unsigned char * startEditing(SbVec2s & size, int & nc);
  void finishEditing(void);

  void setSubValue(const SbVec2s & dims, const SbVec2s & offset, unsigned char * pixels);
  void setSubValues(const SbVec2s * dims, const SbVec2s * offsets, int num, unsigned char ** pixelblocks);
  unsigned char * getSubTexture(int idx, SbVec2s & dims, SbVec2s & offset) const;
  SbBool hasSubTextures(int & numsubtextures);

  void setNeverWrite(SbBool flag);
  SbBool isNeverWrite(void) const;

  SbBool hasTransparency(void) const;

private:
  virtual SbBool readValue(SoInput * in);
  virtual void writeValue(SoOutput * out) const;

  class SoSFImageP * pimpl;
};

#line 76 "c:\\coin3d\\include\\inventor\\fields\\sosfimage.h"
#line 30 "c:\\coin3d\\include\\inventor\\nodes\\sotexture2.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfstring.h"










































#line 31 "c:\\coin3d\\include\\inventor\\nodes\\sotexture2.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfcolor.h"














































#line 32 "c:\\coin3d\\include\\inventor\\nodes\\sotexture2.h"
#line 1 "c:\\coin3d\\include\\inventor\\elements\\sotextureimageelement.h"


























#line 1 "c:\\coin3d\\include\\inventor\\elements\\soreplacedelement.h"


























#line 1 "c:\\coin3d\\include\\inventor\\elements\\sosubelement.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 28 "c:\\coin3d\\include\\inventor\\elements\\sosubelement.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbname.h"


































































#line 29 "c:\\coin3d\\include\\inventor\\elements\\sosubelement.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"















#line 17 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"



















#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"




















extern "C" {
#line 59 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"

__declspec(dllimport) void __cdecl _assert(void *, void *, unsigned);


}
#line 65 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"



#line 69 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"
#line 30 "c:\\coin3d\\include\\inventor\\elements\\sosubelement.h"

#line 1 "c:\\coin3d\\include\\inventor\\elements\\soelement.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 28 "c:\\coin3d\\include\\inventor\\elements\\soelement.h"
#line 1 "c:\\coin3d\\include\\inventor\\sotype.h"















































































































































#line 29 "c:\\coin3d\\include\\inventor\\elements\\soelement.h"
#line 1 "c:\\coin3d\\include\\inventor\\misc\\sostate.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 28 "c:\\coin3d\\include\\inventor\\misc\\sostate.h"

#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"















#line 17 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"



















#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"




















extern "C" {
#line 59 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"

__declspec(dllimport) void __cdecl _assert(void *, void *, unsigned);


}
#line 65 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"



#line 69 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"
#line 30 "c:\\coin3d\\include\\inventor\\misc\\sostate.h"

class SoAction;
class SoTypeList;
class SoElement;

class __declspec(dllimport) SoState {
public:
  SoState(SoAction * action,
          const SoTypeList & enabledelements);
  ~SoState(void);

  SoAction * getAction(void) const;

  SoElement * getElement(const int stackindex);
  const SoElement * getConstElement(const int stackindex) const;

  void push(void);
  void pop(void);

  void print(FILE * const file = (&_iob[1])) const;

  SbBool isElementEnabled(const int stackindex) const;

  int getDepth(void) const;

  void setCacheOpen(const SbBool flag);
  SbBool isCacheOpen(void) const;

  SoElement * getElementNoPush(const int stackindex) const;

private:
  SoElement ** stack;
  int numstacks;
  SbBool cacheopen;
  class SoStateP * pimpl;  
};



inline SbBool
SoState::isElementEnabled(const int stackindex) const
{
  return (stackindex < this->numstacks) && (this->stack[stackindex] != 0);
}

inline const SoElement *
SoState::getConstElement(const int stackindex) const
{
  (void)( (this->isElementEnabled(stackindex)) || (_assert("this->isElementEnabled(stackindex)", "c:\\coin3d\\include\\inventor\\misc\\sostate.h", 78), 0) );
  return this->stack[stackindex];
}

inline SbBool 
SoState::isCacheOpen(void) const
{
  return this->cacheopen;
}

inline SoElement *
SoState::getElementNoPush(const int stackindex) const
{
  (void)( (this->isElementEnabled(stackindex)) || (_assert("this->isElementEnabled(stackindex)", "c:\\coin3d\\include\\inventor\\misc\\sostate.h", 91), 0) );
  return this->stack[stackindex];
}


#line 97 "c:\\coin3d\\include\\inventor\\misc\\sostate.h"
#line 30 "c:\\coin3d\\include\\inventor\\elements\\soelement.h"


class SoNode;

class __declspec(dllimport) SoElement {
public:
  static void initClass(void);

  static SoType getClassTypeId(void);
  static int getClassStackIndex(void);
  const SoType getTypeId(void) const;
  int getStackIndex(void) const;

  virtual void init(SoState * state);

  virtual void push(SoState * state);
  virtual void pop(SoState * state, const SoElement * prevTopElement);

  virtual SbBool matches(const SoElement * element) const = 0;
  virtual SoElement * copyMatchInfo(void) const = 0;

  static void initElements(void); 

  static int getNumStackIndices(void);
  static SoType getIdFromStackIndex(const int stackIndex);

  void setDepth(const int depth);

  int getDepth(void) const;

  virtual void print(FILE * file = (&_iob[1])) const;
  virtual ~SoElement();

protected:
  SoElement(void);
  static int classStackIndex;

  static SoElement * getElement(SoState * const state, const int stackIndex);
  static const SoElement * getConstElement(SoState * const state, const int stackIndex);
  
  void capture(SoState * const state) const;

  virtual void captureThis(SoState * state) const;

  void setTypeId(const SoType typeId);
  void setStackIndex(const int index);

  SoType typeId;
  int stackIndex;

  static int createStackIndex(const SoType id);
  static SoTypeList * stackToType;

  int depth;

  SoElement * getNextInStack(void) const;
  SoElement * getNextFree(void) const;

private:

  static SoType classTypeId;

  friend class SoState; 
  static void cleanup(void);
  SoElement * nextup;
  SoElement * nextdown;
};



inline SoElement *
SoElement::getElement(SoState * const state,
                      const int stackIndex)
{
  return state->getElement(stackIndex);
}

inline void 
SoElement::capture(SoState * const state) const
{
  if (state->isCacheOpen()) this->captureThis(state);
}

inline const SoElement *
SoElement::getConstElement(SoState * const state,
                           const int stackIndex)
{
  const SoElement * element = state->getConstElement(stackIndex);
  element->capture(state);
  return element;
}

#line 123 "c:\\coin3d\\include\\inventor\\elements\\soelement.h"
#line 32 "c:\\coin3d\\include\\inventor\\elements\\sosubelement.h"















































































#line 112 "c:\\coin3d\\include\\inventor\\elements\\sosubelement.h"
#line 28 "c:\\coin3d\\include\\inventor\\elements\\soreplacedelement.h"
#line 1 "c:\\coin3d\\include\\inventor\\system\\inttypes.h"


















































































































































































#line 29 "c:\\coin3d\\include\\inventor\\elements\\soreplacedelement.h"

class __declspec(dllimport) SoReplacedElement : public SoElement {
  typedef SoElement inherited;

  public: static SoType getClassTypeId(void); static int getClassStackIndex(void); protected: SoReplacedElement(void); private: static int classStackIndex; static SoType classTypeId;
public:
  static void initClass(void);
protected:
  virtual ~SoReplacedElement();

public:
  virtual void init(SoState * state);
  virtual SbBool matches(const SoElement * element) const;

  virtual SoElement * copyMatchInfo() const;

  uint32_t getNodeId() const;

  virtual void print(FILE * file) const;

protected:
  static  SoElement * getElement(SoState * const state,
                                 const int stackIndex, SoNode * const node);

  uint32_t nodeId;
};

#line 57 "c:\\coin3d\\include\\inventor\\elements\\soreplacedelement.h"
#line 28 "c:\\coin3d\\include\\inventor\\elements\\sotextureimageelement.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbvec2s.h"
















































































#line 29 "c:\\coin3d\\include\\inventor\\elements\\sotextureimageelement.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbvec3s.h"






























































































#line 30 "c:\\coin3d\\include\\inventor\\elements\\sotextureimageelement.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbcolor.h"



















































#line 31 "c:\\coin3d\\include\\inventor\\elements\\sotextureimageelement.h"

class SoState;

class __declspec(dllimport) SoTextureImageElement : public SoReplacedElement {
  typedef SoReplacedElement inherited;

  public: static SoType getClassTypeId(void); static int getClassStackIndex(void); protected: SoTextureImageElement(void); private: static int classStackIndex; static SoType classTypeId; public: static void * createInstance(void);
public:
  static void initClass(void);
protected:
  virtual ~SoTextureImageElement();

public:
  enum Model {
    
    
    
    BLEND = 0x0be2,
    MODULATE = 0x2100,
    DECAL = 0x2101,
    REPLACE = 0x1E01 
  };

  enum Wrap {
    
    
    
    CLAMP = 0x2900,
    REPEAT = 0x2901
  };

  virtual void init(SoState * state);

  static void setDefault(SoState * const state, SoNode * const node);

  static void set(SoState * const state, SoNode * const node,
                  const SbVec2s & size, const int numComponents,
                  const unsigned char * bytes,
                  const int wrapS, const int wrapT,
                  const int model, const SbColor & blendColor);
  static void set(SoState * const state, SoNode * const node,
                  const SbVec3s & size, const int numComponents,
                  const unsigned char * bytes,
                  const int wrapS, const int wrapT, const int wrapR,
                  const int model, const SbColor & blendColor);

  static void set(SoState * const state, SoNode * const node,
                  const SbVec2s & size, const int numComponents,
                  const unsigned char * bytes,
                  const Wrap wrapS, const Wrap wrapT,
                  const Model model, const SbColor & blendColor);
  static void set(SoState * const state, SoNode * const node,
                  const SbVec3s & size, const int numComponents,
                  const unsigned char * bytes,
                  const Wrap wrapS, const Wrap wrapT, const Wrap wrapR,
                  const Model model, const SbColor & blendColor);

  static const unsigned char *get(SoState * const state,
                                  SbVec2s & size,
                                  int & numComponents,
                                  Wrap & wrapS,
                                  Wrap & wrapT,
                                  Model & model,
                                  SbColor & blendColor);
  static const unsigned char *get(SoState * const state,
                                  SbVec3s & size,
                                  int & numComponents,
                                  Wrap & wrapS,
                                  Wrap & wrapT,
                                  Wrap & wrapR,
                                  Model & model,
                                  SbColor & blendColor);

  static const unsigned char *get(SoState * const state,
                                  SbVec2s & size,
                                  int & numComponents,
                                  int & wrapS,
                                  int & wrapT,
                                  int & model,
                                  SbColor & blendColor);
  static const unsigned char *get(SoState * const state,
                                  SbVec3s & size,
                                  int & numComponents,
                                  int & wrapS,
                                  int & wrapT,
                                  int & wrapR,
                                  int & model,
                                  SbColor & blendColor);

  static const SbColor &getBlendColor(SoState * const state);
  static const unsigned char *getImage(SoState * const state,
                                       SbVec2s &size,
                                       int &numComponents);
  static const unsigned char *getImage(SoState * const state,
                                       SbVec3s &size,
                                       int &numComponents);
  static Model getModel(SoState * const state);
  static Wrap getWrapS(SoState * const state);
  static Wrap getWrapT(SoState * const state);
  static Wrap getWrapR(SoState * const state);

  static SbBool containsTransparency(SoState * const state);

  static const unsigned char *getDefault(SbVec2s & size, int & numComponents);
  static const unsigned char *getDefault(SbVec3s & size, int & numComponents);

protected:
  virtual void setElt(const SbVec2s & size, const int numComponents,
                      const unsigned char * bytes,
                      const Wrap wrapS, const Wrap wrapT,
                      const Model model, const SbColor & blendColor);
  virtual void setElt(const SbVec3s & size, const int numComponents,
                      const unsigned char * bytes,
                      const Wrap wrapS, const Wrap wrapT, const Wrap wrapR,
                      const Model model, const SbColor & blendColor);

  virtual SbBool hasTransparency(void) const;

  SbVec3s size;
  int numComponents;
  const unsigned char *bytes;
  Wrap wrapS, wrapT, wrapR;
  Model model;
  SbColor blendColor;

private:
  void setDefaultValues(void);

};

#line 162 "c:\\coin3d\\include\\inventor\\elements\\sotextureimageelement.h"
#line 33 "c:\\coin3d\\include\\inventor\\nodes\\sotexture2.h"

class SoFieldSensor;
class SoSensor;
class SoTexture2P;

class __declspec(dllimport) SoTexture2 : public SoNode {
  typedef SoNode inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoTexture2(void);

  enum Model {
    MODULATE = SoTextureImageElement::MODULATE,
    DECAL = SoTextureImageElement::DECAL,
    BLEND = SoTextureImageElement::BLEND,
    REPLACE = SoTextureImageElement::REPLACE
  };

  enum Wrap {
    REPEAT = SoTextureImageElement::REPEAT,
    CLAMP = SoTextureImageElement::CLAMP
  };

  SoSFString filename;
  SoSFImage image;
  SoSFEnum wrapS;
  SoSFEnum wrapT;
  SoSFEnum model;
  SoSFColor blendColor;

  virtual void doAction(SoAction * action);
  virtual void GLRender(SoGLRenderAction * action);
  virtual void callback(SoCallbackAction * action);
  virtual void rayPick(SoRayPickAction * action);

  static SbBool readImage(const SbString & fname, int & w, int & h, int & nc,
                          unsigned char *& bytes);
protected:
  virtual ~SoTexture2();

  virtual SbBool readInstance(SoInput * in, unsigned short flags);
  virtual void notify(SoNotList * list);
  int getReadStatus(void);
  void setReadStatus(int s);

private:
  SbBool loadFilename(void);
  static void filenameSensorCB(void *, SoSensor *);

  SoTexture2P * pimpl;
};

#line 89 "c:\\coin3d\\include\\inventor\\nodes\\sotexture2.h"
#line 37 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sofaceset.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodes\\sofaceset.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sononindexedshape.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodes\\sononindexedshape.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sovertexshape.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodes\\sovertexshape.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\soshape.h"












































































































































#line 29 "c:\\coin3d\\include\\inventor\\nodes\\sovertexshape.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfnode.h"

























































#line 30 "c:\\coin3d\\include\\inventor\\nodes\\sovertexshape.h"


#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sovertexproperty.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodes\\sovertexproperty.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfuint32.h"


























#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfield.h"




























































































#line 28 "c:\\coin3d\\include\\inventor\\fields\\somfuint32.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosubfield.h"

















































































































































































































































































































































































































































































































#line 29 "c:\\coin3d\\include\\inventor\\fields\\somfuint32.h"

class __declspec(dllimport) SoMFUInt32 : public SoMField {
  typedef SoMField inherited;

  public: SoMFUInt32(void); virtual ~SoMFUInt32(); private: static SoType classTypeId; public: static void * createInstance(void); static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; virtual void copyFrom(const SoField & field); const SoMFUInt32 & operator=(const SoMFUInt32 & field); virtual SbBool isSame(const SoField & field) const; private: virtual SbBool read1Value(SoInput * in, int idx); virtual void write1Value(SoOutput * out, int idx) const; protected: virtual void deleteAllValues(void); virtual void copyValue(int to, int from); virtual int fieldSizeof(void) const; virtual void * valuesPtr(void); virtual void setValuesPtr(void * ptr); virtual void allocValues(int num); uint32_t * values; public: uint32_t operator[](const int idx) const { this->evaluate(); return this->values[idx]; } const uint32_t * getValues(const int start) const { this->evaluate(); return (const uint32_t *)(this->values + start); } int find(uint32_t value, SbBool addifnotfound = 0); void setValues(const int start, const int num, const uint32_t * newvals); void set1Value(const int idx, uint32_t value); void setValue(uint32_t value); uint32_t operator=(uint32_t val) { this->setValue(val); return val; } SbBool operator==(const SoMFUInt32 & field) const; SbBool operator!=(const SoMFUInt32 & field) const { return !operator==(field); } uint32_t * startEditing(void) { this->evaluate(); return this->values; } void finishEditing(void) { this->valueChanged(); };

  void setValuesPointer(const int num, const uint32_t * userdata); void setValuesPointer(const int num, uint32_t * userdata);

public:
  static void initClass(void);

private:
  virtual int getNumValuesPerLine(void) const;
};

#line 45 "c:\\coin3d\\include\\inventor\\fields\\somfuint32.h"
#line 29 "c:\\coin3d\\include\\inventor\\nodes\\sovertexproperty.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfvec3f.h"


























#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfield.h"




























































































#line 28 "c:\\coin3d\\include\\inventor\\fields\\somfvec3f.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosubfield.h"

















































































































































































































































































































































































































































































































#line 29 "c:\\coin3d\\include\\inventor\\fields\\somfvec3f.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbvec3f.h"






































































































#line 30 "c:\\coin3d\\include\\inventor\\fields\\somfvec3f.h"

class __declspec(dllimport) SoMFVec3f : public SoMField {
  typedef SoMField inherited;

  public: SoMFVec3f(void); virtual ~SoMFVec3f(); private: static SoType classTypeId; public: static void * createInstance(void); static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; virtual void copyFrom(const SoField & field); const SoMFVec3f & operator=(const SoMFVec3f & field); virtual SbBool isSame(const SoField & field) const; private: virtual SbBool read1Value(SoInput * in, int idx); virtual void write1Value(SoOutput * out, int idx) const; protected: virtual void deleteAllValues(void); virtual void copyValue(int to, int from); virtual int fieldSizeof(void) const; virtual void * valuesPtr(void); virtual void setValuesPtr(void * ptr); virtual void allocValues(int num); SbVec3f * values; public: const SbVec3f & operator[](const int idx) const { this->evaluate(); return this->values[idx]; } const SbVec3f * getValues(const int start) const { this->evaluate(); return (const SbVec3f *)(this->values + start); } int find(const SbVec3f & value, SbBool addifnotfound = 0); void setValues(const int start, const int num, const SbVec3f * newvals); void set1Value(const int idx, const SbVec3f & value); void setValue(const SbVec3f & value); const SbVec3f & operator=(const SbVec3f & val) { this->setValue(val); return val; } SbBool operator==(const SoMFVec3f & field) const; SbBool operator!=(const SoMFVec3f & field) const { return !operator==(field); } SbVec3f * startEditing(void) { this->evaluate(); return this->values; } void finishEditing(void) { this->valueChanged(); };

  void setValuesPointer(const int num, const float * userdata); void setValuesPointer(const int num, float * userdata);
  void setValuesPointer(const int num, const SbVec3f * userdata); void setValuesPointer(const int num, SbVec3f * userdata);

public:
  static void initClass(void);

  void setValues(const int start, const int num, const float xyz[][3]);
  void set1Value(const int idx, const float x, const float y, const float z);
  void set1Value(const int idx, const float xyz[3]);
  void setValue(const float x, const float y, const float z);
  void setValue(const float xyz[3]);
};

#line 50 "c:\\coin3d\\include\\inventor\\fields\\somfvec3f.h"
#line 30 "c:\\coin3d\\include\\inventor\\nodes\\sovertexproperty.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfvec2f.h"


























#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfield.h"




























































































#line 28 "c:\\coin3d\\include\\inventor\\fields\\somfvec2f.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosubfield.h"

















































































































































































































































































































































































































































































































#line 29 "c:\\coin3d\\include\\inventor\\fields\\somfvec2f.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbvec2f.h"













































































#line 30 "c:\\coin3d\\include\\inventor\\fields\\somfvec2f.h"

class __declspec(dllimport) SoMFVec2f : public SoMField {
  typedef SoMField inherited;

  public: SoMFVec2f(void); virtual ~SoMFVec2f(); private: static SoType classTypeId; public: static void * createInstance(void); static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; virtual void copyFrom(const SoField & field); const SoMFVec2f & operator=(const SoMFVec2f & field); virtual SbBool isSame(const SoField & field) const; private: virtual SbBool read1Value(SoInput * in, int idx); virtual void write1Value(SoOutput * out, int idx) const; protected: virtual void deleteAllValues(void); virtual void copyValue(int to, int from); virtual int fieldSizeof(void) const; virtual void * valuesPtr(void); virtual void setValuesPtr(void * ptr); virtual void allocValues(int num); SbVec2f * values; public: const SbVec2f & operator[](const int idx) const { this->evaluate(); return this->values[idx]; } const SbVec2f * getValues(const int start) const { this->evaluate(); return (const SbVec2f *)(this->values + start); } int find(const SbVec2f & value, SbBool addifnotfound = 0); void setValues(const int start, const int num, const SbVec2f * newvals); void set1Value(const int idx, const SbVec2f & value); void setValue(const SbVec2f & value); const SbVec2f & operator=(const SbVec2f & val) { this->setValue(val); return val; } SbBool operator==(const SoMFVec2f & field) const; SbBool operator!=(const SoMFVec2f & field) const { return !operator==(field); } SbVec2f * startEditing(void) { this->evaluate(); return this->values; } void finishEditing(void) { this->valueChanged(); };

  void setValuesPointer(const int num, const SbVec2f * userdata); void setValuesPointer(const int num, SbVec2f * userdata);
  void setValuesPointer(const int num, const float * userdata); void setValuesPointer(const int num, float * userdata);

public:
  static void initClass(void);

  void setValues(const int start, const int num, const float xy[][2]);
  void set1Value(const int idx, const float x, const float y);
  void set1Value(const int idx, const float xy[2]);
  void setValue(const float x, const float y);
  void setValue(const float xy[2]);
};

#line 50 "c:\\coin3d\\include\\inventor\\fields\\somfvec2f.h"
#line 31 "c:\\coin3d\\include\\inventor\\nodes\\sovertexproperty.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfenum.h"












































































#line 32 "c:\\coin3d\\include\\inventor\\nodes\\sovertexproperty.h"

class __declspec(dllimport) SoVertexProperty : public SoNode {
  typedef SoNode inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoVertexProperty(void);

  
  enum Binding {
    OVERALL = 2,
    PER_PART,
    PER_PART_INDEXED,
    PER_FACE,
    PER_FACE_INDEXED,
    PER_VERTEX,
    PER_VERTEX_INDEXED
  };

  SoMFVec3f vertex;
  SoMFVec2f texCoord;
  SoMFVec3f texCoord3;
  SoMFVec3f normal;
  SoSFEnum normalBinding;
  SoMFUInt32 orderedRGBA;
  SoSFEnum materialBinding;

  virtual void doAction(SoAction * action);
  virtual void GLRender(SoGLRenderAction * action);
  virtual void getBoundingBox(SoGetBoundingBoxAction * action);
  virtual void callback(SoCallbackAction * action);
  virtual void pick(SoPickAction * action);
  virtual void getPrimitiveCount(SoGetPrimitiveCountAction * action);

protected:
  virtual ~SoVertexProperty();
  virtual void notify(SoNotList *list);

private:
  SbBool transparent;
  SbBool checktransparent;
};

#line 78 "c:\\coin3d\\include\\inventor\\nodes\\sovertexproperty.h"
#line 33 "c:\\coin3d\\include\\inventor\\nodes\\sovertexshape.h"
#line 34 "c:\\coin3d\\include\\inventor\\nodes\\sovertexshape.h"

class SoNormalBundle;
class SoNormalCache;
class SbVec3f;
class SoTextureCoordinateElement;
class SoCoordinateElement;
class SoVertexShapeP;

class __declspec(dllimport) SoVertexShape : public SoShape {
  typedef SoShape inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances;

public:
  static void initClass(void);

  SoSFNode vertexProperty;

  virtual void notify(SoNotList * nl);
  virtual SbBool generateDefaultNormals(SoState * state,
                                        SoNormalBundle * bundle);
  virtual SbBool generateDefaultNormals(SoState * state,
                                        SoNormalCache * cache);
  virtual void write(SoWriteAction * action);

protected:
  SoVertexShape(void);
  virtual ~SoVertexShape();

  virtual SbBool shouldGLRender(SoGLRenderAction * action);

  void setNormalCache(SoState * const state,
                      const int num, const SbVec3f * normals);
  SoNormalCache * getNormalCache(void) const;

  SoNormalCache * generateAndReadLockNormalCache(SoState * const state);
  void getVertexData(SoState * state,
                     const SoCoordinateElement *& coords,
                     const SbVec3f *& normals,
                     const SbBool neednormals);

  void readLockNormalCache(void);
  void readUnlockNormalCache(void);

private:
  void writeLockNormalCache(void);
  void writeUnlockNormalCache(void);
  SoVertexShapeP * pimpl;
};

#line 85 "c:\\coin3d\\include\\inventor\\nodes\\sovertexshape.h"
#line 29 "c:\\coin3d\\include\\inventor\\nodes\\sononindexedshape.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfint32.h"


























#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfield.h"













































#line 28 "c:\\coin3d\\include\\inventor\\fields\\sosfint32.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosubfield.h"

















































































































































































































































































































































































































































































































#line 29 "c:\\coin3d\\include\\inventor\\fields\\sosfint32.h"

class __declspec(dllimport) SoSFInt32 : public SoSField {
  typedef SoSField inherited;

  public: SoSFInt32(void); virtual ~SoSFInt32(); private: static SoType classTypeId; public: static void * createInstance(void); static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; virtual void copyFrom(const SoField & field); const SoSFInt32 & operator=(const SoSFInt32 & field); virtual SbBool isSame(const SoField & field) const; private: virtual SbBool readValue(SoInput * in); virtual void writeValue(SoOutput * out) const; protected: int32_t value; public: int32_t getValue(void) const { this->evaluate(); return this->value; } void setValue(int32_t newvalue); int32_t operator=(int32_t newvalue) { this->setValue(newvalue); return this->value; } int operator==(const SoSFInt32 & field) const; int operator!=(const SoSFInt32 & field) const { return ! operator==(field); };

public:
  static void initClass(void);
};

#line 40 "c:\\coin3d\\include\\inventor\\fields\\sosfint32.h"
#line 30 "c:\\coin3d\\include\\inventor\\nodes\\sononindexedshape.h"


class __declspec(dllimport) SoNonIndexedShape : public SoVertexShape {
  typedef SoVertexShape inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances;

public:
  static void initClass(void);

  SoSFInt32 startIndex;

protected:
  SoNonIndexedShape(void);
  virtual ~SoNonIndexedShape();

  void computeCoordBBox(SoAction * action, int numVertices,
                        SbBox3f & box, SbVec3f & center);

  void fixNumVerticesPointers(SoState *state, const int32_t *&start, const int32_t *&end,
                              int32_t *dummyarray) const;

};

#line 55 "c:\\coin3d\\include\\inventor\\nodes\\sononindexedshape.h"
#line 29 "c:\\coin3d\\include\\inventor\\nodes\\sofaceset.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfint32.h"


























#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfield.h"




























































































#line 28 "c:\\coin3d\\include\\inventor\\fields\\somfint32.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosubfield.h"

















































































































































































































































































































































































































































































































#line 29 "c:\\coin3d\\include\\inventor\\fields\\somfint32.h"

class __declspec(dllimport) SoMFInt32 : public SoMField {
  typedef SoMField inherited;

  public: SoMFInt32(void); virtual ~SoMFInt32(); private: static SoType classTypeId; public: static void * createInstance(void); static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; virtual void copyFrom(const SoField & field); const SoMFInt32 & operator=(const SoMFInt32 & field); virtual SbBool isSame(const SoField & field) const; private: virtual SbBool read1Value(SoInput * in, int idx); virtual void write1Value(SoOutput * out, int idx) const; protected: virtual void deleteAllValues(void); virtual void copyValue(int to, int from); virtual int fieldSizeof(void) const; virtual void * valuesPtr(void); virtual void setValuesPtr(void * ptr); virtual void allocValues(int num); int32_t * values; public: int32_t operator[](const int idx) const { this->evaluate(); return this->values[idx]; } const int32_t * getValues(const int start) const { this->evaluate(); return (const int32_t *)(this->values + start); } int find(int32_t value, SbBool addifnotfound = 0); void setValues(const int start, const int num, const int32_t * newvals); void set1Value(const int idx, int32_t value); void setValue(int32_t value); int32_t operator=(int32_t val) { this->setValue(val); return val; } SbBool operator==(const SoMFInt32 & field) const; SbBool operator!=(const SoMFInt32 & field) const { return !operator==(field); } int32_t * startEditing(void) { this->evaluate(); return this->values; } void finishEditing(void) { this->valueChanged(); };

  void setValuesPointer(const int num, const int32_t * userdata); void setValuesPointer(const int num, int32_t * userdata);

public:
  static void initClass(void);

private:
  virtual int getNumValuesPerLine(void) const;
};

#line 45 "c:\\coin3d\\include\\inventor\\fields\\somfint32.h"
#line 30 "c:\\coin3d\\include\\inventor\\nodes\\sofaceset.h"

class SoFaceSetP;

class __declspec(dllimport) SoFaceSet : public SoNonIndexedShape {
  typedef SoNonIndexedShape inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoFaceSet(void);

  SoMFInt32 numVertices;

  virtual void GLRender(SoGLRenderAction * action);
  virtual SbBool generateDefaultNormals(SoState * state, SoNormalBundle * nb);
  virtual void getPrimitiveCount(SoGetPrimitiveCountAction * action);

protected:
  virtual ~SoFaceSet();

  virtual void generatePrimitives(SoAction * action);
  virtual void computeBBox(SoAction * action, SbBox3f & box, SbVec3f & center);
  virtual SbBool generateDefaultNormals(SoState *, SoNormalCache *);

private:
  enum Binding {
    OVERALL = 0,
    PER_FACE,
    PER_VERTEX
  };

  Binding findMaterialBinding(SoState * const state) const;
  Binding findNormalBinding(SoState * const state) const;
  SbBool useConvexCache(SoAction * action);
  virtual void notify(SoNotList * list);

  SoFaceSetP * pimpl;
};

#line 71 "c:\\coin3d\\include\\inventor\\nodes\\sofaceset.h"
#line 38 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\socoordinate3.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodes\\socoordinate3.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfvec3f.h"

















































#line 29 "c:\\coin3d\\include\\inventor\\nodes\\socoordinate3.h"

class __declspec(dllimport) SoCoordinate3 : public SoNode {
  typedef SoNode inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoCoordinate3(void);

  SoMFVec3f point;

  virtual void doAction(SoAction * action);
  virtual void GLRender(SoGLRenderAction * action);
  virtual void callback(SoCallbackAction * action);
  virtual void getBoundingBox(SoGetBoundingBoxAction * action);
  virtual void pick(SoPickAction * action);
  virtual void getPrimitiveCount(SoGetPrimitiveCountAction * action);

protected:
  virtual ~SoCoordinate3();
};

#line 53 "c:\\coin3d\\include\\inventor\\nodes\\socoordinate3.h"
#line 39 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sotexture2transform.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodes\\sotexture2transform.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfvec2f.h"


























#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfield.h"













































#line 28 "c:\\coin3d\\include\\inventor\\fields\\sosfvec2f.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosubfield.h"

















































































































































































































































































































































































































































































































#line 29 "c:\\coin3d\\include\\inventor\\fields\\sosfvec2f.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbvec2f.h"













































































#line 30 "c:\\coin3d\\include\\inventor\\fields\\sosfvec2f.h"

class __declspec(dllimport) SoSFVec2f : public SoSField {
  typedef SoSField inherited;

  public: SoSFVec2f(void); virtual ~SoSFVec2f(); private: static SoType classTypeId; public: static void * createInstance(void); static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; virtual void copyFrom(const SoField & field); const SoSFVec2f & operator=(const SoSFVec2f & field); virtual SbBool isSame(const SoField & field) const; private: virtual SbBool readValue(SoInput * in); virtual void writeValue(SoOutput * out) const; protected: SbVec2f value; public: const SbVec2f & getValue(void) const { this->evaluate(); return this->value; } void setValue(const SbVec2f & newvalue); const SbVec2f & operator=(const SbVec2f & newvalue) { this->setValue(newvalue); return this->value; } int operator==(const SoSFVec2f & field) const; int operator!=(const SoSFVec2f & field) const { return ! operator==(field); };

public:
  static void initClass(void);

  void setValue(const float x, const float y);
  void setValue(const float xy[2]);
};

#line 44 "c:\\coin3d\\include\\inventor\\fields\\sosfvec2f.h"
#line 29 "c:\\coin3d\\include\\inventor\\nodes\\sotexture2transform.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosffloat.h"







































#line 30 "c:\\coin3d\\include\\inventor\\nodes\\sotexture2transform.h"

class SbMatrix;

class __declspec(dllimport) SoTexture2Transform : public SoNode {
  typedef SoNode inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoTexture2Transform(void);

  SoSFVec2f translation;
  SoSFFloat rotation;
  SoSFVec2f scaleFactor;
  SoSFVec2f center;

  virtual void doAction(SoAction * action);
  virtual void callback(SoCallbackAction * action);
  virtual void GLRender(SoGLRenderAction * action);
  virtual void getMatrix(SoGetMatrixAction * action);
  virtual void pick(SoPickAction * action);

protected:
  virtual ~SoTexture2Transform();

private:
  void makeMatrix(SbMatrix & mat);
};

#line 61 "c:\\coin3d\\include\\inventor\\nodes\\sotexture2transform.h"
#line 40 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlbackground.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlbackground.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sonode.h"








































































































































































#line 29 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlbackground.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfcolor.h"




























































#line 30 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlbackground.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somffloat.h"












































#line 31 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlbackground.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfstring.h"


























#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfield.h"




























































































#line 28 "c:\\coin3d\\include\\inventor\\fields\\somfstring.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosubfield.h"

















































































































































































































































































































































































































































































































#line 29 "c:\\coin3d\\include\\inventor\\fields\\somfstring.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbstring.h"












































































































































#line 30 "c:\\coin3d\\include\\inventor\\fields\\somfstring.h"

class __declspec(dllimport) SoMFString : public SoMField {
  typedef SoMField inherited;

  public: SoMFString(void); virtual ~SoMFString(); private: static SoType classTypeId; public: static void * createInstance(void); static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; virtual void copyFrom(const SoField & field); const SoMFString & operator=(const SoMFString & field); virtual SbBool isSame(const SoField & field) const; private: virtual SbBool read1Value(SoInput * in, int idx); virtual void write1Value(SoOutput * out, int idx) const; protected: virtual void deleteAllValues(void); virtual void copyValue(int to, int from); virtual int fieldSizeof(void) const; virtual void * valuesPtr(void); virtual void setValuesPtr(void * ptr); virtual void allocValues(int num); SbString * values; public: const SbString & operator[](const int idx) const { this->evaluate(); return this->values[idx]; } const SbString * getValues(const int start) const { this->evaluate(); return (const SbString *)(this->values + start); } int find(const SbString & value, SbBool addifnotfound = 0); void setValues(const int start, const int num, const SbString * newvals); void set1Value(const int idx, const SbString & value); void setValue(const SbString & value); const SbString & operator=(const SbString & val) { this->setValue(val); return val; } SbBool operator==(const SoMFString & field) const; SbBool operator!=(const SoMFString & field) const { return !operator==(field); } SbString * startEditing(void) { this->evaluate(); return this->values; } void finishEditing(void) { this->valueChanged(); };

public:
  static void initClass(void);

  void setValues(const int start, const int num, const char * strings[]);
  void setValue(const char * string);
  void deleteText(const int fromline, const int fromchar,
                  const int toline, const int tochar);
};

#line 46 "c:\\coin3d\\include\\inventor\\fields\\somfstring.h"
#line 32 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlbackground.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfbool.h"







































#line 33 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlbackground.h"

class SoVRMLBackgroundP;

class __declspec(dllimport) SoVRMLBackground : public SoNode
{
  typedef SoNode inherited;
  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoVRMLBackground(void);

  SoMFColor groundColor;
  SoMFFloat groundAngle;
  SoMFColor skyColor;
  SoMFFloat skyAngle;
  SoMFString backUrl;
  SoMFString bottomUrl;
  SoMFString frontUrl;
  SoMFString leftUrl;
  SoMFString rightUrl;
  SoMFString topUrl;

  virtual void GLRender( SoGLRenderAction * action );

protected:
  virtual ~SoVRMLBackground();

  SoSFBool set_bind; 
  SoSFBool isBound;  

private:
  SoVRMLBackgroundP * pimpl;

};

#line 70 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlbackground.h"
#line 41 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlorientationinterpolator.h"


























#line 1 "c:\\coin3d\\include\\inventor\\engines\\sosubnodeengine.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\engines\\sosubnodeengine.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\sosubengine.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sbname.h"


































































#line 28 "c:\\coin3d\\include\\inventor\\engines\\sosubengine.h"
#line 1 "c:\\coin3d\\include\\inventor\\sotype.h"















































































































































#line 29 "c:\\coin3d\\include\\inventor\\engines\\sosubengine.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\soengine.h"


























#line 1 "c:\\coin3d\\include\\inventor\\fields\\sofieldcontainer.h"






































































































#line 28 "c:\\coin3d\\include\\inventor\\engines\\soengine.h"

class SoEngineList;
class SoEngineOutput;
class SoEngineOutputList;
class SoEngineOutputData;

class __declspec(dllimport) SoEngine : public SoFieldContainer {
  typedef SoFieldContainer inherited;

public:
  static void initClass(void);
  static void initClasses(void);
  static SoType getClassTypeId(void);

  void evaluateWrapper(void);

  virtual int getOutputs(SoEngineOutputList & l) const;
  SoEngineOutput * getOutput(const SbName & outputname) const;
  SbBool getOutputName(const SoEngineOutput * output, SbName & outputname) const;
  virtual const SoEngineOutputData * getOutputData(void) const = 0;
  static SoEngine * getByName(const SbName & name);
  static int getByName(const SbName & name, SoEngineList & el);

  SbBool isNotifying(void) const;
  virtual void notify(SoNotList * nl);

  SoEngine * copy(void) const;
  virtual SoFieldContainer * copyThroughConnection(void) const;
  SbBool shouldCopy(void) const;

  virtual void writeInstance(SoOutput * out);


protected:
  SoEngine(void);
  virtual ~SoEngine();
  virtual void evaluate(void) = 0;

  virtual SbBool readInstance(SoInput * in, unsigned short flags);
  virtual void inputChanged(SoField * which);

  static const SoFieldData ** getInputDataPtr(void);
  static const SoEngineOutputData ** getOutputDataPtr(void);

  void writeOutputTypes(SoOutput * out);

private:
  virtual void destroy(void); 

  static SoType classTypeId;

  enum InternalEngineFlags {
    FLAG_ISNOTIFYING = (1 << 0),
    FLAG_ISDIRTY = (1 << 1)
  };

  unsigned int flags;

  
  friend class SoEngineOutput;
  void setDirty(void);
};


#line 1 "c:\\coin3d\\include\\inventor\\engines\\soengineoutput.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sotype.h"















































































































































#line 28 "c:\\coin3d\\include\\inventor\\engines\\soengineoutput.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\sofieldlist.h"























































#line 29 "c:\\coin3d\\include\\inventor\\engines\\soengineoutput.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\sblist.h"





































































































































































































































#line 30 "c:\\coin3d\\include\\inventor\\engines\\soengineoutput.h"

class SoNotList;
class SoFieldContainer;
class SoEngine;
class SoNodeEngine;

class __declspec(dllimport) SoEngineOutput {
public:
  SoEngineOutput(void);
  virtual ~SoEngineOutput();

  SoType getConnectionType(void) const;
  int getForwardConnections(SoFieldList & fl) const;
  void enable(const SbBool flag);
  SbBool isEnabled(void) const;
  SoEngine * getContainer(void) const;
  SoNodeEngine * getNodeContainer(void) const;
  SbBool isNodeEngineOutput(void) const;

  void setContainer(SoEngine * engine);
  void setNodeContainer(SoNodeEngine * nodeengine);
  void addConnection(SoField * f);
  void removeConnection(SoField * f);
  int getNumConnections(void) const;
  SoField * operator[](int i) const;

  void prepareToWrite(void) const;
  void doneWriting(void) const;

  void touchSlaves(SoNotList * nl, SbBool donotify);

  SoFieldContainer * getFieldContainer(void);

private:
  SbBool enabled;
  SoEngine * container;
  SoFieldList slaves;
  SbList<SbBool> fieldnotiflist;
};

#line 71 "c:\\coin3d\\include\\inventor\\engines\\soengineoutput.h"
#line 93 "c:\\coin3d\\include\\inventor\\engines\\soengine.h"
#line 94 "c:\\coin3d\\include\\inventor\\engines\\soengine.h"

#line 96 "c:\\coin3d\\include\\inventor\\engines\\soengine.h"
#line 30 "c:\\coin3d\\include\\inventor\\engines\\sosubengine.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\sooutputdata.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 28 "c:\\coin3d\\include\\inventor\\engines\\sooutputdata.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\sblist.h"





































































































































































































































#line 29 "c:\\coin3d\\include\\inventor\\engines\\sooutputdata.h"

class SoEngine;
class SoNodeEngine;
class SoFieldContainer;
class SoEngineOutput;
class SbName;
class SoInput;
class SoOutput;
class SoOutputDataEntry;
class SoType;

class __declspec(dllimport) SoEngineOutputData {
public:
  SoEngineOutputData();
  SoEngineOutputData(const SoEngineOutputData * data);
  SoEngineOutputData(int approxnum);
  ~SoEngineOutputData();

  void addOutput(const SoEngine * base, const char *name,
                 const SoEngineOutput * output, SoType type);
  void addOutput(const SoNodeEngine * base, const char *name,
                 const SoEngineOutput * output, SoType type);

  int getNumOutputs(void) const;
  const SbName & getOutputName(int index) const;
  SoEngineOutput * getOutput(const SoEngine * engine, int index) const;
  SoEngineOutput * getOutput(const SoNodeEngine * engine, int index) const;
  int getIndex(const SoEngine * engine, const SoEngineOutput * output) const;
  int getIndex(const SoNodeEngine * engine, const SoEngineOutput * output) const;
  const SoType & getType(int index) const;
  SbBool readDescriptions(SoInput *in, SoEngine * engine) const;
  void writeDescriptions(SoOutput *out, SoEngine * engine) const;

private:
  SbBool hasOutput(const char * name) const;
  void addOutputInternal(const SoFieldContainer * base, const char *name,
                         const SoEngineOutput * output, SoType type);
  SoEngineOutput * getOutputInternal(const SoFieldContainer * base, int index) const;
  int getIndexInternal(const SoFieldContainer * base, const SoEngineOutput * output) const;

  SbList <SoOutputDataEntry*> outputlist;
};

#line 73 "c:\\coin3d\\include\\inventor\\engines\\sooutputdata.h"
#line 31 "c:\\coin3d\\include\\inventor\\engines\\sosubengine.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sofielddata.h"

































































































#line 32 "c:\\coin3d\\include\\inventor\\engines\\sosubengine.h"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"















#line 17 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"



















#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"




















extern "C" {
#line 59 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"

__declspec(dllimport) void __cdecl _assert(void *, void *, unsigned);


}
#line 65 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"



#line 69 "c:\\programme\\microsoft visual studio\\vc98\\include\\assert.h"
#line 33 "c:\\coin3d\\include\\inventor\\engines\\sosubengine.h"

































































































































































































#line 227 "c:\\coin3d\\include\\inventor\\engines\\sosubengine.h"
#line 29 "c:\\coin3d\\include\\inventor\\engines\\sosubnodeengine.h"










































































































#line 136 "c:\\coin3d\\include\\inventor\\engines\\sosubnodeengine.h"
#line 28 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlorientationinterpolator.h"
#line 1 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlinterpolator.h"


























#line 1 "c:\\coin3d\\include\\inventor\\engines\\sonodeengine.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sonode.h"








































































































































































#line 28 "c:\\coin3d\\include\\inventor\\engines\\sonodeengine.h"

class SoEngineOutput;
class SoEngineOutputList;
class SoEngineOutputData;

class __declspec(dllimport) SoNodeEngine : public SoNode {
  typedef SoNode inherited;

public:
  static void initClass(void);
  static SoType getClassTypeId(void);

  void evaluateWrapper(void);

  virtual int getOutputs(SoEngineOutputList & l) const;
  SoEngineOutput * getOutput(const SbName & outputname) const;
  SbBool getOutputName(const SoEngineOutput * output, SbName & outputname) const;
  virtual const SoEngineOutputData * getOutputData(void) const = 0;

  SbBool isNotifying(void) const;
  virtual void notify(SoNotList * nl);

  virtual void writeInstance(SoOutput * out);

protected:
  SoNodeEngine(void);
  virtual ~SoNodeEngine();
  virtual void evaluate(void) = 0;

  virtual SbBool readInstance(SoInput * in, unsigned short flags);
  virtual void inputChanged(SoField * which);

  static const SoFieldData ** getFieldDataPtr(void);
  static const SoEngineOutputData ** getOutputDataPtr(void);

  void writeOutputTypes(SoOutput * out);

private:
  virtual void destroy(void); 

  static SoType classTypeId;
  unsigned int flags;
};

#line 73 "c:\\coin3d\\include\\inventor\\engines\\sonodeengine.h"
#line 28 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlinterpolator.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\sosubnodeengine.h"







































































































































#line 29 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlinterpolator.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosffloat.h"







































#line 30 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlinterpolator.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somffloat.h"












































#line 31 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlinterpolator.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\soengineoutput.h"






































































#line 32 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlinterpolator.h"

class __declspec(dllimport) SoVRMLInterpolator : public SoNodeEngine {
  typedef SoNodeEngine inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; protected: static const SoEngineOutputData ** getOutputDataPtr(void); public: virtual const SoEngineOutputData * getOutputData(void) const; private: static SoEngineOutputData * outputdata; static const SoEngineOutputData ** parentoutputdata;

public:
  SoMFFloat key;
  SoSFFloat set_fraction;

  static void initClass(void);

protected:
  
  int getKeyValueIndex(float & interp);

  SoVRMLInterpolator(void);
  virtual ~SoVRMLInterpolator();
};

#line 53 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlinterpolator.h"
#line 29 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlorientationinterpolator.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somffloat.h"












































#line 30 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlorientationinterpolator.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosffloat.h"







































#line 31 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlorientationinterpolator.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfrotation.h"


























#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfield.h"




























































































#line 28 "c:\\coin3d\\include\\inventor\\fields\\somfrotation.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosubfield.h"

















































































































































































































































































































































































































































































































#line 29 "c:\\coin3d\\include\\inventor\\fields\\somfrotation.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbrotation.h"












































































#line 30 "c:\\coin3d\\include\\inventor\\fields\\somfrotation.h"

class __declspec(dllimport) SoMFRotation : public SoMField {
  typedef SoMField inherited;

  public: SoMFRotation(void); virtual ~SoMFRotation(); private: static SoType classTypeId; public: static void * createInstance(void); static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; virtual void copyFrom(const SoField & field); const SoMFRotation & operator=(const SoMFRotation & field); virtual SbBool isSame(const SoField & field) const; private: virtual SbBool read1Value(SoInput * in, int idx); virtual void write1Value(SoOutput * out, int idx) const; protected: virtual void deleteAllValues(void); virtual void copyValue(int to, int from); virtual int fieldSizeof(void) const; virtual void * valuesPtr(void); virtual void setValuesPtr(void * ptr); virtual void allocValues(int num); SbRotation * values; public: const SbRotation & operator[](const int idx) const { this->evaluate(); return this->values[idx]; } const SbRotation * getValues(const int start) const { this->evaluate(); return (const SbRotation *)(this->values + start); } int find(const SbRotation & value, SbBool addifnotfound = 0); void setValues(const int start, const int num, const SbRotation * newvals); void set1Value(const int idx, const SbRotation & value); void setValue(const SbRotation & value); const SbRotation & operator=(const SbRotation & val) { this->setValue(val); return val; } SbBool operator==(const SoMFRotation & field) const; SbBool operator!=(const SoMFRotation & field) const { return !operator==(field); } SbRotation * startEditing(void) { this->evaluate(); return this->values; } void finishEditing(void) { this->valueChanged(); };

public:
  static void initClass(void);

  void setValues(const int start, const int num, const float q[][4]);
  void set1Value(const int idx, const float q0, const float q1, const float q2, const float q3);
  void set1Value(const int idx, const float q[4]);
  void set1Value(const int idx, const SbVec3f & axis, const float angle);
  void setValue(const float q0, const float q1, const float q2, const float q3);
  void setValue(const float q[4]);
  void setValue(const SbVec3f & axis, const float angle);
};

#line 49 "c:\\coin3d\\include\\inventor\\fields\\somfrotation.h"
#line 32 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlorientationinterpolator.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfrotation.h"













































#line 33 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlorientationinterpolator.h"

class __declspec(dllimport) SoVRMLOrientationInterpolator : public SoVRMLInterpolator
{
  typedef SoVRMLInterpolator inherited;
  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; protected: static const SoEngineOutputData ** getOutputDataPtr(void); public: virtual const SoEngineOutputData * getOutputData(void) const; private: static SoEngineOutputData * outputdata; static const SoEngineOutputData ** parentoutputdata; public: static void * createInstance(void);

public:
  static void initClass(void);
  SoVRMLOrientationInterpolator(void);

  SoMFRotation keyValue;
  SoEngineOutput value_changed; 

protected:
  virtual ~SoVRMLOrientationInterpolator(void);

private:
  virtual void evaluate(void);

}; 

#line 55 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlorientationinterpolator.h"
#line 42 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmltimesensor.h"


























#line 1 "c:\\coin3d\\include\\inventor\\engines\\sonodeengine.h"








































































#line 28 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmltimesensor.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\sosubnodeengine.h"







































































































































#line 29 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmltimesensor.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\soengineoutput.h"






































































#line 30 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmltimesensor.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosftime.h"


























#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfield.h"













































#line 28 "c:\\coin3d\\include\\inventor\\fields\\sosftime.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosubfield.h"

















































































































































































































































































































































































































































































































#line 29 "c:\\coin3d\\include\\inventor\\fields\\sosftime.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbtime.h"








































































































#line 30 "c:\\coin3d\\include\\inventor\\fields\\sosftime.h"

class __declspec(dllimport) SoSFTime : public SoSField {
  typedef SoSField inherited;

  public: SoSFTime(void); virtual ~SoSFTime(); private: static SoType classTypeId; public: static void * createInstance(void); static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; virtual void copyFrom(const SoField & field); const SoSFTime & operator=(const SoSFTime & field); virtual SbBool isSame(const SoField & field) const; private: virtual SbBool readValue(SoInput * in); virtual void writeValue(SoOutput * out) const; protected: SbTime value; public: const SbTime & getValue(void) const { this->evaluate(); return this->value; } void setValue(const SbTime & newvalue); const SbTime & operator=(const SbTime & newvalue) { this->setValue(newvalue); return this->value; } int operator==(const SoSFTime & field) const; int operator!=(const SoSFTime & field) const { return ! operator==(field); };

public:
  static void initClass(void);
};

#line 41 "c:\\coin3d\\include\\inventor\\fields\\sosftime.h"
#line 31 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmltimesensor.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosffloat.h"







































#line 32 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmltimesensor.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfbool.h"







































#line 33 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmltimesensor.h"

class SoSensor;

class __declspec(dllimport) SoVRMLTimeSensor : public SoNodeEngine
{
  typedef SoNodeEngine inherited;
  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; protected: static const SoEngineOutputData ** getOutputDataPtr(void); public: virtual const SoEngineOutputData * getOutputData(void) const; private: static SoEngineOutputData * outputdata; static const SoEngineOutputData ** parentoutputdata; public: static void * createInstance(void);

public:
  static void initClass(void);
  SoVRMLTimeSensor(void);

  SoSFTime cycleInterval;
  SoSFBool enabled;
  SoSFBool loop;
  SoSFTime startTime;
  SoSFTime stopTime;

  virtual void notify(SoNotList * list);
  virtual void handleEvent(SoHandleEventAction * action);
  virtual void write(SoWriteAction * action);

  SoEngineOutput cycleTime; 
  SoEngineOutput fraction_changed; 
  SoEngineOutput isActive; 
  SoEngineOutput time; 

protected:
  virtual ~SoVRMLTimeSensor();
  virtual void inputChanged(SoField * whichInput);

private:
  virtual void evaluate(void);
  SoSFTime timeIn;
  class SoVRMLTimeSensorP * pimpl;
}; 

#line 71 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmltimesensor.h"
#line 43 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlelevationgrid.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlelevationgrid.h"
#line 1 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlgeometry.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\soshape.h"












































































































































#line 28 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlgeometry.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 29 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlgeometry.h"

class SoVRMLGeometryP;

class __declspec(dllimport) SoVRMLGeometry : public SoShape
{
  typedef SoShape inherited;
  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances;

public:
  static void initClass(void);

  virtual void search(SoSearchAction * action);
  virtual void copyContents(const SoFieldContainer * from, SbBool copyConn);

protected:
  SoVRMLGeometry(void);
  virtual ~SoVRMLGeometry();

  void setupShapeHints(SoState * state, const SbBool ccw, const SbBool solid);
  virtual SbBool shouldGLRender(SoGLRenderAction * action);
  virtual SoChildList * getChildren(void) const;
  virtual void notify(SoNotList * list);

private:
  SoVRMLGeometryP * pimpl;
};

#line 57 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlgeometry.h"
#line 29 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlelevationgrid.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfbool.h"







































#line 30 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlelevationgrid.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosffloat.h"







































#line 31 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlelevationgrid.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfint32.h"







































#line 32 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlelevationgrid.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfbool.h"







































#line 33 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlelevationgrid.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosffloat.h"







































#line 34 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlelevationgrid.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somffloat.h"












































#line 35 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlelevationgrid.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfnode.h"

























































#line 36 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlelevationgrid.h"

class SoChildList;

class SoVRMLElevationGridP;

class __declspec(dllimport) SoVRMLElevationGrid : public SoVRMLGeometry
{
  typedef SoVRMLGeometry inherited;
  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoVRMLElevationGrid(void);

  SoSFBool ccw;
  SoSFBool solid;
  SoSFFloat creaseAngle;
  SoSFInt32 zDimension;
  SoSFInt32 xDimension;
  SoSFFloat zSpacing;
  SoSFFloat xSpacing;
  SoMFFloat height;
  SoSFNode texCoord;
  SoSFNode normal;
  SoSFNode color;
  SoSFBool colorPerVertex;
  SoSFBool normalPerVertex;

  virtual void GLRender(SoGLRenderAction * action);
  virtual void rayPick(SoRayPickAction * action);
  virtual void getPrimitiveCount(SoGetPrimitiveCountAction * action);

protected:
  virtual ~SoVRMLElevationGrid(void);

  virtual void notify(SoNotList * list);
  virtual void generatePrimitives( SoAction * action );
  virtual void computeBBox(SoAction * action, SbBox3f & bbox,
                           SbVec3f & center);

private:
  friend class SoVRMLElevationGridP;

  enum Binding {
    OVERALL,
    PER_QUAD,
    PER_VERTEX
  };

  Binding findMaterialBinding(void) const;
  Binding findNormalBinding(void) const;

  const SbVec3f * updateNormalCache(Binding & nbind);

  SoVRMLElevationGridP * pimpl;

}; 

#line 95 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlelevationgrid.h"
#line 44 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sorotation.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodes\\sorotation.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfrotation.h"













































#line 29 "c:\\coin3d\\include\\inventor\\nodes\\sorotation.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sotransformation.h"










































#line 30 "c:\\coin3d\\include\\inventor\\nodes\\sorotation.h"

class __declspec(dllimport) SoRotation : public SoTransformation {
  typedef SoTransformation inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoRotation(void);

  SoSFRotation rotation;

  virtual void doAction(SoAction * action);
  virtual void GLRender(SoGLRenderAction * action);
  virtual void callback(SoCallbackAction * action);
  virtual void getBoundingBox(SoGetBoundingBoxAction * action);
  virtual void getMatrix(SoGetMatrixAction * action);
  virtual void pick(SoPickAction * action);
  virtual void getPrimitiveCount(SoGetPrimitiveCountAction * action);

protected:
  virtual ~SoRotation();
};

#line 55 "c:\\coin3d\\include\\inventor\\nodes\\sorotation.h"
#line 45 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\sointerpolaterotation.h"


























#line 1 "c:\\coin3d\\include\\inventor\\engines\\sointerpolate.h"



























#line 1 "c:\\coin3d\\include\\inventor\\engines\\sosubengine.h"


































































































































































































































#line 29 "c:\\coin3d\\include\\inventor\\engines\\sointerpolate.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\soengineoutput.h"






































































#line 30 "c:\\coin3d\\include\\inventor\\engines\\sointerpolate.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosffloat.h"







































#line 31 "c:\\coin3d\\include\\inventor\\engines\\sointerpolate.h"

class __declspec(dllimport) SoInterpolate : public SoEngine {
  typedef SoEngine inherited;
  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getInputDataPtr(void); static const SoEngineOutputData ** getOutputDataPtr(void); public: virtual const SoFieldData * getFieldData(void) const; virtual const SoEngineOutputData * getOutputData(void) const; private: static unsigned int classinstances; static SoFieldData * inputdata; static const SoFieldData ** parentinputdata; static SoEngineOutputData * outputdata; static const SoEngineOutputData ** parentoutputdata;

public:
  static void initClass(void);
  static void initClasses(void);

  SoSFFloat alpha;
  SoEngineOutput output; 

protected:
  SoInterpolate();
  virtual ~SoInterpolate();
};






















































































#line 1 "c:\\coin3d\\include\\inventor\\engines\\sointerpolatefloat.h"


























#line 1 "c:\\coin3d\\include\\inventor\\engines\\sointerpolate.h"













































































































































#line 28 "c:\\coin3d\\include\\inventor\\engines\\sointerpolatefloat.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somffloat.h"












































#line 29 "c:\\coin3d\\include\\inventor\\engines\\sointerpolatefloat.h"

class __declspec(dllimport) SoInterpolateFloat : public SoInterpolate {
  typedef SoInterpolate inherited;
  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getInputDataPtr(void); static const SoEngineOutputData ** getOutputDataPtr(void); public: virtual const SoFieldData * getFieldData(void) const; virtual const SoEngineOutputData * getOutputData(void) const; private: static unsigned int classinstances; static SoFieldData * inputdata; static const SoFieldData ** parentinputdata; static SoEngineOutputData * outputdata; static const SoEngineOutputData ** parentoutputdata; public: static void * createInstance(void); public: SoInterpolateFloat(); static void initClass(); protected: virtual ~SoInterpolateFloat(); private: virtual void evaluate();

public:
  SoMFFloat input0;
  SoMFFloat input1;
};

#line 40 "c:\\coin3d\\include\\inventor\\engines\\sointerpolatefloat.h"
#line 134 "c:\\coin3d\\include\\inventor\\engines\\sointerpolate.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\sointerpolatevec2f.h"


























#line 1 "c:\\coin3d\\include\\inventor\\engines\\sointerpolate.h"













































































































































#line 28 "c:\\coin3d\\include\\inventor\\engines\\sointerpolatevec2f.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfvec2f.h"

















































#line 29 "c:\\coin3d\\include\\inventor\\engines\\sointerpolatevec2f.h"

class __declspec(dllimport) SoInterpolateVec2f : public SoInterpolate {
  typedef SoInterpolate inherited;
  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getInputDataPtr(void); static const SoEngineOutputData ** getOutputDataPtr(void); public: virtual const SoFieldData * getFieldData(void) const; virtual const SoEngineOutputData * getOutputData(void) const; private: static unsigned int classinstances; static SoFieldData * inputdata; static const SoFieldData ** parentinputdata; static SoEngineOutputData * outputdata; static const SoEngineOutputData ** parentoutputdata; public: static void * createInstance(void); public: SoInterpolateVec2f(); static void initClass(); protected: virtual ~SoInterpolateVec2f(); private: virtual void evaluate();

public:
  SoMFVec2f input0;
  SoMFVec2f input1;
};

#line 40 "c:\\coin3d\\include\\inventor\\engines\\sointerpolatevec2f.h"
#line 135 "c:\\coin3d\\include\\inventor\\engines\\sointerpolate.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\sointerpolatevec3f.h"


























#line 1 "c:\\coin3d\\include\\inventor\\engines\\sointerpolate.h"













































































































































#line 28 "c:\\coin3d\\include\\inventor\\engines\\sointerpolatevec3f.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfvec3f.h"

















































#line 29 "c:\\coin3d\\include\\inventor\\engines\\sointerpolatevec3f.h"

class __declspec(dllimport) SoInterpolateVec3f : public SoInterpolate {
  typedef SoInterpolate inherited;
  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getInputDataPtr(void); static const SoEngineOutputData ** getOutputDataPtr(void); public: virtual const SoFieldData * getFieldData(void) const; virtual const SoEngineOutputData * getOutputData(void) const; private: static unsigned int classinstances; static SoFieldData * inputdata; static const SoFieldData ** parentinputdata; static SoEngineOutputData * outputdata; static const SoEngineOutputData ** parentoutputdata; public: static void * createInstance(void); public: SoInterpolateVec3f(); static void initClass(); protected: virtual ~SoInterpolateVec3f(); private: virtual void evaluate();

public:
  SoMFVec3f input0;
  SoMFVec3f input1;
};

#line 40 "c:\\coin3d\\include\\inventor\\engines\\sointerpolatevec3f.h"
#line 136 "c:\\coin3d\\include\\inventor\\engines\\sointerpolate.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\sointerpolatevec4f.h"


























#line 1 "c:\\coin3d\\include\\inventor\\engines\\sointerpolate.h"













































































































































#line 28 "c:\\coin3d\\include\\inventor\\engines\\sointerpolatevec4f.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfvec4f.h"


























#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfield.h"




























































































#line 28 "c:\\coin3d\\include\\inventor\\fields\\somfvec4f.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosubfield.h"

















































































































































































































































































































































































































































































































#line 29 "c:\\coin3d\\include\\inventor\\fields\\somfvec4f.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbvec4f.h"














































































#line 30 "c:\\coin3d\\include\\inventor\\fields\\somfvec4f.h"

class __declspec(dllimport) SoMFVec4f : public SoMField {
  typedef SoMField inherited;

  public: SoMFVec4f(void); virtual ~SoMFVec4f(); private: static SoType classTypeId; public: static void * createInstance(void); static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; virtual void copyFrom(const SoField & field); const SoMFVec4f & operator=(const SoMFVec4f & field); virtual SbBool isSame(const SoField & field) const; private: virtual SbBool read1Value(SoInput * in, int idx); virtual void write1Value(SoOutput * out, int idx) const; protected: virtual void deleteAllValues(void); virtual void copyValue(int to, int from); virtual int fieldSizeof(void) const; virtual void * valuesPtr(void); virtual void setValuesPtr(void * ptr); virtual void allocValues(int num); SbVec4f * values; public: const SbVec4f & operator[](const int idx) const { this->evaluate(); return this->values[idx]; } const SbVec4f * getValues(const int start) const { this->evaluate(); return (const SbVec4f *)(this->values + start); } int find(const SbVec4f & value, SbBool addifnotfound = 0); void setValues(const int start, const int num, const SbVec4f * newvals); void set1Value(const int idx, const SbVec4f & value); void setValue(const SbVec4f & value); const SbVec4f & operator=(const SbVec4f & val) { this->setValue(val); return val; } SbBool operator==(const SoMFVec4f & field) const; SbBool operator!=(const SoMFVec4f & field) const { return !operator==(field); } SbVec4f * startEditing(void) { this->evaluate(); return this->values; } void finishEditing(void) { this->valueChanged(); };

  void setValuesPointer(const int num, const float * userdata); void setValuesPointer(const int num, float * userdata);
  void setValuesPointer(const int num, const SbVec4f * userdata); void setValuesPointer(const int num, SbVec4f * userdata);

public:
  static void initClass(void);

  void setValues(const int start, const int num, const float xyzw[][4]);
  void set1Value(const int idx,
                 const float x, const float y, const float z, const float w);
  void set1Value(const int idx, const float xyzw[4]);
  void setValue(const float x, const float y, const float z, const float w);
  void setValue(const float xyzw[4]);
};

#line 51 "c:\\coin3d\\include\\inventor\\fields\\somfvec4f.h"
#line 29 "c:\\coin3d\\include\\inventor\\engines\\sointerpolatevec4f.h"

class __declspec(dllimport) SoInterpolateVec4f : public SoInterpolate {
  typedef SoInterpolate inherited;
  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getInputDataPtr(void); static const SoEngineOutputData ** getOutputDataPtr(void); public: virtual const SoFieldData * getFieldData(void) const; virtual const SoEngineOutputData * getOutputData(void) const; private: static unsigned int classinstances; static SoFieldData * inputdata; static const SoFieldData ** parentinputdata; static SoEngineOutputData * outputdata; static const SoEngineOutputData ** parentoutputdata; public: static void * createInstance(void); public: SoInterpolateVec4f(); static void initClass(); protected: virtual ~SoInterpolateVec4f(); private: virtual void evaluate();

public:
  SoMFVec4f input0;
  SoMFVec4f input1;
};

#line 40 "c:\\coin3d\\include\\inventor\\engines\\sointerpolatevec4f.h"
#line 137 "c:\\coin3d\\include\\inventor\\engines\\sointerpolate.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\sointerpolaterotation.h"







































#line 138 "c:\\coin3d\\include\\inventor\\engines\\sointerpolate.h"
#line 139 "c:\\coin3d\\include\\inventor\\engines\\sointerpolate.h"


#line 142 "c:\\coin3d\\include\\inventor\\engines\\sointerpolate.h"
#line 28 "c:\\coin3d\\include\\inventor\\engines\\sointerpolaterotation.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfrotation.h"
















































#line 29 "c:\\coin3d\\include\\inventor\\engines\\sointerpolaterotation.h"

class __declspec(dllimport) SoInterpolateRotation : public SoInterpolate {
  typedef SoInterpolate inherited;
  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getInputDataPtr(void); static const SoEngineOutputData ** getOutputDataPtr(void); public: virtual const SoFieldData * getFieldData(void) const; virtual const SoEngineOutputData * getOutputData(void) const; private: static unsigned int classinstances; static SoFieldData * inputdata; static const SoFieldData ** parentinputdata; static SoEngineOutputData * outputdata; static const SoEngineOutputData ** parentoutputdata; public: static void * createInstance(void); public: SoInterpolateRotation(); static void initClass(); protected: virtual ~SoInterpolateRotation(); private: virtual void evaluate();

public:
  SoMFRotation input0;
  SoMFRotation input1;
};

#line 40 "c:\\coin3d\\include\\inventor\\engines\\sointerpolaterotation.h"
#line 46 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\sooneshot.h"


























#line 1 "c:\\coin3d\\include\\inventor\\engines\\sosubengine.h"


































































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\engines\\sooneshot.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\soengineoutput.h"






































































#line 29 "c:\\coin3d\\include\\inventor\\engines\\sooneshot.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosftime.h"








































#line 30 "c:\\coin3d\\include\\inventor\\engines\\sooneshot.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfbool.h"







































#line 31 "c:\\coin3d\\include\\inventor\\engines\\sooneshot.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosftrigger.h"


























#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfield.h"













































#line 28 "c:\\coin3d\\include\\inventor\\fields\\sosftrigger.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosubfield.h"

















































































































































































































































































































































































































































































































#line 29 "c:\\coin3d\\include\\inventor\\fields\\sosftrigger.h"

class SoNotList;

class __declspec(dllimport) SoSFTrigger : public SoSField {
  typedef SoSField inherited;

  public: SoSFTrigger(void); virtual ~SoSFTrigger();
  private: static SoType classTypeId; public: static void * createInstance(void); static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; virtual void copyFrom(const SoField & field); const SoSFTrigger & operator=(const SoSFTrigger & field); virtual SbBool isSame(const SoField & field) const;

public:
  static void initClass(void);

  void setValue(void);
  void getValue(void) const;

  int operator==(const SoSFTrigger & trigger) const;
  int operator!=(const SoSFTrigger & trigger) const;

  virtual void startNotify(void);
  virtual void notify(SoNotList * l);
  virtual void touch(void);

private:
  virtual SbBool readValue(SoInput * in);
  virtual void writeValue(SoOutput * out) const;
};

#line 57 "c:\\coin3d\\include\\inventor\\fields\\sosftrigger.h"
#line 32 "c:\\coin3d\\include\\inventor\\engines\\sooneshot.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfbitmask.h"








































#line 33 "c:\\coin3d\\include\\inventor\\engines\\sooneshot.h"


class __declspec(dllimport) SoOneShot : public SoEngine {
  typedef SoEngine inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getInputDataPtr(void); static const SoEngineOutputData ** getOutputDataPtr(void); public: virtual const SoFieldData * getFieldData(void) const; virtual const SoEngineOutputData * getOutputData(void) const; private: static unsigned int classinstances; static SoFieldData * inputdata; static const SoFieldData ** parentinputdata; static SoEngineOutputData * outputdata; static const SoEngineOutputData ** parentoutputdata; public: static void * createInstance(void);

public:
  static void initClass(void);
  SoOneShot(void);

  enum Flags {RETRIGGERABLE=1, HOLD_FINAL=2};

  SoSFTime timeIn;
  SoSFTime duration;
  SoSFTrigger trigger;
  SoSFBitMask flags;
  SoSFBool disable;

  SoEngineOutput timeOut;  
  SoEngineOutput isActive; 
  SoEngineOutput ramp;     

protected:
  ~SoOneShot();

private:
  virtual void evaluate(void);
  virtual void inputChanged(SoField * which);
  virtual void writeInstance(SoOutput * out);

  SbTime holdduration;
  float holdramp;
  SbTime starttime;
  SbBool running;
};

#line 71 "c:\\coin3d\\include\\inventor\\engines\\sooneshot.h"
#line 47 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\socompose.h"











































#line 1 "c:\\coin3d\\include\\inventor\\engines\\socomposevec2f.h"
































#line 1 "c:\\coin3d\\include\\inventor\\engines\\sosubengine.h"


































































































































































































































#line 34 "c:\\coin3d\\include\\inventor\\engines\\socomposevec2f.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\soengineoutput.h"






































































#line 35 "c:\\coin3d\\include\\inventor\\engines\\socomposevec2f.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somffloat.h"












































#line 36 "c:\\coin3d\\include\\inventor\\engines\\socomposevec2f.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfvec2f.h"

















































#line 37 "c:\\coin3d\\include\\inventor\\engines\\socomposevec2f.h"


class __declspec(dllimport) SoComposeVec2f : public SoEngine {
  typedef SoEngine inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getInputDataPtr(void); static const SoEngineOutputData ** getOutputDataPtr(void); public: virtual const SoFieldData * getFieldData(void) const; virtual const SoEngineOutputData * getOutputData(void) const; private: static unsigned int classinstances; static SoFieldData * inputdata; static const SoFieldData ** parentinputdata; static SoEngineOutputData * outputdata; static const SoEngineOutputData ** parentoutputdata; public: static void * createInstance(void); private: virtual void evaluate(); protected: ~SoComposeVec2f(); public: SoComposeVec2f(); static void initClass();

public:
  SoMFFloat x;
  SoMFFloat y;

  SoEngineOutput vector; 
};

#line 52 "c:\\coin3d\\include\\inventor\\engines\\socomposevec2f.h"
#line 45 "c:\\coin3d\\include\\inventor\\engines\\socompose.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\socomposevec3f.h"
































#line 1 "c:\\coin3d\\include\\inventor\\engines\\sosubengine.h"


































































































































































































































#line 34 "c:\\coin3d\\include\\inventor\\engines\\socomposevec3f.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\soengineoutput.h"






































































#line 35 "c:\\coin3d\\include\\inventor\\engines\\socomposevec3f.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somffloat.h"












































#line 36 "c:\\coin3d\\include\\inventor\\engines\\socomposevec3f.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfvec3f.h"

















































#line 37 "c:\\coin3d\\include\\inventor\\engines\\socomposevec3f.h"


class __declspec(dllimport) SoComposeVec3f : public SoEngine {
  typedef SoEngine inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getInputDataPtr(void); static const SoEngineOutputData ** getOutputDataPtr(void); public: virtual const SoFieldData * getFieldData(void) const; virtual const SoEngineOutputData * getOutputData(void) const; private: static unsigned int classinstances; static SoFieldData * inputdata; static const SoFieldData ** parentinputdata; static SoEngineOutputData * outputdata; static const SoEngineOutputData ** parentoutputdata; public: static void * createInstance(void); private: virtual void evaluate(); protected: ~SoComposeVec3f(); public: SoComposeVec3f(); static void initClass();

public:
  SoMFFloat x;
  SoMFFloat y;
  SoMFFloat z;

  SoEngineOutput vector; 
};

#line 53 "c:\\coin3d\\include\\inventor\\engines\\socomposevec3f.h"
#line 46 "c:\\coin3d\\include\\inventor\\engines\\socompose.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\socomposevec4f.h"
































#line 1 "c:\\coin3d\\include\\inventor\\engines\\sosubengine.h"


































































































































































































































#line 34 "c:\\coin3d\\include\\inventor\\engines\\socomposevec4f.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\soengineoutput.h"






































































#line 35 "c:\\coin3d\\include\\inventor\\engines\\socomposevec4f.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somffloat.h"












































#line 36 "c:\\coin3d\\include\\inventor\\engines\\socomposevec4f.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfvec4f.h"


















































#line 37 "c:\\coin3d\\include\\inventor\\engines\\socomposevec4f.h"


class __declspec(dllimport) SoComposeVec4f : public SoEngine {
  typedef SoEngine inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getInputDataPtr(void); static const SoEngineOutputData ** getOutputDataPtr(void); public: virtual const SoFieldData * getFieldData(void) const; virtual const SoEngineOutputData * getOutputData(void) const; private: static unsigned int classinstances; static SoFieldData * inputdata; static const SoFieldData ** parentinputdata; static SoEngineOutputData * outputdata; static const SoEngineOutputData ** parentoutputdata; public: static void * createInstance(void); private: virtual void evaluate(); protected: ~SoComposeVec4f(); public: SoComposeVec4f(); static void initClass();

public:
  SoMFFloat x;
  SoMFFloat y;
  SoMFFloat z;
  SoMFFloat w;

  SoEngineOutput vector; 
};

#line 54 "c:\\coin3d\\include\\inventor\\engines\\socomposevec4f.h"
#line 47 "c:\\coin3d\\include\\inventor\\engines\\socompose.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\sodecomposevec2f.h"
































#line 1 "c:\\coin3d\\include\\inventor\\engines\\sosubengine.h"


































































































































































































































#line 34 "c:\\coin3d\\include\\inventor\\engines\\sodecomposevec2f.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\soengineoutput.h"






































































#line 35 "c:\\coin3d\\include\\inventor\\engines\\sodecomposevec2f.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somffloat.h"












































#line 36 "c:\\coin3d\\include\\inventor\\engines\\sodecomposevec2f.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfvec2f.h"

















































#line 37 "c:\\coin3d\\include\\inventor\\engines\\sodecomposevec2f.h"


class __declspec(dllimport) SoDecomposeVec2f : public SoEngine {
  typedef SoEngine inherited;
  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getInputDataPtr(void); static const SoEngineOutputData ** getOutputDataPtr(void); public: virtual const SoFieldData * getFieldData(void) const; virtual const SoEngineOutputData * getOutputData(void) const; private: static unsigned int classinstances; static SoFieldData * inputdata; static const SoFieldData ** parentinputdata; static SoEngineOutputData * outputdata; static const SoEngineOutputData ** parentoutputdata; public: static void * createInstance(void); private: virtual void evaluate(); protected: ~SoDecomposeVec2f(); public: SoDecomposeVec2f(); static void initClass();

public:
  SoMFVec2f vector;

  SoEngineOutput x; 
  SoEngineOutput y; 
};

#line 51 "c:\\coin3d\\include\\inventor\\engines\\sodecomposevec2f.h"
#line 48 "c:\\coin3d\\include\\inventor\\engines\\socompose.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\sodecomposevec3f.h"
































#line 1 "c:\\coin3d\\include\\inventor\\engines\\sosubengine.h"


































































































































































































































#line 34 "c:\\coin3d\\include\\inventor\\engines\\sodecomposevec3f.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\soengineoutput.h"






































































#line 35 "c:\\coin3d\\include\\inventor\\engines\\sodecomposevec3f.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somffloat.h"












































#line 36 "c:\\coin3d\\include\\inventor\\engines\\sodecomposevec3f.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfvec3f.h"

















































#line 37 "c:\\coin3d\\include\\inventor\\engines\\sodecomposevec3f.h"


class __declspec(dllimport) SoDecomposeVec3f : public SoEngine {
  typedef SoEngine inherited;
  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getInputDataPtr(void); static const SoEngineOutputData ** getOutputDataPtr(void); public: virtual const SoFieldData * getFieldData(void) const; virtual const SoEngineOutputData * getOutputData(void) const; private: static unsigned int classinstances; static SoFieldData * inputdata; static const SoFieldData ** parentinputdata; static SoEngineOutputData * outputdata; static const SoEngineOutputData ** parentoutputdata; public: static void * createInstance(void); private: virtual void evaluate(); protected: ~SoDecomposeVec3f(); public: SoDecomposeVec3f(); static void initClass();

public:
  SoMFVec3f vector;

  SoEngineOutput x; 
  SoEngineOutput y; 
  SoEngineOutput z; 
};

#line 52 "c:\\coin3d\\include\\inventor\\engines\\sodecomposevec3f.h"
#line 49 "c:\\coin3d\\include\\inventor\\engines\\socompose.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\sodecomposevec4f.h"
































#line 1 "c:\\coin3d\\include\\inventor\\engines\\sosubengine.h"


































































































































































































































#line 34 "c:\\coin3d\\include\\inventor\\engines\\sodecomposevec4f.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\soengineoutput.h"






































































#line 35 "c:\\coin3d\\include\\inventor\\engines\\sodecomposevec4f.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somffloat.h"












































#line 36 "c:\\coin3d\\include\\inventor\\engines\\sodecomposevec4f.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfvec4f.h"


















































#line 37 "c:\\coin3d\\include\\inventor\\engines\\sodecomposevec4f.h"


class __declspec(dllimport) SoDecomposeVec4f : public SoEngine {
  typedef SoEngine inherited;
  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getInputDataPtr(void); static const SoEngineOutputData ** getOutputDataPtr(void); public: virtual const SoFieldData * getFieldData(void) const; virtual const SoEngineOutputData * getOutputData(void) const; private: static unsigned int classinstances; static SoFieldData * inputdata; static const SoFieldData ** parentinputdata; static SoEngineOutputData * outputdata; static const SoEngineOutputData ** parentoutputdata; public: static void * createInstance(void); private: virtual void evaluate(); protected: ~SoDecomposeVec4f(); public: SoDecomposeVec4f(); static void initClass();

public:
  SoMFVec4f vector;

  SoEngineOutput x; 
  SoEngineOutput y; 
  SoEngineOutput z; 
  SoEngineOutput w; 
};

#line 53 "c:\\coin3d\\include\\inventor\\engines\\sodecomposevec4f.h"
#line 50 "c:\\coin3d\\include\\inventor\\engines\\socompose.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\socomposerotation.h"
































#line 1 "c:\\coin3d\\include\\inventor\\engines\\sosubengine.h"


































































































































































































































#line 34 "c:\\coin3d\\include\\inventor\\engines\\socomposerotation.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\soengineoutput.h"






































































#line 35 "c:\\coin3d\\include\\inventor\\engines\\socomposerotation.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somffloat.h"












































#line 36 "c:\\coin3d\\include\\inventor\\engines\\socomposerotation.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfvec3f.h"

















































#line 37 "c:\\coin3d\\include\\inventor\\engines\\socomposerotation.h"


class __declspec(dllimport) SoComposeRotation : public SoEngine {
  typedef SoEngine inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getInputDataPtr(void); static const SoEngineOutputData ** getOutputDataPtr(void); public: virtual const SoFieldData * getFieldData(void) const; virtual const SoEngineOutputData * getOutputData(void) const; private: static unsigned int classinstances; static SoFieldData * inputdata; static const SoFieldData ** parentinputdata; static SoEngineOutputData * outputdata; static const SoEngineOutputData ** parentoutputdata; public: static void * createInstance(void); private: virtual void evaluate(); protected: ~SoComposeRotation(); public: SoComposeRotation(); static void initClass();

public:
  SoMFVec3f axis;
  SoMFFloat angle;

  SoEngineOutput rotation; 
};

#line 52 "c:\\coin3d\\include\\inventor\\engines\\socomposerotation.h"
#line 51 "c:\\coin3d\\include\\inventor\\engines\\socompose.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\sodecomposerotation.h"
































#line 1 "c:\\coin3d\\include\\inventor\\engines\\sosubengine.h"


































































































































































































































#line 34 "c:\\coin3d\\include\\inventor\\engines\\sodecomposerotation.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\soengineoutput.h"






































































#line 35 "c:\\coin3d\\include\\inventor\\engines\\sodecomposerotation.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfrotation.h"
















































#line 36 "c:\\coin3d\\include\\inventor\\engines\\sodecomposerotation.h"


class __declspec(dllimport) SoDecomposeRotation : public SoEngine {
  typedef SoEngine inherited;
  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getInputDataPtr(void); static const SoEngineOutputData ** getOutputDataPtr(void); public: virtual const SoFieldData * getFieldData(void) const; virtual const SoEngineOutputData * getOutputData(void) const; private: static unsigned int classinstances; static SoFieldData * inputdata; static const SoFieldData ** parentinputdata; static SoEngineOutputData * outputdata; static const SoEngineOutputData ** parentoutputdata; public: static void * createInstance(void); private: virtual void evaluate(); protected: ~SoDecomposeRotation(); public: SoDecomposeRotation(); static void initClass();

public:
  SoMFRotation rotation;

  SoEngineOutput axis;  
  SoEngineOutput angle; 
};

#line 50 "c:\\coin3d\\include\\inventor\\engines\\sodecomposerotation.h"
#line 52 "c:\\coin3d\\include\\inventor\\engines\\socompose.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\socomposematrix.h"
































#line 1 "c:\\coin3d\\include\\inventor\\engines\\sosubengine.h"


































































































































































































































#line 34 "c:\\coin3d\\include\\inventor\\engines\\socomposematrix.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\soengineoutput.h"






































































#line 35 "c:\\coin3d\\include\\inventor\\engines\\socomposematrix.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somffloat.h"












































#line 36 "c:\\coin3d\\include\\inventor\\engines\\socomposematrix.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfvec3f.h"

















































#line 37 "c:\\coin3d\\include\\inventor\\engines\\socomposematrix.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfrotation.h"
















































#line 38 "c:\\coin3d\\include\\inventor\\engines\\socomposematrix.h"


class __declspec(dllimport) SoComposeMatrix : public SoEngine {
  typedef SoEngine inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getInputDataPtr(void); static const SoEngineOutputData ** getOutputDataPtr(void); public: virtual const SoFieldData * getFieldData(void) const; virtual const SoEngineOutputData * getOutputData(void) const; private: static unsigned int classinstances; static SoFieldData * inputdata; static const SoFieldData ** parentinputdata; static SoEngineOutputData * outputdata; static const SoEngineOutputData ** parentoutputdata; public: static void * createInstance(void); private: virtual void evaluate(); protected: ~SoComposeMatrix(); public: SoComposeMatrix(); static void initClass();

public:
  SoMFVec3f translation;
  SoMFRotation rotation;
  SoMFVec3f scaleFactor;
  SoMFRotation scaleOrientation;
  SoMFVec3f center;

  SoEngineOutput matrix; 
};

#line 56 "c:\\coin3d\\include\\inventor\\engines\\socomposematrix.h"
#line 53 "c:\\coin3d\\include\\inventor\\engines\\socompose.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\sodecomposematrix.h"
































#line 1 "c:\\coin3d\\include\\inventor\\engines\\sosubengine.h"


































































































































































































































#line 34 "c:\\coin3d\\include\\inventor\\engines\\sodecomposematrix.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\soengineoutput.h"






































































#line 35 "c:\\coin3d\\include\\inventor\\engines\\sodecomposematrix.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfmatrix.h"


























#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfield.h"




























































































#line 28 "c:\\coin3d\\include\\inventor\\fields\\somfmatrix.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosubfield.h"

















































































































































































































































































































































































































































































































#line 29 "c:\\coin3d\\include\\inventor\\fields\\somfmatrix.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbmatrix.h"




















































































































#line 30 "c:\\coin3d\\include\\inventor\\fields\\somfmatrix.h"

class __declspec(dllimport) SoMFMatrix : public SoMField {
  typedef SoMField inherited;

  public: SoMFMatrix(void); virtual ~SoMFMatrix(); private: static SoType classTypeId; public: static void * createInstance(void); static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; virtual void copyFrom(const SoField & field); const SoMFMatrix & operator=(const SoMFMatrix & field); virtual SbBool isSame(const SoField & field) const; private: virtual SbBool read1Value(SoInput * in, int idx); virtual void write1Value(SoOutput * out, int idx) const; protected: virtual void deleteAllValues(void); virtual void copyValue(int to, int from); virtual int fieldSizeof(void) const; virtual void * valuesPtr(void); virtual void setValuesPtr(void * ptr); virtual void allocValues(int num); SbMatrix * values; public: const SbMatrix & operator[](const int idx) const { this->evaluate(); return this->values[idx]; } const SbMatrix * getValues(const int start) const { this->evaluate(); return (const SbMatrix *)(this->values + start); } int find(const SbMatrix & value, SbBool addifnotfound = 0); void setValues(const int start, const int num, const SbMatrix * newvals); void set1Value(const int idx, const SbMatrix & value); void setValue(const SbMatrix & value); const SbMatrix & operator=(const SbMatrix & val) { this->setValue(val); return val; } SbBool operator==(const SoMFMatrix & field) const; SbBool operator!=(const SoMFMatrix & field) const { return !operator==(field); } SbMatrix * startEditing(void) { this->evaluate(); return this->values; } void finishEditing(void) { this->valueChanged(); };

public:
  static void initClass(void);

  void setValue(const float a11, const float a12,
                const float a13, const float a14,

                const float a21, const float a22,
                const float a23, const float a24,

                const float a31, const float a32,
                const float a33, const float a34,

                const float a41, const float a42,
                const float a43, const float a44);
};

#line 53 "c:\\coin3d\\include\\inventor\\fields\\somfmatrix.h"
#line 36 "c:\\coin3d\\include\\inventor\\engines\\sodecomposematrix.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfvec3f.h"

















































#line 37 "c:\\coin3d\\include\\inventor\\engines\\sodecomposematrix.h"


class __declspec(dllimport) SoDecomposeMatrix : public SoEngine {
  typedef SoEngine inherited;
  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getInputDataPtr(void); static const SoEngineOutputData ** getOutputDataPtr(void); public: virtual const SoFieldData * getFieldData(void) const; virtual const SoEngineOutputData * getOutputData(void) const; private: static unsigned int classinstances; static SoFieldData * inputdata; static const SoFieldData ** parentinputdata; static SoEngineOutputData * outputdata; static const SoEngineOutputData ** parentoutputdata; public: static void * createInstance(void); private: virtual void evaluate(); protected: ~SoDecomposeMatrix(); public: SoDecomposeMatrix(); static void initClass();

public:
  SoMFMatrix matrix;
  SoMFVec3f center;

  SoEngineOutput translation; 
  SoEngineOutput rotation; 
  SoEngineOutput scaleFactor; 
  SoEngineOutput scaleOrientation; 
};

#line 54 "c:\\coin3d\\include\\inventor\\engines\\sodecomposematrix.h"
#line 54 "c:\\coin3d\\include\\inventor\\engines\\socompose.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\socomposerotationfromto.h"
































#line 1 "c:\\coin3d\\include\\inventor\\engines\\sosubengine.h"


































































































































































































































#line 34 "c:\\coin3d\\include\\inventor\\engines\\socomposerotationfromto.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\soengineoutput.h"






































































#line 35 "c:\\coin3d\\include\\inventor\\engines\\socomposerotationfromto.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somffloat.h"












































#line 36 "c:\\coin3d\\include\\inventor\\engines\\socomposerotationfromto.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfvec3f.h"

















































#line 37 "c:\\coin3d\\include\\inventor\\engines\\socomposerotationfromto.h"


class __declspec(dllimport) SoComposeRotationFromTo : public SoEngine {
  typedef SoEngine inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getInputDataPtr(void); static const SoEngineOutputData ** getOutputDataPtr(void); public: virtual const SoFieldData * getFieldData(void) const; virtual const SoEngineOutputData * getOutputData(void) const; private: static unsigned int classinstances; static SoFieldData * inputdata; static const SoFieldData ** parentinputdata; static SoEngineOutputData * outputdata; static const SoEngineOutputData ** parentoutputdata; public: static void * createInstance(void); private: virtual void evaluate(); protected: ~SoComposeRotationFromTo(); public: SoComposeRotationFromTo(); static void initClass();

public:
  SoMFVec3f from;
  SoMFVec3f to;

  SoEngineOutput rotation; 
};

#line 52 "c:\\coin3d\\include\\inventor\\engines\\socomposerotationfromto.h"
#line 55 "c:\\coin3d\\include\\inventor\\engines\\socompose.h"

#line 57 "c:\\coin3d\\include\\inventor\\engines\\socompose.h"
#line 48 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodekits\\soscenekit.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodekits\\sosubkit.h"




































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodekits\\soscenekit.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodekits\\sobasekit.h"



































































































































































#line 29 "c:\\coin3d\\include\\inventor\\nodekits\\soscenekit.h"

class __declspec(dllimport) SoSceneKit : public SoBaseKit {
  typedef SoBaseKit inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void); public: static const SoNodekitCatalog * getClassNodekitCatalog(void); virtual const SoNodekitCatalog * getNodekitCatalog(void) const; protected: static const SoNodekitCatalog ** getClassNodekitCatalogPtr(void); private: static SoNodekitCatalog * classcatalog; static const SoNodekitCatalog ** parentcatalogptr;

  protected: SoSFNode cameraList;
  protected: SoSFNode childList;
  protected: SoSFNode lightList;
  protected: SoSFNode topSeparator;

public:
  static void initClass(void);
  SoSceneKit(void);

  int getCameraNumber(void);
  void setCameraNumber(int camNum);
  virtual SbBool affectsState(void) const;

protected:
  virtual ~SoSceneKit();
};

#line 53 "c:\\coin3d\\include\\inventor\\nodekits\\soscenekit.h"
#line 49 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\actions\\sotovrml2action.h"


























#line 1 "c:\\coin3d\\include\\inventor\\actions\\sotovrmlaction.h"


























#line 1 "c:\\coin3d\\include\\inventor\\actions\\soaction.h"











































































































































































#line 28 "c:\\coin3d\\include\\inventor\\actions\\sotovrmlaction.h"
#line 1 "c:\\coin3d\\include\\inventor\\actions\\sosubaction.h"


























































































































#line 29 "c:\\coin3d\\include\\inventor\\actions\\sotovrmlaction.h"


class __declspec(dllimport) SoToVRMLAction : public SoAction {
  typedef SoAction inherited;

  public: virtual SoType getTypeId(void) const; static SoType getClassTypeId(void); static void addMethod(const SoType type, SoActionMethod method); static void enableElement(const SoType type, const int stackindex); protected: virtual const SoEnabledElementsList & getEnabledElements(void) const; static SoEnabledElementsList * getClassEnabledElements(void); static SoActionMethodList * getClassActionMethods(void); private: static void atexit_cleanup(void); static SoEnabledElementsList * enabledElements; static SoActionMethodList * methods; static SoType classTypeId;

public:
  SoToVRMLAction(void);
  virtual ~SoToVRMLAction();

  static void initClass(void);

  virtual void apply(SoNode * node);
  virtual void apply(SoPath * path);
  virtual void apply(const SoPathList & pathlist, SbBool obeysrules = 0);
  
  SoNode * getVRMLSceneGraph(void) const;
  
  void expandSoFile(SbBool flag);
  SbBool areSoFileExpanded(void) const;
  
  void setUrlName(const SbString name);
  SbString getUrlName(void) const;
  
  void writeTexCoords(SbBool flag);
  SbBool areTexCoordWritten(void) const;
  
  void expandTexture2Node(SbBool flag);
  SbBool areTexture2NodeExpanded(void) const;
  
  void keepUnknownNodes(SbBool flag);
  SbBool areUnknownNodeKept(void) const;
  
  void convertInlineNodes(SbBool flag);
  SbBool doConvertInlineNodes(void) const;
  
  void conditionalConversion(SbBool flag);
  SbBool doConditionalConversion(void) const;
  
  void setVerbosity(SbBool flag);
  SbBool isVerbose(void) const;

protected:
  virtual void beginTraversal(SoNode * node);

private:
  class SoToVRMLActionP * pimpl;
  friend class SoToVRMLActionP;
};

#line 81 "c:\\coin3d\\include\\inventor\\actions\\sotovrmlaction.h"
#line 28 "c:\\coin3d\\include\\inventor\\actions\\sotovrml2action.h"


class __declspec(dllimport) SoToVRML2Action : public SoToVRMLAction {
  typedef SoToVRMLAction inherited;

  public: virtual SoType getTypeId(void) const; static SoType getClassTypeId(void); static void addMethod(const SoType type, SoActionMethod method); static void enableElement(const SoType type, const int stackindex); protected: virtual const SoEnabledElementsList & getEnabledElements(void) const; static SoEnabledElementsList * getClassEnabledElements(void); static SoActionMethodList * getClassActionMethods(void); private: static void atexit_cleanup(void); static SoEnabledElementsList * enabledElements; static SoActionMethodList * methods; static SoType classTypeId;

public:
  SoToVRML2Action(void);
  virtual ~SoToVRML2Action();

  static void initClass(void);

  virtual void apply(SoNode * node);
  virtual void apply(SoPath * path);
  virtual void apply(const SoPathList & pathlist, SbBool obeysrules = 0);
  
  class SoVRMLGroup * getVRML2SceneGraph(void) const;

  void reuseAppearanceNodes(SbBool appearance);
  SbBool doReuseAppearanceNodes(void) const;

  void reusePropertyNodes(SbBool property);
  SbBool doReusePropertyNodes(void) const;

  void reuseGeometryNodes(SbBool geometry);
  SbBool doReuseGeometryNodes(void) const;

protected:
  virtual void beginTraversal(SoNode * node);

private:
  class SoToVRML2ActionP * pimpl;
  friend class SoToVRML2ActionP;
};

#line 65 "c:\\coin3d\\include\\inventor\\actions\\sotovrml2action.h"
#line 50 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sotranslation.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodes\\sotranslation.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfvec3f.h"











































#line 29 "c:\\coin3d\\include\\inventor\\nodes\\sotranslation.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sotransformation.h"










































#line 30 "c:\\coin3d\\include\\inventor\\nodes\\sotranslation.h"

class __declspec(dllimport) SoTranslation : public SoTransformation {
  typedef SoTransformation inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoTranslation(void);

  SoSFVec3f translation;

  virtual void doAction(SoAction * action);
  virtual void callback(SoCallbackAction * action);
  virtual void GLRender(SoGLRenderAction * action);
  virtual void getBoundingBox(SoGetBoundingBoxAction * action);
  virtual void getMatrix(SoGetMatrixAction * action);
  virtual void pick(SoPickAction * action);
  virtual void getPrimitiveCount(SoGetPrimitiveCountAction * action);

protected:
  virtual ~SoTranslation();
};

#line 55 "c:\\coin3d\\include\\inventor\\nodes\\sotranslation.h"
#line 51 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\socomplexity.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodes\\socomplexity.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfenum.h"












































































#line 29 "c:\\coin3d\\include\\inventor\\nodes\\socomplexity.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosffloat.h"







































#line 30 "c:\\coin3d\\include\\inventor\\nodes\\socomplexity.h"
#line 1 "c:\\coin3d\\include\\inventor\\elements\\socomplexitytypeelement.h"


























#line 1 "c:\\coin3d\\include\\inventor\\elements\\soint32element.h"


























#line 1 "c:\\coin3d\\include\\inventor\\elements\\sosubelement.h"















































































































#line 28 "c:\\coin3d\\include\\inventor\\elements\\soint32element.h"
#line 1 "c:\\coin3d\\include\\inventor\\system\\inttypes.h"


















































































































































































#line 29 "c:\\coin3d\\include\\inventor\\elements\\soint32element.h"

class __declspec(dllimport) SoInt32Element : public SoElement {
  typedef SoElement inherited;

  public: static SoType getClassTypeId(void); static int getClassStackIndex(void); protected: SoInt32Element(void); private: static int classStackIndex; static SoType classTypeId;
public:
  static void initClass(void);
protected:
  virtual ~SoInt32Element();

public: 
  virtual void init(SoState * state);

  virtual SbBool matches(const SoElement * element) const;
  virtual SoElement * copyMatchInfo(void) const;

  virtual void print(FILE * file) const;

  static  void set(const int index, SoState * const state,
                    SoNode * const node, const int32_t value);
  static  void set(const int index, SoState * const state,
                    const int32_t value);
  static  int32_t get(const int index, SoState * const state);
  virtual void setElt(int32_t value);

protected:
  int32_t data;

};

#line 60 "c:\\coin3d\\include\\inventor\\elements\\soint32element.h"
#line 28 "c:\\coin3d\\include\\inventor\\elements\\socomplexitytypeelement.h"

class __declspec(dllimport) SoComplexityTypeElement : public SoInt32Element {
  typedef SoInt32Element inherited;

  public: static SoType getClassTypeId(void); static int getClassStackIndex(void); protected: SoComplexityTypeElement(void); private: static int classStackIndex; static SoType classTypeId; public: static void * createInstance(void);
public:
  static void initClass(void);
protected:
  virtual ~SoComplexityTypeElement();

public:

  enum Type {
    OBJECT_SPACE,
    SCREEN_SPACE,
    BOUNDING_BOX
  };

  virtual void init(SoState * state);

  static  void set(SoState * const state, SoNode * const node,
                   const Type type);
  static  void set(SoState * const state, const Type type);
  static  Type get(SoState * const state);
  static  Type getDefault();

};

#line 57 "c:\\coin3d\\include\\inventor\\elements\\socomplexitytypeelement.h"
#line 31 "c:\\coin3d\\include\\inventor\\nodes\\socomplexity.h"

class __declspec(dllimport) SoComplexity : public SoNode {
  typedef SoNode inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoComplexity(void);

  enum Type {
    OBJECT_SPACE = SoComplexityTypeElement::OBJECT_SPACE,
    SCREEN_SPACE = SoComplexityTypeElement::SCREEN_SPACE,
    BOUNDING_BOX = SoComplexityTypeElement::BOUNDING_BOX
  };

  SoSFEnum type;
  SoSFFloat value;
  SoSFFloat textureQuality;

  virtual void doAction(SoAction * action);
  virtual void callback(SoCallbackAction * action);
  virtual void getBoundingBox(SoGetBoundingBoxAction * action);
  virtual void GLRender(SoGLRenderAction * action);
  virtual void pick(SoPickAction * action);
  virtual void getPrimitiveCount(SoGetPrimitiveCountAction * action);

protected:
  virtual ~SoComplexity();
};

#line 63 "c:\\coin3d\\include\\inventor\\nodes\\socomplexity.h"
#line 52 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sonurbssurface.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodes\\sonurbssurface.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\soshape.h"












































































































































#line 29 "c:\\coin3d\\include\\inventor\\nodes\\sonurbssurface.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfint32.h"







































#line 30 "c:\\coin3d\\include\\inventor\\nodes\\sonurbssurface.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somffloat.h"












































#line 31 "c:\\coin3d\\include\\inventor\\nodes\\sonurbssurface.h"

class __declspec(dllimport) SoNurbsSurface : public SoShape {
  typedef SoShape inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoNurbsSurface(void);

  SoSFInt32 numUControlPoints;
  SoSFInt32 numVControlPoints;
  SoSFInt32 numSControlPoints;
  SoSFInt32 numTControlPoints;
  SoMFFloat uKnotVector;
  SoMFFloat vKnotVector;
  SoMFFloat sKnotVector;
  SoMFFloat tKnotVector;

  virtual void GLRender(SoGLRenderAction * action);
  virtual void rayPick(SoRayPickAction * action);
  virtual void getPrimitiveCount(SoGetPrimitiveCountAction * action);
  void sendPrimitive(SoAction *,  SoPrimitiveVertex *);

protected:
  virtual ~SoNurbsSurface();

  virtual void generatePrimitives(SoAction * action);
  virtual void computeBBox(SoAction * action, SbBox3f & box, SbVec3f & center);
  SoDetail * createTriangleDetail(SoRayPickAction * action,
                                  const SoPrimitiveVertex * v1,
                                  const SoPrimitiveVertex * v2,
                                  const SoPrimitiveVertex * v3,
                                  SoPickedPoint * pp);
private:
  class SoNurbsSurfaceP * pimpl;
  friend class SoNurbsSurfaceP;
};

#line 71 "c:\\coin3d\\include\\inventor\\nodes\\sonurbssurface.h"
#line 53 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlcolor.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlcolor.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sonode.h"








































































































































































#line 29 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlcolor.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfcolor.h"




























































#line 30 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlcolor.h"

class SoVRMLColorP;

class __declspec(dllimport) SoVRMLColor : public SoNode
{
  typedef SoNode inherited;
  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoVRMLColor(void);

  SoMFColor color;

  virtual void doAction(SoAction * action);
  virtual void GLRender(SoGLRenderAction * action);
  virtual void callback(SoCallbackAction * action);

protected:
  virtual ~SoVRMLColor();

private:
  SoVRMLColorP * pimpl;
}; 

#line 56 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlcolor.h"
#line 54 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlviewpoint.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlviewpoint.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sonode.h"








































































































































































#line 29 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlviewpoint.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfvec3f.h"











































#line 30 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlviewpoint.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosffloat.h"







































#line 31 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlviewpoint.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfbool.h"







































#line 32 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlviewpoint.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosftime.h"








































#line 33 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlviewpoint.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfstring.h"










































#line 34 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlviewpoint.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfrotation.h"













































#line 35 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlviewpoint.h"

class SoVRMLViewpointP;

class __declspec(dllimport) SoVRMLViewpoint : public SoNode
{
  typedef SoNode inherited;
  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoVRMLViewpoint(void);

  SoSFVec3f position;
  SoSFRotation orientation;
  SoSFFloat fieldOfView;
  SoSFString description;
  SoSFBool jump;

  virtual void GLRender(SoGLRenderAction * action);

protected:
  virtual ~SoVRMLViewpoint();
  SoSFBool set_bind;
  SoSFTime bindTime;
  SoSFBool isBound;

private:
  SoVRMLViewpointP * pimpl;
};

#line 66 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlviewpoint.h"
#line 55 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\actions\\soraypickaction.h"


























#line 1 "c:\\coin3d\\include\\inventor\\actions\\sopickaction.h"


























#line 1 "c:\\coin3d\\include\\inventor\\actions\\soaction.h"











































































































































































#line 28 "c:\\coin3d\\include\\inventor\\actions\\sopickaction.h"
#line 1 "c:\\coin3d\\include\\inventor\\actions\\sosubaction.h"


























































































































#line 29 "c:\\coin3d\\include\\inventor\\actions\\sopickaction.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbviewportregion.h"









































































#line 30 "c:\\coin3d\\include\\inventor\\actions\\sopickaction.h"


class __declspec(dllimport) SoPickAction : public SoAction {
  typedef SoAction inherited;

  public: virtual SoType getTypeId(void) const; static SoType getClassTypeId(void); static void addMethod(const SoType type, SoActionMethod method); static void enableElement(const SoType type, const int stackindex); protected: virtual const SoEnabledElementsList & getEnabledElements(void) const; static SoEnabledElementsList * getClassEnabledElements(void); static SoActionMethodList * getClassActionMethods(void); private: static void atexit_cleanup(void); static SoEnabledElementsList * enabledElements; static SoActionMethodList * methods; static SoType classTypeId;

public:
  static void initClass(void);

  void setViewportRegion(const SbViewportRegion & newregion);
  const SbViewportRegion & getViewportRegion(void);

  void enableCulling(const SbBool flag);
  SbBool isCullingEnabled() const;

protected:
  SoPickAction(const SbViewportRegion & viewportregion);
  virtual ~SoPickAction();

  virtual void beginTraversal(SoNode * node);

  SbViewportRegion vpRegion;

private:
  SbBool cullingenabled;
};

#line 59 "c:\\coin3d\\include\\inventor\\actions\\sopickaction.h"
#line 28 "c:\\coin3d\\include\\inventor\\actions\\soraypickaction.h"

class SbBox3f;
class SbLine;
class SbMatrix;
class SbVec2f;
class SbVec2s;
class SbVec3f;
class SbViewVolume;
class SbViewportRegion;
class SoPickedPoint;
class SoPickedPointList;

class __declspec(dllimport) SoRayPickAction : public SoPickAction {
  typedef SoPickAction inherited;

  public: virtual SoType getTypeId(void) const; static SoType getClassTypeId(void); static void addMethod(const SoType type, SoActionMethod method); static void enableElement(const SoType type, const int stackindex); protected: virtual const SoEnabledElementsList & getEnabledElements(void) const; static SoEnabledElementsList * getClassEnabledElements(void); static SoActionMethodList * getClassActionMethods(void); private: static void atexit_cleanup(void); static SoEnabledElementsList * enabledElements; static SoActionMethodList * methods; static SoType classTypeId;

public:
  SoRayPickAction(const SbViewportRegion & viewportregion);
  virtual ~SoRayPickAction();
  static void initClass(void);

  void setPoint(const SbVec2s & viewportPoint);
  void setNormalizedPoint(const SbVec2f & normpoint);
  void setRadius(const float radiusinpixels);
  void setRay(const SbVec3f & start, const SbVec3f & direction,
              float neardistance = -1.0,
              float fardistance = -1.0);
  void setPickAll(const SbBool flag);
  SbBool isPickAll(void) const;
  const SoPickedPointList & getPickedPointList(void) const;
  SoPickedPoint * getPickedPoint(const int index = 0) const;


  void computeWorldSpaceRay(void);
  SbBool hasWorldSpaceRay(void) const;
  void setObjectSpace(void);
  void setObjectSpace(const SbMatrix & matrix);
  SbBool intersect(const SbVec3f & v0, const SbVec3f & v1, const SbVec3f & v2,
                   SbVec3f & intersection, SbVec3f & barycentric,
                   SbBool & front) const;
  SbBool intersect(const SbVec3f & v0, const SbVec3f & v1,
                   SbVec3f & intersection) const;
  SbBool intersect(const SbVec3f & point) const;
  SbBool intersect(const SbBox3f & box, const SbBool usefullviewvolume = 1);
  SbBool intersect(const SbBox3f & box, SbVec3f & intersection,
                   const SbBool usefullviewvolume = 1);
  const SbViewVolume & getViewVolume(void);
  const SbLine & getLine(void);
  SbBool isBetweenPlanes(const SbVec3f & intersection) const;
  SoPickedPoint * addIntersection(const SbVec3f & objectspacepoint);

  void reset(void);

protected:
  virtual void beginTraversal(SoNode * node);

private:
  class SoRayPickActionP * pimpl;
};

#line 90 "c:\\coin3d\\include\\inventor\\actions\\soraypickaction.h"
#line 56 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlworldinfo.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlworldinfo.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sonode.h"








































































































































































#line 29 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlworldinfo.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfstring.h"













































#line 30 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlworldinfo.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfstring.h"










































#line 31 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlworldinfo.h"

class __declspec(dllimport) SoVRMLWorldInfo : public SoNode
{
  typedef SoNode inherited;
  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoVRMLWorldInfo(void);

  SoSFString title;
  SoMFString info;

protected:
  virtual ~SoVRMLWorldInfo();

}; 

#line 50 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlworldinfo.h"
#line 57 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlscript.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlscript.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfbool.h"







































#line 29 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlscript.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfstring.h"













































#line 30 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlscript.h"

class SoVRMLScript;
class SoVRMLScriptP;
class SoSensor;

typedef void SoVRMLScriptEvaluateCB(void * closure, SoVRMLScript * node);

class __declspec(dllimport) SoVRMLScript : public SoNode
{
  typedef SoNode inherited;

public:
  static void initClass(void);
  SoVRMLScript(void);

  static SoType getClassTypeId(void);
  virtual SoType getTypeId(void) const;

  SoMFString url;
  SoSFBool directOutput;
  SoSFBool mustEvaluate;

  virtual void doAction(SoAction * action);
  virtual void callback(SoCallbackAction * action);
  virtual void GLRender(SoGLRenderAction * action);
  virtual void getBoundingBox(SoGetBoundingBoxAction * action);
  virtual void pick(SoPickAction * action);
  virtual void handleEvent(SoHandleEventAction * action);
  virtual void write(SoWriteAction * action);

  static void setScriptEvaluateCB(SoVRMLScriptEvaluateCB * cb,
                                  void * closure);

protected:
  virtual ~SoVRMLScript();
  virtual void copyContents(const SoFieldContainer * from, SbBool copyconn);
  virtual void notify(SoNotList * list);
private:
  static SoType classTypeId;
  static void * createInstance(void);
  SoFieldData * fielddata;
  virtual const SoFieldData * getFieldData(void) const;

private:
  virtual SbBool readInstance(SoInput * in, unsigned short flags);

  static void eval_cb(void * data, SoSensor *);
  void initFieldData(void);
  SoVRMLScriptP * pimpl;
  friend class SoVRMLScriptP;
}; 

#line 83 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlscript.h"
#line 58 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlimagetexture.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlimagetexture.h"
#line 1 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmltexture.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmltexture.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sonode.h"








































































































































































#line 29 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmltexture.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfbool.h"







































#line 30 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmltexture.h"

class __declspec(dllimport) SoVRMLTexture : public SoNode
{
  typedef SoNode inherited;
  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances;

public:
  static void initClass(void);

  SoSFBool repeatS;
  SoSFBool repeatT;

  virtual void GLRender( SoGLRenderAction * action );

protected:
  SoVRMLTexture(void);
  virtual ~SoVRMLTexture();

}; 

#line 51 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmltexture.h"
#line 29 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlimagetexture.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfstring.h"













































#line 30 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlimagetexture.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbimage.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sbvec2s.h"
















































































#line 28 "c:\\coin3d\\include\\inventor\\sbimage.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbvec3s.h"






























































































#line 29 "c:\\coin3d\\include\\inventor\\sbimage.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbstring.h"












































































































































#line 30 "c:\\coin3d\\include\\inventor\\sbimage.h"


class SbImage;

typedef SbBool SbImageScheduleReadCB(const SbString &, SbImage *, void *);

class __declspec(dllimport) SbImage {
public:
  SbImage(void);
  SbImage(const unsigned char * bytes,
          const SbVec2s & size, const int bytesperpixel);
  SbImage(const unsigned char * bytes,
          const SbVec3s & size, const int bytesperpixel);
  ~SbImage();

  void setValue(const SbVec2s & size, const int bytesperpixel,
                const unsigned char * bytes);
  void setValue(const SbVec3s & size, const int bytesperpixel,
                const unsigned char * bytes);
  void setValuePtr(const SbVec2s & size, const int bytesperpixel,
                   const unsigned char * bytes);
  void setValuePtr(const SbVec3s & size, const int bytesperpixel,
                   const unsigned char * bytes);
  unsigned char * getValue(SbVec2s & size, int & bytesperpixel) const;
  unsigned char * getValue(SbVec3s & size, int & bytesperpixel) const;
  SbVec3s getSize(void) const;

  SbBool readFile(const SbString & filename,
                  const SbString * const * searchdirectories = 0,
                  const int numdirectories = 0);

  int operator==(const SbImage & image) const;
  int operator!=(const SbImage & image) const {
    return ! operator == (image);
  }
  SbImage & operator=(const SbImage & image);

  static SbString searchForFile(const SbString & basename,
                                const SbString * const * dirlist,
                                const int numdirs);

  SbBool hasData(void) const;

private:

  class SbImageP * pimpl;
  
public:

  
  void readLock(void) const;
  void readUnlock(void) const;

  SbBool scheduleReadFile(SbImageScheduleReadCB * cb,
                          void * closure,
                          const SbString & filename,
                          const SbString * const * searchdirectories = 0,
                          const int numdirectories = 0);
};

#line 91 "c:\\coin3d\\include\\inventor\\sbimage.h"
#line 31 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlimagetexture.h"

class SoVRMLImageTexture;
class SoSensor;
class SbImage;

typedef SbBool VRMLPrequalifyFileCallback(const SbString &, void *,
                                          SoVRMLImageTexture *);

class __declspec(dllimport) SoVRMLImageTexture : public SoVRMLTexture
{
  typedef SoVRMLTexture inherited;
  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoVRMLImageTexture(void);

  SoMFString url;

  static void setDelayFetchURL(const SbBool onoff);
  static void setPrequalifyFileCallBack(VRMLPrequalifyFileCallback * cb,
                                        void * closure);
  void allowPrequalifyFile(SbBool enable);

  virtual void doAction(SoAction * action);
  virtual void GLRender(SoGLRenderAction * action);
  virtual void callback(SoCallbackAction * action);
  virtual void rayPick(SoRayPickAction * action);

  void setImage(const SbImage & image);
  const SbImage * getImage(void) const;

  static void setImageDataMaxAge(const uint32_t maxage);

protected:
  virtual ~SoVRMLImageTexture();

  virtual SbBool readInstance(SoInput * in, unsigned short flags);
  int getReadStatus(void) const;
  void setReadStatus(int status);

private:

  SbBool readImage(const SbString & filename);
  SbBool loadUrl(void);
  class SoVRMLImageTextureP * pimpl;
  static void urlSensorCB(void *, SoSensor *);
  static void glimage_callback(void * closure);
  static SbBool image_read_cb(const SbString &, SbImage *, void *);
  static void read_thread(void * closure);
  static SbBool default_prequalify_cb(const SbString & url,  void * closure, 
                                      SoVRMLImageTexture * node);
  static void oneshot_readimage_cb(void *, SoSensor *);

}; 

#line 88 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlimagetexture.h"
#line 59 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlappearance.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sonode.h"








































































































































































#line 28 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlappearance.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 29 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlappearance.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfnode.h"

























































#line 30 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlappearance.h"

class SoVRMLAppearanceP;

class __declspec(dllimport) SoVRMLAppearance : public SoNode
{
  typedef SoNode inherited;
  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);

  SoVRMLAppearance(void);

  SoSFNode material;
  SoSFNode texture;
  SoSFNode textureTransform;
  
  virtual void doAction(SoAction * action);
  virtual void callback(SoCallbackAction * action);
  virtual void GLRender(SoGLRenderAction * action);
  virtual void search(SoSearchAction * action);

  virtual SoChildList * getChildren(void) const;
  virtual void notify(SoNotList * list);
  virtual void copyContents(const SoFieldContainer * from, SbBool copyConn);

protected:
  virtual ~SoVRMLAppearance();

private:
  SoVRMLAppearanceP * pimpl;
}; 

#line 64 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlappearance.h"
#line 60 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmltransform.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmltransform.h"
#line 1 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlgroup.h"





























































































#line 29 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmltransform.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfvec3f.h"











































#line 30 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmltransform.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfrotation.h"













































#line 31 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmltransform.h"

class __declspec(dllimport) SoVRMLTransform : public SoVRMLGroup
{
  typedef SoVRMLGroup inherited;
  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoVRMLTransform(void);
  SoVRMLTransform(int children);

  SoSFVec3f translation;
  SoSFRotation rotation;
  SoSFVec3f scale;
  SoSFRotation scaleOrientation;
  SoSFVec3f center;

  void pointAt(const SbVec3f & from, const SbVec3f & to);
  void getScaleSpaceMatrix(SbMatrix & matrix, SbMatrix & inverse) const;
  void getRotationSpaceMatrix(SbMatrix & matrix, SbMatrix & inverse) const;
  void getTranslationSpaceMatrix(SbMatrix & matrix, SbMatrix & inverse) const;

  void multLeft(const SbMatrix & matrix);
  void multRight(const SbMatrix & matrix);

  void combineLeft(SoVRMLTransform * leftnode);
  void combineRight(SoVRMLTransform * rightnode);

  void setMatrix(const SbMatrix & matrix);

  void recenter(const SbVec3f & newcenter);

  virtual void doAction(SoAction * action);
  virtual void callback(SoCallbackAction * action);
  virtual void getBoundingBox(SoGetBoundingBoxAction * action);
  virtual void getMatrix(SoGetMatrixAction * action);
  virtual void rayPick(SoRayPickAction * action);
  virtual void getPrimitiveCount(SoGetPrimitiveCountAction * action);
  virtual void audioRender(SoAudioRenderAction * action);

  virtual void GLRenderBelowPath(SoGLRenderAction * action);
  virtual void GLRenderInPath(SoGLRenderAction * action);

  virtual void notify(SoNotList * list);

protected:
  virtual ~SoVRMLTransform();

private:
  void commonConstructor(void);
  void applyMatrix(SoState * state);
}; 

#line 85 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmltransform.h"
#line 61 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlswitch.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlswitch.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sogroup.h"


















































































#line 29 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlswitch.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfnode.h"





























































#line 30 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlswitch.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfint32.h"







































#line 31 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlswitch.h"










class SoVRMLSwitchP;

class __declspec(dllimport) SoVRMLSwitch : public SoGroup
{
  typedef SoGroup inherited;
  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoVRMLSwitch(void);
  SoVRMLSwitch( int choices);

  SoMFNode choice;
  SoSFInt32 whichChoice;

  virtual SbBool affectsState(void) const;

  void addChoice(SoNode * choice);
  void insertChoice(SoNode * choice, int idx);
  SoNode * getChoice(int idx) const;
  int findChoice(SoNode * choice) const;
  int getNumChoices(void) const;
  void removeChoice(int idx);
  void removeChoice(SoNode * node);
  void removeAllChoices(void);
  void replaceChoice(int idx, SoNode * choice);
  void replaceChoice(SoNode * old, SoNode * choice);

  virtual void doAction(SoAction * action);
  virtual void callback(SoCallbackAction * action);
  virtual void GLRender(SoGLRenderAction * action);
  virtual void pick(SoPickAction * action);
  virtual void getBoundingBox(SoGetBoundingBoxAction * action);
  virtual void handleEvent(SoHandleEventAction * action);
  virtual void getMatrix(SoGetMatrixAction * action);
  virtual void search(SoSearchAction * action);
  virtual void write(SoWriteAction * action);
  virtual void audioRender(SoAudioRenderAction * action);

  void addChild(SoNode * child);
  void insertChild(SoNode * child, int idx);
  SoNode * getChild(int idx) const;
  int findChild(const SoNode * child) const;
  int getNumChildren(void) const;
  void removeChild(int idx);
  void removeChild(SoNode * child);
  void removeAllChildren(void);
  void replaceChild(int idx, SoNode * node);
  void replaceChild(SoNode * old, SoNode * node);
  virtual SoChildList * getChildren(void) const;

protected:
  virtual ~SoVRMLSwitch(void);

  virtual void notify(SoNotList * list);
  virtual SbBool readInstance(SoInput * in, unsigned short flags);
  virtual void copyContents(const SoFieldContainer * from, SbBool copyConn);

private:
  void commonConstructor(void);
  SoVRMLSwitchP * pimpl;
  friend class SoVRMLSwitchP;
}; 

#line 106 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlswitch.h"
#line 62 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlshape.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlshape.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfnode.h"

























































#line 29 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlshape.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfenum.h"












































































#line 30 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlshape.h"

class SoVRMLShapeP;

class __declspec(dllimport) SoVRMLShape : public SoNode
{
  typedef SoNode inherited;
  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoVRMLShape(void);

  enum CacheEnabled {
    OFF,
    ON,
    AUTO
  };

  SoSFNode appearance;
  SoSFNode geometry;
  SoSFEnum renderCaching;
  SoSFEnum boundingBoxCaching;

  static void setNumRenderCaches(int num);
  static int getNumRenderCaches(void);

  virtual SbBool affectsState(void) const;

  virtual void doAction(SoAction * action);
  virtual void callback(SoCallbackAction * action);
  virtual void GLRender(SoGLRenderAction * action);
  virtual void getBoundingBox(SoGetBoundingBoxAction * action);
  virtual void rayPick(SoRayPickAction * action);
  virtual void search(SoSearchAction * action);
  virtual void write(SoWriteAction * action);
  virtual void getPrimitiveCount(SoGetPrimitiveCountAction * action);

  virtual SoChildList * getChildren(void) const;

  virtual void notify(SoNotList * list);
  virtual void copyContents(const SoFieldContainer * from, SbBool copyConn);

protected:
  virtual ~SoVRMLShape();

private:
  static int numrendercaches;
  SoVRMLShapeP * pimpl;

}; 

#line 82 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlshape.h"
#line 63 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlmaterial.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlmaterial.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sonode.h"








































































































































































#line 29 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlmaterial.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfcolor.h"














































#line 30 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlmaterial.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosffloat.h"







































#line 31 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlmaterial.h"

class SoVRMLMaterialP;

class __declspec(dllimport) SoVRMLMaterial : public SoNode
{
  typedef SoNode inherited;
  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoVRMLMaterial(void);

  SoSFColor diffuseColor;
  SoSFFloat ambientIntensity;
  SoSFColor specularColor;
  SoSFColor emissiveColor;
  SoSFFloat shininess;
  SoSFFloat transparency;

  virtual void doAction(SoAction * action);
  virtual void GLRender(SoGLRenderAction * action);
  virtual void callback(SoCallbackAction * action);

protected:
  virtual ~SoVRMLMaterial();

private:
  SoVRMLMaterialP * pimpl;
}; 

#line 62 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlmaterial.h"
#line 64 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlcone.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlcone.h"
#line 1 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlgeometry.h"
























































#line 29 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlcone.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosffloat.h"







































#line 30 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlcone.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfbool.h"







































#line 31 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlcone.h"

class __declspec(dllimport) SoVRMLCone : public SoVRMLGeometry
{
  typedef SoVRMLGeometry inherited;
  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoVRMLCone(void);

  SoSFFloat bottomRadius;
  SoSFFloat height;
  SoSFBool side;
  SoSFBool bottom;

  virtual void GLRender(SoGLRenderAction * action);
  virtual void rayPick(SoRayPickAction * action);
  virtual void getPrimitiveCount(SoGetPrimitiveCountAction * action);

protected:
  virtual ~SoVRMLCone();

  virtual void generatePrimitives(SoAction * action);
  virtual void computeBBox(SoAction * action,
                           SbBox3f & box, SbVec3f & center);

}; 

#line 60 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlcone.h"
#line 65 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlcylinder.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlcylinder.h"
#line 1 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlgeometry.h"
























































#line 29 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlcylinder.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosffloat.h"







































#line 30 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlcylinder.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfbool.h"







































#line 31 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlcylinder.h"

class __declspec(dllimport) SoVRMLCylinder : public SoVRMLGeometry
{
  typedef SoVRMLGeometry inherited;
  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoVRMLCylinder(void);

  SoSFFloat radius;
  SoSFFloat height;
  SoSFBool side;
  SoSFBool top;
  SoSFBool bottom;

  virtual void GLRender(SoGLRenderAction * action);
  virtual void rayPick(SoRayPickAction * action);
  virtual void getPrimitiveCount(SoGetPrimitiveCountAction * action);

protected:
  virtual ~SoVRMLCylinder();

  virtual void generatePrimitives(SoAction * action);
  virtual void computeBBox(SoAction * action, SbBox3f & box,
                           SbVec3f & center);

}; 

#line 61 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlcylinder.h"
#line 66 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\qt\\soqtcursor.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sblinear.h"



























































#line 28 "c:\\coin3d\\include\\inventor\\qt\\soqtcursor.h"
#line 1 "c:\\coin3d\\include\\inventor\\qt\\soqtbasic.h"












































































































































#line 29 "c:\\coin3d\\include\\inventor\\qt\\soqtcursor.h"

class __declspec(dllimport) SoQtCursor {
public:
  struct CustomCursor {
    SbVec2s dim;
    SbVec2s hotspot;
    unsigned char * bitmap;
    unsigned char * mask;
  };


  
  enum Shape {
    CUSTOM_BITMAP = -1,
    DEFAULT = 0,
    BUSY,
    CROSSHAIR,
    UPARROW
  };
  
  SoQtCursor(void);
  SoQtCursor(const Shape shape);
  SoQtCursor(const CustomCursor * cc);
  ~SoQtCursor();

  Shape getShape(void) const;
  void setShape(const Shape shape);

  const CustomCursor & getCustomCursor(void) const;

  static const SoQtCursor & getZoomCursor(void);
  static const SoQtCursor & getPanCursor(void);
  static const SoQtCursor & getRotateCursor(void);
  static const SoQtCursor & getBlankCursor(void);
  
private:
  void commonConstructor(const Shape shape, const CustomCursor * cc);

  Shape shape;
  CustomCursor * cc;
};

#line 72 "c:\\coin3d\\include\\inventor\\qt\\soqtcursor.h"
#line 67 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\misc\\sobase.h"















































































































































#line 68 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sorotationxyz.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodes\\sorotationxyz.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sotransformation.h"










































#line 29 "c:\\coin3d\\include\\inventor\\nodes\\sorotationxyz.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfenum.h"












































































#line 30 "c:\\coin3d\\include\\inventor\\nodes\\sorotationxyz.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosffloat.h"







































#line 31 "c:\\coin3d\\include\\inventor\\nodes\\sorotationxyz.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbvec3f.h"






































































































#line 32 "c:\\coin3d\\include\\inventor\\nodes\\sorotationxyz.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbrotation.h"












































































#line 33 "c:\\coin3d\\include\\inventor\\nodes\\sorotationxyz.h"


class __declspec(dllimport) SoRotationXYZ : public SoTransformation {
  typedef SoTransformation inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoRotationXYZ(void);

  enum Axis {
    X, Y, Z
  };

  SoSFEnum axis;
  SoSFFloat angle;

  SbRotation getRotation(void) const;

  virtual void doAction(SoAction * action);
  virtual void GLRender(SoGLRenderAction * action);
  virtual void callback(SoCallbackAction * action);
  virtual void getBoundingBox(SoGetBoundingBoxAction * action);
  virtual void getMatrix(SoGetMatrixAction * action);
  virtual void pick(SoPickAction * action);
  virtual void getPrimitiveCount(SoGetPrimitiveCountAction * action);

protected:
  virtual ~SoRotationXYZ();

private:
  SbBool getVector(SbVec3f & rotvec) const;
};

#line 69 "c:\\coin3d\\include\\inventor\\nodes\\sorotationxyz.h"
#line 69 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\soelapsedtime.h"


























#line 1 "c:\\coin3d\\include\\inventor\\engines\\sosubengine.h"


































































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\engines\\soelapsedtime.h"
#line 1 "c:\\coin3d\\include\\inventor\\engines\\soengineoutput.h"






































































#line 29 "c:\\coin3d\\include\\inventor\\engines\\soelapsedtime.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosftime.h"








































#line 30 "c:\\coin3d\\include\\inventor\\engines\\soelapsedtime.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosffloat.h"







































#line 31 "c:\\coin3d\\include\\inventor\\engines\\soelapsedtime.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfbool.h"







































#line 32 "c:\\coin3d\\include\\inventor\\engines\\soelapsedtime.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosftrigger.h"
























































#line 33 "c:\\coin3d\\include\\inventor\\engines\\soelapsedtime.h"


class __declspec(dllimport) SoElapsedTime : public SoEngine {
  typedef SoEngine inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getInputDataPtr(void); static const SoEngineOutputData ** getOutputDataPtr(void); public: virtual const SoFieldData * getFieldData(void) const; virtual const SoEngineOutputData * getOutputData(void) const; private: static unsigned int classinstances; static SoFieldData * inputdata; static const SoFieldData ** parentinputdata; static SoEngineOutputData * outputdata; static const SoEngineOutputData ** parentoutputdata; public: static void * createInstance(void);

public:
  static void initClass(void);
  SoElapsedTime(void);

  SoSFTime timeIn;
  SoSFFloat speed;
  SoSFBool on;
  SoSFBool pause;
  SoSFTrigger reset;

  SoEngineOutput timeOut; 

protected:
  ~SoElapsedTime();

  virtual void writeInstance(SoOutput * out);

private:
  virtual void evaluate(void);
  virtual void inputChanged(SoField * which);

  SbTime pausetime, lasttime, currtime;
  enum {RUNNING, STOPPED, PAUSED} status;
};

#line 66 "c:\\coin3d\\include\\inventor\\engines\\soelapsedtime.h"
#line 70 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sotext3.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodes\\sotext3.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\soshape.h"












































































































































#line 29 "c:\\coin3d\\include\\inventor\\nodes\\sotext3.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfstring.h"













































#line 30 "c:\\coin3d\\include\\inventor\\nodes\\sotext3.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosffloat.h"







































#line 31 "c:\\coin3d\\include\\inventor\\nodes\\sotext3.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfenum.h"












































































#line 32 "c:\\coin3d\\include\\inventor\\nodes\\sotext3.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfbitmask.h"








































#line 33 "c:\\coin3d\\include\\inventor\\nodes\\sotext3.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\sblist.h"





































































































































































































































#line 34 "c:\\coin3d\\include\\inventor\\nodes\\sotext3.h"

class SoSensor;
class SoFieldSensor;
class SoGlyph;

class __declspec(dllimport) SoText3 : public SoShape {
  typedef SoShape inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoText3(void);

  enum Part {
    FRONT = 1,
    SIDES = 2,
    BACK =  4,
    ALL = FRONT|BACK|SIDES
  };

  enum Justification {
    LEFT = 1,
    RIGHT,
    CENTER
  };

  SoMFString string;
  SoSFFloat spacing;
  SoSFEnum justification;
  SoSFBitMask parts;

  SbBox3f getCharacterBounds(SoState * state, int stringindex, int charindex);

  virtual void GLRender(SoGLRenderAction * action);
  virtual void getPrimitiveCount(SoGetPrimitiveCountAction * action);

protected:
  virtual ~SoText3();

  virtual void generatePrimitives(SoAction *);
  virtual void computeBBox(SoAction * action, SbBox3f & box, SbVec3f & center);
  virtual SoDetail * createTriangleDetail(SoRayPickAction * action,
                                         const SoPrimitiveVertex * v1,
                                         const SoPrimitiveVertex * v2,
                                         const SoPrimitiveVertex * v3,
                                         SoPickedPoint * pp);

  virtual void notify(SoNotList *list);
  
private:
  class SoText3P * pimpl;
  friend class SoText3P;
  void render(SoState * state, unsigned int part);
  void generate(SoAction * action, unsigned int part);
};

#line 92 "c:\\coin3d\\include\\inventor\\nodes\\sotext3.h"
#line 71 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\sbstringlist.h"


























#line 1 "c:\\coin3d\\include\\inventor\\lists\\sbplist.h"
































































































































































#line 28 "c:\\coin3d\\include\\inventor\\lists\\sbstringlist.h"

class SbString;

class __declspec(dllimport) SbStringList : public SbPList {
public:
  SbStringList(void) { }
  SbStringList(const int sizehint) : SbPList(sizehint) { }

  void append(SbString * string) {
    SbPList::append((void*)string);
  }
  int find(SbString * string) const {
    return SbPList::find((void*) string);
  }
  void insert(SbString * string, int insertbefore) {
    SbPList::insert((void*)string, insertbefore);
  }
  SbString *& operator[](const int idx) const {
    return (SbString*&) ((*(const SbPList*)this)[idx]);
  }
  const SbString ** getArrayPtr(void) const {
    return (const SbString**) SbPList::getArrayPtr();
  }
};

#line 54 "c:\\coin3d\\include\\inventor\\lists\\sbstringlist.h"
#line 72 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sotext2.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodes\\sotext2.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\soshape.h"












































































































































#line 29 "c:\\coin3d\\include\\inventor\\nodes\\sotext2.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\somfstring.h"













































#line 30 "c:\\coin3d\\include\\inventor\\nodes\\sotext2.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosffloat.h"







































#line 31 "c:\\coin3d\\include\\inventor\\nodes\\sotext2.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfenum.h"












































































#line 32 "c:\\coin3d\\include\\inventor\\nodes\\sotext2.h"

class __declspec(dllimport) SoText2 : public SoShape {
  typedef SoShape inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoText2(void);

  enum Justification {
    LEFT = 1,
    RIGHT,
    CENTER
  };

  SoMFString string;
  SoSFFloat spacing;
  SoSFEnum justification;

  virtual void GLRender(SoGLRenderAction * action);
  virtual void rayPick(SoRayPickAction * action);
  virtual void getPrimitiveCount(SoGetPrimitiveCountAction * action);

protected:
  virtual ~SoText2();

  virtual void generatePrimitives(SoAction * action);
  virtual void computeBBox(SoAction * action, SbBox3f & box, SbVec3f & center);

private:
  class SoText2P * pimpl;
  friend class SoText2P;                     
};

#line 68 "c:\\coin3d\\include\\inventor\\nodes\\sotext2.h"
#line 73 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\soorthographiccamera.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\nodes\\soorthographiccamera.h"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\socamera.h"













































































































































#line 29 "c:\\coin3d\\include\\inventor\\nodes\\soorthographiccamera.h"

class __declspec(dllimport) SoOrthographicCamera : public SoCamera {
  typedef SoCamera inherited;

  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoOrthographicCamera(void);

  SoSFFloat height;

  virtual void scaleHeight(float scalefactor);
  virtual SbViewVolume getViewVolume(float useaspectratio = 0.0f) const;

protected:
  virtual ~SoOrthographicCamera();

  virtual void viewBoundingBox(const SbBox3f & box, float aspect, float slack);
};

#line 51 "c:\\coin3d\\include\\inventor\\nodes\\soorthographiccamera.h"
#line 74 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlbox.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sosubnode.h"

























































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlbox.h"
#line 1 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlgeometry.h"
























































#line 29 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlbox.h"
#line 1 "c:\\coin3d\\include\\inventor\\fields\\sosfvec3f.h"











































#line 30 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlbox.h"

class __declspec(dllimport) SoVRMLBox : public SoVRMLGeometry
{
  typedef SoVRMLGeometry inherited;
  public: static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; private: static SoType classTypeId; protected: static const SoFieldData ** getFieldDataPtr(void); virtual const SoFieldData * getFieldData(void) const; private: static void atexit_cleanup(void); static const SoFieldData ** parentFieldData; static SoFieldData * fieldData; static unsigned int classinstances; private: static void * createInstance(void);

public:
  static void initClass(void);
  SoVRMLBox(void);

  SoSFVec3f size;

  virtual void GLRender(SoGLRenderAction * action);
  virtual void rayPick(SoRayPickAction * action);
  virtual void getPrimitiveCount( SoGetPrimitiveCountAction * action );

protected:
  virtual ~SoVRMLBox();

  virtual void generatePrimitives( SoAction * action );
  virtual void computeBBox( SoAction * action, SbBox3f & box,
                            SbVec3f & center );
}; 

#line 55 "c:\\coin3d\\include\\inventor\\vrmlnodes\\sovrmlbox.h"
#line 75 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\misc\\soproto.h"


























#line 1 "c:\\coin3d\\include\\inventor\\nodes\\sonode.h"








































































































































































#line 28 "c:\\coin3d\\include\\inventor\\misc\\soproto.h"

class SoProto;
class SoInput;
class SoProtoInstance;
class SoProtoP;

typedef SoProto * SoFetchExternProtoCB(SoInput * in,
                                       const SbString * urls,
                                       const int numurls,
                                       void * closure);



class __declspec(dllimport) SoProto : public SoNode {
public:
  SoProto(const SbBool externproto = 0);

  static void setFetchExternProtoCallback(SoFetchExternProtoCB * cb,
                                          void * closure);

  virtual SoType getTypeId(void) const;
  static SoType getClassTypeId(void);

  static SoProto * findProto(const SbName & name);
  static void initClass(void);

  SoProtoInstance * createProtoInstance(void);
  void addISReference(SoNode * container,
                      const SbName & fieldname,
                      const SbName & interfacename);
  SbName findISReference(const SoFieldContainer * container,
                         const SbName & fieldname);

  void addReference(const SbName & name, SoBase * base);
  void removeReference(const SbName & name);
  SoBase * findReference(const SbName & name) const;

  void addRoute(const SbName & fromnode, const SbName & fromfield,
                const SbName & tonode, const SbName & tofield);

  SbName getProtoName(void) const;

  virtual SbBool readInstance(SoInput * in, unsigned short flags);
  virtual void write(SoWriteAction * action);

protected:

  virtual ~SoProto();
  virtual void destroy(void);

private:
  SbBool writeInterface(SoOutput * out);
  SbBool writeDefinition(SoWriteAction * action);

  SbBool readInterface(SoInput * in);
  SbBool readDefinition(SoInput * in);

  SbBool writeURLs(SoOutput * out);
  SoProtoP * pimpl;
  friend class SoProtoP;

  SbBool setupExtern(SoInput * in, SoProto * externproto);

  SoNode * createInstanceRoot(SoProtoInstance * inst) const;
  void connectISRefs(SoProtoInstance * inst, SoNode * src, SoNode * dst) const;
};

#line 96 "c:\\coin3d\\include\\inventor\\misc\\soproto.h"
#line 76 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 1 "c:\\coin3d\\include\\inventor\\details\\sodetail.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sotype.h"















































































































































#line 28 "c:\\coin3d\\include\\inventor\\details\\sodetail.h"


class __declspec(dllimport) SoDetail {

public:
  virtual ~SoDetail();

  static void initClass(void);
  static void initClasses(void);

  virtual SoDetail * copy(void) const = 0;

  virtual SoType getTypeId(void) const = 0;
  SbBool isOfType(const SoType type) const;

  static SoType getClassTypeId(void);

protected:
  SoDetail(void);

private:
  static SoType classTypeId;
};

#line 53 "c:\\coin3d\\include\\inventor\\details\\sodetail.h"
#line 77 "h:\\c_projekte\\elansim\\soqtlib.h"

#line 79 "h:\\c_projekte\\elansim\\soqtlib.h"
#line 10 "h:\\c_projekte\\elansim\\iointerface.h"







class IOInterface  
{
public:

	IOInterface();
	virtual ~IOInterface();








	

	


	enum status { LOCAL, NET } IOStatus;

	enum Flag { 
			logout				= 1, 
			login				= 2,
			loginaccepted		= 4,
			listrequest			= 8,
			lists				= 16,
			texturerequest		= 32,
			textures			= 64,
			scenerequest		= 128,
			scene				= 256,
			cur_scenerequest	= 512,
			movement			= 1024,
			event				= 2048,
			chat				= 4096,
			master				= 8192,
			error				= 16384,
			new_client			= 32768,
			cur_avatar_pos		= 65536,
			growth_generator	= 131072, 
			client_gone			= 262144 };
		
	typedef void (*funcPtr) (void*,int , Flag );



	


	char* load(const char* name, int& size = *new int[0]); 
	void save(const char* name, void* buffer, int size);
	int saveScene(const char* name, SoVRMLGroup* scene);
	int disconnectFromServer();
	static IOInterface* getInstance();
	int sendData(void *data, int size, Flag flag);
	SbStringList* getTextureList();
	SbStringList* getAvatarList();

	static void addCallback(funcPtr callback, int flaglist );

		






	
	int establishConnectionByIP(const char* srv_ip, unsigned short int srv_port);	

		








	int establishConnectionByName(const char* srv_name, unsigned short int srv_port);

private:

	static funcPtr callback[20];
	SbString inBuffer;
	Flag getFlag();
	unsigned int getSize();
	void setBuffer(void* buffer, int& size, Flag flag);
	void callFunction(Flag flag, char* buffer, int size);


	


	SoTimerSensor* dataReceiveTimer;
	static IOInterface* me;
	int client_socket, bytes_recv, bytes_sent, bytes_to_receive, msg_size;
	sockaddr_in server_addr;
	hostent *server_info;
	WSADATA wsaData;
	char disconnect_command[5], *buffer, *offset;
	SbString* string;

	


	static void dataReceiveLoop(void* data, SoSensor*);

	static void loadCB(void* data, SoSensor*);
	
	char* getServerByName(const char* srv_name);
	int receiveData();
    int getMsgSize(char*);
	SoVRMLGroup* read(char* buffer, unsigned int size);
};

#line 134 "h:\\c_projekte\\elansim\\iointerface.h"
#line 16 "h:\\c_projekte\\elansim\\listdialog.h"
class QVBoxLayout; 
class QHBoxLayout; 
class QGridLayout; 
class QGroupBox;
class QLabel;
class QLineEdit;
class QListView;
class QListViewItem;
class QMultiLineEdit;
class QPushButton;

class Shellwidget;
class WaitDialog;



class ListDialog : public QDialog
{ 
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;

public:

    ListDialog( QWidget* parent = 0, const char* name = 0, bool modal = 0, WFlags fl = 0 );
    ~ListDialog();

	void setItemList(void* data, int size);
	void setAvatarNr(int av);
	char* getBuffer() { return buffer; }

	WaitDialog* wd;

private:


	char* buffer;
	Shellwidget* parent;
	QPixmap *scenePix,
			*sessionPix;
	QIconSet *sceneIco,
			 *sessionIco;
	
	static ListDialog* me;
    QGroupBox* frmData;
    QLineEdit* LineEdit5;
    QLabel* lblLastChange;
    QLineEdit* LineEdit6;
    QMultiLineEdit* MultiLineEdit2;
    QLabel* lblName;
    QLabel* lblDescription;
    QGroupBox* frmList;
    QListView* list;
    QPushButton* btnOK;
    QPushButton* btnCancel;

	IOInterface* io;

	struct Item {
		int id;
		int SceneId;
		int SessionId;
		QListViewItem* object;
	} item[ 500 ];
	
	int itemCount; 
	int avatarNr;

	void buildDialog();

private :

	void ok();
	void cancel();
	void itemSelected(QListViewItem*);

};

#line 93 "h:\\c_projekte\\elansim\\listdialog.h"
#line 4 "h:\\c_projekte\\elansim\\shellwidget.cpp"
#line 1 "h:\\c_projekte\\elansim\\chat.h"











#line 1 "c:\\qt\\include\\qvariant.h"

































































































































































































































































































































#line 13 "h:\\c_projekte\\elansim\\chat.h"
#line 1 "c:\\qt\\include\\qdialog.h"






















































































































#line 14 "h:\\c_projekte\\elansim\\chat.h"
class QVBoxLayout; 
class QHBoxLayout; 
class QGridLayout; 
class QCheckBox;
class QLineEdit;
class QMultiLineEdit;
class QPushButton;



class Connection;

class ChatDialog : public QDialog
{ 
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;

public:
    ChatDialog( QWidget* parent = 0, const char* name = 0, bool modal = 0, 
		WFlags fl = WStyle_Customize|WStyle_DialogBorder|WStyle_Title );
    ~ChatDialog();
	
    QCheckBox* chkDisableChat;

	void setText(const char* text);

private:

	QWidget* parent;

    QMultiLineEdit* txtOutput;
    QLineEdit* txtInput;
    QPushButton* btnHide;
    QPushButton* btnOK;

	void buildDialog();
	void keyPressEvent(QKeyEvent* e);
	void closeEvent(QCloseEvent* e);

private :

	void ok();
	void cancel();	
};

#line 59 "h:\\c_projekte\\elansim\\chat.h"
#line 5 "h:\\c_projekte\\elansim\\shellwidget.cpp"
#line 1 "h:\\c_projekte\\elansim\\aboutdialog.h"



#line 1 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qapplication.h"









































#line 1 "c:\\qt\\include\\qwidget.h"




















































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 43 "c:\\qt\\include\\qapplication.h"
#line 1 "c:\\qt\\include\\qasciidict.h"









































#line 1 "c:\\qt\\include\\qgdict.h"









































#line 1 "c:\\qt\\include\\qcollection.h"










































































#line 43 "c:\\qt\\include\\qgdict.h"
#line 1 "c:\\qt\\include\\qstring.h"
























































































































































































































































































































































































































































































































































































































































































































































































































































#line 44 "c:\\qt\\include\\qgdict.h"
#line 45 "c:\\qt\\include\\qgdict.h"

class QGDictIterator;
class QGDItList;


class QBaseBucket				
{
public:
    QCollection::Item	 getData()			{ return data; }
    QCollection::Item	 setData( QCollection::Item d ) { return data = d; }
    QBaseBucket		*getNext()			{ return next; }
    void		 setNext( QBaseBucket *n)	{ next = n; }
protected:
    QBaseBucket( QCollection::Item d, QBaseBucket *n ) : data(d), next(n) {}
    QCollection::Item	 data;
    QBaseBucket		*next;
};

class QStringBucket : public QBaseBucket
{
public:
    QStringBucket( const QString &k, QCollection::Item d, QBaseBucket *n )
	: QBaseBucket(d,n), key(k)		{}
    const QString  &getKey() const		{ return key; }
private:
    QString	    key;
};

class QAsciiBucket : public QBaseBucket
{
public:
    QAsciiBucket( const char *k, QCollection::Item d, QBaseBucket *n )
	: QBaseBucket(d,n), key(k) {}
    const char *getKey() const { return key; }
private:
    const char *key;
};

class QIntBucket : public QBaseBucket
{
public:
    QIntBucket( long k, QCollection::Item d, QBaseBucket *n )
	: QBaseBucket(d,n), key(k) {}
    long  getKey() const { return key; }
private:
    long  key;
};

class QPtrBucket : public QBaseBucket
{
public:
    QPtrBucket( void *k, QCollection::Item d, QBaseBucket *n )
	: QBaseBucket(d,n), key(k) {}
    void *getKey() const { return key; }
private:
    void *key;
};


class __declspec(dllimport) QGDict : public QCollection	
{
public:
    uint	count() const	{ return numItems; }
    uint	size()	const	{ return vlen; }
    QCollection::Item look_string( const QString& key, QCollection::Item,
				   int );
    QCollection::Item look_ascii( const char *key, QCollection::Item, int );
    QCollection::Item look_int( long key, QCollection::Item, int );
    QCollection::Item look_ptr( void *key, QCollection::Item, int );

    QDataStream &read( QDataStream & );
    QDataStream &write( QDataStream & ) const;
#line 118 "c:\\qt\\include\\qgdict.h"
protected:
    enum KeyType { StringKey, AsciiKey, IntKey, PtrKey };

    QGDict( uint len, KeyType kt, bool cs, bool ck );
    QGDict( const QGDict & );
   ~QGDict();

    QGDict     &operator=( const QGDict & );

    bool	remove_string( const QString &key, QCollection::Item item=0 );
    bool	remove_ascii( const char *key, QCollection::Item item=0 );
    bool	remove_int( long key, QCollection::Item item=0 );
    bool	remove_ptr( void *key, QCollection::Item item=0 );
    QCollection::Item take_string( const QString &key );
    QCollection::Item take_ascii( const char *key );
    QCollection::Item take_int( long key );
    QCollection::Item take_ptr( void *key );

    void	clear();
    void	resize( uint );

    int		hashKeyString( const QString & );
    int		hashKeyAscii( const char * );

    void	statistics() const;


    virtual QDataStream &read( QDataStream &, QCollection::Item & );
    virtual QDataStream &write( QDataStream &, QCollection::Item ) const;
#line 148 "c:\\qt\\include\\qgdict.h"
private:
    QBaseBucket **vec;
    uint	vlen;
    uint	numItems;
    uint	keytype	: 2;
    uint	cases	: 1;
    uint	copyk	: 1;
    QGDItList  *iterators;
    void	   unlink_common( int, QBaseBucket *, QBaseBucket * );
    QStringBucket *unlink_string( const QString &,
				  QCollection::Item item = 0 );
    QAsciiBucket  *unlink_ascii( const char *, QCollection::Item item = 0 );
    QIntBucket    *unlink_int( long, QCollection::Item item = 0 );
    QPtrBucket    *unlink_ptr( void *, QCollection::Item item = 0 );
    void	init( uint, KeyType, bool, bool );
    friend class QGDictIterator;
};


class __declspec(dllimport) QGDictIterator			
{
friend class QGDict;
public:
    QGDictIterator( const QGDict & );
    QGDictIterator( const QGDictIterator & );
    QGDictIterator &operator=( const QGDictIterator & );
   ~QGDictIterator();

    QCollection::Item toFirst();

    QCollection::Item get()	     const;
    QString	      getKeyString() const;
    const char	     *getKeyAscii()  const;
    long	      getKeyInt()    const;
    void	     *getKeyPtr()    const;

    QCollection::Item operator()();
    QCollection::Item operator++();
    QCollection::Item operator+=(uint);

protected:
    QGDict	     *dict;

private:
    QBaseBucket      *curNode;
    uint	      curIndex;
};

inline QCollection::Item QGDictIterator::get() const
{
    return curNode ? curNode->getData() : 0;
}

inline QString QGDictIterator::getKeyString() const
{
    return curNode ? ((QStringBucket*)curNode)->getKey() : QString::null;
}

inline const char *QGDictIterator::getKeyAscii() const
{
    return curNode ? ((QAsciiBucket*)curNode)->getKey() : 0;
}

inline long QGDictIterator::getKeyInt() const
{
    return curNode ? ((QIntBucket*)curNode)->getKey() : 0;
}

inline void *QGDictIterator::getKeyPtr() const
{
    return curNode ? ((QPtrBucket*)curNode)->getKey() : 0;
}


#line 223 "c:\\qt\\include\\qgdict.h"
#line 43 "c:\\qt\\include\\qasciidict.h"
#line 44 "c:\\qt\\include\\qasciidict.h"


template<class type> class __declspec(dllimport) QAsciiDict : public QGDict
{
public:
    QAsciiDict(int size=17, bool caseSensitive=1, bool copyKeys=1 )
	: QGDict(size,AsciiKey,caseSensitive,copyKeys) {}
    QAsciiDict( const QAsciiDict<type> &d ) : QGDict(d) {}
   ~QAsciiDict()			{ clear(); }
    QAsciiDict<type> &operator=(const QAsciiDict<type> &d)
			{ return (QAsciiDict<type>&)QGDict::operator=(d); }
    uint  count()   const		{ return QGDict::count(); }
    uint  size()    const		{ return QGDict::size(); }
    bool  isEmpty() const		{ return QGDict::count() == 0; }

    void  insert( const char *k, const type *d )
					{ QGDict::look_ascii(k,(Item)d,1); }
    void  replace( const char *k, const type *d )
					{ QGDict::look_ascii(k,(Item)d,2); }
    bool  remove( const char *k )	{ return QGDict::remove_ascii(k); }
    type *take( const char *k )		{ return (type *)QGDict::take_ascii(k); }
    type *find( const char *k ) const
		{ return (type *)((QGDict*)this)->QGDict::look_ascii(k,0,0); }
    type *operator[]( const char *k ) const
		{ return (type *)((QGDict*)this)->QGDict::look_ascii(k,0,0); }

    void  clear()			{ QGDict::clear(); }
    void  resize( uint n )		{ QGDict::resize(n); }
    void  statistics() const		{ QGDict::statistics(); }
private:
    void  deleteItem( Item d )		{ if ( del_item ) delete (type *)d; }
};


template<class type> class __declspec(dllimport) QAsciiDictIterator : public QGDictIterator
{
public:
    QAsciiDictIterator(const QAsciiDict<type> &d)
	: QGDictIterator((QGDict &)d) {}
   ~QAsciiDictIterator()      {}
    uint  count()   const     { return dict->count(); }
    bool  isEmpty() const     { return dict->count() == 0; }
    type *toFirst()	      { return (type *)QGDictIterator::toFirst(); }
    operator type *() const   { return (type *)QGDictIterator::get(); }
    type   *current() const   { return (type *)QGDictIterator::get(); }
    const char *currentKey() const { return QGDictIterator::getKeyAscii(); }
    type *operator()()	      { return (type *)QGDictIterator::operator()(); }
    type *operator++()	      { return (type *)QGDictIterator::operator++(); }
    type *operator+=(uint j)  { return (type *)QGDictIterator::operator+=(j);}
};


#line 97 "c:\\qt\\include\\qasciidict.h"
#line 44 "c:\\qt\\include\\qapplication.h"
#line 1 "c:\\qt\\include\\qpalette.h"
















































































































































































#line 45 "c:\\qt\\include\\qapplication.h"
#line 1 "c:\\qt\\include\\qtranslator.h"










































#line 1 "c:\\qt\\include\\qobject.h"























































































































































































































































#line 44 "c:\\qt\\include\\qtranslator.h"
#line 1 "c:\\qt\\include\\qintdict.h"









































#line 1 "c:\\qt\\include\\qgdict.h"






























































































































































































































#line 43 "c:\\qt\\include\\qintdict.h"
#line 44 "c:\\qt\\include\\qintdict.h"


template<class type> class __declspec(dllimport) QIntDict : public QGDict
{
public:
    QIntDict(int size=17) : QGDict(size,IntKey,0,0) {}
    QIntDict( const QIntDict<type> &d ) : QGDict(d) {}
   ~QIntDict()				{ clear(); }
    QIntDict<type> &operator=(const QIntDict<type> &d)
			{ return (QIntDict<type>&)QGDict::operator=(d); }
    uint  count()   const		{ return QGDict::count(); }
    uint  size()    const		{ return QGDict::size(); }
    bool  isEmpty() const		{ return QGDict::count() == 0; }
    void  insert( long k, const type *d )
					{ QGDict::look_int(k,(Item)d,1); }
    void  replace( long k, const type *d )
					{ QGDict::look_int(k,(Item)d,2); }
    bool  remove( long k )		{ return QGDict::remove_int(k); }
    type *take( long k )		{ return (type*)QGDict::take_int(k); }
    type *find( long k ) const
		{ return (type *)((QGDict*)this)->QGDict::look_int(k,0,0); }
    type *operator[]( long k ) const
		{ return (type *)((QGDict*)this)->QGDict::look_int(k,0,0); }
    void  clear()			{ QGDict::clear(); }
    void  resize( uint n )		{ QGDict::resize(n); }
    void  statistics() const		{ QGDict::statistics(); }
private:
    void  deleteItem( Item d );
};





#line 79 "c:\\qt\\include\\qintdict.h"

template<class type> inline void QIntDict<type>::deleteItem( QCollection::Item d )
{
    if ( del_item ) delete (type *)d;
}

template<class type> class __declspec(dllimport) QIntDictIterator : public QGDictIterator
{
public:
    QIntDictIterator(const QIntDict<type> &d) :QGDictIterator((QGDict &)d) {}
   ~QIntDictIterator()	      {}
    uint  count()   const     { return dict->count(); }
    bool  isEmpty() const     { return dict->count() == 0; }
    type *toFirst()	      { return (type *)QGDictIterator::toFirst(); }
    operator type *()  const  { return (type *)QGDictIterator::get(); }
    type *current()    const  { return (type *)QGDictIterator::get(); }
    long  currentKey() const  { return QGDictIterator::getKeyInt(); }
    type *operator()()	      { return (type *)QGDictIterator::operator()(); }
    type *operator++()	      { return (type *)QGDictIterator::operator++(); }
    type *operator+=(uint j)  { return (type *)QGDictIterator::operator+=(j);}
};


#line 103 "c:\\qt\\include\\qintdict.h"
#line 45 "c:\\qt\\include\\qtranslator.h"
#line 46 "c:\\qt\\include\\qtranslator.h"



class QTranslatorPrivate;


class __declspec(dllimport) QTranslatorMessage
{
public:
    QTranslatorMessage();
    QTranslatorMessage( const char * context,
			const char * sourceText,
			const char * comment,
			const QString& translation = QString::null );
    QTranslatorMessage( QDataStream & );
    QTranslatorMessage( const QTranslatorMessage & m );

    QTranslatorMessage & operator=( const QTranslatorMessage & m );

    uint hash() const { return h; }
    const char *context() const { return cx; }
    const char *sourceText() const { return st; }
    const char *comment() const { return cm; }

    void setTranslation( const QString & translation ) { tn = translation; }
    QString translation() const { return tn; }

    enum Prefix { NoPrefix, Hash, HashContext, HashContextSourceText,
    		  HashContextSourceTextComment };
    void write( QDataStream & s, bool strip,
		Prefix prefix = HashContextSourceTextComment ) const;
    Prefix commonPrefix( const QTranslatorMessage& ) const;

    bool operator==( const QTranslatorMessage& m ) const;
    bool operator!=( const QTranslatorMessage& m ) const
    { return !operator==( m ); }
    bool operator<( const QTranslatorMessage& m ) const;
    bool operator<=( const QTranslatorMessage& m ) const
    { return !operator>( m ); }
    bool operator>( const QTranslatorMessage& m ) const
    { return this->operator<( m ); }
    bool operator>=( const QTranslatorMessage& m ) const
    { return !operator<( m ); }

private:
    uint h;
    QCString cx;
    QCString st;
    QCString cm;
    QString tn;

    enum Tag { Tag_End = 1, Tag_SourceText16, Tag_Translation, Tag_Context16,
	       Tag_Hash, Tag_SourceText, Tag_Context, Tag_Comment,
	       Tag_Obsolete1 };
};


class __declspec(dllimport) QTranslator: public QObject
{
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
public:
    QTranslator( QObject * parent, const char * name = 0 );
    ~QTranslator();


    QString find( const char *, const char *, const char * ) const;

    virtual QString find( const char *, const char * ) const;

    QTranslatorMessage findMessage( const char *, const char *,
				    const char * ) const;

    bool load( const QString & filename,
	       const QString & directory = QString::null,
	       const QString & search_delimiters = QString::null,
	       const QString & suffix = QString::null );

    enum SaveMode { Everything, Stripped };

    bool save( const QString & filename, SaveMode mode = Everything );

    void clear();

    void insert( const QTranslatorMessage& );

    void insert( const char *, const char *, const QString & );
    void remove( const QTranslatorMessage& );

    void remove( const char *, const char * );
    bool contains( const char *, const char *, const char * ) const;

    bool contains( const char *, const char * ) const;



    void squeeze( SaveMode );
    void squeeze();
    void unsqueeze();

    QValueList<QTranslatorMessage> messages() const;

private:
    QTranslatorPrivate * d;

private:	



#line 155 "c:\\qt\\include\\qtranslator.h"
};

#line 158 "c:\\qt\\include\\qtranslator.h"

#line 160 "c:\\qt\\include\\qtranslator.h"
#line 46 "c:\\qt\\include\\qapplication.h"
#line 47 "c:\\qt\\include\\qapplication.h"

class QSessionManager;
class QStyle;
class QTranslator;


#line 54 "c:\\qt\\include\\qapplication.h"
template <class type> class QList;

class QApplication;
extern __declspec(dllimport) QApplication *qApp;		


class QMutex;
class QSemaphore;
#line 63 "c:\\qt\\include\\qapplication.h"




class __declspec(dllimport) QApplication : public QObject
{
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
public:
    QApplication( int &argc, char **argv);
    QApplication( int &argc, char **argv, bool GUIenabled );
    enum Type { Tty, GuiClient, GuiServer };
    QApplication( int &argc, char **argv, Type );



#line 79 "c:\\qt\\include\\qapplication.h"
    virtual ~QApplication();

    int		    argc()	const;
    char	  **argv()	const;

    Type type() const;


    static QStyle  &style();
    static void	    setStyle( QStyle* );
#line 90 "c:\\qt\\include\\qapplication.h"

    enum ColorMode { NormalColors, CustomColors };
    static ColorMode colorMode();
    static void      setColorMode( QApplication::ColorMode );
#line 95 "c:\\qt\\include\\qapplication.h"

    enum ColorSpec { NormalColor=0, CustomColor=1, ManyColor=2 };
    static int	     colorSpec();
    static void      setColorSpec( int );

    static QCursor  *overrideCursor();
    static void	     setOverrideCursor( const QCursor &, bool replace=0 );
    static void	     restoreOverrideCursor();
#line 104 "c:\\qt\\include\\qapplication.h"
    static bool	     hasGlobalMouseTracking();
    static void	     setGlobalMouseTracking( bool enable );

    static QPalette  palette( const QWidget* = 0 );
    static void	     setPalette( const QPalette &, bool informWidgets=0,
				 const char* className = 0 );
#line 111 "c:\\qt\\include\\qapplication.h"
    static QFont     font( const QWidget* = 0 );
    static void	     setFont( const QFont &, bool informWidgets=0,
			      const char* className = 0 );
    static QFontMetrics fontMetrics();

    QWidget	    *mainWidget()  const;
    virtual void     setMainWidget( QWidget * );
    virtual void     polish( QWidget * );

    static QWidgetList *allWidgets();
    static QWidgetList *topLevelWidgets();
    static QWidget     *desktop();
    static QWidget     *activePopupWidget();
    static QWidget     *activeModalWidget();
    static QClipboard  *clipboard();
    QWidget	       *focusWidget() const;
    QWidget	       *activeWindow() const;

    static QWidget  *widgetAt( int x, int y, bool child=0 );
    static QWidget  *widgetAt( const QPoint &, bool child=0 );

    int		     exec();
    void	     processEvents();
    void	     processEvents( int maxtime );
    void	     processOneEvent();
    int		     enter_loop();
    void	     exit_loop();
    int		     loopLevel() const;
    static void	     exit( int retcode=0 );

    static bool	     sendEvent( QObject *receiver, QEvent *event );
    static void	     postEvent( QObject *receiver, QEvent *event );
    static void	     sendPostedEvents( QObject *receiver, int event_type );
    static void	     sendPostedEvents();

    static void      removePostedEvents( QObject *receiver );

    virtual bool     notify( QObject *, QEvent * );

    static bool	     startingUp();
    static bool	     closingDown();

    static void	     flushX();
    static void	     syncX();

    static void	     beep();


    void	     setDefaultCodec( QTextCodec* );
    QTextCodec*	     defaultCodec() const;
    void	     installTranslator( QTranslator * );
    void	     removeTranslator( QTranslator * );
#line 164 "c:\\qt\\include\\qapplication.h"
    QString	     translate( const char *, const char * ) const;
    QString	     translate( const char *, const char *,
				const char * ) const;

    static void      setWinStyleHighlightColor( const QColor & );
    static const QColor &winStyleHighlightColor();
#line 171 "c:\\qt\\include\\qapplication.h"
    static void      setDesktopSettingsAware( bool );
    static bool      desktopSettingsAware();

    static void      setCursorFlashTime( int );
    static int       cursorFlashTime();

    static void      setDoubleClickInterval( int );
    static int       doubleClickInterval();

    static void      setWheelScrollLines( int );
    static int       wheelScrollLines();

    static void	     setGlobalStrut( const QSize & );
    static QSize     globalStrut();

    static void setStartDragTime( int ms );
    static int startDragTime();
    static void setStartDragDistance( int l );
    static int startDragDistance();

    static bool	    isEffectEnabled( Qt::UIEffect );
    static void	    setEffectEnabled( Qt::UIEffect, bool enable = 1 );





#line 199 "c:\\qt\\include\\qapplication.h"
    virtual bool     winEventFilter( MSG * );












#line 213 "c:\\qt\\include\\qapplication.h"


    static WindowsVersion winVersion();
    void	     winFocus( QWidget *, bool );
    static void	     winMouseButtonUp();
#line 219 "c:\\qt\\include\\qapplication.h"


    
    bool	     isSessionRestored() const;
    QString	     sessionId() const;
    virtual void     commitData( QSessionManager& sm );
    virtual void     saveState( QSessionManager& sm );
#line 227 "c:\\qt\\include\\qapplication.h"



#line 231 "c:\\qt\\include\\qapplication.h"
    void	     wakeUpGuiThread();

    void	     lock();
    void	     unlock(bool wakeUpGui = 1);
    bool 	     locked();
#line 237 "c:\\qt\\include\\qapplication.h"

protected:
    void	     lastWindowClosed();
    void	     aboutToQuit();
    void	     guiThreadAwake();

public :
    void	     quit();
    void	     closeAllWindows();

private:
    void	     construct( int &argc, char **argv, Type );
    bool	     processNextEvent( bool );
    void	     initialize( int, char ** );
    void	     init_precmdline();
    void	     process_cmdline( int* argcptr, char ** argv );



#line 257 "c:\\qt\\include\\qapplication.h"
    

    static QMutex * qt_mutex;
#line 261 "c:\\qt\\include\\qapplication.h"

    int		     app_argc;
    char	   **app_argv;
    bool	     quit_now;
    int		     quit_code;
    static QStyle   *app_style;
    static int	     app_cspec;

    static QPalette *app_pal;
#line 271 "c:\\qt\\include\\qapplication.h"
    static QFont    *app_font;

    static QCursor  *app_cursor;
#line 275 "c:\\qt\\include\\qapplication.h"
    static int	     app_tracking;
    static bool	     is_app_running;
    static bool	     is_app_closing;
    static bool	     app_exit_loop;
    static int	     loop_level;
    static QWidget  *main_widget;
    static QWidget  *focus_widget;
    static QWidget  *active_window;
    static bool	     obey_desktop_settings;
    static int	     cursor_flash_time;
    static int	     mouse_double_click_time;
    static int	     wheel_scroll_lines;

    static bool	     animate_ui;
    static bool	     animate_menu;
    static bool	     animate_tooltip;
    static bool	     animate_combo;
    static bool	     fade_menu;
    static bool	     fade_tooltip;

    QList<QTranslator> *translators;

    QSessionManager *session_manager;
    QString	     session_id;
    bool	     is_session_restored;
#line 301 "c:\\qt\\include\\qapplication.h"


#line 304 "c:\\qt\\include\\qapplication.h"

    static QSize     app_strut;

    static QAsciiDict<QPalette> *app_palettes;
    static QAsciiDict<QFont>    *app_fonts;

    static QWidgetList *popupWidgets;
    bool	     inPopupMode() const;
    void	     closePopup( QWidget *popup );
    void	     openPopup( QWidget *popup );
    void 	     setActiveWindow( QWidget* act );

    static void      removePostedEvent( QEvent * );

    friend class QWidget;
    friend class QETWidget;
    friend class QEvent;

private: 



#line 327 "c:\\qt\\include\\qapplication.h"
};


inline int QApplication::argc() const
{
    return app_argc;
}

inline char **QApplication::argv() const
{
    return app_argv;
}

inline QStyle& QApplication::style()
{
    return *app_style;
}
#line 345 "c:\\qt\\include\\qapplication.h"

inline QCursor *QApplication::overrideCursor()
{
    return app_cursor;
}
#line 351 "c:\\qt\\include\\qapplication.h"
inline bool QApplication::hasGlobalMouseTracking()
{
    return app_tracking > 0;
}

inline QWidget *QApplication::mainWidget() const
{
    return main_widget;
}

inline QWidget *QApplication::focusWidget() const
{
    return focus_widget;
}

inline QWidget *QApplication::activeWindow() const
{
    return active_window;
}

inline QWidget *QApplication::widgetAt( const QPoint &p, bool child )
{
    return widgetAt( p.x(), p.y(), child );
}

inline bool QApplication::inPopupMode() const
{
    return popupWidgets != 0;
}

inline bool QApplication::isSessionRestored() const
{
    return is_session_restored;
}

inline QString QApplication::sessionId() const
{
    return session_id;
}
#line 391 "c:\\qt\\include\\qapplication.h"
inline QSize QApplication::globalStrut()
{
    return app_strut;
}

inline bool QApplication::sendEvent( QObject *receiver, QEvent *event )
{ return qApp->notify( receiver, event ); }










#line 409 "c:\\qt\\include\\qapplication.h"
#line 2 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qframe.h"







































































































































































#line 3 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qlistbox.h"









































#line 1 "c:\\qt\\include\\qscrollview.h"








































#line 1 "c:\\qt\\include\\qframe.h"







































































































































































#line 42 "c:\\qt\\include\\qscrollview.h"
#line 1 "c:\\qt\\include\\qscrollbar.h"








































class QTimer;


#line 1 "c:\\qt\\include\\qwidget.h"




















































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 45 "c:\\qt\\include\\qscrollbar.h"
#line 1 "c:\\qt\\include\\qrangecontrol.h"









































#line 1 "c:\\qt\\include\\qglobal.h"


























































































































































































































































































































































































































































































































































































































































#line 43 "c:\\qt\\include\\qrangecontrol.h"
#line 44 "c:\\qt\\include\\qrangecontrol.h"




class QRangeControlPrivate;


class __declspec(dllimport) QRangeControl
{
public:
    QRangeControl();
    QRangeControl( int minValue, int maxValue,
		   int lineStep, int pageStep, int value );

    int		value()		const;
    void	setValue( int );
    void	addPage();
    void	subtractPage();
    void	addLine();
    void	subtractLine();

    int		minValue()	const;
    int		maxValue()	const;
    void	setRange( int minValue, int maxValue );

    int		lineStep()	const;
    int		pageStep()	const;
    void	setSteps( int line, int page );

    int		bound( int ) const;

protected:
    int		positionFromValue( int val, int space ) const;
    int		valueFromPosition( int pos, int space ) const;
    void	directSetValue( int val );
    int		prevValue()	const;

    virtual void valueChange();
    virtual void rangeChange();
    virtual void stepChange();

private:
    int		minVal, maxVal;
    int		line, page;
    int		val, prevVal;

    QRangeControlPrivate * d;

private:	



#line 97 "c:\\qt\\include\\qrangecontrol.h"
};


inline int QRangeControl::value() const
{ return val; }

inline int QRangeControl::prevValue() const
{ return prevVal; }

inline int QRangeControl::minValue() const
{ return minVal; }

inline int QRangeControl::maxValue() const
{ return maxVal; }

inline int QRangeControl::lineStep() const
{ return line; }

inline int QRangeControl::pageStep() const
{ return page; }


#line 120 "c:\\qt\\include\\qrangecontrol.h"

#line 122 "c:\\qt\\include\\qrangecontrol.h"
#line 46 "c:\\qt\\include\\qscrollbar.h"
#line 1 "c:\\qt\\include\\qdrawutil.h"









































#line 1 "c:\\qt\\include\\qpainter.h"










































#line 1 "c:\\qt\\include\\qpaintdevice.h"































































































































































































































































































































































#line 44 "c:\\qt\\include\\qpainter.h"
#line 1 "c:\\qt\\include\\qcolor.h"














































































































































































































#line 45 "c:\\qt\\include\\qpainter.h"
#line 1 "c:\\qt\\include\\qfontmetrics.h"






















































































































#line 46 "c:\\qt\\include\\qpainter.h"
#line 1 "c:\\qt\\include\\qfontinfo.h"


































































































#line 47 "c:\\qt\\include\\qpainter.h"
#line 1 "c:\\qt\\include\\qregion.h"


























































































































































#line 48 "c:\\qt\\include\\qpainter.h"
#line 1 "c:\\qt\\include\\qpen.h"









































#line 1 "c:\\qt\\include\\qcolor.h"














































































































































































































#line 43 "c:\\qt\\include\\qpen.h"
#line 1 "c:\\qt\\include\\qshared.h"























































#line 44 "c:\\qt\\include\\qpen.h"
#line 45 "c:\\qt\\include\\qpen.h"


class __declspec(dllimport) QPen: public Qt
{
friend class QPainter;
public:
    QPen();
    QPen( PenStyle );
    QPen( const QColor &color, uint width=0, PenStyle style=SolidLine );
    QPen( const QColor &cl, uint w, PenStyle s, PenCapStyle c, PenJoinStyle j);
    QPen( const QPen & );
   ~QPen();
    QPen &operator=( const QPen & );

    PenStyle	style() const		{ return data->style; }
    void	setStyle( PenStyle );
    uint	width() const		{ return data->width; }
    void	setWidth( uint );
    const QColor &color() const		{ return data->color; }
    void	setColor( const QColor & );
    PenCapStyle	capStyle() const;
    void	setCapStyle( PenCapStyle );
    PenJoinStyle joinStyle() const;
    void	setJoinStyle( PenJoinStyle );

    bool	operator==( const QPen &p ) const;
    bool	operator!=( const QPen &p ) const
					{ return !(operator==(p)); }

private:
    QPen	copy()	const;
    void	detach();
    void	init( const QColor &, uint, uint );
    struct QPenData : public QShared {		
	PenStyle  style;
	uint	  width;
	QColor	  color;
	Q_UINT16  linest;
    } *data;
};






__declspec(dllimport) QDataStream &operator<<( QDataStream &, const QPen & );
__declspec(dllimport) QDataStream &operator>>( QDataStream &, QPen & );
#line 94 "c:\\qt\\include\\qpen.h"

#line 96 "c:\\qt\\include\\qpen.h"
#line 49 "c:\\qt\\include\\qpainter.h"
#line 1 "c:\\qt\\include\\qbrush.h"



























































































#line 50 "c:\\qt\\include\\qpainter.h"
#line 1 "c:\\qt\\include\\qpointarray.h"









































#line 1 "c:\\qt\\include\\qarray.h"














































































































#line 43 "c:\\qt\\include\\qpointarray.h"
#line 1 "c:\\qt\\include\\qpoint.h"























































































































































































































#line 44 "c:\\qt\\include\\qpointarray.h"
#line 45 "c:\\qt\\include\\qpointarray.h"



template class __declspec(dllimport) QArray<QPoint>;
#line 50 "c:\\qt\\include\\qpointarray.h"

class __declspec(dllimport) QPointArray : public QArray<QPoint>
{
public:
    QPointArray() {}
    ~QPointArray() {}
    QPointArray( int size ) : QArray<QPoint>( size ) {}
    QPointArray( const QPointArray &a ) : QArray<QPoint>( a ) {}
    QPointArray( const QRect &r, bool closed=0 );
    QPointArray( int nPoints, const QCOORD *points );

    QPointArray	 &operator=( const QPointArray &a )
	{ return (QPointArray&)assign( a ); }

    QPointArray copy() const
	{ QPointArray tmp; return *((QPointArray*)&tmp.duplicate(*this)); }

    void    translate( int dx, int dy );
    QRect   boundingRect() const;

    void    point( uint i, int *x, int *y ) const;
    QPoint  point( uint i ) const;
    void    setPoint( uint i, int x, int y );
    void    setPoint( uint i, const QPoint &p );
    bool    setPoints( int nPoints, const QCOORD *points );
    bool    setPoints( int nPoints, int firstx, int firsty, ... );
    bool    putPoints( int index, int nPoints, const QCOORD *points );
    bool    putPoints( int index, int nPoints, int firstx, int firsty, ... );

    void    makeArc( int x, int y, int w, int h, int a1, int a2 );
    void    makeEllipse( int x, int y, int w, int h );
    void    makeArc( int x, int y, int w, int h, int a1, int a2,
		     const QWMatrix& );
    QPointArray quadBezier() const;

    void*  shortPoints( int index = 0, int nPoints = -1 ) const;
    static void cleanBuffers();

protected:
    static uint splen;
    static void* sp;
};






__declspec(dllimport) QDataStream &operator<<( QDataStream &, const QPointArray & );
__declspec(dllimport) QDataStream &operator>>( QDataStream &, QPointArray & );
#line 101 "c:\\qt\\include\\qpointarray.h"





inline void QPointArray::setPoint( uint i, const QPoint &p )
{
    setPoint( i, p.x(), p.y() );
}


#line 113 "c:\\qt\\include\\qpointarray.h"
#line 51 "c:\\qt\\include\\qpainter.h"
#line 1 "c:\\qt\\include\\qwmatrix.h"









































#line 1 "c:\\qt\\include\\qwindowdefs.h"














































































































































































#line 43 "c:\\qt\\include\\qwmatrix.h"
#line 1 "c:\\qt\\include\\qpointarray.h"
















































































































#line 44 "c:\\qt\\include\\qwmatrix.h"
#line 1 "c:\\qt\\include\\qrect.h"




























































































































































































































































#line 45 "c:\\qt\\include\\qwmatrix.h"
#line 46 "c:\\qt\\include\\qwmatrix.h"




class __declspec(dllimport) QWMatrix					
{
public:
    QWMatrix();
    QWMatrix( double m11, double m12, double m21, double m22,
	      double dx, double dy );

    void	setMatrix( double m11, double m12, double m21, double m22,
			   double dx,  double dy );

    double	m11() const { return _m11; }
    double	m12() const { return _m12; }
    double	m21() const { return _m21; }
    double	m22() const { return _m22; }
    double	dx()  const { return _dx; }
    double	dy()  const { return _dy; }

    void	map( int x, int y, int *tx, int *ty )	      const;
    void	map( double x, double y, double *tx, double *ty ) const;
    QPoint	map( const QPoint & )	const;
    QRect	map( const QRect & )	const;
    QPointArray map( const QPointArray & ) const;

    void	reset();

    QWMatrix   &translate( double dx, double dy );
    QWMatrix   &scale( double sx, double sy );
    QWMatrix   &shear( double sh, double sv );
    QWMatrix   &rotate( double a );

    QWMatrix	invert( bool * = 0 ) const;

    bool	operator==( const QWMatrix & ) const;
    bool	operator!=( const QWMatrix & ) const;
    QWMatrix   &operator*=( const QWMatrix & );

private:
    QWMatrix   &bmul( const QWMatrix & );
    double	_m11, _m12;
    double	_m21, _m22;
    double	_dx,  _dy;
};


__declspec(dllimport) QWMatrix operator*( const QWMatrix &, const QWMatrix & );






__declspec(dllimport) QDataStream &operator<<( QDataStream &, const QWMatrix & );
__declspec(dllimport) QDataStream &operator>>( QDataStream &, QWMatrix & );

#line 105 "c:\\qt\\include\\qwmatrix.h"

#line 107 "c:\\qt\\include\\qwmatrix.h"
#line 52 "c:\\qt\\include\\qpainter.h"
#line 53 "c:\\qt\\include\\qpainter.h"

class QGfx;
class QTextCodec;


class __declspec(dllimport) QPainter : public Qt
{
public:
    QPainter();
    QPainter( const QPaintDevice * );
    QPainter( const QPaintDevice *, const QWidget * );
   ~QPainter();

    bool	begin( const QPaintDevice * );
    bool	begin( const QPaintDevice *, const QWidget * );
    bool	end();
    QPaintDevice *device() const;





    static void redirect( QPaintDevice *pdev, QPaintDevice *replacement );

    bool	isActive() const;

    void	flush();
    void	save();
    void	restore();

  

    QFontMetrics fontMetrics()	const;
    QFontInfo	 fontInfo()	const;

    const QFont &font()		const;
    void	setFont( const QFont & );
    const QPen &pen()		const;
    void	setPen( const QPen & );
    void	setPen( PenStyle );
    void	setPen( const QColor & );
    const QBrush &brush()	const;
    void	setBrush( const QBrush & );
    void	setBrush( BrushStyle );
    void	setBrush( const QColor & );
    QPoint	pos() const;

  

    const QColor &backgroundColor() const;
    void	setBackgroundColor( const QColor & );
    BGMode	backgroundMode() const;
    void	setBackgroundMode( BGMode );
    RasterOp	rasterOp()	const;
    void	setRasterOp( RasterOp );
    const QPoint &brushOrigin() const;
    void	setBrushOrigin( int x, int y );
    void	setBrushOrigin( const QPoint & );

  




    bool	hasViewXForm() const;
    bool	hasWorldXForm() const;


    void	setViewXForm( bool );		
    QRect	window()       const;		
    void	setWindow( const QRect & );	
    void	setWindow( int x, int y, int w, int h );
    QRect	viewport()   const;		
    void	setViewport( const QRect & );	
    void	setViewport( int x, int y, int w, int h );

    void	setWorldXForm( bool );		
    const QWMatrix &worldMatrix() const;	
    void	setWorldMatrix( const QWMatrix &, bool combine=0 );

    void	saveWorldMatrix();
    void	restoreWorldMatrix();

    void	scale( double sx, double sy );
    void	shear( double sh, double sv );
    void	rotate( double a );
#line 140 "c:\\qt\\include\\qpainter.h"
    void	translate( double dx, double dy );
    void	resetXForm();

    QPoint	xForm( const QPoint & ) const;	
    QRect	xForm( const QRect & )	const;
    QPointArray xForm( const QPointArray & ) const;
    QPointArray xForm( const QPointArray &, int index, int npoints ) const;
    QPoint	xFormDev( const QPoint & ) const; 
    QRect	xFormDev( const QRect & )  const;
    QPointArray xFormDev( const QPointArray & ) const;
    QPointArray xFormDev( const QPointArray &, int index, int npoints ) const;

  

    void	setClipping( bool );		
    bool	hasClipping() const;
    const QRegion &clipRegion() const;
    void	setClipRect( const QRect & );	
    void	setClipRect( int x, int y, int w, int h );
    void	setClipRegion( const QRegion &);

  

    void	drawPoint( int x, int y );
    void	drawPoint( const QPoint & );
    void	drawPoints( const QPointArray& a,
			    int index=0, int npoints=-1 );
    void	moveTo( int x, int y );
    void	moveTo( const QPoint & );
    void	lineTo( int x, int y );
    void	lineTo( const QPoint & );
    void	drawLine( int x1, int y1, int x2, int y2 );
    void	drawLine( const QPoint &, const QPoint & );
    void	drawRect( int x, int y, int w, int h );
    void	drawRect( const QRect & );
    void	drawWinFocusRect( int x, int y, int w, int h );
    void	drawWinFocusRect( int x, int y, int w, int h,
				  const QColor &bgColor );
    void	drawWinFocusRect( const QRect & );
    void	drawWinFocusRect( const QRect &,
				  const QColor &bgColor );
    void	drawRoundRect( int x, int y, int w, int h, int, int );
    void	drawRoundRect( const QRect &, int, int );
    void	drawRoundRect( int x, int y, int w, int h );
    void	drawRoundRect( const QRect & );
    void	drawEllipse( int x, int y, int w, int h );
    void	drawEllipse( const QRect & );
    void	drawArc( int x, int y, int w, int h, int a, int alen );
    void	drawArc( const QRect &, int a, int alen );
    void	drawPie( int x, int y, int w, int h, int a, int alen );
    void	drawPie( const QRect &, int a, int alen );
    void	drawChord( int x, int y, int w, int h, int a, int alen );
    void	drawChord( const QRect &, int a, int alen );
    void	drawLineSegments( const QPointArray &,
				  int index=0, int nlines=-1 );
    void	drawPolyline( const QPointArray &,
			      int index=0, int npoints=-1 );
    void	drawPolygon( const QPointArray &, bool winding=0,
			     int index=0, int npoints=-1 );
    void	drawQuadBezier( const QPointArray &, int index=0 );
    void	drawPixmap( int x, int y, const QPixmap &,
			    int sx=0, int sy=0, int sw=-1, int sh=-1 );
    void	drawPixmap( const QPoint &, const QPixmap &,
			    const QRect &sr );
    void	drawPixmap( const QPoint &, const QPixmap & );
    void	drawImage( int x, int y, const QImage &,
			   int sx=0, int sy=0, int sw=-1, int sh=-1 );
    void	drawImage( const QPoint &, const QImage &, const QRect &sr );
    void	drawImage( const QPoint &, const QImage & );
    void	drawImage( int x, int y, const QImage &,
			   int sx, int sy, int sw, int sh, int conversion_flags );
    void	drawImage( const QPoint &, const QImage &, const QRect &sr, int conversion_flags );
    void	drawImage( const QPoint &, const QImage &, int conversion_flags );
    void	drawTiledPixmap( int x, int y, int w, int h, const QPixmap &,
				 int sx=0, int sy=0 );
    void	drawTiledPixmap( const QRect &, const QPixmap &,
				 const QPoint & );
    void	drawTiledPixmap( const QRect &, const QPixmap & );

    void	drawPicture( const QPicture & );
#line 221 "c:\\qt\\include\\qpainter.h"

    void	fillRect( int x, int y, int w, int h, const QBrush & );
    void	fillRect( const QRect &, const QBrush & );
    void	eraseRect( int x, int y, int w, int h );
    void	eraseRect( const QRect & );

  

    void	drawText( int x, int y, const QString &, int len = -1 );
    void	drawText( const QPoint &, const QString &, int len = -1 );
    void	drawText( int x, int y, int w, int h, int flags,
			  const QString&, int len = -1, QRect *br=0,
			  char **internal=0 );
    void	drawText( const QRect &, int flags,
			  const QString&, int len = -1, QRect *br=0,
			  char **internal=0 );

    

  

    QRect	boundingRect( int x, int y, int w, int h, int flags,
			      const QString&, int len = -1, char **intern=0 );
    QRect	boundingRect( const QRect &, int flags,
			      const QString&, int len = -1, char **intern=0 );

    int		tabStops() const;
    void	setTabStops( int );
    int	       *tabArray() const;
    void	setTabArray( int * );

    


    HDC		handle() const;


#line 259 "c:\\qt\\include\\qpainter.h"


    static void initialize();
    static void cleanup();

private:
    void	init();
    void	updateFont();
    void	updatePen();
    void	updateBrush();

    void	updateXForm();
    void	updateInvXForm();
#line 273 "c:\\qt\\include\\qpainter.h"
    void	map( int, int, int *rx, int *ry ) const;
    void	map( int, int, int, int, int *, int *, int *, int * ) const;
    void	mapInv( int, int, int *, int * ) const;
    void	mapInv( int, int, int, int, int *, int *, int *, int * ) const;
    void	drawPolyInternal( const QPointArray &, bool close=1 );
    void	drawWinFocusRect( int x, int y, int w, int h, bool xorPaint,
				  const QColor &penColor );

    enum { IsActive=0x01, ExtDev=0x02, IsStartingUp=0x04, NoCache=0x08,
	   VxF=0x10, WxF=0x20, ClipOn=0x40, SafePolygon=0x80, MonoDev=0x100,
	   DirtyFont=0x200, DirtyPen=0x400, DirtyBrush=0x800,
	   RGBColor=0x1000, FontMet=0x2000, FontInf=0x4000, CtorBegin=0x8000,
           UsePrivateCx = 0x10000, VolatileDC = 0x20000 };
    uint	flags;
    bool	testf( uint b ) const { return (flags&b)!=0; }
    void	setf( uint b )	{ flags |= b; }
    void	setf( uint b, bool v );
    void	clearf( uint b )	{ flags &= (uint)(~b); }
    void	fix_neg_rect( int *x, int *y, int *w, int *h );

    QPaintDevice *pdev;
    QColor	bg_col;
    uchar	bg_mode;
    uchar	rop;
    uchar	pu;
    QPoint	bro;
    QFont	cfont;
    QPen	cpen;
    QBrush	cbrush;
    QRegion	crgn;
    int		tabstops;
    int	       *tabarray;
    int		tabarraylen;

    

    QCOORD	wx, wy, ww, wh;
    QCOORD	vx, vy, vw, vh;
    QWMatrix	wxmat;

    
    QWMatrix	xmat;
    QWMatrix	ixmat;



    double	m11() const { return xmat.m11(); }
    double      m12() const { return xmat.m12(); }
    double      m21() const { return xmat.m21(); }
    double      m22() const { return xmat.m22(); }
    double      dx() const { return xmat.dx(); }
    double      dy() const { return xmat.dy(); }
    double	im11() const { return ixmat.m11(); }
    double      im12() const { return ixmat.m12(); }
    double      im21() const { return ixmat.m21(); }
    double      im22() const { return ixmat.m22(); }
    double      idx() const { return ixmat.dx(); }
    double      idy() const { return ixmat.dy(); }

    int		txop;
    bool	txinv;





#line 340 "c:\\qt\\include\\qpainter.h"

    void       *penRef;				
    void       *brushRef;			
    void       *ps_stack;
    void       *wm_stack;
    void	killPStack();

protected:

    HDC hdc; HPEN hpen; HFONT hfont; HBRUSH hbrush; HBITMAP hbrushbm; HPALETTE holdpal; void *textmet; uint killFont : 1; uint nocolBrush : 1; uint pixmapBrush : 1; void *textMetric(); void nativeXForm( bool );












#line 363 "c:\\qt\\include\\qpainter.h"
    friend class QFontMetrics;
    friend class QFontInfo;
    friend void qt_format_text( const QFontMetrics& fm, int x, int y, int w, int h,
		     int tf, const QString& str, int len, QRect *brect,
		     int tabstops, int* tabarray, int tabarraylen,
		     char **internal, QPainter* painter );

private:	



#line 375 "c:\\qt\\include\\qpainter.h"
};






inline QPaintDevice *QPainter::device() const
{
    return pdev;
}

inline bool QPainter::isActive() const
{
    return testf(IsActive);
}

inline const QFont &QPainter::font() const
{
    return cfont;
}

inline const QPen &QPainter::pen() const
{
    return cpen;
}

inline const QBrush &QPainter::brush() const
{
    return cbrush;
}








inline const QColor &QPainter::backgroundColor() const
{
    return bg_col;
}

inline Qt::BGMode QPainter::backgroundMode() const
{
    return (BGMode)bg_mode;
}

inline Qt::RasterOp QPainter::rasterOp() const
{
    return (RasterOp)rop;
}

inline const QPoint &QPainter::brushOrigin() const
{
    return bro;
}

inline bool QPainter::hasViewXForm() const
{

    return testf(VxF);


#line 441 "c:\\qt\\include\\qpainter.h"
}

inline bool QPainter::hasWorldXForm() const
{

    return testf(WxF);


#line 450 "c:\\qt\\include\\qpainter.h"
}

inline bool QPainter::hasClipping() const
{
    return testf(ClipOn);
}

inline const QRegion &QPainter::clipRegion() const
{
    return crgn;
}

inline int QPainter::tabStops() const
{
    return tabstops;
}

inline int *QPainter::tabArray() const
{
    return tabarray;
}


inline HDC QPainter::handle() const
{
    return hdc;
}





#line 483 "c:\\qt\\include\\qpainter.h"

inline void QPainter::setBrushOrigin( const QPoint &p )
{
    setBrushOrigin( p.x(), p.y() );
}


inline void QPainter::setWindow( const QRect &r )
{
    setWindow( r.x(), r.y(), r.width(), r.height() );
}

inline void QPainter::setViewport( const QRect &r )
{
    setViewport( r.x(), r.y(), r.width(), r.height() );
}
#line 500 "c:\\qt\\include\\qpainter.h"

inline void QPainter::setClipRect( int x, int y, int w, int h )
{
    setClipRect( QRect(x,y,w,h) );
}

inline void QPainter::drawPoint( const QPoint &p )
{
    drawPoint( p.x(), p.y() );
}

inline void QPainter::moveTo( const QPoint &p )
{
    moveTo( p.x(), p.y() );
}

inline void QPainter::lineTo( const QPoint &p )
{
    lineTo( p.x(), p.y() );
}

inline void QPainter::drawLine( const QPoint &p1, const QPoint &p2 )
{
    drawLine( p1.x(), p1.y(), p2.x(), p2.y() );
}

inline void QPainter::drawRect( const QRect &r )
{
    drawRect( r.x(), r.y(), r.width(), r.height() );
}

inline void QPainter::drawWinFocusRect( const QRect &r )
{
    drawWinFocusRect( r.x(), r.y(), r.width(), r.height() );
}

inline void QPainter::drawWinFocusRect( const QRect &r,const QColor &penColor )
{
    drawWinFocusRect( r.x(), r.y(), r.width(), r.height(), penColor );
}

inline void QPainter::drawRoundRect( const QRect &r, int xRnd, int yRnd )
{
    drawRoundRect( r.x(), r.y(), r.width(), r.height(), xRnd, yRnd );
}

inline void QPainter::drawRoundRect( const QRect &r )
{
    
    drawRoundRect( r.x(), r.y(), r.width(), r.height(), 25, 25 );
}

inline void QPainter::drawRoundRect( int x, int y, int w, int h )
{
    
    drawRoundRect( x, y, w, h, 25, 25 );
}




inline void QPainter::drawEllipse( const QRect &r )
{
    drawEllipse( r.x(), r.y(), r.width(), r.height() );
}

inline void QPainter::drawArc( const QRect &r, int a, int alen )
{
    drawArc( r.x(), r.y(), r.width(), r.height(), a, alen );
}

inline void QPainter::drawPie( const QRect &r, int a, int alen )
{
    drawPie( r.x(), r.y(), r.width(), r.height(), a, alen );
}

inline void QPainter::drawChord( const QRect &r, int a, int alen )
{
    drawChord( r.x(), r.y(), r.width(), r.height(), a, alen );
}

inline void QPainter::drawPixmap( const QPoint &p, const QPixmap &pm,
				  const QRect &sr )
{
    drawPixmap( p.x(), p.y(), pm, sr.x(), sr.y(), sr.width(), sr.height() );
}

inline void QPainter::drawImage( const QPoint &p, const QImage &pm,
				 const QRect &sr )
{
    drawImage( p.x(), p.y(), pm, sr.x(), sr.y(), sr.width(), sr.height() );
}

inline void QPainter::drawTiledPixmap( const QRect &r, const QPixmap &pm,
				       const QPoint &sp )
{
    drawTiledPixmap( r.x(), r.y(), r.width(), r.height(), pm, sp.x(), sp.y() );
}

inline void QPainter::drawTiledPixmap( const QRect &r, const QPixmap &pm )
{
    drawTiledPixmap( r.x(), r.y(), r.width(), r.height(), pm, 0, 0 );
}

inline void QPainter::fillRect( const QRect &r, const QBrush &brush )
{
    fillRect( r.x(), r.y(), r.width(), r.height(), brush );
}

inline void QPainter::eraseRect( int x, int y, int w, int h )
{
    fillRect( x, y, w, h, backgroundColor() );
}

inline void QPainter::eraseRect( const QRect &r )
{
    fillRect( r.x(), r.y(), r.width(), r.height(), backgroundColor() );
}

inline void QPainter::drawText( const QPoint &p, const QString &s, int len )
{
    drawText( p.x(), p.y(), s, len );
}

inline void QPainter::drawText( const QRect &r, int tf,
				const QString& str, int len, QRect *br, char **i )
{
    drawText( r.x(), r.y(), r.width(), r.height(), tf, str, len, br, i );
}

inline QRect QPainter::boundingRect( const QRect &r, int tf,
				     const QString& str, int len, char **i )
{
    return boundingRect( r.x(), r.y(), r.width(), r.height(), tf, str, len,
			 i );
}


inline void *QPainter::textMetric()
{
    if ( testf(DirtyFont) )
	updateFont();
    return textmet;
}
#line 645 "c:\\qt\\include\\qpainter.h"






#line 652 "c:\\qt\\include\\qpainter.h"

#line 654 "c:\\qt\\include\\qpainter.h"
#line 43 "c:\\qt\\include\\qdrawutil.h"
#line 1 "c:\\qt\\include\\qpalette.h"
















































































































































































#line 44 "c:\\qt\\include\\qdrawutil.h"
#line 1 "c:\\qt\\include\\qnamespace.h"







































































































































































































































































































































































































































































































































































































































#line 45 "c:\\qt\\include\\qdrawutil.h"
#line 46 "c:\\qt\\include\\qdrawutil.h"






__declspec(dllimport)
void qDrawShadeLine( QPainter *p, int x1, int y1, int x2, int y2,
		     const QColorGroup &g, bool sunken = 1,
		     int lineWidth = 1, int midLineWidth = 0 );

__declspec(dllimport)
void qDrawShadeLine( QPainter *p, const QPoint &p1, const QPoint &p2,
		     const QColorGroup &g, bool sunken = 1,
		     int lineWidth = 1, int midLineWidth = 0 );

__declspec(dllimport)
void qDrawShadeRect( QPainter *p, int x, int y, int w, int h,
		     const QColorGroup &, bool sunken=0,
		     int lineWidth = 1, int midLineWidth = 0,
		     const QBrush *fill = 0 );

__declspec(dllimport)
void qDrawShadeRect( QPainter *p, const QRect &r,
		     const QColorGroup &, bool sunken=0,
		     int lineWidth = 1, int midLineWidth = 0,
		     const QBrush *fill = 0 );

__declspec(dllimport)
void qDrawShadePanel( QPainter *p, int x, int y, int w, int h,
		      const QColorGroup &, bool sunken=0,
		      int lineWidth = 1, const QBrush *fill = 0 );

__declspec(dllimport)
void qDrawShadePanel( QPainter *p, const QRect &r,
		      const QColorGroup &, bool sunken=0,
		      int lineWidth = 1, const QBrush *fill = 0 );

__declspec(dllimport)
void qDrawWinButton( QPainter *p, int x, int y, int w, int h,
		     const QColorGroup &g, bool sunken = 0,
		     const QBrush *fill = 0 );

__declspec(dllimport)
void qDrawWinButton( QPainter *p, const QRect &r,
		     const QColorGroup &g, bool sunken = 0,
		     const QBrush *fill = 0 );

__declspec(dllimport)
void qDrawWinPanel( QPainter *p, int x, int y, int w, int h,
		    const QColorGroup &, bool sunken=0,
		    const QBrush *fill = 0 );

__declspec(dllimport)
void qDrawWinPanel( QPainter *p, const QRect &r,
		    const QColorGroup &, bool sunken=0,
		    const QBrush *fill = 0 );

__declspec(dllimport)
void qDrawPlainRect( QPainter *p, int x, int y, int w, int h, const QColor &,
		     int lineWidth = 1, const QBrush *fill = 0 );

__declspec(dllimport)
void qDrawPlainRect( QPainter *p, const QRect &r, const QColor &,
		     int lineWidth = 1, const QBrush *fill = 0 );







__declspec(dllimport)
QRect qItemRect( QPainter *p, Qt::GUIStyle gs, int x, int y, int w, int h,
		int flags, bool enabled,
		const QPixmap *pixmap, const QString& text, int len=-1 );

__declspec(dllimport)
void qDrawItem( QPainter *p, Qt::GUIStyle gs, int x, int y, int w, int h,
		int flags, const QColorGroup &g, bool enabled,
		const QPixmap *pixmap, const QString& text,
		int len=-1, const QColor* penColor = 0 );

__declspec(dllimport)
void qDrawArrow( QPainter *p, Qt::ArrowType type, Qt::GUIStyle style, bool down,
		 int x, int y, int w, int h,
		 const QColorGroup &g, bool enabled );

#line 135 "c:\\qt\\include\\qdrawutil.h"
#line 136 "c:\\qt\\include\\qdrawutil.h"
#line 47 "c:\\qt\\include\\qscrollbar.h"
#line 48 "c:\\qt\\include\\qscrollbar.h"




class __declspec(dllimport) QScrollBar : public QWidget, public QRangeControl
{
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
    
    
    
    
    
    
    
    
	
public:
    QScrollBar( QWidget *parent, const char *name=0 );
    QScrollBar( Orientation, QWidget *parent, const char *name=0 );
    QScrollBar( int minValue, int maxValue, int LineStep, int PageStep,
		int value, Orientation,
		QWidget *parent, const char *name=0 );

    virtual void setOrientation( Orientation );
    Orientation orientation() const;
    virtual void setTracking( bool enable );
    bool	tracking() const;
    bool	draggingSlider() const;

    virtual void setPalette( const QPalette & );
    QSize	sizeHint() const;
    QSizePolicy sizePolicy() const;

    int	 minValue() const;
    int	 maxValue() const;
    void setMinValue( int );
    void setMaxValue( int );
    int	 lineStep() const;
    int	 pageStep() const;
    void setLineStep( int );
    void setPageStep( int );
    int  value() const;
    void setValue( int );

protected:
    void	valueChanged( int value );
    void	sliderPressed();
    void	sliderMoved( int value );
    void	sliderReleased();
    void	nextLine();
    void	prevLine();
    void	nextPage();
    void	prevPage();

protected:
    void 	wheelEvent( QWheelEvent * );
    void	keyPressEvent( QKeyEvent * );
    void	resizeEvent( QResizeEvent * );
    void	paintEvent( QPaintEvent * );

    void	mousePressEvent( QMouseEvent * );
    void	mouseReleaseEvent( QMouseEvent * );
    void	mouseMoveEvent( QMouseEvent * );

    void	valueChange();
    void	stepChange();
    void	rangeChange();

    int		sliderStart() const;
    QRect	sliderRect() const;

    void styleChange( QStyle& );

private :
    void doAutoRepeat();

private:
    void init();
    void positionSliderFromValue();
    int calculateValueFromSlider() const;

    void sliderMinMax( int &, int & )		const;
    void metrics( int &, int &, int &, int& )	const;

    void startAutoRepeat();
    void stopAutoRepeat();

    QStyle::ScrollControl pointOver( const QPoint &p ) const;

    int rangeValueToSliderPos( int val ) const;
    int sliderPosToRangeValue( int  val ) const;

    void action( QStyle::ScrollControl control );

    void drawControls( uint controls, uint activeControl ) const;
    void drawControls( uint controls, uint activeControl,
				QPainter *p ) const;
    
    uint pressedControl	 : 8;
    uint track		 : 1;
    uint clickedAt	 : 1;
    uint orient		 : 1;

    int slidePrevVal;
    QCOORD sliderPos;
    QCOORD clickOffset;

    QTimer * repeater;
    void * d;

private:	



#line 163 "c:\\qt\\include\\qscrollbar.h"
};


inline void QScrollBar::setTracking( bool t )
{
    track = t;
}

inline bool QScrollBar::tracking() const
{
    return track;
}

inline QScrollBar::Orientation QScrollBar::orientation() const
{
    return (Orientation)orient;
}

inline int QScrollBar::sliderStart() const
{
    return sliderPos;
}


#line 188 "c:\\qt\\include\\qscrollbar.h"

#line 190 "c:\\qt\\include\\qscrollbar.h"
#line 43 "c:\\qt\\include\\qscrollview.h"
#line 44 "c:\\qt\\include\\qscrollview.h"



struct QScrollViewData;

class __declspec(dllimport) QScrollView : public QFrame
{
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
    
    
    
    
    
    
    
    
    
    

    
#line 65 "c:\\qt\\include\\qscrollview.h"

public:
    QScrollView(QWidget *parent=0, const char *name=0, WFlags f=0);
    ~QScrollView();

    enum ResizePolicy { Default, Manual, AutoOne, AutoOneFit  };
    virtual void setResizePolicy( ResizePolicy );
    ResizePolicy resizePolicy() const;

    void styleChange(QStyle&);
    void removeChild(QWidget* child);
    virtual void addChild( QWidget* child, int x=0, int y=0 );
    virtual void moveChild( QWidget* child, int x, int y );
    int childX(QWidget* child);
    int childY(QWidget* child);
    bool childIsVisible(QWidget* child);
    void showChild(QWidget* child, bool yes=1);

    enum ScrollBarMode { Auto, AlwaysOff, AlwaysOn };

    ScrollBarMode vScrollBarMode() const;
    virtual void  setVScrollBarMode( ScrollBarMode );

    ScrollBarMode hScrollBarMode() const;
    virtual void  setHScrollBarMode( ScrollBarMode );

    QWidget*     cornerWidget() const;
    virtual void setCornerWidget(QWidget*);

    QScrollBar*  horizontalScrollBar() const;
    QScrollBar*  verticalScrollBar() const;
    QWidget*	 viewport() const;
    QWidget*	 clipper() const;

    int		visibleWidth() const;
    int		visibleHeight() const;

    int		contentsWidth() const;
    int		contentsHeight() const;
    int		contentsX() const;
    int		contentsY() const;

    void	resize( int w, int h );
    void	resize( const QSize& );
    void	show();

    void	updateContents( int x, int y, int w, int h );
    void	updateContents( const QRect& r );
    void	repaintContents( int x, int y, int w, int h, bool erase=1 );
    void	repaintContents( const QRect& r, bool erase=1 );

    void	contentsToViewport(int x, int y, int& vx, int& vy);

    void	viewportToContents(int vx, int vy, int& x, int& y);
    QPoint	contentsToViewport(const QPoint&);
    QPoint	viewportToContents(const QPoint&);
    void	enableClipper(bool y);

    void     setStaticBackground(bool y);
    bool     hasStaticBackground() const;

    QSize	viewportSize( int, int ) const;
    QSizePolicy sizePolicy() const;
    QSize	sizeHint() const;
    QSize	minimumSizeHint() const;

    void	removeChild(QObject* child);


    void	setDragAutoScroll( bool b ); 
    bool	dragAutoScroll() const;
#line 137 "c:\\qt\\include\\qscrollview.h"

protected:
    void	contentsMoving(int x, int y);

public :
    virtual void resizeContents( int w, int h );
    void	scrollBy( int dx, int dy );
    virtual void        setContentsPos( int x, int y );
    void	ensureVisible(int x, int y);
    void	ensureVisible(int x, int y, int xmargin, int ymargin);
    void	center(int x, int y);
    void	center(int x, int y, float xmargin, float ymargin);

    void	updateScrollBars();
    void	setEnabled( bool enable );

protected:
    void	resizeEvent(QResizeEvent*);
    void 	wheelEvent( QWheelEvent * );
    bool	eventFilter( QObject *, QEvent *e );

    virtual void contentsMousePressEvent( QMouseEvent* );
    virtual void contentsMouseReleaseEvent( QMouseEvent* );
    virtual void contentsMouseDoubleClickEvent( QMouseEvent* );
    virtual void contentsMouseMoveEvent( QMouseEvent* );

    virtual void contentsDragEnterEvent( QDragEnterEvent * );
    virtual void contentsDragMoveEvent( QDragMoveEvent * );
    virtual void contentsDragLeaveEvent( QDragLeaveEvent * );
    virtual void contentsDropEvent( QDropEvent * );
#line 168 "c:\\qt\\include\\qscrollview.h"
    virtual void contentsWheelEvent( QWheelEvent * );

    virtual void viewportPaintEvent( QPaintEvent* );
    virtual void viewportResizeEvent( QResizeEvent* );
    virtual void viewportMousePressEvent( QMouseEvent* );
    virtual void viewportMouseReleaseEvent( QMouseEvent* );
    virtual void viewportMouseDoubleClickEvent( QMouseEvent* );
    virtual void viewportMouseMoveEvent( QMouseEvent* );

    virtual void viewportDragEnterEvent( QDragEnterEvent * );
    virtual void viewportDragMoveEvent( QDragMoveEvent * );
    virtual void viewportDragLeaveEvent( QDragLeaveEvent * );
    virtual void viewportDropEvent( QDropEvent * );
#line 182 "c:\\qt\\include\\qscrollview.h"
    virtual void viewportWheelEvent( QWheelEvent * );

    virtual void drawContentsOffset(QPainter*, int ox, int oy,
		    int cx, int cy, int cw, int ch);
    virtual void drawContents(QPainter*, int cx, int cy, int cw, int ch);
    void	frameChanged();

    virtual void setMargins(int left, int top, int right, int bottom);
    int leftMargin() const;
    int topMargin() const;
    int rightMargin() const;
    int bottomMargin() const;

    bool focusNextPrevChild( bool next );

    virtual void setHBarGeometry(QScrollBar& hbar, int x, int y, int w, int h);
    virtual void setVBarGeometry(QScrollBar& vbar, int x, int y, int w, int h);

private:
    virtual void drawContents( QPainter* );
    void moveContents(int x, int y);

    QScrollViewData* d;

private :
    void hslide(int);
    void vslide(int);

    void doDragAutoScroll();
    void startDragAutoScroll();
    void stopDragAutoScroll();
#line 214 "c:\\qt\\include\\qscrollview.h"

private:	



#line 220 "c:\\qt\\include\\qscrollview.h"
    void changeFrameRect(const QRect&);
};

#line 224 "c:\\qt\\include\\qscrollview.h"

#line 226 "c:\\qt\\include\\qscrollview.h"
#line 43 "c:\\qt\\include\\qlistbox.h"
#line 1 "c:\\qt\\include\\qpixmap.h"









































#line 1 "c:\\qt\\include\\qpaintdevice.h"































































































































































































































































































































































#line 43 "c:\\qt\\include\\qpixmap.h"
#line 1 "c:\\qt\\include\\qcolor.h"














































































































































































































#line 44 "c:\\qt\\include\\qpixmap.h"
#line 1 "c:\\qt\\include\\qstring.h"
























































































































































































































































































































































































































































































































































































































































































































































































































































#line 45 "c:\\qt\\include\\qpixmap.h"
#line 1 "c:\\qt\\include\\qnamespace.h"







































































































































































































































































































































































































































































































































































































































#line 46 "c:\\qt\\include\\qpixmap.h"
#line 47 "c:\\qt\\include\\qpixmap.h"

class QGfx;



class QMultiCellPixmap;
#line 54 "c:\\qt\\include\\qpixmap.h"


class __declspec(dllimport) QPixmap : public QPaintDevice, public Qt
{
public:
    enum ColorMode { Auto, Color, Mono };
    enum Optimization { DefaultOptim, NoOptim, MemoryOptim=NoOptim,
			NormalOptim, BestOptim };

    QPixmap();
    QPixmap( int w, int h,  int depth = -1, Optimization = DefaultOptim );
    QPixmap( const QSize &, int depth = -1, Optimization = DefaultOptim );
    QPixmap( const QString& fileName, const char *format=0,
	     ColorMode mode=Auto );
    QPixmap( const QString& fileName, const char *format,
	     int conversion_flags );
    QPixmap( const char *xpm[] );
    QPixmap( const QByteArray &data );
    QPixmap( const QPixmap & );
   ~QPixmap();

    QPixmap    &operator=( const QPixmap & );
    QPixmap    &operator=( const QImage	 & );

    bool	isNull()	const;

    int		width()		const { return data->w; }
    int		height()	const { return data->h; }
    QSize	size()		const { return QSize(data->w,data->h); }
    QRect	rect()		const { return QRect(0,0,data->w,data->h); }
    int		depth()		const { return data->d; }
    static int	defaultDepth();

    void	fill( const QColor &fillColor = Qt::white );
    void	fill( const QWidget *, int xofs, int yofs );
    void	fill( const QWidget *, const QPoint &ofs );
    void	resize( int width, int height );
    void	resize( const QSize & );

    const QBitmap *mask() const;
    void	setMask( const QBitmap & );
    bool	selfMask() const;
    QBitmap	createHeuristicMask( bool clipTight = 1 ) const;

    static  QPixmap grabWindow( WId, int x=0, int y=0, int w=-1, int h=-1 );
    static  QPixmap grabWidget( QWidget * widget,
				int x=0, int y=0, int w=-1, int h=-1 );


    QPixmap	    xForm( const QWMatrix & ) const;
    static QWMatrix trueMatrix( const QWMatrix &, int w, int h );
#line 106 "c:\\qt\\include\\qpixmap.h"

    QImage	convertToImage() const;
    bool	convertFromImage( const QImage &, ColorMode mode=Auto );
    bool	convertFromImage( const QImage &, int conversion_flags );

    static const char* imageFormat( const QString &fileName );
    bool	load( const QString& fileName, const char *format=0,
		      ColorMode mode=Auto );
    bool	load( const QString& fileName, const char *format,
		      int conversion_flags );
    bool	loadFromData( const uchar *buf, uint len,
			      const char* format=0,
			      ColorMode mode=Auto );
    bool	loadFromData( const uchar *buf, uint len,
			      const char* format,
			      int conversion_flags );
    bool	loadFromData( const QByteArray &data,
			      const char* format=0,
			      int conversion_flags=0 );
    bool	save( const QString& fileName, const char* format ) const; 
    bool	save( const QString& fileName, const char* format,
		      int quality ) const; 


    HBITMAP	hbm()		const;
#line 132 "c:\\qt\\include\\qpixmap.h"

    int		serialNumber()	const;

    Optimization	optimization() const;
    void		setOptimization( Optimization );
    static Optimization defaultOptimization();
    static void		setDefaultOptimization( Optimization );

    virtual void detach();

    bool	isQBitmap() const;


    
    bool	isMultiCellPixmap() const;
    HDC		multiCellHandle() const;
    HBITMAP	multiCellBitmap() const;
    int		multiCellOffset() const;
    int		allocCell();
    void	freeCell( bool = 0 );
#line 153 "c:\\qt\\include\\qpixmap.h"







#line 161 "c:\\qt\\include\\qpixmap.h"



#line 165 "c:\\qt\\include\\qpixmap.h"

protected:
    QPixmap( int w, int h, const uchar *data, bool isXbitmap );
    int metric( int ) const;


    struct QMCPI {				
	QMultiCellPixmap *mcp;
	int	offset;
    };
#line 176 "c:\\qt\\include\\qpixmap.h"

    struct QPixmapData : public QShared {	
	QCOORD	w, h;
	short	d;
	uint	uninit	 : 1;
	uint	bitmap	 : 1;
	uint	selfmask : 1;

	uint	mcp	 : 1;
#line 186 "c:\\qt\\include\\qpixmap.h"
	int	ser_no;
	QBitmap *mask;

	void   *bits;
	QPixmap *maskpm;
	union {
	    HBITMAP hbm;    
	    QMCPI  *mcpi;   
	} hbm_or_mcpi;










#line 206 "c:\\qt\\include\\qpixmap.h"
	Optimization optim;
    } *data;

private:
    QPixmap( int w, int h, int depth, bool, Optimization );
    void	init( int, int, int, bool, Optimization );
    void	deref();
    QPixmap	copy( bool ignoreMask = 0 ) const;
    static Optimization defOptim;
    friend __declspec(dllimport) void bitBlt( QPaintDevice *, int, int,
				 const QPaintDevice *,
				 int, int, int, int, RasterOp, bool );
    friend __declspec(dllimport) void bitBlt( QPaintDevice *, int, int,
				 const QImage* src,
				 int, int, int, int, int conversion_flags );
    friend class QBitmap;
    friend class QPaintDevice;
    friend class QPainter;
};


inline bool QPixmap::isNull() const
{
    return data->w == 0;
}

inline void QPixmap::fill( const QWidget *w, const QPoint &ofs )
{
    fill( w, ofs.x(), ofs.y() );
}

inline void QPixmap::resize( const QSize &s )
{
    resize( s.width(), s.height() );
}

inline const QBitmap *QPixmap::mask() const
{
    return data->mask;
}

inline bool QPixmap::selfMask() const
{
    return data->selfmask;
}


inline HBITMAP QPixmap::hbm() const
{
    return data->mcp ? 0 : data->hbm_or_mcpi.hbm;
}
#line 258 "c:\\qt\\include\\qpixmap.h"

inline int QPixmap::serialNumber() const
{
    return data->ser_no;
}

inline QPixmap::Optimization QPixmap::optimization() const
{
    return data->optim;
}

inline bool QPixmap::isQBitmap() const
{
    return data->bitmap;
}


inline bool QPixmap::isMultiCellPixmap() const
{
    return data->mcp;
}
#line 280 "c:\\qt\\include\\qpixmap.h"







__declspec(dllimport) QDataStream &operator<<( QDataStream &, const QPixmap & );
__declspec(dllimport) QDataStream &operator>>( QDataStream &, QPixmap & );
#line 290 "c:\\qt\\include\\qpixmap.h"

#line 292 "c:\\qt\\include\\qpixmap.h"
#line 44 "c:\\qt\\include\\qlistbox.h"
#line 1 "c:\\qt\\include\\qtimer.h"









































#line 1 "c:\\qt\\include\\qobject.h"























































































































































































































































#line 43 "c:\\qt\\include\\qtimer.h"
#line 44 "c:\\qt\\include\\qtimer.h"


class __declspec(dllimport) QTimer : public QObject
{
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
public:
    QTimer( QObject *parent=0, const char *name=0 );
   ~QTimer();

    bool	isActive() const;

    int		start( int msec, bool sshot = 0 );
    void	changeInterval( int msec );
    void	stop();

    static void singleShot( int msec, QObject *receiver, const char *member );

protected:
    void	timeout();

protected:
    bool	event( QEvent * );

private:
    int		id;
    bool	single;

private:	



#line 76 "c:\\qt\\include\\qtimer.h"
};


inline bool QTimer::isActive() const
{
    return id >= 0;
}


#line 86 "c:\\qt\\include\\qtimer.h"
#line 45 "c:\\qt\\include\\qlistbox.h"
#line 46 "c:\\qt\\include\\qlistbox.h"




class QListBoxPrivate;
class QListBoxItem;
class QString;
class QStrList;
class QStringList;


class __declspec(dllimport) QListBox : public QScrollView
{
    friend class QListBoxItem;
    friend class QListBoxPrivate;

    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	
public:
    QListBox( QWidget *parent=0, const char *name=0, WFlags f=0  );
   ~QListBox();

    virtual void setFont( const QFont & );

    uint count() const;

    void insertStringList( const QStringList&, int index=-1 );
    void insertStrList( const QStrList *, int index=-1 );
    void insertStrList( const QStrList &, int index=-1 );
    void insertStrList( const char **,
			int numStrings=-1, int index=-1 );

    void insertItem( const QListBoxItem *, int index=-1 );
    void insertItem( const QListBoxItem *, const QListBoxItem *after );
    void insertItem( const QString &text, int index=-1 );
    void insertItem( const QPixmap &pixmap, int index=-1 );
    void insertItem( const QPixmap &pixmap, const QString &text, int index=-1 );

    void removeItem( int index );
    void clear();

    QString text( int index )	const;
    const QPixmap *pixmap( int index )	const;

    void changeItem( const QListBoxItem *, int index );
    void changeItem( const QString &text, int index );
    void changeItem( const QPixmap &pixmap, int index );
    void changeItem( const QPixmap &pixmap, const QString &text, int index );

    void takeItem( const QListBoxItem * );

    int numItemsVisible() const;

    int currentItem() const;
    QString currentText() const { return text(currentItem()); }
    virtual void setCurrentItem( int index );
    virtual void setCurrentItem( QListBoxItem * );
    void centerCurrentItem() { ensureCurrentVisible(); }
    int topItem() const;
    virtual void setTopItem( int index );
    virtual void setBottomItem( int index );

    long maxItemWidth() const;

    enum SelectionMode { Single, Multi, Extended, NoSelection };
    virtual void setSelectionMode( SelectionMode );
    SelectionMode selectionMode() const;

    void setMultiSelection( bool multi );
    bool isMultiSelection() const;

    virtual void setSelected( QListBoxItem *, bool );
    void setSelected( int, bool );
    bool isSelected( int ) const;
    bool isSelected( const QListBoxItem * ) const;

    QSize sizeHint() const;
    QSize	minimumSizeHint() const;

    QListBoxItem *item( int index ) const;
    int index( const QListBoxItem * ) const;
    QListBoxItem *findItem( const QString &text ) const;

    void triggerUpdate( bool doLayout );

    bool itemVisible( int index );
    bool itemVisible( const QListBoxItem * );

    enum LayoutMode { FixedNumber,
		      FitToWidth, FitToHeight = FitToWidth,
		      Variable };
    virtual void setColumnMode( LayoutMode );
    virtual void setColumnMode( int );
    virtual void setRowMode( LayoutMode );
    virtual void setRowMode( int );

    LayoutMode columnMode() const;
    LayoutMode rowMode() const;

    int numColumns() const;
    int numRows() const;

    bool variableWidth() const;
    virtual void setVariableWidth( bool );

    bool variableHeight() const;
    virtual void setVariableHeight( bool );

    void viewportPaintEvent( QPaintEvent * );


    bool dragSelect() const { return 1; }
    void setDragSelect( bool ) {}
    bool autoScroll() const { return 1; }
    void setAutoScroll( bool ) {}
    bool autoScrollBar() const { return vScrollBarMode() == Auto; }
    void setAutoScrollBar( bool enable ) { setVScrollBarMode( enable ? Auto : AlwaysOff ); }
    bool scrollBar() const { return vScrollBarMode() != AlwaysOff; }
    void setScrollBar( bool enable ) { setVScrollBarMode( enable ? AlwaysOn : AlwaysOff ); }
    bool autoBottomScrollBar() const { return hScrollBarMode() == Auto; }
    void setAutoBottomScrollBar( bool enable ) { setHScrollBarMode( enable ? Auto : AlwaysOff ); }
    bool bottomScrollBar() const { return hScrollBarMode() != AlwaysOff; }
    void setBottomScrollBar( bool enable ) { setHScrollBarMode( enable ? AlwaysOn : AlwaysOff ); }
    bool smoothScrolling() const { return 0; }
    void setSmoothScrolling( bool ) {}
    bool autoUpdate() const { return 1; }
    void setAutoUpdate( bool ) {}
    void setFixedVisibleLines( int lines ) { setRowMode( lines ); }
    void inSort( const QListBoxItem * );
    void inSort( const QString& text );
    int cellHeight( int i ) const { return itemHeight(i); }
    int cellHeight() const { return itemHeight(); }
    int cellWidth() const { return maxItemWidth(); }
    int cellWidth(int i) const { if ( !(i==0) ) qWarning("ASSERT: \"%s\" in %s (%d)","i==0","c:\\qt\\include\\qlistbox.h",193); return maxItemWidth(); }
    int	numCols() const { return numColumns(); }
#line 196 "c:\\qt\\include\\qlistbox.h"

    int itemHeight( int index = 0 ) const;
    QListBoxItem * itemAt( QPoint ) const;

    QRect itemRect( QListBoxItem *item ) const;

    QListBoxItem *firstItem() const;

    void sort( bool ascending = 1 );

public :
    virtual void ensureCurrentVisible();
    virtual void clearSelection();
    void selectAll( bool select ); 
    void invertSelection(); 

protected:
    void highlighted( int index );
    void selected( int index );
    void highlighted( const QString &);
    void selected( const QString &);
    void highlighted( QListBoxItem * );
    void selected( QListBoxItem * );

    void selectionChanged();
    void selectionChanged( QListBoxItem * );
    void currentChanged( QListBoxItem * );
    void clicked( QListBoxItem * );
    void clicked( QListBoxItem *, const QPoint & );
    void pressed( QListBoxItem * );
    void pressed( QListBoxItem *, const QPoint & );

    void doubleClicked( QListBoxItem * );
    void returnPressed( QListBoxItem * );
    void rightButtonClicked( QListBoxItem *, const QPoint & );
    void rightButtonPressed( QListBoxItem *, const QPoint & );
    void mouseButtonPressed( int, QListBoxItem*, const QPoint& );
    void mouseButtonClicked( int, QListBoxItem*, const QPoint& );

    void onItem( QListBoxItem *item );
    void onViewport();

protected:
    void viewportMousePressEvent( QMouseEvent * );
    void viewportMouseReleaseEvent( QMouseEvent * );
    void viewportMouseDoubleClickEvent( QMouseEvent * );
    void viewportMouseMoveEvent( QMouseEvent * );
    void mousePressEvent( QMouseEvent * );
    void mouseReleaseEvent( QMouseEvent * );
    void mouseDoubleClickEvent( QMouseEvent * );
    void mouseMoveEvent( QMouseEvent * );
    void keyPressEvent( QKeyEvent *e );
    void focusInEvent( QFocusEvent *e );
    void focusOutEvent( QFocusEvent *e );
    void resizeEvent( QResizeEvent * );
    void showEvent( QShowEvent * );

    void updateItem( int index );
    void updateItem( QListBoxItem * );


    void updateCellWidth() { }
    int totalWidth() const { return contentsWidth(); }
    int totalHeight() const { return contentsHeight(); }
#line 261 "c:\\qt\\include\\qlistbox.h"

    virtual void paintCell( QPainter *, int row, int col );

    void toggleCurrentItem();
    bool isRubberSelecting() const;

    void doLayout() const;


    bool itemYPos( int index, int *yPos ) const;
    int findItem( int yPos ) const {return index(itemAt(QPoint(0,yPos)));}
#line 273 "c:\\qt\\include\\qlistbox.h"

protected :
    void clearInputString();

private :
    void refreshSlot();
    void doAutoScroll();
    void adjustItems();

private:
    void tryGeometry( int, int ) const;
    int currentRow() const;
    int currentColumn() const;
    void updateSelection();
    void drawRubber();
    void doRubberSelection( const QRect &old, const QRect &rubber );
    void handleItemChange( QListBoxItem *old, bool shift, bool control );
    void selectRange( QListBoxItem *from, QListBoxItem *to, bool invert, bool includeFirst, bool clearSel = 0 );

    void emitChangedSignal( bool );

    int columnAt( int ) const;
    int rowAt( int ) const;

    QListBoxPrivate * d;

    static QListBox * changedListBox;

private:	



#line 306 "c:\\qt\\include\\qlistbox.h"
};


class __declspec(dllimport) QListBoxItem
{
public:
    QListBoxItem( QListBox* listbox = 0 );
    QListBoxItem( QListBox* listbox, QListBoxItem *after );
    virtual ~QListBoxItem();

    virtual QString text() const;
    virtual const QPixmap *pixmap() const;

    virtual int	 height( const QListBox * ) const;
    virtual int	 width( const QListBox * )  const;

    bool selected() const { return s; }
    bool current() const;

    QListBox *listBox() const;

    void setSelectable( bool b );
    bool isSelectable() const;

    QListBoxItem *next() const;
    QListBoxItem *prev() const;

protected:
    virtual void paint( QPainter * ) = 0;
    virtual void setText( const QString &text ) { txt = text; }
    void setCustomHighlighting( bool );

private:
    QString txt;
    uint s:1;
    uint dirty:1;
    uint custom_highlight : 1;
    int x, y;
    QListBoxItem * p, * n;
    QListBox* lbox;
    friend class QListBox;
    friend class QListBoxPrivate;
    friend class QComboBox;

private:	



#line 355 "c:\\qt\\include\\qlistbox.h"
};


class __declspec(dllimport) QListBoxText : public QListBoxItem
{
public:
    QListBoxText( QListBox* listbox, const QString & text=QString::null );
    QListBoxText( const QString & text=QString::null );
    QListBoxText( QListBox* listbox, const QString & text, QListBoxItem *after );
   ~QListBoxText();

    int	 height( const QListBox * ) const;
    int	 width( const QListBox * )  const;

protected:
    void  paint( QPainter * );

private:	



#line 377 "c:\\qt\\include\\qlistbox.h"
};


class __declspec(dllimport) QListBoxPixmap : public QListBoxItem
{
public:
    QListBoxPixmap( QListBox* listbox, const QPixmap & );
    QListBoxPixmap( const QPixmap & );
    QListBoxPixmap( QListBox* listbox, const QPixmap & pix, QListBoxItem *after );
    QListBoxPixmap( QListBox* listbox, const QPixmap &, const QString& );
    QListBoxPixmap( const QPixmap &, const QString& );
    QListBoxPixmap( QListBox* listbox, const QPixmap & pix, const QString&, QListBoxItem *after );
   ~QListBoxPixmap();

    const QPixmap *pixmap() const { return &pm; }

    int	 height( const QListBox * ) const;
    int	 width( const QListBox * )  const;

protected:
    void paint( QPainter * );

private:
    QPixmap pm;
private:	



#line 406 "c:\\qt\\include\\qlistbox.h"
};


#line 410 "c:\\qt\\include\\qlistbox.h"

#line 412 "c:\\qt\\include\\qlistbox.h"
#line 4 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qpushbutton.h"









































#line 1 "c:\\qt\\include\\qbutton.h"









































#line 1 "c:\\qt\\include\\qwidget.h"




















































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 43 "c:\\qt\\include\\qbutton.h"
#line 44 "c:\\qt\\include\\qbutton.h"




class QButtonGroup;
struct QButtonData;
class QToolBar;

class __declspec(dllimport) QButton : public QWidget
{
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
    
    
    
    
    
    
    
    
    
    
    
    

public:
    QButton( QWidget *parent=0, const char *name=0, WFlags f=0 );
   ~QButton();

    QString text() const;
    virtual void setText( const QString &);
    const QPixmap *pixmap() const;
    virtual void setPixmap( const QPixmap & );

    int		accel()	const;
    virtual void	setAccel( int );

    bool	isToggleButton() const;

    enum ToggleType { SingleShot, Toggle, Tristate };
    ToggleType	toggleType() const;

    virtual void setDown( bool );
    bool	isDown() const;

    bool	isOn() const;

    enum ToggleState { Off, NoChange, On };
    ToggleState	state() const;

    bool	autoResize() const; 
    virtual void setAutoResize( bool ); 

    bool	autoRepeat() const;
    virtual void setAutoRepeat( bool );

    bool	isExclusiveToggle() const;

    bool	focusNextPrevChild( bool next );

    QButtonGroup *group() const;

public :
    void	animateClick();
    void	toggle();

protected:
    void	pressed();
    void	released();
    void	clicked();
    void	toggled( bool );
    void	stateChanged( int );

protected:
    void	setToggleButton( bool );
    virtual void	setToggleType( ToggleType );
    void	setOn( bool );
    virtual void	setState( ToggleState );

    virtual bool hitButton( const QPoint &pos ) const;
    virtual void drawButton( QPainter * );
    virtual void drawButtonLabel( QPainter * );

    void	keyPressEvent( QKeyEvent *);
    void	keyReleaseEvent( QKeyEvent *);
    void	mousePressEvent( QMouseEvent * );
    void	mouseReleaseEvent( QMouseEvent * );
    void	mouseMoveEvent( QMouseEvent * );
    void	paintEvent( QPaintEvent * );
    void	focusInEvent( QFocusEvent * );
    void	focusOutEvent( QFocusEvent * );

    void	enabledChange( bool );

private :
    void	animateTimeout();
    void	autoRepeatTimeout();

private:
    QString	btext;
    QPixmap    *bpixmap;
    uint	toggleTyp	: 2;
    uint	buttonDown	: 1;
    uint	stat		: 2;
    uint	mlbDown		: 1;
    uint	autoresize	: 1;
    uint	animation	: 1;
    uint	repeat		: 1;
    QButtonData *d;

    friend class QButtonGroup;
    friend class QToolBar;
    void          ensureData();
    virtual void setGroup( QButtonGroup* );
    QTimer	 *timer();
    void	nextState();

private:	



#line 165 "c:\\qt\\include\\qbutton.h"
};


inline QString QButton::text() const
{
    return btext;
}

inline const QPixmap *QButton::pixmap() const
{
    return bpixmap;
}

inline bool QButton::isToggleButton() const
{
    return toggleTyp != SingleShot;
}

inline  bool QButton::isDown() const
{
    return buttonDown;
}

inline bool QButton::isOn() const
{
    return stat != Off;
}

inline bool QButton::autoResize() const 
{
    return autoresize;
}

inline bool QButton::autoRepeat() const
{
    return repeat;
}

inline QButton::ToggleState QButton::state() const
{
    return ToggleState(stat);
}

inline void QButton::setToggleButton( bool b )
{
    setToggleType( b ? Toggle : SingleShot );
}

inline void QButton::setOn( bool y )
{
    setState( y ? On : Off );
}

inline QButton::ToggleType QButton::toggleType() const
{
    return ToggleType(toggleTyp);
}


#line 225 "c:\\qt\\include\\qbutton.h"

#line 227 "c:\\qt\\include\\qbutton.h"
#line 43 "c:\\qt\\include\\qpushbutton.h"
#line 1 "c:\\qt\\include\\qiconset.h"









































#line 1 "c:\\qt\\include\\qpixmap.h"



































































































































































































































































































#line 43 "c:\\qt\\include\\qiconset.h"
#line 44 "c:\\qt\\include\\qiconset.h"


struct QIconSetPrivate;


class __declspec(dllimport) QIconSet
{
public:
    enum Size { Automatic, Small, Large };

    enum Mode { Normal, Disabled, Active };

    QIconSet();
    QIconSet( const QPixmap &, Size = Automatic );
    QIconSet( const QPixmap &smallPix, const QPixmap &largePix );
    QIconSet( const QIconSet & );
    virtual ~QIconSet();

    void reset( const QPixmap &, Size );

    virtual void setPixmap( const QPixmap &, Size, Mode = Normal );
    virtual void setPixmap( const QString &, Size, Mode = Normal );
    QPixmap pixmap( Size, Mode ) const;
    QPixmap pixmap( Size s, bool enabled ) const;
    QPixmap pixmap() const;
    bool isGenerated( Size, Mode ) const;

    bool isNull() const;

    void detach();

    QIconSet &operator=( const QIconSet & );

private:
    QIconSetPrivate * d;
};

#line 82 "c:\\qt\\include\\qiconset.h"
#line 83 "c:\\qt\\include\\qiconset.h"
#line 44 "c:\\qt\\include\\qpushbutton.h"
#line 45 "c:\\qt\\include\\qpushbutton.h"



class __declspec(dllimport) QPushButton : public QButton
{
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;

    
    
    
    

    
    
    

public:
    QPushButton( QWidget *parent, const char *name=0 );
    QPushButton( const QString &text, QWidget *parent, const char* name=0 );
    QPushButton( const QIconSet& icon, const QString &text, QWidget *parent, const char* name=0 );
    ~QPushButton();

    QSize	sizeHint() const;
    QSizePolicy sizePolicy() const;

    void	move( int x, int y );
    void	move( const QPoint &p );
    void	resize( int w, int h );
    void	resize( const QSize & );
    virtual void setGeometry( int x, int y, int w, int h );

    virtual void setGeometry( const QRect & );

    virtual void setToggleButton( bool ); 

    bool	autoDefault()	const	{ return autoDefButton; }
    virtual void setAutoDefault( bool autoDef );
    bool	isDefault()	const	{ return defButton; }
    virtual void setDefault( bool def );

    virtual void setIsMenuButton( bool );
    bool	isMenuButton() const;

    void setPopup( QPopupMenu* popup );
    QPopupMenu* popup() const;

    void setIconSet( const QIconSet& );
    QIconSet* iconSet() const;

    void setFlat( bool );
    bool isFlat() const;

public :
    virtual void setOn( bool );

    void	toggle();

protected:
    void	drawButton( QPainter * );
    void	drawButtonLabel( QPainter * );
    void	focusInEvent( QFocusEvent * );
    void	focusOutEvent( QFocusEvent * );
    void	resizeEvent( QResizeEvent * );
    void	updateMask();

private :
    void popupPressed();

private:
    void	init();

    uint	autoDefButton	: 1;
    uint	defButton	: 1;
    uint	flt		: 1;
    uint	reserved		: 1; 
    uint	lastEnabled	: 1; 
    uint	hasMenuArrow	: 1;

    friend class QDialog;

private:	



#line 130 "c:\\qt\\include\\qpushbutton.h"
};


#line 134 "c:\\qt\\include\\qpushbutton.h"

#line 136 "c:\\qt\\include\\qpushbutton.h"
#line 5 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qtabwidget.h"









































#line 1 "c:\\qt\\include\\qwidget.h"




















































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 43 "c:\\qt\\include\\qtabwidget.h"
#line 1 "c:\\qt\\include\\qiconset.h"


















































































#line 44 "c:\\qt\\include\\qtabwidget.h"
#line 45 "c:\\qt\\include\\qtabwidget.h"



class QTabBar;
class QTabWidgetData;
class QTab;
class QWidgetStack;


class __declspec(dllimport) QTabWidget : public QWidget
{
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
    
    
    
    
    
    
    
public:
    
    QTabWidget( QWidget *parent, const char *name, WFlags f);
    QTabWidget( QWidget *parent=0, const char *name=0);
   ~QTabWidget();

    void addTab( QWidget *, const QString &);
    void addTab( QWidget *child, const QIconSet& iconset, const QString &label);
    void addTab( QWidget *, QTab* );

    void insertTab( QWidget *, const QString &, int index = -1);
    void insertTab( QWidget *child, const QIconSet& iconset, const QString &label, int index = -1);
    void insertTab( QWidget *, QTab*, int index = -1 );

    void changeTab( QWidget *, const QString &);
    void changeTab( QWidget *child, const QIconSet& iconset, const QString &label);

    bool isTabEnabled(  QWidget * ) const;
    void setTabEnabled( QWidget *, bool );

    void showPage( QWidget * );
    void removePage( QWidget * );
    QString tabLabel( QWidget * ); 

    QWidget * currentPage() const;
    int currentPageIndex() const;
    void setCurrentPage( int );

    QSize sizeHint() const;
    QSize minimumSizeHint() const;

    enum TabPosition { Top, Bottom };
    TabPosition tabPosition() const;
    void setTabPosition( TabPosition );

    enum TabShape { Rounded, Triangular };
    TabShape tabShape() const;
    void setTabShape( TabShape s );
    
    int margin() const;
    void setMargin( int );

    QSizePolicy sizePolicy() const;

protected:
    void showEvent( QShowEvent * );
    void resizeEvent( QResizeEvent * );
    void setTabBar( QTabBar* );
    QTabBar* tabBar() const;
    void styleChange( QStyle& );
    void updateMask();
    bool eventFilter( QObject *, QEvent * );

protected:
    void currentChanged( QWidget * );
    void selected( const QString& ); 

private :
    void showTab( int i );

private:
    QTabWidgetData *d;
    void setUpLayout(bool = 0);
    void init();


    friend class QTabDialog;



#line 135 "c:\\qt\\include\\qtabwidget.h"

private:	



#line 141 "c:\\qt\\include\\qtabwidget.h"
};

#line 144 "c:\\qt\\include\\qtabwidget.h"

#line 146 "c:\\qt\\include\\qtabwidget.h"
#line 6 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qwidget.h"




















































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 7 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qlayout.h"









































#line 1 "c:\\qt\\include\\qabstractlayout.h"









































#line 1 "c:\\qt\\include\\qobject.h"























































































































































































































































#line 43 "c:\\qt\\include\\qabstractlayout.h"
#line 1 "c:\\qt\\include\\qsizepolicy.h"







































































































#line 44 "c:\\qt\\include\\qabstractlayout.h"
#line 1 "c:\\qt\\include\\qwidget.h"




















































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 45 "c:\\qt\\include\\qabstractlayout.h"
#line 46 "c:\\qt\\include\\qabstractlayout.h"



class QMenuBar;
class QWidget;
struct QLayoutData;
class QLayoutItem;
class QLayout;
class QSpacerItem;
class QDomElement;
class QConfigureLayoutEvent;

class __declspec(dllimport) QGLayoutIterator : public QShared
{
public:
    virtual ~QGLayoutIterator();
    virtual QLayoutItem *next() = 0;
    virtual QLayoutItem *current() = 0;
    virtual QLayoutItem *takeCurrent() = 0;
};

class __declspec(dllimport) QLayoutIterator
{
public:
    QLayoutIterator( QGLayoutIterator *i ) :it(i) {}
    QLayoutIterator( const QLayoutIterator &i ) :it( i.it )
    { if ( it ) it->ref(); }
    ~QLayoutIterator() { if ( it && it->deref() ) delete it; }
    QLayoutIterator &operator=( const QLayoutIterator &i )
    {
	if ( i.it ) i.it->ref();
	if ( it && it->deref() ) delete it;
	it = i.it;
	return *this;
    }
    QLayoutItem *operator++() { return it ? it->next() : 0; }
    QLayoutItem *current() { return it ? it->current() : 0; }
    QLayoutItem *takeCurrent() { return it ? it->takeCurrent() : 0; }
    void deleteCurrent();
private:
    QGLayoutIterator *it;
};


class __declspec(dllimport) QLayoutItem
{
public:
    QLayoutItem( int alignment = 0 ) :align(alignment) {}
    virtual ~QLayoutItem();
    virtual QSize sizeHint() const = 0;
    virtual QSize minimumSize() const = 0;
    virtual QSize maximumSize() const = 0;
    virtual QSizePolicy::ExpandData expanding() const =0;
    virtual void setGeometry( const QRect& ) = 0;
    virtual QRect geometry() const = 0;
    virtual bool isEmpty() const = 0;
    virtual bool hasHeightForWidth() const;
    virtual int heightForWidth( int ) const;
    virtual void invalidate();

    virtual QWidget *widget();
    virtual QLayoutIterator iterator();
    virtual QLayout *layout();
    virtual QSpacerItem *spacerItem();

    int alignment() const { return align; }
    virtual void setAlignment( int a );
protected:
    int align;
};


class __declspec(dllimport) QSpacerItem : public QLayoutItem
{
 public:
    QSpacerItem( int w, int h,
		 QSizePolicy::SizeType hData=QSizePolicy::Minimum,
		 QSizePolicy::SizeType vData= QSizePolicy::Minimum )
	:width(w), height(h), sizeP(hData, vData )
	{}
    void changeSize( int w, int h,
		QSizePolicy::SizeType hData=QSizePolicy::Minimum,
		QSizePolicy::SizeType vData=QSizePolicy::Minimum );
    QSize sizeHint() const ;
    QSize minimumSize() const ;
    QSize maximumSize() const ;
    QSizePolicy::ExpandData expanding() const;
    bool isEmpty() const;
    void setGeometry( const QRect& );
    QRect geometry() const;
    QSpacerItem *spacerItem();
private:
    int width, height;
    QSizePolicy sizeP;
    QRect rect;
};


class __declspec(dllimport) QWidgetItem : public QLayoutItem
{
public:
    QWidgetItem( QWidget *w ) : wid(w) {}
    QSize sizeHint() const ;
    QSize minimumSize() const ;
    QSize maximumSize() const ;
    QSizePolicy::ExpandData expanding() const;
    bool isEmpty() const;
    void setGeometry( const QRect& ) ;
    QRect geometry() const;
    
    virtual QWidget *widget();

    bool hasHeightForWidth() const;
    int heightForWidth( int ) const;

    const QSize &widgetSizeHint() const;

private:
    
    QWidget *wid;
};


class __declspec(dllimport) QLayout : public QObject, public QLayoutItem
{
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
    
    
    
    

public:
    QLayout( QWidget *parent, int margin=0, int space=-1,
	     const char *name=0 );
    QLayout( QLayout *parentLayout, int space=-1, const char *name=0 );
    QLayout( int space=-1, const char *name=0 );

    ~QLayout();

    int margin() const { return outsideBorder; }
    int spacing() const { return insideSpacing; }

    virtual void setMargin( int );
    virtual void setSpacing( int );

    enum { unlimited = 32767 };

    int defaultBorder() const { return insideSpacing; }
    void freeze( int w, int h );
    void freeze() { setResizeMode( Fixed ); }
#line 197 "c:\\qt\\include\\qabstractlayout.h"

    enum ResizeMode { FreeResize, Minimum, Fixed };
    void setResizeMode( ResizeMode );
    ResizeMode resizeMode() const;


    virtual void  setMenuBar( QMenuBar *w );
    QMenuBar *menuBar() const { return menubar; }
#line 206 "c:\\qt\\include\\qabstractlayout.h"

    QWidget *mainWidget();
    bool isTopLevel() const { return topLevel; }

    virtual void setAutoAdd( bool );
    bool autoAdd() const { return autoNewChild; }

    void invalidate();
    QRect geometry() const;
    bool activate();

    void add( QWidget *w ) { addItem( new QWidgetItem( w ) ); }
    virtual void addItem ( QLayoutItem * ) = 0;

    QSizePolicy::ExpandData expanding() const;
    QSize minimumSize() const;
    QSize maximumSize() const;
    void setGeometry( const QRect& )=0;
    QLayoutIterator iterator()=0;
    bool isEmpty() const;

    int totalHeightForWidth( int w ) const;
    QSize totalMinimumSize() const;
    QSize totalMaximumSize() const;
    QSize totalSizeHint() const;
    QLayout *layout();

    bool supportsMargin() const { return marginImpl; }
    
    void setEnabled( bool );
    bool isEnabled() const;

protected:
    bool  eventFilter( QObject *, QEvent * );
    void addChildLayout( QLayout *l );
    void deleteAllItems();

    void setSupportsMargin( bool );
    QRect alignmentRect( const QRect& ) const;
private:
    void setWidgetLayout( QWidget *, QLayout * );
    void init();
    int insideSpacing;
    int outsideBorder;
    uint topLevel : 1;
    uint autoMinimum : 1;
    uint autoNewChild : 1;
    uint frozen : 1;
    uint activated : 1;
    uint marginImpl : 1;
    uint enabled : 1;
    QRect rect;
    QLayoutData *extraData;

    QMenuBar *menubar;
#line 262 "c:\\qt\\include\\qabstractlayout.h"
private:	



#line 267 "c:\\qt\\include\\qabstractlayout.h"

};

inline void QLayoutIterator::deleteCurrent()
{
    delete takeCurrent();
}
#line 275 "c:\\qt\\include\\qabstractlayout.h"
#line 276 "c:\\qt\\include\\qabstractlayout.h"
#line 43 "c:\\qt\\include\\qlayout.h"
#line 44 "c:\\qt\\include\\qlayout.h"


class QLayoutArray;
class QLayoutBox;



#line 52 "c:\\qt\\include\\qlayout.h"

class __declspec(dllimport) QGridLayout : public QLayout
{
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
public:
    QGridLayout( QWidget *parent, int nRows = 1, int nCols = 1, int border=0,
		 int space = -1, const char *name=0 );
    QGridLayout( int nRows = 1, int nCols = 1, int space = -1,
		 const char *name=0 );
    QGridLayout( QLayout *parentLayout, int nRows = 1, int nCols = 1,
		 int space = -1, const char *name=0 );
    ~QGridLayout();

    QSize sizeHint() const;
    QSize minimumSize() const;
    QSize maximumSize() const;

    virtual void setRowStretch( int row, int stretch );
    virtual void setColStretch( int col, int stretch );
    int rowStretch( int row ) const;
    int colStretch( int col ) const;

    int numRows() const;
    int numCols() const;
    QRect cellGeometry( int row, int col ) const;

    bool hasHeightForWidth() const;
    int heightForWidth( int ) const;


    QSizePolicy::ExpandData expanding() const;
    void invalidate();

    void addItem( QLayoutItem * );
    void addItem( QLayoutItem *item, int row, int col );
    void addMultiCell( QLayoutItem *, int fromRow, int toRow,
			       int fromCol, int toCol, int align = 0 );
    

    void addWidget( QWidget *, int row, int col, int align = 0 );
    void addMultiCellWidget( QWidget *, int fromRow, int toRow,
			     int fromCol, int toCol, int align = 0 );
    void addLayout( QLayout *layout, int row, int col);
    void addMultiCellLayout( QLayout *layout, int fromRow, int toRow,
			     int fromCol, int toCol, int align = 0 );
    void addRowSpacing( int row, int minsize );
    void addColSpacing( int col, int minsize );
    void expand( int rows, int cols );

    enum Corner { TopLeft, TopRight, BottomLeft, BottomRight };
    void setOrigin( Corner );
    QLayoutIterator iterator();
    void setGeometry( const QRect& );

protected:
    bool findWidget( QWidget* w, int *r, int *c );
    void add( QLayoutItem*, int row, int col );
private:
    void init( int rows, int cols );
    QLayoutArray *array;

private:	



#line 118 "c:\\qt\\include\\qlayout.h"
};


class QBoxLayoutData;

class __declspec(dllimport) QBoxLayout : public QLayout
{
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
public:
    enum Direction { LeftToRight, RightToLeft, TopToBottom, BottomToTop,
		     Down = TopToBottom, Up = BottomToTop };

    QBoxLayout( QWidget *parent, Direction, int border=0,
		int space = -1, const char *name=0 );

    QBoxLayout( QLayout *parentLayout, Direction, int space = -1,
		const char *name=0 );

    QBoxLayout(	Direction, int space = -1,
		const char *name=0 );

    ~QBoxLayout();

    void addItem( QLayoutItem * );

    Direction direction() const { return dir; }
    void setDirection( Direction );

    void addSpacing( int size );
    void addStretch( int stretch = 0 );
    void addWidget( QWidget *, int stretch = 0, int alignment = 0 );
    void addLayout( QLayout *layout, int stretch = 0 );
    void addStrut( int );

    void insertSpacing( int index, int size );
    void insertStretch( int index, int stretch = 0 );
    void insertWidget( int index, QWidget *widget, int stretch = 0,
		       int alignment = 0 );
    void insertLayout( int index, QLayout *layout, int stretch = 0 );


    bool setStretchFactor( QWidget*, int stretch );
    bool setStretchFactor( QLayout *l, int stretch );

    QSize sizeHint() const;
    QSize minimumSize() const;
    QSize maximumSize() const;

    bool hasHeightForWidth() const;
    int heightForWidth( int ) const;

    QSizePolicy::ExpandData expanding() const;
    void invalidate();
    QLayoutIterator iterator();
    void setGeometry( const QRect& );

    int findWidget( QWidget* w );
protected:
    void insertItem( int index, QLayoutItem * );

private:
    void setupGeom();
    int calcHfw( int );
    QBoxLayoutData *data;
    Direction dir;
private:	



#line 188 "c:\\qt\\include\\qlayout.h"

};


class __declspec(dllimport) QHBoxLayout : public QBoxLayout
{
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
public:
    QHBoxLayout( QWidget *parent, int border=0,
		int space = -1, const char *name=0 );
    QHBoxLayout( QLayout *parentLayout,
		 int space = -1, const char *name=0 );
    QHBoxLayout( int space = -1, const char *name=0 );

    ~QHBoxLayout();

};



class __declspec(dllimport) QVBoxLayout : public QBoxLayout
{
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
public:
    QVBoxLayout( QWidget *parent, int border=0,
		int space = -1, const char *name=0 );
    QVBoxLayout( QLayout *parentLayout,
		 int space = -1, const char *name=0 );
    QVBoxLayout( int space = -1, const char *name=0 );

    ~QVBoxLayout();

};



#line 225 "c:\\qt\\include\\qlayout.h"
#line 226 "c:\\qt\\include\\qlayout.h"
#line 8 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qvariant.h"

































































































































































































































































































































#line 9 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qtooltip.h"







































#line 1 "c:\\qt\\include\\qwidget.h"




















































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 41 "c:\\qt\\include\\qtooltip.h"
#line 1 "c:\\qt\\include\\qtimer.h"





















































































#line 42 "c:\\qt\\include\\qtooltip.h"
#line 43 "c:\\qt\\include\\qtooltip.h"




class QTipManager;
class QLabel;
class QIconViewToolTip;

class __declspec(dllimport) QToolTipGroup: public QObject
{
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
    
    

public:
    QToolTipGroup( QObject *parent, const char *name = 0 );
   ~QToolTipGroup();

    bool delay() const;
    bool enabled() const;

public :
    void setDelay( bool );
    void setEnabled( bool );

protected:
    void showTip( const QString &);
    void removeTip();

private:
    uint del:1;
    uint ena:1;

    friend class QTipManager;

private:	



#line 83 "c:\\qt\\include\\qtooltip.h"
};


class __declspec(dllimport) QToolTip: public Qt
{
public:
    QToolTip( QWidget *, QToolTipGroup * = 0 );

    static void add( QWidget *, const QString &);
    static void add( QWidget *, const QString &,
		     QToolTipGroup *, const QString& );
    static void remove( QWidget * );

    static void add( QWidget *, const QRect &, const QString &);
    static void add( QWidget *, const QRect &, const QString &,
		     QToolTipGroup *, const QString& );
    static void remove( QWidget *, const QRect & );

    static void hide();

    static QFont    font();
    static void	    setFont( const QFont & );
    static QPalette palette();
    static void	    setPalette( const QPalette & );

    static void	    setEnabled( bool );
    static bool	    enabled();

protected:
    virtual void maybeTip( const QPoint & ) = 0;
    void    tip( const QRect &, const QString &);
    void    tip( const QRect &, const QString& , const QString &);
    void    clear();

public:
    QWidget	  *parentWidget() const { return p; }
    QToolTipGroup *group()	  const { return g; }

private:
    void    tip( const QRect &, const QRect &, const QString &);
    QWidget	    *p;
    QToolTipGroup   *g;
    static QFont    *ttFont;
    static QPalette *ttPalette;

    static void initialize();
    static void cleanup();

    friend class QTipManager;
    friend class QIconViewToolTip;
};


#line 137 "c:\\qt\\include\\qtooltip.h"

#line 139 "c:\\qt\\include\\qtooltip.h"
#line 10 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qwhatsthis.h"







































#line 1 "c:\\qt\\include\\qobject.h"























































































































































































































































#line 41 "c:\\qt\\include\\qwhatsthis.h"
#line 42 "c:\\qt\\include\\qwhatsthis.h"



#line 1 "c:\\qt\\include\\qcursor.h"















































































































































#line 46 "c:\\qt\\include\\qwhatsthis.h"

class QToolButton;
class QPopupMenu;
class QStyleSheet;

class __declspec(dllimport) QWhatsThis: public Qt
{
public:
    QWhatsThis( QWidget *);
    virtual ~QWhatsThis();

    virtual QString text( const QPoint & );

    
    static void add( QWidget *, const QString &);
    static void remove( QWidget * );
    static QString textFor( QWidget *, const QPoint & pos = QPoint() );

    static QToolButton * whatsThisButton( QWidget * parent );

    static void enterWhatsThisMode();
    static bool inWhatsThisMode();
    static void leaveWhatsThisMode( const QString& = QString::null, const QPoint& pos = QCursor::pos() );

};

#line 73 "c:\\qt\\include\\qwhatsthis.h"

#line 75 "c:\\qt\\include\\qwhatsthis.h"
#line 11 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qlabel.h"









































#line 1 "c:\\qt\\include\\qframe.h"







































































































































































#line 43 "c:\\qt\\include\\qlabel.h"
#line 44 "c:\\qt\\include\\qlabel.h"



class QSimpleRichText;
class QLabelPrivate;

class __declspec(dllimport) QLabel : public QFrame
{
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
    
    
    
    
    
    
	
public:
    QLabel( QWidget *parent, const char *name=0, WFlags f=0 );
    QLabel( const QString &text, QWidget *parent, const char *name=0,
	    WFlags f=0 );
    QLabel( QWidget * buddy, const QString &,
	    QWidget * parent, const char * name=0, WFlags f=0 );
    ~QLabel();

    QString	 text()		const	{ return ltext; }
    QPixmap     *pixmap()	const	{ return lpixmap; }

    QMovie      *movie()		const;
#line 73 "c:\\qt\\include\\qlabel.h"

    TextFormat textFormat() const;
    void 	 setTextFormat( TextFormat );

    int		 alignment() const	{ return align; }
    virtual void setAlignment( int );
    int		 indent() const		{ return extraMargin; }
    void 	 setIndent( int );

    bool 	 autoResize() const	{ return autoresize; }
    virtual void setAutoResize( bool );

    bool 	hasScaledContents() const;
    void 	setScaledContents( bool );
#line 88 "c:\\qt\\include\\qlabel.h"
    QSize	 sizeHint() const;
    QSize	 minimumSizeHint() const;
    QSizePolicy  sizePolicy() const;

    virtual void setBuddy( QWidget * );
    QWidget     *buddy() const;
#line 95 "c:\\qt\\include\\qlabel.h"
    void	 setAutoMask(bool);

    int		 heightForWidth(int) const;

public :
    virtual void setText( const QString &);
    virtual void setPixmap( const QPixmap & );

    virtual void setMovie( const QMovie & );
#line 105 "c:\\qt\\include\\qlabel.h"
    virtual void setNum( int );
    virtual void setNum( double );
    void	 clear();

protected:
    void	 drawContents( QPainter * );
    void	 drawContentsMask( QPainter * );
    void	 fontChange( const QFont & );
    void	 resizeEvent( QResizeEvent* );

private :

    void	 acceleratorSlot();
    void	 buddyDied();
#line 120 "c:\\qt\\include\\qlabel.h"

    void	 movieUpdated(const QRect&);
    void	 movieResized(const QSize&);
#line 124 "c:\\qt\\include\\qlabel.h"

private:
    void	init();
    void	clearContents();
    void	updateLabel( QSize oldSizeHint );
    QSize	sizeForWidth( int w ) const;
    QString	ltext;
    QPixmap    *lpixmap;

    QMovie *	lmovie;
#line 135 "c:\\qt\\include\\qlabel.h"

    QWidget *	lbuddy;
#line 138 "c:\\qt\\include\\qlabel.h"
    ushort	align;
    short	extraMargin;
    uint	autoresize:1;
    uint	scaledcontents :1;
    TextFormat textformat;

    QSimpleRichText* doc;
#line 146 "c:\\qt\\include\\qlabel.h"

    QAccel *	accel;
#line 149 "c:\\qt\\include\\qlabel.h"
    QLabelPrivate* d;

private:	



#line 156 "c:\\qt\\include\\qlabel.h"
};


#line 160 "c:\\qt\\include\\qlabel.h"

#line 162 "c:\\qt\\include\\qlabel.h"
#line 12 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qlineedit.h"








































struct QLineEditPrivate;

class QComboBox;
class QValidator;



#line 1 "c:\\qt\\include\\qwidget.h"




















































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 49 "c:\\qt\\include\\qlineedit.h"
#line 1 "c:\\qt\\include\\qstring.h"
























































































































































































































































































































































































































































































































































































































































































































































































































































#line 50 "c:\\qt\\include\\qlineedit.h"
#line 51 "c:\\qt\\include\\qlineedit.h"



class __declspec(dllimport) QLineEdit : public QWidget
{
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
    
    
    
    
    
    
    
    
    
    
    
	
public:
    QLineEdit( QWidget *parent, const char *name=0 );
    QLineEdit( const QString &, QWidget *parent, const char *name=0 );
   ~QLineEdit();

    QString text() const;

    QString displayText() const;

    int		maxLength()	const;
    virtual void setMaxLength( int );

    virtual void setFrame( bool );
    bool	frame() const;

    enum	EchoMode { Normal, NoEcho, Password };
    virtual void setEchoMode( EchoMode );
    EchoMode 	echoMode() const;


#line 90 "c:\\qt\\include\\qlineedit.h"
    void setReadOnly( bool );
    bool isReadOnly() const;

    virtual void setValidator( const QValidator * );
    const QValidator * validator() const;

    QSize	sizeHint() const;
    QSize	minimumSizeHint() const;
    QSizePolicy sizePolicy() const;

    virtual void setEnabled( bool );
    virtual void setFont( const QFont & );
    virtual void setPalette( const QPalette & );
    virtual void setSelection( int, int );

    virtual void setCursorPosition( int );
    int		cursorPosition() const;

    bool	validateAndSet( const QString &, int, int, int );


    void	cut();
    void	copy() const;
    void	paste();
#line 115 "c:\\qt\\include\\qlineedit.h"

    void setAlignment( int flag );
    int alignment() const;

    void	cursorLeft( bool mark, int steps = 1 );
    void	cursorRight( bool mark, int steps = 1 );
    void	cursorWordForward( bool mark );
    void	cursorWordBackward( bool mark );
    void	backspace();
    void	del();
    void	home( bool mark );
    void	end( bool mark );

    void	setEdited( bool );
    bool	edited() const;

    bool	hasMarkedText() const;
    QString	markedText() const;

public :
    virtual void setText( const QString &);

    void	selectAll();
    void	deselect();

    void	clearValidator();

    void	insert( const QString &);

    void	clear();

protected:
    void	textChanged( const QString &);
    void	returnPressed();

protected:
    bool	event( QEvent * );
    void	mousePressEvent( QMouseEvent * );
    void	mouseMoveEvent( QMouseEvent * );
    void	mouseReleaseEvent( QMouseEvent * );
    void	mouseDoubleClickEvent( QMouseEvent * );
    void	keyPressEvent( QKeyEvent * );
    void	focusInEvent( QFocusEvent * );
    void	focusOutEvent( QFocusEvent * );
    void	paintEvent( QPaintEvent * );
    void	resizeEvent( QResizeEvent * );
    void	leaveEvent( QEvent * );

    void	dragEnterEvent( QDragEnterEvent * );
    void	dropEvent( QDropEvent * );
#line 166 "c:\\qt\\include\\qlineedit.h"

    void	repaintArea( int, int );

private :
    void	clipboardChanged();
    void	blinkSlot();
    void	dragScrollSlot();

    void 	doDrag();
#line 176 "c:\\qt\\include\\qlineedit.h"

private:
    
    void	newMark( int pos, bool copy=1 );
    void	markWord( int pos );
    int		lastCharVisible() const;
    int		minMark() const;
    int		maxMark() const;
    int		frameW() const;

    void	init();

    QString	tbuf;
    QLineEditPrivate * d;
    int		cursorPos;
    int		offset;
    int		maxLen;
    int		markAnchor;
    int		markDrag;
    bool	cursorOn;
    bool	dragScrolling;
    bool	scrollingLeft;
    int		alignmentFlag;
    bool	ed;

    void updateOffset();
    int xPosToCursorPos( int ) const;
    void blinkOn();
    void makePixmap() const;
    void undoInternal();
    void redoInternal();

private:	



#line 213 "c:\\qt\\include\\qlineedit.h"
};


#line 217 "c:\\qt\\include\\qlineedit.h"

#line 219 "c:\\qt\\include\\qlineedit.h"
#line 13 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qmultilineedit.h"



































































































































































































































































































































































































#line 14 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qmenubar.h"









































#line 1 "c:\\qt\\include\\qpopupmenu.h"









































#line 1 "c:\\qt\\include\\qframe.h"







































































































































































#line 43 "c:\\qt\\include\\qpopupmenu.h"
#line 1 "c:\\qt\\include\\qmenudata.h"









































#line 1 "c:\\qt\\include\\qglobal.h"


























































































































































































































































































































































































































































































































































































































































#line 43 "c:\\qt\\include\\qmenudata.h"



#line 1 "c:\\qt\\include\\qiconset.h"


















































































#line 47 "c:\\qt\\include\\qmenudata.h"

#line 49 "c:\\qt\\include\\qmenudata.h"



class QPopupMenu;
class QMenuDataData;
class QObject;

































































#line 121 "c:\\qt\\include\\qmenudata.h"

class QMenuItem;
class QMenuItemList;
class QPixmap;

#line 127 "c:\\qt\\include\\qmenudata.h"



class __declspec(dllimport) QCustomMenuItem : public Qt
{
public:
    QCustomMenuItem();
    virtual ~QCustomMenuItem();
    virtual bool fullSpan() const;
    virtual bool isSeparator() const;
    virtual void setFont( const QFont& font );
    virtual void paint( QPainter* p, const QColorGroup& cg, bool act,
			bool enabled, int x, int y, int w, int h ) = 0;
    virtual QSize sizeHint() = 0;
};


class __declspec(dllimport) QMenuData			
{
friend class QMenuBar;
friend class QPopupMenu;
public:
    QMenuData();
    virtual ~QMenuData();

    uint	count() const;


    int		insertItem( const QString &text,
			    const QObject *receiver, const char* member,
			    int accel = 0, int id = -1, int index = -1 );
    int		insertItem( const QIconSet& icon,
			    const QString &text,
			    const QObject *receiver, const char* member,
			    int accel = 0, int id = -1, int index = -1 );
    int		insertItem( const QPixmap &pixmap,
			    const QObject *receiver, const char* member,
			    int accel = 0, int id = -1, int index = -1 );
    int		insertItem( const QIconSet& icon,
			    const QPixmap &pixmap,
			    const QObject *receiver, const char* member,
			    int accel = 0, int id = -1, int index = -1 );




    int		insertItem( const QString &text, int id=-1, int index=-1 );
    int		insertItem( const QIconSet& icon,
			    const QString &text, int id=-1, int index=-1 );

    int		insertItem( const QString &text, QPopupMenu *popup,
			    int id=-1, int index=-1 );
    int		insertItem( const QIconSet& icon,
			    const QString &text, QPopupMenu *popup,
			    int id=-1, int index=-1 );


    int		insertItem( const QPixmap &pixmap, int id=-1, int index=-1 );
    int		insertItem( const QIconSet& icon,
			    const QPixmap &pixmap, int id=-1, int index=-1 );
    int		insertItem( const QPixmap &pixmap, QPopupMenu *popup,
			    int id=-1, int index=-1 );
    int		insertItem( const QIconSet& icon,
			    const QPixmap &pixmap, QPopupMenu *popup,
			    int id=-1, int index=-1 );

    int		insertItem( QWidget* widget, int id=-1, int index=-1 );

    int		insertItem( const QIconSet& icon, QCustomMenuItem* custom, int id=-1, int index=-1 );
    int		insertItem( QCustomMenuItem* custom, int id=-1, int index=-1 );


    int		insertSeparator( int index=-1 );

    void	removeItem( int id )		{ removeItemAt(indexOf(id)); }
    void	removeItemAt( int index );
    void	clear();

    int		accel( int id )		const;
    void	setAccel( int key, int id );

    QIconSet    *iconSet( int id )	const;
    QString text( int id )		const;
    QPixmap    *pixmap( int id )	const;

    void setWhatsThis( int id, const QString& );
    QString whatsThis( int id ) const;


    void	changeItem( int id, const QString &text );
    void	changeItem( int id, const QPixmap &pixmap );
    void	changeItem( int id, const QIconSet &icon, const QString &text );
    void	changeItem( int id, const QIconSet &icon, const QPixmap &pixmap );

    void	changeItem( const QString &text, int id ); 
    void	changeItem( const QPixmap &pixmap, int id ); 
    void	changeItem( const QIconSet &icon, const QString &text, int id ); 


    bool	isItemEnabled( int id ) const;
    void	setItemEnabled( int id, bool enable );

    bool	isItemChecked( int id ) const;
    void	setItemChecked( int id, bool check );

    virtual void updateItem( int id );

    int		indexOf( int id )	const;
    int		idAt( int index )	const;
    virtual void	setId( int index, int id );

    bool	connectItem( int id,
			     const QObject *receiver, const char* member );
    bool	disconnectItem( int id,
				const QObject *receiver, const char* member );

    bool	setItemParameter( int id, int param );
    int	itemParameter( int id ) const;

    QMenuItem  *findItem( int id )	const;
    QMenuItem  *findItem( int id, QMenuData ** parent )	const;

    void activateItemAt( int index );

protected:
    int		   actItem;
    QMenuItemList *mitems;
    QMenuData	  *parentMenu;
    uint	   isPopupMenu	: 1;
    uint	   isMenuBar	: 1;
    uint	   badSize	: 1;
    uint	   mouseBtDn	: 1;
    uint	avoid_circularity : 1;
    uint 	actItemDown : 1;
    virtual void   menuContentsChanged();
    virtual void   menuStateChanged();
    virtual void   menuInsPopup( QPopupMenu * );
    virtual void   menuDelPopup( QPopupMenu * );

    QMenuItem * findPopup( QPopupMenu *, int *index = 0 );

private:
    int		insertAny( const QString *, const QPixmap *, QPopupMenu *,
			   const QIconSet*, int, int, QWidget* = 0, QCustomMenuItem* = 0);
    void	removePopup( QPopupMenu * );
    virtual void	setAllDirty( bool );
    void	changeItemIconSet( int id, const QIconSet &icon );

    QMenuDataData *d;

private:	



#line 282 "c:\\qt\\include\\qmenudata.h"
};


#line 286 "c:\\qt\\include\\qmenudata.h"

#line 288 "c:\\qt\\include\\qmenudata.h"
#line 44 "c:\\qt\\include\\qpopupmenu.h"
#line 45 "c:\\qt\\include\\qpopupmenu.h"




class __declspec(dllimport) QPopupMenu : public QFrame, public QMenuData
{
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
    
public:
    QPopupMenu( QWidget *parent=0, const char *name=0 );
   ~QPopupMenu();

    void	popup( const QPoint & pos, int indexAtPoint = 0 );
    void	updateItem( int id );

    virtual void	setCheckable( bool );
    bool	isCheckable() const;

    void	setFont( const QFont & );	
    void	show();				
    void	hide();				

    int		exec();
    int 	exec( const QPoint & pos, int indexAtPoint = 0 );

    virtual void	setActiveItem( int );
    QSize	sizeHint() const;

    int 	idAt( int index ) const { return QMenuData::idAt( index ); }
    int 	idAt( const QPoint& pos ) const;

    bool 	customWhatsThis() const;

    int	insertTearOffHandle( int id=-1, int index=-1 );
    
    void 	activateItemAt( int index ); 


protected:
    void	activated( int itemId );
    void	highlighted( int itemId );
    void	activatedRedirect( int itemId );
    void	highlightedRedirect( int itemId );
    void	aboutToShow();
    void	aboutToHide();

protected:
    int 	itemHeight( int ) const;
    int 	itemHeight( QMenuItem* mi ) const;
    void 	drawItem( QPainter* p, int tab, QMenuItem* mi,
		   bool act, int x, int y, int w, int h);

    void 	drawContents( QPainter * );

    void 	closeEvent( QCloseEvent *e );
    void	paintEvent( QPaintEvent * );
    void	mousePressEvent( QMouseEvent * );
    void	mouseReleaseEvent( QMouseEvent * );
    void	mouseMoveEvent( QMouseEvent * );
    void	keyPressEvent( QKeyEvent * );
    void	focusInEvent( QFocusEvent * );
    void	focusOutEvent( QFocusEvent * );
    void	timerEvent( QTimerEvent * );
    void 	styleChange( QStyle& );
    int 	columns() const;

    bool focusNextPrevChild( bool next );

private :
    void	subActivated( int itemId );
    void	subHighlighted( int itemId );

    void	accelActivated( int itemId );
    void	accelDestroyed();
#line 120 "c:\\qt\\include\\qpopupmenu.h"
    void	modalActivation( int );

    void	subMenuTimer();
    void	allowAnimation();
    void     toggleTearOff();

private:
    void	menuContentsChanged();
    void	menuStateChanged();
    void	menuInsPopup( QPopupMenu * );
    void	menuDelPopup( QPopupMenu * );
    void	frameChanged();

    void	actSig( int, bool = 0 );
    void	hilitSig( int );
    virtual void	setFirstItemActive();
    void	hideAllPopups();
    void	hidePopups();
    bool	tryMenuBar( QMouseEvent * );
    void	byeMenuBar();

    int		itemAtPos( const QPoint & ) const;
    QRect		itemGeometry( int index ); 
    void	updateSize();
    void	updateRow( int row );

    void	updateAccel( QWidget * );
    void	enableAccel( bool );
#line 149 "c:\\qt\\include\\qpopupmenu.h"
    QMenuItem  *selfItem;

    QAccel     *autoaccel;
#line 153 "c:\\qt\\include\\qpopupmenu.h"
    int popupActive;
    int tab;
    uint accelDisabled : 1;
    uint checkable : 1;
    uint connectModalRecursionSafety : 1;
    uint tornOff : 1;
    int maxPMWidth;
    int ncols;
    bool	snapToMouse;
    bool	tryMouseEvent( QPopupMenu *, QMouseEvent * );

    friend class QMenuData;
    friend class QMenuBar;

    void connectModal(QPopupMenu* receiver, bool doConnect);

private:	



#line 174 "c:\\qt\\include\\qpopupmenu.h"
};


#line 178 "c:\\qt\\include\\qpopupmenu.h"

#line 180 "c:\\qt\\include\\qpopupmenu.h"
#line 43 "c:\\qt\\include\\qmenubar.h"
#line 44 "c:\\qt\\include\\qmenubar.h"



class __declspec(dllimport) QMenuBar : public QFrame, public QMenuData
{
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
    
    
    
	
public:
    QMenuBar( QWidget *parent=0, const char *name=0 );
   ~QMenuBar();

    void	updateItem( int id );

    void	show();				
    void	hide();				

    bool	eventFilter( QObject *, QEvent * );

    int		heightForWidth(int) const;

    enum	Separator { Never=0, InWindowsStyle=1 };
    Separator 	separator() const;
    virtual void	setSeparator( Separator when );

    void	setDefaultUp( bool );
    bool	isDefaultUp() const;

    bool customWhatsThis() const;

    QSize sizeHint() const;
    QSize minimumSize() const;
    QSize minimumSizeHint() const;
    
    void activateItemAt( int index ); 

protected:
    void	activated( int itemId );
    void	highlighted( int itemId );

protected:
    void	drawContents( QPainter * );
    void	fontChange( const QFont & );
    void	mousePressEvent( QMouseEvent * );
    void	mouseReleaseEvent( QMouseEvent * );
    void	mouseMoveEvent( QMouseEvent * );
    void	keyPressEvent( QKeyEvent * );
    void	focusInEvent( QFocusEvent * );
    void	focusOutEvent( QFocusEvent * );
    void	resizeEvent( QResizeEvent * );
    void	leaveEvent( QEvent * );
    void	menuContentsChanged();
    void	menuStateChanged();
    void 	styleChange( QStyle& );

private :
    void	subActivated( int itemId );
    void	subHighlighted( int itemId );

    void	accelActivated( int itemId );
    void	accelDestroyed();
#line 108 "c:\\qt\\include\\qmenubar.h"
private:
    void	menuInsPopup( QPopupMenu * );
    void	menuDelPopup( QPopupMenu * );
    void	frameChanged();

    bool	tryMouseEvent( QPopupMenu *, QMouseEvent * );
    void	tryKeyEvent( QPopupMenu *, QKeyEvent * );
    void	goodbye( bool cancelled = 0 );
    void	openActPopup();
    void	hidePopups();

    virtual void	setActItem( int, bool = 0 );
    virtual void	setWindowsAltMode( bool, int = 0 );

    void setActiveItem( int index, bool show = 1, bool activate_first_item = 1 );
    void setAltMode( bool );

    int		calculateRects( int max_width = -1 );
    int		itemAtPos( const QPoint & );
    QRect	itemRect( int item );


    void	setupAccelerators();
    QAccel     *autoaccel;
#line 133 "c:\\qt\\include\\qmenubar.h"
    QRect      *irects;
    int		rightSide;

    uint	mseparator : 1;
    uint	waitforalt : 1;
    uint	popupvisible  : 1;
    uint	hasmouse : 1;
    uint 	defaultup : 1;
    uint 	toggleclose : 1;

    friend class QPopupMenu;

private:	



#line 150 "c:\\qt\\include\\qmenubar.h"
};


#line 154 "c:\\qt\\include\\qmenubar.h"

#line 156 "c:\\qt\\include\\qmenubar.h"
#line 15 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qpopupmenu.h"



















































































































































































#line 16 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qstatusbar.h"









































#line 1 "c:\\qt\\include\\qwidget.h"




















































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 43 "c:\\qt\\include\\qstatusbar.h"
#line 44 "c:\\qt\\include\\qstatusbar.h"




class QStatusBarPrivate;


class __declspec(dllimport) QStatusBar: public QWidget
{
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
    
    
public:
    QStatusBar( QWidget * parent = 0, const char *name = 0 );
    ~QStatusBar();

    void addWidget( QWidget *, int stretch = 0, bool = 0 );
    void removeWidget( QWidget * );

    void setSizeGripEnabled(bool);
    bool isSizeGripEnabled() const;

public :
    void message( const QString &);
    void message( const QString &, int );
    void clear();

protected:
    void paintEvent( QPaintEvent * );
    void resizeEvent( QResizeEvent * );

    void reformat();
    void hideOrShow();
    bool event( QEvent *);
private:
    QStatusBarPrivate * d;
private:	



#line 85 "c:\\qt\\include\\qstatusbar.h"
};

#line 88 "c:\\qt\\include\\qstatusbar.h"

#line 90 "c:\\qt\\include\\qstatusbar.h"
#line 17 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qcstring.h"















































































































































































































































































































































































































#line 18 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qpoint.h"























































































































































































































#line 19 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qstring.h"
























































































































































































































































































































































































































































































































































































































































































































































































































































#line 20 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qtextstream.h"









































#line 1 "c:\\qt\\include\\qiodevice.h"



























































































































































#line 43 "c:\\qt\\include\\qtextstream.h"
#line 1 "c:\\qt\\include\\qstring.h"
























































































































































































































































































































































































































































































































































































































































































































































































































































#line 44 "c:\\qt\\include\\qtextstream.h"

#line 46 "c:\\qt\\include\\qtextstream.h"


class QTextCodec;
class QTextDecoder;

class QTextStreamPrivate;

class __declspec(dllimport) QTextStream				
{
public:
    enum Encoding { Locale, Latin1, Unicode, UnicodeNetworkOrder,
		    UnicodeReverse, RawUnicode, UnicodeUTF8 };

    void	setEncoding( Encoding );

    void	setCodec( QTextCodec* );
#line 63 "c:\\qt\\include\\qtextstream.h"

    

    QTextStream();
    QTextStream( QIODevice * );
    QTextStream( QString*, int mode );
    QTextStream( QString&, int mode );		
    QTextStream( QByteArray, int mode );
    QTextStream( FILE *, int mode );
    virtual ~QTextStream();

    QIODevice	*device() const;
    void	 setDevice( QIODevice * );
    void	 unsetDevice();

    bool	 atEnd() const;
    bool	 eof() const;

    QTextStream &operator>>( QChar & );
    QTextStream &operator>>( char & );
    QTextStream &operator>>( signed short & );
    QTextStream &operator>>( unsigned short & );
    QTextStream &operator>>( signed int & );
    QTextStream &operator>>( unsigned int & );
    QTextStream &operator>>( signed long & );
    QTextStream &operator>>( unsigned long & );
    QTextStream &operator>>( float & );
    QTextStream &operator>>( double & );
    QTextStream &operator>>( char * );
    QTextStream &operator>>( QString & );
    QTextStream &operator>>( QCString & );

    QTextStream &operator<<( QChar );
    QTextStream &operator<<( char );
    QTextStream &operator<<( signed short );
    QTextStream &operator<<( unsigned short );
    QTextStream &operator<<( signed int );
    QTextStream &operator<<( unsigned int );
    QTextStream &operator<<( signed long );
    QTextStream &operator<<( unsigned long );
    QTextStream &operator<<( float );
    QTextStream &operator<<( double );
    QTextStream &operator<<( const char* );
    QTextStream &operator<<( const QString & );
    QTextStream &operator<<( const QCString & );
    QTextStream &operator<<( void * );		

    QTextStream &readRawBytes( char *, uint len );
    QTextStream &writeRawBytes( const char* , uint len );

    QString	readLine();
    QString	read();
    void	skipWhiteSpace();

    enum {
	skipws	  = 0x0001,			
	left	  = 0x0002,			
	right	  = 0x0004,			
	internal  = 0x0008,			
	bin	  = 0x0010,			
	oct	  = 0x0020,			
	dec	  = 0x0040,			
	hex	  = 0x0080,			
	showbase  = 0x0100,			
	showpoint = 0x0200,			
	uppercase = 0x0400,			
	showpos	  = 0x0800,			
	scientific= 0x1000,			
	fixed	  = 0x2000			
    };

    static const int basefield;			
    static const int adjustfield;		
    static const int floatfield;		

    int	  flags() const;
    int	  flags( int f );
    int	  setf( int bits );
    int	  setf( int bits, int mask );
    int	  unsetf( int bits );

    void  reset();

    int	  width()	const;
    int	  width( int );
    int	  fill()	const;
    int	  fill( int );
    int	  precision()	const;
    int	  precision( int );

private:
    long	 input_int();
    void	init();
    QTextStream &output_int( int, ulong, bool );
    QIODevice	*dev;
    bool	isNetworkOrder() { return internalOrder == QChar::networkOrdered(); }

    int		 fflags;
    int		 fwidth;
    int		 fillchar;
    int		 fprec;
    bool	 fstrm;
    bool	 owndev;
    QTextCodec 	*mapper;
    QTextStreamPrivate * d;
    QChar	ungetcBuf;
    bool	latin1;
    bool 	internalOrder;
    bool	doUnicodeHeader;
    void	*reserved_ptr;

    QChar	eat_ws();
    void	ts_ungetc( QChar );
    QChar	ts_getc();
    uint	ts_getbuf( QChar*, uint );
    void	ts_putc(int);
    void	ts_putc(QChar);
    bool	ts_isspace(QChar);
    bool	ts_isdigit(QChar);
    ulong	input_bin();
    ulong	input_oct();
    ulong	input_dec();
    ulong	input_hex();
    double	input_double();
    QTextStream &writeBlock( const char* p, uint len );
    QTextStream &writeBlock( const QChar* p, uint len );

private:	



#line 195 "c:\\qt\\include\\qtextstream.h"
};

typedef QTextStream QTS;

class __declspec(dllimport) QTextIStream : public QTextStream {
public:
    QTextIStream( QString* s ) :
	QTextStream(s,0x0001) { }
    QTextIStream( QByteArray ba ) :
	QTextStream(ba,0x0001) { }
    QTextIStream( FILE *f ) :
	QTextStream(f,0x0001) { }
};

class __declspec(dllimport) QTextOStream : public QTextStream {
public:
    QTextOStream( QString* s ) :
	QTextStream(s,0x0002) { }
    QTextOStream( QByteArray ba ) :
	QTextStream(ba,0x0002) { }
    QTextOStream( FILE *f ) :
	QTextStream(f,0x0002) { }
};





inline QIODevice *QTextStream::device() const
{ return dev; }

inline bool QTextStream::atEnd() const
{ return dev ? dev->atEnd() : 0; }

inline bool QTextStream::eof() const
{ return atEnd(); }

inline int QTextStream::flags() const
{ return fflags; }

inline int QTextStream::flags( int f )
{ int oldf = fflags;  fflags = f;  return oldf; }

inline int QTextStream::setf( int bits )
{ int oldf = fflags;  fflags |= bits;  return oldf; }

inline int QTextStream::setf( int bits, int mask )
{ int oldf = fflags;  fflags = (fflags & ~mask) | (bits & mask); return oldf; }

inline int QTextStream::unsetf( int bits )
{ int oldf = fflags;  fflags &= ~bits;	return oldf; }

inline int QTextStream::width() const
{ return fwidth; }

inline int QTextStream::width( int w )
{ int oldw = fwidth;  fwidth = w;  return oldw;	 }

inline int QTextStream::fill() const
{ return fillchar; }

inline int QTextStream::fill( int f )
{ int oldc = fillchar;	fillchar = f;  return oldc;  }

inline int QTextStream::precision() const
{ return fprec; }

inline int QTextStream::precision( int p )
{ int oldp = fprec;  fprec = p;	 return oldp;  }




inline QChar QTextStream::ts_getc()
{ QChar r; return ( ts_getbuf( &r,1 ) == 1 ? r : QChar((ushort)0xffff) ); }





typedef QTextStream & (*QTSFUNC)(QTextStream &);
typedef int (QTextStream::*QTSMFI)(int);	

class __declspec(dllimport) QTSManip {			
public:
    QTSManip( QTSMFI m, int a ) { mf=m; arg=a; }
    void exec( QTextStream &s ) { (s.*mf)(arg); }
private:
    QTSMFI mf;					
    int	   arg;					
};

__declspec(dllimport) inline QTextStream &operator>>( QTextStream &s, QTSFUNC f )
{ return (*f)( s ); }

__declspec(dllimport) inline QTextStream &operator<<( QTextStream &s, QTSFUNC f )
{ return (*f)( s ); }

__declspec(dllimport) inline QTextStream &operator<<( QTextStream &s, QTSManip m )
{ m.exec(s); return s; }

__declspec(dllimport) QTextStream &bin( QTextStream &s );	
__declspec(dllimport) QTextStream &oct( QTextStream &s );	
__declspec(dllimport) QTextStream &dec( QTextStream &s );	
__declspec(dllimport) QTextStream &hex( QTextStream &s );	
__declspec(dllimport) QTextStream &endl( QTextStream &s );	
__declspec(dllimport) QTextStream &flush( QTextStream &s );	
__declspec(dllimport) QTextStream &ws( QTextStream &s );	
__declspec(dllimport) QTextStream &reset( QTextStream &s );	

__declspec(dllimport) inline QTSManip qSetW( int w )
{
    QTSMFI func = &QTextStream::width;
    return QTSManip(func,w);
}

__declspec(dllimport) inline QTSManip qSetFill( int f )
{
    QTSMFI func = &QTextStream::fill;
    return QTSManip(func,f);
}

__declspec(dllimport) inline QTSManip qSetPrecision( int p )
{
    QTSMFI func = &QTextStream::precision;
    return QTSManip(func,p);
}









__declspec(dllimport) inline QTSManip setw( int w )
{
    QTSMFI func = &QTextStream::width;
    return QTSManip(func,w);
}

__declspec(dllimport) inline QTSManip setfill( int f )
{
    QTSMFI func = &QTextStream::fill;
    return QTSManip(func,f);
}

__declspec(dllimport) inline QTSManip setprecision( int p )
{
    QTSMFI func = &QTextStream::precision;
    return QTSManip(func,p);
}
#line 349 "c:\\qt\\include\\qtextstream.h"

#line 351 "c:\\qt\\include\\qtextstream.h"
#line 352 "c:\\qt\\include\\qtextstream.h"
#line 21 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qdialog.h"






















































































































#line 22 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qnamespace.h"







































































































































































































































































































































































































































































































































































































































#line 23 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qmessagebox.h"









































#line 1 "c:\\qt\\include\\qdialog.h"






















































































































#line 43 "c:\\qt\\include\\qmessagebox.h"
#line 44 "c:\\qt\\include\\qmessagebox.h"



class  QLabel;
class  QPushButton;
struct QMBData;

class __declspec(dllimport) QMessageBox : public QDialog
{
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
    
    
    
    
    

public:
    enum Icon { NoIcon = 0, Information = 1, Warning = 2, Critical = 3 };

    QMessageBox( QWidget *parent=0, const char *name=0 );
    QMessageBox( const QString& caption, const QString &text, Icon icon,
		 int button0, int button1, int button2,
		 QWidget *parent=0, const char *name=0, bool modal=1,
		 WFlags f=WStyle_DialogBorder  );
   ~QMessageBox();

    enum { NoButton = 0, Ok = 1, Cancel = 2, Yes = 3, No = 4, Abort = 5,
	   Retry = 6, Ignore = 7, ButtonMask = 0x07,
	   Default = 0x100, Escape = 0x200, FlagMask = 0x300 };

    static int information( QWidget *parent, const QString &caption,
			    const QString& text,
			    int button0, int button1=0, int button2=0 );
    static int information( QWidget *parent, const QString &caption,
			    const QString& text,
			    const QString& button0Text = QString::null,
			    const QString& button1Text = QString::null,
			    const QString& button2Text = QString::null,
			    int defaultButtonNumber = 0,
			    int escapeButtonNumber = -1 );

    static int warning( QWidget *parent, const QString &caption,
			const QString& text,
			int button0, int button1, int button2=0 );
    static int warning( QWidget *parent, const QString &caption,
			const QString& text,
			const QString& button0Text = QString::null,
			const QString& button1Text = QString::null,
			const QString& button2Text = QString::null,
			int defaultButtonNumber = 0,
			int escapeButtonNumber = -1 );

    static int critical( QWidget *parent, const QString &caption,
			 const QString& text,
			 int button0, int button1, int button2=0 );
    static int critical( QWidget *parent, const QString &caption,
			 const QString& text,
			 const QString& button0Text = QString::null,
			 const QString& button1Text = QString::null,
			 const QString& button2Text = QString::null,
			 int defaultButtonNumber = 0,
			 int escapeButtonNumber = -1 );

    static void about( QWidget *parent, const QString &caption,
		       const QString& text );

    static void aboutQt( QWidget *parent,
			 const QString& caption=QString::null );


    static int message( const QString &caption,
			const QString& text, 
			const QString& buttonText=QString::null,
			QWidget *parent=0, const char *name=0 );

    static bool query( const QString &caption,
		       const QString& text, 
		       const QString& yesButtonText=QString::null,
		       const QString& noButtonText=QString::null,
		       QWidget *parent=0, const char *name=0 );
#line 125 "c:\\qt\\include\\qmessagebox.h"

    QString	text() const;
    void	setText( const QString &);

    Icon	icon() const;

    
    void	setIcon( Icon );
    void	setIcon( const QPixmap & );

    const QPixmap *iconPixmap() const;
    void	setIconPixmap( const QPixmap & );

    QString	buttonText( int button ) const;
    void	setButtonText( int button, const QString &);

    void	adjustSize();

    static QPixmap standardIcon( Icon icon, GUIStyle style );

    TextFormat textFormat() const;
    void 	 setTextFormat( TextFormat );

protected:
    void	resizeEvent( QResizeEvent * );
    void	keyPressEvent( QKeyEvent * );
    void	styleChanged( QStyle& );

private :
    void	buttonClicked();

private:
    void	init( int, int, int );
    int		indexOf( int ) const;
    void	resizeButtons();
    QLabel     *label;
    QMBData    *mbd;
    void       *reserved1;
    void       *reserved2;

private:	



#line 170 "c:\\qt\\include\\qmessagebox.h"
};

#line 173 "c:\\qt\\include\\qmessagebox.h"

#line 175 "c:\\qt\\include\\qmessagebox.h"
#line 24 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qcursor.h"















































































































































#line 25 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qfiledialog.h"








































struct QFileDialogPrivate;
class QPushButton;
class QLabel;
class QWidget;
class QFileDialog;
class QTimer;
class QNetworkOperation;
class QFileListView;


#line 1 "c:\\qt\\include\\qdir.h"









































#line 1 "c:\\qt\\include\\qstrlist.h"









































#line 1 "c:\\qt\\include\\qstring.h"
























































































































































































































































































































































































































































































































































































































































































































































































































































#line 43 "c:\\qt\\include\\qstrlist.h"
#line 1 "c:\\qt\\include\\qlist.h"











































































































































#line 44 "c:\\qt\\include\\qstrlist.h"
#line 1 "c:\\qt\\include\\qdatastream.h"













































































































































































#line 45 "c:\\qt\\include\\qstrlist.h"
#line 46 "c:\\qt\\include\\qstrlist.h"



template class __declspec(dllimport) QList<char>;
template class __declspec(dllimport) QListIterator<char>;
#line 52 "c:\\qt\\include\\qstrlist.h"

typedef QList<char>		QStrListBase;
typedef QListIterator<char>	QStrListIterator;


class __declspec(dllimport) QStrList : public QStrListBase
{
public:
    QStrList( bool deepCopies=1 ) { dc = deepCopies; del_item = deepCopies; }
    QStrList( const QStrList & );
   ~QStrList()			{ clear(); }
    QStrList& operator=( const QStrList & );

private:
    QCollection::Item newItem( QCollection::Item d ) { return dc ? qstrdup( (const char*)d ) : d; }
    void deleteItem( QCollection::Item d ) { if ( del_item ) delete[] (char*)d; }
    int compareItems( QCollection::Item s1, QCollection::Item s2 ) { return qstrcmp((const char*)s1,
							 (const char*)s2); }

    QDataStream &read( QDataStream &s, QCollection::Item &d )
				{ s >> (char *&)d; return s; }
    QDataStream &write( QDataStream &s, QCollection::Item d ) const
				{ return s << (const char *)d; }
#line 76 "c:\\qt\\include\\qstrlist.h"
    bool  dc;
};


class __declspec(dllimport) QStrIList : public QStrList	
{
public:
    QStrIList( bool deepCopies=1 ) : QStrList( deepCopies ) {}
   ~QStrIList()			{ clear(); }
private:
    int	  compareItems( QCollection::Item s1, QCollection::Item s2 )
				{ return qstricmp((const char*)s1,
						    (const char*)s2); }
};


inline QStrList & QStrList::operator=( const QStrList &strList )
{
    clear();
    dc = strList.dc;
    del_item = dc;
    QStrListBase::operator=(strList);
    return *this;
}

inline QStrList::QStrList( const QStrList &strList )
    : QStrListBase( strList )
{
    dc = 0;
    operator=(strList);
}


#line 110 "c:\\qt\\include\\qstrlist.h"
#line 43 "c:\\qt\\include\\qdir.h"
#line 1 "c:\\qt\\include\\qfileinfo.h"









































#line 1 "c:\\qt\\include\\qfile.h"









































#line 1 "c:\\qt\\include\\qiodevice.h"



























































































































































#line 43 "c:\\qt\\include\\qfile.h"
#line 1 "c:\\qt\\include\\qstring.h"
























































































































































































































































































































































































































































































































































































































































































































































































































































#line 44 "c:\\qt\\include\\qfile.h"

#line 46 "c:\\qt\\include\\qfile.h"

class QDir;


class __declspec(dllimport) QFile : public QIODevice			
{
public:
    QFile();
    QFile( const QString &name );
   ~QFile();

    QString	name()	const;
    void	setName( const QString &name );

    typedef QCString (*EncoderFn)( const QString &fileName );
    typedef QString (*DecoderFn)( const QCString &localfileName );
    static QCString encodeName( const QString &fileName );
    static QString decodeName( const QCString &localFileName );
    static void setEncodingFunction( EncoderFn );
    static void setDecodingFunction( DecoderFn );

    bool	exists()   const;
    static bool exists( const QString &fileName );

    bool	remove();
    static bool remove( const QString &fileName );

    bool	open( int );
    bool	open( int, FILE * );
    bool	open( int, int );
    void	close();
    void	flush();

    uint	size()	const;
    int		at()	const;
    bool	at( int );
    bool	atEnd() const;

    int		readBlock( char *data, uint len );
    int		writeBlock( const char *data, uint len );
    int		writeBlock( const QByteArray& data )
		    { return QIODevice::writeBlock(data); }
    int		readLine( char *data, uint maxlen );
    int		readLine( QString &, uint maxlen );

    int		getch();
    int		putch( int );
    int		ungetch( int );

    int		handle() const;

protected:
    QString	fn;
    FILE       *fh;
    int		fd;
    int		length;
    bool	ext_f;
    void * 	d;

private:
    void	init();
    QCString ungetchBuffer;

private:	



#line 114 "c:\\qt\\include\\qfile.h"
};


inline QString QFile::name() const
{ return fn; }

inline int QFile::at() const
{ return ioIndex; }


#line 125 "c:\\qt\\include\\qfile.h"
#line 43 "c:\\qt\\include\\qfileinfo.h"
#line 1 "c:\\qt\\include\\qdatetime.h"









































#line 1 "c:\\qt\\include\\qstring.h"
























































































































































































































































































































































































































































































































































































































































































































































































































































#line 43 "c:\\qt\\include\\qdatetime.h"
#line 44 "c:\\qt\\include\\qdatetime.h"






class __declspec(dllimport) QDate
{
public:
    QDate()  { jd=0; }				
    QDate( int y, int m, int d );		

    bool   isNull()	 const { return jd == 0; }
    bool   isValid()	 const;			

    int	   year()	 const;			
    int	   month()	 const;			
    int	   day()	 const;			
    int	   dayOfWeek()	 const;			
    int	   dayOfYear()	 const;			
    int	   daysInMonth() const;			
    int	   daysInYear()	 const;			

    virtual QString monthName( int month ) const;
    virtual QString dayName( int weekday ) const;

    QString toString()	 const;

    bool   setYMD( int y, int m, int d );

    QDate  addDays( int days )		const;
    int	   daysTo( const QDate & )	const;

    bool   operator==( const QDate &d ) const { return jd == d.jd; }
    bool   operator!=( const QDate &d ) const { return jd != d.jd; }
    bool   operator<( const QDate &d )	const { return jd < d.jd; }
    bool   operator<=( const QDate &d ) const { return jd <= d.jd; }
    bool   operator>( const QDate &d )	const { return jd > d.jd; }
    bool   operator>=( const QDate &d ) const { return jd >= d.jd; }

    static QDate currentDate();
    static bool	 isValid( int y, int m, int d );
    static bool	 leapYear( int year );

protected:
    static uint	 greg2jul( int y, int m, int d );
    static void	 jul2greg( uint jd, int &y, int &m, int &d );
private:
    static const char * const monthNames[];
    static const char * const weekdayNames[];
    uint	 jd;
    friend class QDateTime;

    friend __declspec(dllimport) QDataStream &operator<<( QDataStream &, const QDate & );
    friend __declspec(dllimport) QDataStream &operator>>( QDataStream &, QDate & );
#line 100 "c:\\qt\\include\\qdatetime.h"
};






class __declspec(dllimport) QTime
{
public:
    QTime() { ds=0; }				
    QTime( int h, int m, int s=0, int ms=0 );	

    bool   isNull()	 const { return ds == 0; }
    bool   isValid()	 const;			

    int	   hour()	 const;			
    int	   minute()	 const;			
    int	   second()	 const;			
    int	   msec()	 const;			

    QString toString()	 const;

    bool   setHMS( int h, int m, int s, int ms=0 );

    QTime  addSecs( int secs )		const;
    int	   secsTo( const QTime & )	const;
    QTime  addMSecs( int ms )		const;
    int	   msecsTo( const QTime & )	const;

    bool   operator==( const QTime &d ) const { return ds == d.ds; }
    bool   operator!=( const QTime &d ) const { return ds != d.ds; }
    bool   operator<( const QTime &d )	const { return ds < d.ds; }
    bool   operator<=( const QTime &d ) const { return ds <= d.ds; }
    bool   operator>( const QTime &d )	const { return ds > d.ds; }
    bool   operator>=( const QTime &d ) const { return ds >= d.ds; }

    static QTime currentTime();
    static bool	 isValid( int h, int m, int s, int ms=0 );

    void   start();
    int	   restart();
    int	   elapsed();

private:
    static bool currentTime( QTime * );

    uint   ds;
    friend class QDateTime;

    friend __declspec(dllimport) QDataStream &operator<<( QDataStream &, const QTime & );
    friend __declspec(dllimport) QDataStream &operator>>( QDataStream &, QTime & );
#line 153 "c:\\qt\\include\\qdatetime.h"
};






class __declspec(dllimport) QDateTime
{
public:
    QDateTime() {}				
    QDateTime( const QDate & );
    QDateTime( const QDate &, const QTime & );

    bool   isNull()	const		{ return d.isNull() && t.isNull(); }
    bool   isValid()	const		{ return d.isValid() && t.isValid(); }

    QDate  date()	const		{ return d; }
    QTime  time()	const		{ return t; }
    void   setDate( const QDate &date ) { d=date; }
    void   setTime( const QTime &time ) { t=time; }
    void   setTime_t( uint secsSince1Jan1970UTC );

    QString toString()	const;

    QDateTime addDays( int days )	const;
    QDateTime addSecs( int secs )	const;
    int	   daysTo( const QDateTime & )	const;
    int	   secsTo( const QDateTime & )	const;

    bool   operator==( const QDateTime &dt ) const;
    bool   operator!=( const QDateTime &dt ) const;
    bool   operator<( const QDateTime &dt )  const;
    bool   operator<=( const QDateTime &dt ) const;
    bool   operator>( const QDateTime &dt )  const;
    bool   operator>=( const QDateTime &dt ) const;

    static QDateTime currentDateTime();

private:
    QDate  d;
    QTime  t;

    friend __declspec(dllimport) QDataStream &operator<<( QDataStream &, const QDateTime &);
    friend __declspec(dllimport) QDataStream &operator>>( QDataStream &, QDateTime & );
#line 199 "c:\\qt\\include\\qdatetime.h"
};







__declspec(dllimport) QDataStream &operator<<( QDataStream &, const QDate & );
__declspec(dllimport) QDataStream &operator>>( QDataStream &, QDate & );
__declspec(dllimport) QDataStream &operator<<( QDataStream &, const QTime & );
__declspec(dllimport) QDataStream &operator>>( QDataStream &, QTime & );
__declspec(dllimport) QDataStream &operator<<( QDataStream &, const QDateTime & );
__declspec(dllimport) QDataStream &operator>>( QDataStream &, QDateTime & );
#line 214 "c:\\qt\\include\\qdatetime.h"

#line 216 "c:\\qt\\include\\qdatetime.h"
#line 44 "c:\\qt\\include\\qfileinfo.h"
#line 45 "c:\\qt\\include\\qfileinfo.h"


class QDir;
struct QFileInfoCache;


class __declspec(dllimport) QFileInfo				   
{
public:
    enum PermissionSpec {
	ReadUser  = 0400, WriteUser  = 0200, ExeUser  = 0100,
	ReadGroup = 0040, WriteGroup = 0020, ExeGroup = 0010,
	ReadOther = 0004, WriteOther = 0002, ExeOther = 0001 };

    QFileInfo();
    QFileInfo( const QString &file );
    QFileInfo( const QFile & );

    QFileInfo( const QDir &, const QString &fileName );
#line 65 "c:\\qt\\include\\qfileinfo.h"
    QFileInfo( const QFileInfo & );
   ~QFileInfo();

    QFileInfo  &operator=( const QFileInfo & );

    void	setFile( const QString &file );
    void	setFile( const QFile & );

    void	setFile( const QDir &, const QString &fileName );
#line 75 "c:\\qt\\include\\qfileinfo.h"
    bool	exists()	const;
    void	refresh()	const;
    bool	caching()	const;
    void	setCaching( bool );

    QString	filePath()	const;
    QString	fileName()	const;

    QString	absFilePath()	const;
#line 85 "c:\\qt\\include\\qfileinfo.h"
    QString	baseName()	const;
    QString	extension( bool complete = 1 ) const;


    QString	dirPath( bool absPath = 0 ) const;
#line 91 "c:\\qt\\include\\qfileinfo.h"

    QDir	dir( bool absPath = 0 )	const;
#line 94 "c:\\qt\\include\\qfileinfo.h"
    bool	isReadable()	const;
    bool	isWritable()	const;
    bool	isExecutable()	const;


    bool	isRelative()	const;
    bool	convertToAbs();
#line 102 "c:\\qt\\include\\qfileinfo.h"

    bool	isFile()	const;
    bool	isDir()		const;
    bool	isSymLink()	const;

    QString	readLink()	const;

    QString	owner()		const;
    uint	ownerId()	const;
    QString	group()		const;
    uint	groupId()	const;

    bool	permission( int permissionSpec ) const;

    uint	size()		const;

    QDateTime	lastModified()	const;
    QDateTime	lastRead()	const;

private:
    void	doStat() const;
    static void slashify( QString & );
    static void makeAbs( QString & );
    
    QString	fn;
    QFileInfoCache *fic;
    bool	cache;
};


inline bool QFileInfo::caching() const
{
    return cache;
}


#line 139 "c:\\qt\\include\\qfileinfo.h"
#line 44 "c:\\qt\\include\\qdir.h"
#line 45 "c:\\qt\\include\\qdir.h"


typedef QList<QFileInfo> QFileInfoList;
typedef QListIterator<QFileInfo> QFileInfoListIterator;
class QStringList;


class __declspec(dllimport) QDir
{
public:
    enum FilterSpec { Dirs	    = 0x001,
		      Files	    = 0x002,
		      Drives	    = 0x004,
		      NoSymLinks    = 0x008,
		      All	    = 0x007,
		       TypeMask	    = 0x00F,

		      Readable	    = 0x010,
		      Writable	    = 0x020,
		      Executable    = 0x040,
		       RWEMask	    = 0x070,

		      Modified	    = 0x080,
		      Hidden	    = 0x100,
		      System	    = 0x200,
		       AccessMask    = 0x3F0,

		      DefaultFilter = -1 };

    enum SortSpec   { Name	    = 0x00,
		      Time	    = 0x01,
		      Size	    = 0x02,
		      Unsorted	    = 0x03,
		       SortByMask    = 0x03,

		      DirsFirst	    = 0x04,
		      Reversed	    = 0x08,
		      IgnoreCase    = 0x10,
		      DefaultSort   = -1 };

    QDir();
    QDir( const QString &path, const QString &nameFilter = QString::null,
	  int sortSpec = Name | IgnoreCase, int filterSpec = All );
    QDir( const QDir & );

    virtual ~QDir();

    QDir       &operator=( const QDir & );
    QDir       &operator=( const QString &path );

    virtual void setPath( const QString &path );
    virtual QString path()		const;
    virtual QString absPath()	const;
    virtual QString canonicalPath()	const;

    virtual QString dirName() const;
    virtual QString filePath( const QString &fileName,
			      bool acceptAbsPath = 1 ) const;
    virtual QString absFilePath( const QString &fileName,
				 bool acceptAbsPath = 1 ) const;

    static QString convertSeparators( const QString &pathName );

    virtual bool cd( const QString &dirName, bool acceptAbsPath = 1 );
    virtual bool cdUp();

    QString	nameFilter() const;
    virtual void setNameFilter( const QString &nameFilter );
    FilterSpec filter() const;
    virtual void setFilter( int filterSpec );
    SortSpec sorting() const;
    virtual void setSorting( int sortSpec );

    bool	matchAllDirs() const;
    virtual void setMatchAllDirs( bool );

    uint count() const;
    QString	operator[]( int ) const;
    
    virtual QStrList encodedEntryList( int filterSpec = DefaultFilter,
				       int sortSpec   = DefaultSort  ) const;
    virtual QStrList encodedEntryList( const QString &nameFilter,
				       int filterSpec = DefaultFilter,
				       int sortSpec   = DefaultSort   ) const;
    virtual QStringList entryList( int filterSpec = DefaultFilter,
				   int sortSpec   = DefaultSort  ) const;
    virtual QStringList entryList( const QString &nameFilter,
				   int filterSpec = DefaultFilter,
				   int sortSpec   = DefaultSort   ) const;

    virtual const QFileInfoList *entryInfoList( int filterSpec = DefaultFilter,
						int sortSpec = DefaultSort ) const;
    virtual const QFileInfoList *entryInfoList( const QString &nameFilter,
						int filterSpec = DefaultFilter,
						int sortSpec = DefaultSort ) const;

    static const QFileInfoList *drives();

    virtual bool mkdir( const QString &dirName,
			bool acceptAbsPath = 1 ) const;
    virtual bool rmdir( const QString &dirName,
			bool acceptAbsPath = 1 ) const;

    virtual bool isReadable() const;
    virtual bool exists()   const;
    virtual bool isRoot()   const;

    virtual bool isRelative() const;
    virtual void convertToAbs();

    virtual bool operator==( const QDir & ) const;
    virtual bool operator!=( const QDir & ) const;

    virtual bool remove( const QString &fileName,
			 bool acceptAbsPath = 1 );
    virtual bool rename( const QString &name, const QString &newName,
			 bool acceptAbsPaths = 1  );
    virtual bool exists( const QString &name,
			 bool acceptAbsPath = 1 );

    static char separator();

    static bool setCurrent( const QString &path );
    static QDir current();
    static QDir home();
    static QDir root();
    static QString currentDirPath();
    static QString homeDirPath();
    static QString rootDirPath();

    static bool match( const QStringList &filters, const QString &fileName );
    static bool match( const QString &filter, const QString &fileName );
    static QString cleanDirPath( const QString &dirPath );
    static bool isRelativePath( const QString &path );

private:
    void init();
    virtual bool readDirEntries( const QString &nameFilter,
				 int FilterSpec, int SortSpec  );

    static void slashify ( QString &);

    QString	dPath;
    QStringList   *fList;
    QFileInfoList *fiList;
    QString	nameFilt;
    FilterSpec	filtS;
    SortSpec	sortS;
    uint	dirty	: 1;
    uint	allDirs : 1;
};


inline QString QDir::path() const
{
    return dPath;
}

inline QString QDir::nameFilter() const
{
    return nameFilt;
}

inline QDir::FilterSpec QDir::filter() const
{
    return filtS;
}

inline QDir::SortSpec QDir::sorting() const
{
    return sortS;
}

inline bool QDir::matchAllDirs() const
{
    return allDirs;
}

inline bool QDir::operator!=( const QDir &d ) const
{
    return !(*this == d);
}


struct QDirSortItem {
    QString filename_cache;
    QFileInfo* item;
};

#line 235 "c:\\qt\\include\\qdir.h"
#line 236 "c:\\qt\\include\\qdir.h"
#line 52 "c:\\qt\\include\\qfiledialog.h"
#line 1 "c:\\qt\\include\\qdialog.h"






















































































































#line 53 "c:\\qt\\include\\qfiledialog.h"
#line 1 "c:\\qt\\include\\qlistbox.h"



























































































































































































































































































































































































































#line 54 "c:\\qt\\include\\qfiledialog.h"
#line 1 "c:\\qt\\include\\qlineedit.h"


























































































































































































































#line 55 "c:\\qt\\include\\qfiledialog.h"
#line 1 "c:\\qt\\include\\qlistview.h"








































class QPixmap;
class QFont;
class QHeader;
class QIconSet;

class QListView;
struct QListViewPrivate;
class QListViewItemIterator;


#line 1 "c:\\qt\\include\\qscrollview.h"

































































































































































































































#line 52 "c:\\qt\\include\\qlistview.h"
#line 53 "c:\\qt\\include\\qlistview.h"




class __declspec(dllimport) QListViewItem: public Qt
{
    friend class QListViewItemIterator;

    friend class QListViewItem;
#line 63 "c:\\qt\\include\\qlistview.h"

public:
    QListViewItem( QListView * parent );
    QListViewItem( QListViewItem * parent );
    QListViewItem( QListView * parent, QListViewItem * after );
    QListViewItem( QListViewItem * parent, QListViewItem * after );

    QListViewItem( QListView * parent,
		   QString,     QString = QString::null,
		   QString = QString::null, QString = QString::null,
		   QString = QString::null, QString = QString::null,
		   QString = QString::null, QString = QString::null );
    QListViewItem( QListViewItem * parent,
		   QString,     QString = QString::null,
		   QString = QString::null, QString = QString::null,
		   QString = QString::null, QString = QString::null,
		   QString = QString::null, QString = QString::null );

    QListViewItem( QListView * parent, QListViewItem * after,
		   QString,     QString = QString::null,
		   QString = QString::null, QString = QString::null,
		   QString = QString::null, QString = QString::null,
		   QString = QString::null, QString = QString::null );
    QListViewItem( QListViewItem * parent, QListViewItem * after,
		   QString,     QString = QString::null,
		   QString = QString::null, QString = QString::null,
		   QString = QString::null, QString = QString::null,
		   QString = QString::null, QString = QString::null );
    virtual ~QListViewItem();

    virtual void insertItem( QListViewItem * );
    virtual void takeItem( QListViewItem * );
    virtual void removeItem( QListViewItem * ); 

    int height() const;
    virtual void invalidateHeight();
    int totalHeight() const;
    virtual int width( const QFontMetrics&,
		       const QListView*, int column) const;
    void widthChanged(int column=-1) const;
    int depth() const;

    virtual void setText( int, const QString &);
    virtual QString text( int ) const;

    virtual void setPixmap( int, const QPixmap & );
    virtual const QPixmap * pixmap( int ) const;

    virtual QString key( int, bool ) const;
    virtual void sortChildItems( int, bool );

    int childCount() const { return nChildren; }

    bool isOpen() const { return open; }
    virtual void setOpen( bool );
    virtual void setup();

    virtual void setSelected( bool );
    bool isSelected() const { return selected; }

    virtual void paintCell( QPainter *, const QColorGroup & cg,
			    int column, int width, int alignment );
    virtual void paintBranches( QPainter * p, const QColorGroup & cg,
				int w, int y, int h, GUIStyle s );
    virtual void paintFocus( QPainter *, const QColorGroup & cg,
			     const QRect & r );

    QListViewItem * firstChild() const;
    QListViewItem * nextSibling() const { return siblingItem; }
    QListViewItem * parent() const;

    QListViewItem * itemAbove();
    QListViewItem * itemBelow();

    int itemPos() const;

    QListView *listView() const;

    virtual void setSelectable( bool enable );
    bool isSelectable() const { return selectable; }

    virtual void setExpandable( bool );
    bool isExpandable() const { return expandable; }

    void repaint() const;

    void sort(); 
    void moveItem( QListViewItem *after );

protected:
    virtual void enforceSortOrder() const;
    virtual void setHeight( int );
    virtual void activate();

    bool activatedPos( QPoint & );
private:
    void init();
    void moveToJustAfter( QListViewItem * );
    int ownHeight;
    int maybeTotalHeight;
    int nChildren;

    uint lsc: 14;
    uint lso: 1;
    uint open : 1;
    uint selected : 1;
    uint selectable: 1;
    uint configured: 1;
    uint expandable: 1;
    uint is_root: 1;

    QListViewItem * parentItem;
    QListViewItem * siblingItem;
    QListViewItem * childItem;

    void * columns;

    friend class QListView;
};

class QCheckListItem;

class __declspec(dllimport) QListView: public QScrollView
{
    friend class QListViewItemIterator;
    friend class QListViewItem;
    friend class QCheckListItem;
    
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
    
    
    
    
    
    
    
    
    

public:
    QListView( QWidget * parent, const char *name, WFlags f );
    QListView( QWidget * parent = 0, const char *name = 0 ); 
    ~QListView();

    int treeStepSize() const;
    virtual void setTreeStepSize( int );

    virtual void insertItem( QListViewItem * );
    virtual void takeItem( QListViewItem * );
    virtual void removeItem( QListViewItem * ); 

    virtual void clear();

    QHeader * header() const;

    virtual int addColumn( const QString &label, int size = -1);
    virtual int addColumn( const QIconSet& iconset, const QString &label, int size = -1);
    void removeColumn( int index ); 
    virtual void setColumnText( int column, const QString &label );
    virtual void setColumnText( int column, const QIconSet& iconset, const QString &label );
    QString columnText( int column ) const;
    virtual void setColumnWidth( int column, int width );
    int columnWidth( int column ) const;
    enum WidthMode { Manual, Maximum };
    virtual void setColumnWidthMode( int column, WidthMode );
    WidthMode columnWidthMode( int column ) const;
    int columns() const;

    virtual void setColumnAlignment( int, int );
    int columnAlignment( int ) const;

    void show();

    QListViewItem * itemAt( const QPoint & screenPos ) const;
    QRect itemRect( const QListViewItem * ) const;
    int itemPos( const QListViewItem * );

    void ensureItemVisible( const QListViewItem * );

    void repaintItem( const QListViewItem * ) const;

    virtual void setMultiSelection( bool enable );
    bool isMultiSelection() const;

    enum SelectionMode { Single, Multi, Extended, NoSelection  };
    void setSelectionMode( SelectionMode mode );
    SelectionMode selectionMode() const;

    virtual void clearSelection();
    virtual void setSelected( QListViewItem *, bool );
    bool isSelected( const QListViewItem * ) const;
    QListViewItem * selectedItem() const;
    virtual void setOpen( QListViewItem *, bool );
    bool isOpen( const QListViewItem * ) const;

    virtual void setCurrentItem( QListViewItem * );
    QListViewItem * currentItem() const;

    QListViewItem * firstChild() const;

    int childCount() const;

    virtual void setAllColumnsShowFocus( bool );
    bool allColumnsShowFocus() const;

    virtual void setItemMargin( int );
    int itemMargin() const;

    virtual void setRootIsDecorated( bool );
    bool rootIsDecorated() const;

    virtual void setSorting( int column, bool increasing = 1 );
    void sort(); 

    virtual void setFont( const QFont & );
    virtual void setPalette( const QPalette & );

    bool eventFilter( QObject * o, QEvent * );

    QSize sizeHint() const;
    QSize minimumSizeHint() const;

    void setShowSortIndicator( bool show );
    bool showSortIndicator() const;

public :
    void invertSelection(); 
    void selectAll( bool select ); 
    void triggerUpdate();
    void setContentsPos( int x, int y );

protected:
    void selectionChanged();
    void selectionChanged( QListViewItem * );
    void currentChanged( QListViewItem * );
    void clicked( QListViewItem * );
    void clicked( QListViewItem *, const QPoint &, int );
    void pressed( QListViewItem * );
    void pressed( QListViewItem *, const QPoint &, int );

    void doubleClicked( QListViewItem * );
    void returnPressed( QListViewItem * );
    void rightButtonClicked( QListViewItem *, const QPoint&, int );
    void rightButtonPressed( QListViewItem *, const QPoint&, int );
    void mouseButtonPressed( int, QListViewItem *, const QPoint& , int );
    void mouseButtonClicked( int, QListViewItem *,  const QPoint&, int );

    void onItem( QListViewItem *item );
    void onViewport();

    void expanded( QListViewItem *item );
    void collapsed( QListViewItem *item );

protected:
    void contentsMousePressEvent( QMouseEvent * e );
    void contentsMouseReleaseEvent( QMouseEvent * e );
    void contentsMouseMoveEvent( QMouseEvent * e );
    void contentsMouseDoubleClickEvent( QMouseEvent * e );

    void focusInEvent( QFocusEvent * e );
    void focusOutEvent( QFocusEvent * e );

    void keyPressEvent( QKeyEvent *e );

    void resizeEvent( QResizeEvent *e );

    void showEvent( QShowEvent * );

    void drawContentsOffset( QPainter *, int ox, int oy,
			     int cx, int cy, int cw, int ch );

    virtual void paintEmptyArea( QPainter *, const QRect & );
    void enabledChange( bool );
    void styleChange( QStyle& );

protected :
    void updateContents();
    void doAutoScroll();

private :
    void changeSortColumn( int );
    void updateDirtyItems();
    void makeVisible();
    void handleSizeChange( int, int, int );

private:
    void init();
    void updateGeometries();
    void buildDrawableList() const;
    void reconfigureItems();
    void widthChanged(const QListViewItem*, int c);
    void handleItemChange( QListViewItem *old, bool shift, bool control );
    void selectRange( QListViewItem *from, QListViewItem *to, bool invert, bool includeFirst, bool clearSel = 0 );

    QListViewPrivate * d;

private:	



#line 364 "c:\\qt\\include\\qlistview.h"
};


class __declspec(dllimport) QCheckListItem : public QListViewItem
{
public:
    enum Type { RadioButton, CheckBox, Controller };

    QCheckListItem( QCheckListItem *parent, const QString &text,
		    Type = Controller );
    QCheckListItem( QListViewItem *parent, const QString &text,
		    Type = Controller );
    QCheckListItem( QListView *parent, const QString &text,
		    Type = Controller );
    QCheckListItem( QListViewItem *parent, const QString &text,
		    const QPixmap & );
    QCheckListItem( QListView *parent, const QString &text,
		    const QPixmap & );
    ~QCheckListItem();

    void paintCell( QPainter *,  const QColorGroup & cg,
		    int column, int width, int alignment );
    virtual void paintFocus( QPainter *, const QColorGroup & cg,
			     const QRect & r );
    int width( const QFontMetrics&, const QListView*, int column) const;
    void setup();

    virtual void setOn( bool );
    bool isOn() const { return on; }
    Type type() const { return myType; }
    QString text() const { return QListViewItem::text( 0 ); }
    QString text( int n ) const { return QListViewItem::text( n ); }

    void setEnabled( bool b );
    bool isEnabled() const;

protected:
    void paintBranches( QPainter * p, const QColorGroup & cg,
			int w, int y, int h, GUIStyle s );

    void activate();
    void turnOffChild();
    virtual void stateChange( bool );

private:
    void init();
    Type myType;
    bool on;
    QCheckListItem *exclusive;

    void *reserved;
};

class __declspec(dllimport) QListViewItemIterator
{
    friend struct QListViewPrivate;
    friend class QListView;
    friend class QListViewItem;

public:
    QListViewItemIterator();
    QListViewItemIterator( QListViewItem *item );
    QListViewItemIterator( const QListViewItemIterator &it );
    QListViewItemIterator( QListView *lv );

    QListViewItemIterator &operator=( const QListViewItemIterator &it );

    ~QListViewItemIterator();

    QListViewItemIterator &operator++();
    const QListViewItemIterator operator++( int );
    QListViewItemIterator &operator+=( int j );

    QListViewItemIterator &operator--();
    const QListViewItemIterator operator--( int );
    QListViewItemIterator &operator-=( int j );

    QListViewItem *current() const;

protected:
    QListViewItem *curr;
    QListView *listView;

private:
    void addToListView();
    void currentRemoved();

};

#line 454 "c:\\qt\\include\\qlistview.h"

#line 456 "c:\\qt\\include\\qlistview.h"
#line 56 "c:\\qt\\include\\qfiledialog.h"
#line 1 "c:\\qt\\include\\qurloperator.h"









































#line 1 "c:\\qt\\include\\qobject.h"























































































































































































































































#line 43 "c:\\qt\\include\\qurloperator.h"
#line 1 "c:\\qt\\include\\qurl.h"









































#line 1 "c:\\qt\\include\\qstring.h"
























































































































































































































































































































































































































































































































































































































































































































































































































































#line 43 "c:\\qt\\include\\qurl.h"
#line 1 "c:\\qt\\include\\qdir.h"











































































































































































































































#line 44 "c:\\qt\\include\\qurl.h"
#line 45 "c:\\qt\\include\\qurl.h"

struct QUrlPrivate;

class __declspec(dllimport) QUrl
{
public:
    QUrl();
    QUrl( const QString& url );
    QUrl( const QUrl& url );
    QUrl( const QUrl& url, const QString& relUrl, bool checkSlash = 0 );
    virtual ~QUrl();

    QString protocol() const;
    virtual void setProtocol( const QString& protocol );

    QString user() const;
    virtual void setUser( const QString& user );
    bool hasUser() const;

    QString password() const;
    virtual void setPassword( const QString& pass );
    bool hasPassword() const;

    QString host() const;
    virtual void setHost( const QString& user );
    bool hasHost() const;

    int port() const;
    virtual void setPort( int port );

    QString path( bool correct = 1 ) const;
    virtual void setPath( const QString& path );
    bool hasPath() const;

    virtual void setEncodedPathAndQuery( const QString& enc );
    QString encodedPathAndQuery();

    virtual void setQuery( const QString& txt );
    QString query() const;

    QString ref() const;
    virtual void setRef( const QString& txt );
    bool hasRef() const;

    bool isValid() const;
    bool isLocalFile() const;

    virtual void addPath( const QString& path );
    virtual void setFileName( const QString& txt );

    QString fileName() const;
    QString dirPath() const;

    QUrl& operator=( const QUrl& url );
    QUrl& operator=( const QString& url );

    bool operator==( const QUrl& url ) const;
    bool operator==( const QString& url ) const;

    static void decode( QString& url );
    static void encode( QString& url );

    operator QString() const;
    virtual QString toString( bool encodedPath = 0, bool forcePrependProtocol = 1 ) const;

    virtual bool cdUp();

    static bool isRelativeUrl( const QString &url );

protected:
    virtual void reset();
    virtual bool parse( const QString& url );

private:
    QUrlPrivate *d;

};

#line 124 "c:\\qt\\include\\qurl.h"
#line 44 "c:\\qt\\include\\qurloperator.h"
#line 1 "c:\\qt\\include\\qlist.h"











































































































































#line 45 "c:\\qt\\include\\qurloperator.h"
#line 1 "c:\\qt\\include\\qnetworkprotocol.h"









































#line 1 "c:\\qt\\include\\qurlinfo.h"









































#line 1 "c:\\qt\\include\\qdatetime.h"























































































































































































































#line 43 "c:\\qt\\include\\qurlinfo.h"
#line 1 "c:\\qt\\include\\qstring.h"
























































































































































































































































































































































































































































































































































































































































































































































































































































#line 44 "c:\\qt\\include\\qurlinfo.h"
#line 45 "c:\\qt\\include\\qurlinfo.h"

class QUrlOperator;
struct QUrlInfoPrivate;
class QUrl;

class __declspec(dllimport) QUrlInfo
{
public:
    QUrlInfo();
    QUrlInfo( const QUrlOperator &path, const QString &file );
    QUrlInfo( const QUrlInfo &ui );
    QUrlInfo( const QString &name, int permissions, const QString &owner,
	      const QString &group, uint size, const QDateTime &lastModified,
	      const QDateTime &lastRead, bool isDir, bool isFile, bool isSymLink,
	      bool isWritable, bool isReadable, bool isExecutable );
    QUrlInfo( const QUrl &url, int permissions, const QString &owner,
	      const QString &group, uint size, const QDateTime &lastModified,
	      const QDateTime &lastRead, bool isDir, bool isFile, bool isSymLink,
	      bool isWritable, bool isReadable, bool isExecutable );
    QUrlInfo &operator=( const QUrlInfo &ui );
    virtual ~QUrlInfo();

    virtual void setName( const QString &name );
    virtual void setDir( bool b );
    virtual void setFile( bool b );
    virtual void setSymLink( bool b );
    virtual void setOwner( const QString &s );
    virtual void setGroup( const QString &s );
    virtual void setSize( uint s );
    virtual void setWritable( bool b );
    virtual void setReadable( bool b );
    virtual void setPermissions( int p );
    virtual void setLastModified( const QDateTime &dt );

    QString name() const;
    int permissions() const;
    QString owner() const;
    QString group() const;
    uint size() const;
    QDateTime lastModified() const;
    QDateTime lastRead() const;
    bool isDir() const;
    bool isFile() const;
    bool isSymLink() const;
    bool isWritable() const;
    bool isReadable() const;
    bool isExecutable() const;

    static bool greaterThan( const QUrlInfo &i1, const QUrlInfo &i2,
			     int sortBy );
    static bool lessThan( const QUrlInfo &i1, const QUrlInfo &i2,
			  int sortBy );
    static bool equal( const QUrlInfo &i1, const QUrlInfo &i2,
		       int sortBy );

    bool operator==( const QUrlInfo &i ) const;
private:
    QUrlInfoPrivate *d;

};

#line 107 "c:\\qt\\include\\qurlinfo.h"
#line 43 "c:\\qt\\include\\qnetworkprotocol.h"
#line 1 "c:\\qt\\include\\qstring.h"
























































































































































































































































































































































































































































































































































































































































































































































































































































#line 44 "c:\\qt\\include\\qnetworkprotocol.h"
#line 1 "c:\\qt\\include\\qdict.h"









































#line 1 "c:\\qt\\include\\qgdict.h"






























































































































































































































#line 43 "c:\\qt\\include\\qdict.h"
#line 44 "c:\\qt\\include\\qdict.h"


template<class type> class __declspec(dllimport) QDict : public QGDict
{
public:
    QDict(int size=17, bool caseSensitive=1)
	: QGDict(size,StringKey,caseSensitive,0) {}
    QDict( const QDict<type> &d ) : QGDict(d) {}
   ~QDict()				{ clear(); }
    QDict<type> &operator=(const QDict<type> &d)
			{ return (QDict<type>&)QGDict::operator=(d); }
    uint  count()   const		{ return QGDict::count(); }
    uint  size()    const		{ return QGDict::size(); }
    bool  isEmpty() const		{ return QGDict::count() == 0; }

    void  insert( const QString &k, const type *d )
					{ QGDict::look_string(k,(Item)d,1); }
    void  replace( const QString &k, const type *d )
					{ QGDict::look_string(k,(Item)d,2); }
    bool  remove( const QString &k )	{ return QGDict::remove_string(k); }
    type *take( const QString &k )	{ return (type *)QGDict::take_string(k); }
    type *find( const QString &k ) const
		{ return (type *)((QGDict*)this)->QGDict::look_string(k,0,0); }
    type *operator[]( const QString &k ) const
		{ return (type *)((QGDict*)this)->QGDict::look_string(k,0,0); }

    void  clear()			{ QGDict::clear(); }
    void  resize( uint n )		{ QGDict::resize(n); }
    void  statistics() const		{ QGDict::statistics(); }
private:
    void  deleteItem( Item d );
};





#line 82 "c:\\qt\\include\\qdict.h"

template<class type> inline void QDict<type>::deleteItem( QCollection::Item d )
{
    if ( del_item ) delete (type *)d;
}


template<class type> class __declspec(dllimport) QDictIterator : public QGDictIterator
{
public:
    QDictIterator(const QDict<type> &d) :QGDictIterator((QGDict &)d) {}
   ~QDictIterator()	      {}
    uint  count()   const     { return dict->count(); }
    bool  isEmpty() const     { return dict->count() == 0; }
    type *toFirst()	      { return (type *)QGDictIterator::toFirst(); }
    operator type *() const   { return (type *)QGDictIterator::get(); }
    type   *current() const   { return (type *)QGDictIterator::get(); }
    QString currentKey() const{ return QGDictIterator::getKeyString(); }
    type *operator()()	      { return (type *)QGDictIterator::operator()(); }
    type *operator++()	      { return (type *)QGDictIterator::operator++(); }
    type *operator+=(uint j)  { return (type *)QGDictIterator::operator+=(j);}
};


#line 107 "c:\\qt\\include\\qdict.h"
#line 45 "c:\\qt\\include\\qnetworkprotocol.h"
#line 1 "c:\\qt\\include\\qdir.h"











































































































































































































































#line 46 "c:\\qt\\include\\qnetworkprotocol.h"
#line 1 "c:\\qt\\include\\qstringlist.h"

















































































#line 47 "c:\\qt\\include\\qnetworkprotocol.h"
#line 1 "c:\\qt\\include\\qobject.h"























































































































































































































































#line 48 "c:\\qt\\include\\qnetworkprotocol.h"
#line 1 "c:\\qt\\include\\qqueue.h"









































#line 1 "c:\\qt\\include\\qglist.h"

































































































































































































































































#line 43 "c:\\qt\\include\\qqueue.h"
#line 44 "c:\\qt\\include\\qqueue.h"


template<class type> class QQueue : private QGList
{
public:
    QQueue()				{}
    QQueue( const QQueue<type> &q ) : QGList(q) {}
   ~QQueue()				{ clear(); }
    QQueue<type>& operator=(const QQueue<type> &q)
			{ return (QQueue<type>&)QGList::operator=(q); }
    bool  autoDelete() const		{ return QCollection::autoDelete(); }
    void  setAutoDelete( bool del )	{ QCollection::setAutoDelete(del); }
    uint  count()   const		{ return QGList::count(); }
    bool  isEmpty() const		{ return QGList::count() == 0; }
    void  enqueue( const type *d )	{ QGList::append(Item(d)); }
    type *dequeue()			{ return (type *)QGList::takeFirst();}
    bool  remove()			{ return QGList::removeFirst(); }
    void  clear()			{ QGList::clear(); }
    type *head()    const		{ return (type *)QGList::cfirst(); }
	  operator type *() const	{ return (type *)QGList::cfirst(); }
    type *current() const		{ return (type *)QGList::cfirst(); }
private:
    void  deleteItem( Item d ) { if ( del_item ) delete (type *)d; }
};


#line 71 "c:\\qt\\include\\qqueue.h"
#line 49 "c:\\qt\\include\\qnetworkprotocol.h"
#line 50 "c:\\qt\\include\\qnetworkprotocol.h"



class QNetworkProtocol;
class QNetworkOperation;
class QTimer;
struct QNetworkProtocolPrivate;
class QUrlOperator;

class __declspec(dllimport) QNetworkProtocolFactoryBase
{
public:
   virtual QNetworkProtocol *createObject() = 0;

};

template< class Protocol >
class QNetworkProtocolFactory : public QNetworkProtocolFactoryBase
{
public:
    QNetworkProtocol *createObject() {
	return new Protocol;
    }

};

typedef QDict< QNetworkProtocolFactoryBase > QNetworkProtocolDict;

class __declspec(dllimport) QNetworkProtocol : public QObject
{
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;

public:
    enum State {
	StWaiting = 0,
	StInProgress,
	StDone,
	StFailed,
	StStopped
    };

    enum Operation {
	OpListChildren = 1,
	OpMkdir = 2,
	OpRemove = 4,
	OpRename = 8,
	OpGet = 32,
	OpPut = 64
    };

    enum ConnectionState {
	ConHostFound,
	ConConnected,
	ConClosed
    };

    enum Error {
	
	NoError = 0,
	
	ErrValid,
	ErrUnknownProtocol,
	ErrUnsupported,
	ErrParse,
	
	ErrLoginIncorrect,
	ErrHostNotFound,
	
	ErrListChlidren,
	ErrMkdir,
	ErrRemove,
	ErrRename,
	ErrGet,
	ErrPut,
	ErrFileNotExisting,
	ErrPermissionDenied
    };

    QNetworkProtocol();
    virtual ~QNetworkProtocol();

    virtual void setUrl( QUrlOperator *u );

    virtual void setAutoDelete( bool b, int i = 10000 );
    bool autoDelete() const;

    static void registerNetworkProtocol( const QString &protocol,
					 QNetworkProtocolFactoryBase *protocolFactory );
    static QNetworkProtocol *getNetworkProtocol( const QString &protocol );
    static bool hasOnlyLocalFileSystem();

    virtual int supportedOperations() const;
    virtual void addOperation( QNetworkOperation *op );

    QUrlOperator *url() const;
    QNetworkOperation *operationInProgress() const;
    virtual void clearOperationQueue();
    virtual void stop();

protected:
    void data( const QByteArray &, QNetworkOperation *res );
    void connectionStateChanged( int state, const QString &data );
    void finished( QNetworkOperation *res );
    void start( QNetworkOperation *res );
    void newChildren( const QValueList<QUrlInfo> &, QNetworkOperation *res );
    void newChild( const QUrlInfo &, QNetworkOperation *res );
    void createdDirectory( const QUrlInfo &, QNetworkOperation *res );
    void removed( QNetworkOperation *res );
    void itemChanged( QNetworkOperation *res );
    void dataTransferProgress( int bytesDone, int bytesTotal, QNetworkOperation *res );

protected:
    virtual void processOperation( QNetworkOperation *op );
    virtual void operationListChildren( QNetworkOperation *op );
    virtual void operationMkDir( QNetworkOperation *op );
    virtual void operationRemove( QNetworkOperation *op );
    virtual void operationRename( QNetworkOperation *op );
    virtual void operationGet( QNetworkOperation *op );
    virtual void operationPut( QNetworkOperation *op );
    virtual bool checkConnection( QNetworkOperation *op );

private:
    QNetworkProtocolPrivate *d;

private :
    void processNextOperation( QNetworkOperation *old );
    void startOps();
    void emitNewChildren( const QUrlInfo &i, QNetworkOperation *op );

    void removeMe();

};

struct QNetworkOperationPrivate;
class __declspec(dllimport) QNetworkOperation : public QObject
{
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
    friend class QUrlOperator;

public:
    QNetworkOperation( QNetworkProtocol::Operation operation,
		    const QString &arg0, const QString &arg1,
		    const QString &arg2 );
    QNetworkOperation( QNetworkProtocol::Operation operation,
		    const QByteArray &arg0, const QByteArray &arg1,
		    const QByteArray &arg2 );
    ~QNetworkOperation();

    void setState( QNetworkProtocol::State state );
    void setProtocolDetail( const QString &detail );
    void setErrorCode( int ec );
    void setArg( int num, const QString &arg );
    void setRawArg( int num, const QByteArray &arg );

    QNetworkProtocol::Operation operation() const;
    QNetworkProtocol::State state() const;
    QString arg( int num ) const;
    QByteArray rawArg( int num ) const;
    QString protocolDetail() const;
    int errorCode() const;

    void free();

private :
    void deleteMe();

private:
    QByteArray &raw( int num ) const;

    QNetworkOperationPrivate *d;

};

#line 224 "c:\\qt\\include\\qnetworkprotocol.h"

#line 226 "c:\\qt\\include\\qnetworkprotocol.h"
#line 46 "c:\\qt\\include\\qurloperator.h"
#line 47 "c:\\qt\\include\\qurloperator.h"



struct QUrlOperatorPrivate;
class QUrlInfo;

class __declspec(dllimport) QUrlOperator : public QObject, public QUrl
{
    friend class QNetworkProtocol;

    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;

public:
    QUrlOperator();
    QUrlOperator( const QString &urL );
    QUrlOperator( const QUrlOperator& url );
    QUrlOperator( const QUrlOperator& url, const QString& relUrl, bool checkSlash = 0 );
    virtual ~QUrlOperator();

    virtual void setPath( const QString& path );
    virtual bool cdUp();

    virtual const QNetworkOperation *listChildren();
    virtual const QNetworkOperation *mkdir( const QString &dirname );
    virtual const QNetworkOperation *remove( const QString &filename );
    virtual const QNetworkOperation *rename( const QString &oldname, const QString &newname );
    virtual const QNetworkOperation *get( const QString &location = QString::null );
    virtual const QNetworkOperation *put( const QByteArray &data, const QString &location = QString::null  );
    virtual QList<QNetworkOperation> copy( const QString &from, const QString &to, bool move = 0 );
    virtual void copy( const QStringList &files, const QString &dest, bool move = 0 );
    virtual bool isDir( bool *ok = 0 );

    virtual void setNameFilter( const QString &nameFilter );
    QString nameFilter() const;

    virtual QUrlInfo info( const QString &entry ) const;

    QUrlOperator& operator=( const QUrlOperator &url );
    QUrlOperator& operator=( const QString &url );

    virtual void stop();

protected:
    void newChildren( const QValueList<QUrlInfo> &, QNetworkOperation *res );
    void finished( QNetworkOperation *res );
    void start( QNetworkOperation *res );
    void createdDirectory( const QUrlInfo &, QNetworkOperation *res );
    void removed( QNetworkOperation *res );
    void itemChanged( QNetworkOperation *res );
    void data( const QByteArray &, QNetworkOperation *res );
    void dataTransferProgress( int bytesDone, int bytesTotal, QNetworkOperation *res );
    void startedNextCopy( const QList<QNetworkOperation> &lst );
    void connectionStateChanged( int state, const QString &data );

protected:
    virtual void reset();
    virtual bool parse( const QString& url );
    virtual bool checkValid();
    virtual void clearEntries();
    void getNetworkProtocol();
    void deleteNetworkProtocol();

private :
    void copyGotData( const QByteArray &data, QNetworkOperation *op );
    void continueCopy( QNetworkOperation *op );
    void finishedCopy();
    void addEntry( const QValueList<QUrlInfo> &i );

private:
    void deleteOperation( QNetworkOperation *op );

    QUrlOperatorPrivate *d;

};

#line 123 "c:\\qt\\include\\qurloperator.h"

#line 125 "c:\\qt\\include\\qurloperator.h"
#line 57 "c:\\qt\\include\\qfiledialog.h"
#line 1 "c:\\qt\\include\\qurlinfo.h"










































































































#line 58 "c:\\qt\\include\\qfiledialog.h"
#line 59 "c:\\qt\\include\\qfiledialog.h"



class __declspec(dllimport) QFileIconProvider : public QObject
{
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
public:
    QFileIconProvider( QObject * parent = 0, const char* name = 0 );
    virtual const QPixmap * pixmap( const QFileInfo & );

private:	



#line 74 "c:\\qt\\include\\qfiledialog.h"
};

class __declspec(dllimport) QFilePreview
{
public:
    QFilePreview();
    virtual void previewUrl( const QUrl &url ) = 0;

};

class __declspec(dllimport) QFileDialog : public QDialog
{
    friend class QFileListBox;
    friend class QFileListView;

    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
    
    
    
    
    
    
    
    
    
    
    
    
    

public:
    QFileDialog( const QString& dirName, const QString& filter = QString::null,
                 QWidget *parent=0, const char *name = 0, bool modal = 0 );
    QFileDialog( QWidget *parent=0, const char *name = 0, bool modal = 0 );
    ~QFileDialog();

    

    static QString getOpenFileName( const QString &initially = QString::null,
				    const QString &filter = QString::null,
				    QWidget *parent = 0, const char* name = 0 ); 
    static QString getOpenFileName( const QString &initially,
				    const QString &filter,
				    QWidget *parent, const char* name, const QString& caption );
    static QString getSaveFileName( const QString &initially = QString::null,
				    const QString &filter = QString::null,
				    QWidget *parent = 0, const char* name = 0);
    static QString getSaveFileName( const QString &initially,
				    const QString &filter,
				    QWidget *parent, const char* name,
				    const QString& caption);
    static QString getExistingDirectory( const QString &dir = QString::null,
					 QWidget *parent = 0,
					 const char* name = 0 );
    static QString getExistingDirectory( const QString &dir,
					 QWidget *parent,
					 const char* name,
					 const QString& caption );
    static QString getExistingDirectory( const QString &dir,
					 QWidget *parent,
					 const char* name,
					 const QString& caption,
					 bool dirOnly );
    static QStringList getOpenFileNames( const QString &filter= QString::null,
					 const QString &dir = QString::null,
					 QWidget *parent = 0,
					 const char* name = 0);
    static QStringList getOpenFileNames( const QString &filter,
					 const QString &dir,
					 QWidget *parent,
					 const char* name,
					 const QString& caption);


    

    static void setIconProvider( QFileIconProvider * );
    static QFileIconProvider * iconProvider();

    

    QString selectedFile() const;
    QString selectedFilter() const;
    void setSelection( const QString &);

    void selectAll( bool b );

    QStringList selectedFiles() const;

    QString dirPath() const;

    void setDir( const QDir & );
    const QDir *dir() const;

    void setShowHiddenFiles( bool s );
    bool showHiddenFiles() const;

    void rereadDir();
    void resortDir();

    enum Mode { AnyFile, ExistingFile, Directory, ExistingFiles, DirectoryOnly };
    void setMode( Mode );
    Mode mode() const;

    enum ViewMode { Detail, List };
    enum PreviewMode { NoPreview, Contents, Info };
    void setViewMode( ViewMode m );
    ViewMode viewMode() const;
    void setPreviewMode( PreviewMode m );
    PreviewMode previewMode() const;

    bool eventFilter( QObject *, QEvent * );

    bool isInfoPreviewEnabled() const;
    bool isContentsPreviewEnabled() const;
    void setInfoPreviewEnabled( bool );
    void setContentsPreviewEnabled( bool );

    void setInfoPreview( QWidget *w, QFilePreview *preview );
    void setContentsPreview( QWidget *w, QFilePreview *preview );

    QUrl url() const;

public :
    void done( int );
    void setDir( const QString& );
    void setUrl( const QUrlOperator &url );
    void setFilter( const QString& );
    void setFilters( const QString& );
    void setFilters( const char ** );
    void setFilters( const QStringList& );

protected:
    void resizeEvent( QResizeEvent * );
    void keyPressEvent( QKeyEvent * );

    void addWidgets( QLabel *, QWidget *, QPushButton * );
    void addToolButton( QButton *b, bool separator = 0 );
    void addLeftWidget( QWidget *w );
    void addRightWidget( QWidget *w );
    void addFilter( const QString &filter );

protected:
    void fileHighlighted( const QString& );
    void fileSelected( const QString& );
    void dirEntered( const QString& );

private :
    void detailViewSelectionChanged();
    void listBoxSelectionChanged();
    void changeMode( int );
    void fileNameEditReturnPressed();
    void stopCopy();
    void removeProgressDia();

    void fileSelected( int );
    void fileHighlighted( int );
    void dirSelected( int );
    void pathSelected( int );

    void updateFileNameEdit( QListViewItem *);
    void selectDirectoryOrFile( QListViewItem * );
    void popupContextMenu( QListViewItem *, const QPoint &, int );
    void popupContextMenu( QListBoxItem *, const QPoint & );
    void updateFileNameEdit( QListBoxItem *);
    void selectDirectoryOrFile( QListBoxItem * );
    void fileNameEditDone();

    void okClicked();
    void filterClicked(); 
    void cancelClicked();

    void cdUpClicked();
    void newFolderClicked();

    void fixupNameEdit();

    void doMimeTypeLookup();

    void updateGeometries();
    void modeButtonsDestroyed();
    void urlStart( QNetworkOperation *op );
    void urlFinished( QNetworkOperation *op );
    void dataTransferProgress( int bytesDone, int bytesTotal, QNetworkOperation * );
    void insertEntry( const QValueList<QUrlInfo> &fi, QNetworkOperation *op );
    void removeEntry( QNetworkOperation * );
    void createdDirectory( const QUrlInfo &info, QNetworkOperation * );
    void itemChanged( QNetworkOperation * );
    void goBack();

private:
    enum PopupAction {
        PA_Open = 0,
        PA_Delete,
        PA_Rename,
        PA_SortName,
        PA_SortSize,
        PA_SortType,
        PA_SortDate,
        PA_SortUnsorted,
        PA_Cancel,
        PA_Reload,
        PA_Hidden
    };

    void init();
    bool trySetSelection( bool isDir, const QUrlOperator &, bool );
    void deleteFile( const QString &filename );
    void popupContextMenu( const QString &filename, bool withSort,
                           PopupAction &action, const QPoint &p );

    QDir reserved; 
    QString fileName;

    QFileDialogPrivate *d;
    QFileListView  *files;

    QLineEdit  *nameEdit; 
    QPushButton *okB;
    QPushButton *cancelB;


    static QString winGetOpenFileName( const QString &initialSelection,
				       const QString &filter,
				       QString* workingDirectory,
				       QWidget *parent = 0,
				       const char* name = 0,
				       const QString& caption = QString::null);
    static QString winGetSaveFileName( const QString &initialSelection,
				       const QString &filter,
				       QString* workingDirectory,
				       QWidget *parent = 0,
				       const char* name = 0,
				       const QString& caption = QString::null);
    static QStringList winGetOpenFileNames( const QString &filter,
					    QString* workingDirectory,
					    QWidget *parent = 0,
					    const char* name = 0,
					    const QString& caption = QString::null);
#line 314 "c:\\qt\\include\\qfiledialog.h"

private:	



#line 320 "c:\\qt\\include\\qfiledialog.h"
};

#line 323 "c:\\qt\\include\\qfiledialog.h"

#line 325 "c:\\qt\\include\\qfiledialog.h"
#line 26 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qpoint.h"























































































































































































































#line 27 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qimage.h"









































#line 1 "c:\\qt\\include\\qpixmap.h"



































































































































































































































































































#line 43 "c:\\qt\\include\\qimage.h"
#line 1 "c:\\qt\\include\\qstrlist.h"













































































































#line 44 "c:\\qt\\include\\qimage.h"
#line 1 "c:\\qt\\include\\qstringlist.h"

















































































#line 45 "c:\\qt\\include\\qimage.h"
#line 46 "c:\\qt\\include\\qimage.h"

class QImageDataMisc; 

class QImageTextKeyLang {
public:
    QImageTextKeyLang(const char* k, const char* l) : key(k), lang(l) { }
    QImageTextKeyLang() { }

    QCString key;
    QCString lang;

    int operator < (const QImageTextKeyLang& other) const
	{ return key < other.key || key==other.key && lang < other.lang; }
    int operator == (const QImageTextKeyLang& other) const
	{ return key==other.key && lang==other.lang; }
};
#line 63 "c:\\qt\\include\\qimage.h"


class __declspec(dllimport) QImage
{
public:
    enum Endian { IgnoreEndian, BigEndian, LittleEndian };

    QImage();
    QImage( int width, int height, int depth, int numColors=0,
	    Endian bitOrder=IgnoreEndian );
    QImage( const QSize&, int depth, int numColors=0,
	    Endian bitOrder=IgnoreEndian );
    QImage( const QString &fileName, const char* format=0 );
    QImage( const char *xpm[] );
    QImage( const QByteArray &data );
    QImage( uchar* data, int w, int h, int depth,
		QRgb* colortable, int numColors,
		Endian bitOrder );





    QImage( const QImage & );
   ~QImage();

    QImage     &operator=( const QImage & );
    QImage     &operator=( const QPixmap & );
    bool   	operator==( const QImage & ) const;
    bool   	operator!=( const QImage & ) const;
    void	detach();
    QImage	copy()		const;
    QImage	copy(int x, int y, int w, int h, int conversion_flags=0) const;
    QImage	copy(QRect&)	const; 
    QImage	copy(const QRect&)	const;

    bool	isNull()	const	{ return data->bits == 0; }

    int		width()		const	{ return data->w; }
    int		height()	const	{ return data->h; }
    QSize	size()		const	{ return QSize(data->w,data->h); }
    QRect	rect()		const	{ return QRect(0,0,data->w,data->h); }
    int		depth()		const	{ return data->d; }
    int		numColors()	const	{ return data->ncols; }
    Endian 	bitOrder()	const	{ return (Endian) data->bitordr; }

    QRgb	color( int i )	const;
    void	setColor( int i, QRgb c );
    void	setNumColors( int );

    bool	hasAlphaBuffer() const;
    void	setAlphaBuffer( bool );

    bool	allGray() const;
    bool        isGrayscale() const;

    uchar      *bits()		const;
    uchar      *scanLine( int ) const;
    uchar     **jumpTable()	const;
    QRgb       *colorTable()	const;
    int		numBytes()	const;
    int		bytesPerLine()	const;




    
    bool	create( int width, int height, int depth, int numColors=0,
			Endian bitOrder=IgnoreEndian );
    bool	create( const QSize&, int depth, int numColors=0,
			Endian bitOrder=IgnoreEndian );
    void	reset();

    void	fill( uint pixel );
    void	invertPixels( bool invertAlpha = 1 );

    QImage	convertDepth( int ) const;

    QImage	convertDepthWithPalette( int, QRgb* p, int pc, int cf=0 ) const;
#line 143 "c:\\qt\\include\\qimage.h"
    QImage	convertDepth( int, int conversion_flags ) const;
    QImage	convertBitOrder( Endian ) const;

    QImage	smoothScale(int width, int height) const;
#line 148 "c:\\qt\\include\\qimage.h"
    QImage	createAlphaMask( int conversion_flags=0 ) const;
    QImage	createHeuristicMask( bool clipTight=1 ) const;

    QImage	mirror() const;
    QImage	mirror(bool horizontally, bool vertically) const;
    QImage	swapRGB() const;

    static Endian systemBitOrder();
    static Endian systemByteOrder();

    static const char* imageFormat( const QString &fileName );
    static QStrList inputFormats();
    static QStrList outputFormats();

    static QStringList inputFormatList();
    static QStringList outputFormatList();
#line 165 "c:\\qt\\include\\qimage.h"
    bool	load( const QString &fileName, const char* format=0 );
    bool	loadFromData( const uchar *buf, uint len,
			      const char *format=0 );
    bool	loadFromData( QByteArray data, const char* format=0 );
    bool	save( const QString &fileName, const char* format ) const; 
    bool	save( const QString &fileName, const char* format,
		      int quality ) const; 

    bool	valid( int x, int y ) const;
    int		pixelIndex( int x, int y ) const;
    QRgb	pixel( int x, int y ) const;
    void	setPixel( int x, int y, uint index_or_rgb );

    
    int dotsPerMeterX() const;
    int dotsPerMeterY() const;
    void setDotsPerMeterX(int);
    void setDotsPerMeterY(int);
    QPoint offset() const;
    void setOffset(const QPoint&);

    QValueList<QImageTextKeyLang> textList() const;
    QStringList textLanguages() const;
    QStringList textKeys() const;
    QString text(const char* key, const char* lang=0) const;
    QString text(const QImageTextKeyLang&) const;
    void setText(const char* key, const char* lang, const QString&);
#line 193 "c:\\qt\\include\\qimage.h"
private:
    void	init();
    void	reinit();
    void	freeBits();
    static void	warningIndexRange( const char *, int );

    struct QImageData : public QShared {	
	int	w;				
	int	h;				
	int	d;				
	int	ncols;				
	int	nbytes;				
	int	bitordr;			
	QRgb   *ctbl;				
	uchar **bits;				
	bool	alpha;				
	int	dpmx;				
	int	dpmy;				
	QPoint	offset;				

	QImageDataMisc* misc;			
#line 215 "c:\\qt\\include\\qimage.h"
	bool    bits_mine;			
	bool    ctbl_mine;			
    } *data;

    QImageDataMisc& misc() const;
#line 221 "c:\\qt\\include\\qimage.h"
    friend __declspec(dllimport) void bitBlt( QImage* dst, int dx, int dy,
				 const QImage* src, int sx, int sy,
				 int sw, int sh, int conversion_flags );
};





__declspec(dllimport) QDataStream &operator<<( QDataStream &, const QImage & );
__declspec(dllimport) QDataStream &operator>>( QDataStream &, QImage & );
#line 233 "c:\\qt\\include\\qimage.h"

class QIODevice;
typedef void (*image_io_handler)( QImageIO * ); 


struct QImageIOData; 


class __declspec(dllimport) QImageIO
{
public:
    QImageIO();
    QImageIO( QIODevice	 *ioDevice, const char *format );
    QImageIO( const QString &fileName, const char* format );
   ~QImageIO();


    const QImage &image()	const	{ return im; }
    int		status()	const	{ return iostat; }
    const char *format()	const	{ return frmt; }
    QIODevice  *ioDevice()	const	{ return iodev; }
    QString	fileName()	const	{ return fname; }
    const char *parameters()	const	{ return params; }
    QString	description()	const	{ return descr; }

    void	setImage( const QImage & );
    void	setStatus( int );
    void	setFormat( const char * );
    void	setIODevice( QIODevice * );
    void	setFileName( const QString &);
    void	setParameters( const char * );
    void	setDescription( const QString &);

    bool	read();
    bool	write();

    static const char* imageFormat( const QString &fileName );
    static const char *imageFormat( QIODevice * );
    static QStrList inputFormats();
    static QStrList outputFormats();

    static void defineIOHandler( const char *format,
				 const char *header,
				 const char *flags,
				 image_io_handler read_image,
				 image_io_handler write_image );

private:
    QImage	im;				
    int		iostat;				
    QCString	frmt;				
    QIODevice  *iodev;				
    QString	fname;				
    char       *params;				
    QString     descr;				

private:	



#line 294 "c:\\qt\\include\\qimage.h"
};


__declspec(dllimport) void bitBlt( QImage* dst, int dx, int dy, const QImage* src,
		      int sx=0, int sy=0, int sw=-1, int sh=-1,
		      int conversion_flags=0 );






inline bool QImage::hasAlphaBuffer() const
{
    return data->alpha;
}

inline uchar *QImage::bits() const
{
    return data->bits ? data->bits[0] : 0;
}

inline uchar **QImage::jumpTable() const
{
    return data->bits;
}

inline QRgb *QImage::colorTable() const
{
    return data->ctbl;
}

inline int QImage::numBytes() const
{
    return data->nbytes;
}

inline int QImage::bytesPerLine() const
{
    return data->h ? data->nbytes/data->h : 0;
}


inline QImage QImage::copy(QRect& r) const
{
    return copy(r.x(), r.y(), r.width(), r.height());
}

inline QImage QImage::copy(const QRect& r) const
{
    return copy(r.x(), r.y(), r.width(), r.height());
}

inline QRgb QImage::color( int i ) const
{

    if ( i >= data->ncols )
	warningIndexRange( "color", i );
#line 353 "c:\\qt\\include\\qimage.h"
    return data->ctbl ? data->ctbl[i] : (QRgb)-1;
}

inline void QImage::setColor( int i, QRgb c )
{

    if ( i >= data->ncols )
	warningIndexRange( "setColor", i );
#line 362 "c:\\qt\\include\\qimage.h"
    if ( data->ctbl )
	data->ctbl[i] = c;
}

inline uchar *QImage::scanLine( int i ) const
{

    if ( i >= data->h )
	warningIndexRange( "scanLine", i );
#line 372 "c:\\qt\\include\\qimage.h"
    return data->bits ? data->bits[i] : 0;
}

inline int QImage::dotsPerMeterX() const
{
    return data->dpmx;
}

inline int QImage::dotsPerMeterY() const
{
    return data->dpmy;
}

inline QPoint QImage::offset() const
{
    return data->offset;
}


#line 392 "c:\\qt\\include\\qimage.h"
#line 28 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qsignalmapper.h"









































#line 1 "c:\\qt\\include\\qobject.h"























































































































































































































































#line 43 "c:\\qt\\include\\qsignalmapper.h"
#line 44 "c:\\qt\\include\\qsignalmapper.h"


class  QSignalMapperData;
struct QSignalMapperRec;


class __declspec(dllimport) QSignalMapper : public QObject {
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
public:
    QSignalMapper( QObject* parent, const char* name=0 );
    ~QSignalMapper();

    virtual void setMapping( const QObject* sender, int identifier );
    virtual void setMapping( const QObject* sender, const QString &identifier );
    void removeMappings( const QObject* sender );

protected:
    void mapped(int);
    void mapped(const QString &);

public :
    void map();

private:
    QSignalMapperData* d;
    QSignalMapperRec* getRec( const QObject* );

private :
    void removeMapping();
};


#line 77 "c:\\qt\\include\\qsignalmapper.h"
#line 29 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qstringlist.h"

















































































#line 30 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qcheckbox.h"









































#line 1 "c:\\qt\\include\\qbutton.h"


































































































































































































































#line 43 "c:\\qt\\include\\qcheckbox.h"
#line 44 "c:\\qt\\include\\qcheckbox.h"



class __declspec(dllimport) QCheckBox : public QButton
{
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
    
    

public:
    QCheckBox( QWidget *parent, const char *name=0 );
    QCheckBox( const QString &text, QWidget *parent, const char* name=0 );

    bool    isChecked() const;
    void    setChecked( bool check );

    void    setNoChange();

    void    setTristate(bool y=1);
    bool    isTristate() const;

    QSize sizeHint() const;
    QSizePolicy sizePolicy() const;

protected:
    void    resizeEvent( QResizeEvent* );
    void    drawButton( QPainter * );
    void    drawButtonLabel( QPainter * );
    void    updateMask();

private:	



#line 79 "c:\\qt\\include\\qcheckbox.h"
};


inline bool QCheckBox::isChecked() const
{ return isOn(); }

inline void QCheckBox::setChecked( bool check )
{ setOn( check ); }


#line 90 "c:\\qt\\include\\qcheckbox.h"

#line 92 "c:\\qt\\include\\qcheckbox.h"
#line 31 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qmainwindow.h"









































#line 1 "c:\\qt\\include\\qwidget.h"




















































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 43 "c:\\qt\\include\\qmainwindow.h"
#line 44 "c:\\qt\\include\\qmainwindow.h"



class QMenuBar;
class QStatusBar;
class QToolTipGroup;
class QToolBar;
template <class type> class QList;

class QMainWindowPrivate;

class __declspec(dllimport) QMainWindow: public QWidget
{
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
    
    
    
    
    

public:
    QMainWindow( QWidget * parent = 0, const char * name = 0, WFlags f = WType_TopLevel );
    ~QMainWindow();


    QMenuBar * menuBar() const;
#line 71 "c:\\qt\\include\\qmainwindow.h"
    QStatusBar * statusBar() const;
    QToolTipGroup * toolTipGroup() const;

    virtual void setCentralWidget( QWidget * );
    QWidget * centralWidget() const;

    
    
    
    enum ToolBarDock {
	Unmanaged, TornOff, Top, Bottom, Right, Left, Minimized
    };

    virtual void setDockEnabled( ToolBarDock dock, bool enable );
    bool isDockEnabled( ToolBarDock dock ) const;
    void setDockEnabled( QToolBar *tb, ToolBarDock dock, bool enable ); 
    bool isDockEnabled( QToolBar *tb, ToolBarDock dock ) const;

    void addToolBar( QToolBar *, ToolBarDock = Top, bool newLine = 0 );
    void addToolBar( QToolBar *, const QString &label,
		     ToolBarDock = Top, bool newLine = 0 );
    void moveToolBar( QToolBar *, ToolBarDock = Top );
    void moveToolBar( QToolBar *, ToolBarDock, bool nl, int index, int extraOffset = -1 );

    void removeToolBar( QToolBar * );


    void show();
    QSize sizeHint() const;
    QSize minimumSizeHint() const;

    bool rightJustification() const;
    bool usesBigPixmaps() const;
    bool usesTextLabel() const;
    bool toolBarsMovable() const;
    bool opaqueMoving() const;

    bool eventFilter( QObject*, QEvent* );

    bool getLocation( QToolBar *tb, ToolBarDock &dock, int &index, bool &nl, int &extraOffset ) const;




    QList<QToolBar> toolBars( ToolBarDock dock ) const;
#line 117 "c:\\qt\\include\\qmainwindow.h"
    void lineUpToolBars( bool keepNewLines = 0 );

    bool isDockMenuEnabled() const;

public :
    virtual void setRightJustification( bool );
    virtual void setUsesBigPixmaps( bool );
    void setUsesTextLabel( bool ); 
    void setToolBarsMovable( bool ); 
    void setOpaqueMoving( bool ); 
    void setDockMenuEnabled( bool );

    void whatsThis();

protected:
    void pixmapSizeChanged( bool );
    void usesTextLabelChanged( bool );
    void startMovingToolBar( QToolBar * );
    void endMovingToolBar( QToolBar * );
    void toolBarPositionChanged( QToolBar * );

protected :
    virtual void setUpLayout();

protected:
    void paintEvent( QPaintEvent * );
    void resizeEvent( QResizeEvent * );
    void childEvent( QChildEvent * );
    bool event( QEvent * );
    void styleChange( QStyle& );

private:
    QMainWindowPrivate * d;
    void triggerLayout( bool deleteLayout = 1);
    void moveToolBar( QToolBar *, QMouseEvent * );
    void rightMouseButtonMenu( const QPoint &p );


    virtual void setMenuBar( QMenuBar * );
#line 157 "c:\\qt\\include\\qmainwindow.h"
    virtual void setStatusBar( QStatusBar * );
    virtual void setToolTipGroup( QToolTipGroup * );
    ToolBarDock findDockArea( const QPoint &pos, QRect &rect, QToolBar *tb, QRect *dockRect = 0 );
    void moveToolBar( QToolBar *, ToolBarDock, QToolBar *relative, int ipos );

    friend class QToolBar;
    friend class QMenuBar;
    friend class QHideDock;
private:	



#line 170 "c:\\qt\\include\\qmainwindow.h"
};

#line 173 "c:\\qt\\include\\qmainwindow.h"

#line 175 "c:\\qt\\include\\qmainwindow.h"
#line 32 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qdatetime.h"























































































































































































































#line 33 "h:\\c_projekte\\elansim\\qtlib.h"
#line 5 "h:\\c_projekte\\elansim\\aboutdialog.h"
#line 1 "h:\\c_projekte\\elansim\\soqtlib.h"














































































#line 6 "h:\\c_projekte\\elansim\\aboutdialog.h"




class AboutDialog : public QDialog
{
	public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
public:
	AboutDialog( QWidget* parent = 0, const char* name = 0, bool modal = true, WFlags fl = WStyle_Tool);

private:

	QFrame* render_frame;
	QFrame* info_frame;
};

#line 23 "h:\\c_projekte\\elansim\\aboutdialog.h"
#line 6 "h:\\c_projekte\\elansim\\shellwidget.cpp"
#line 1 "h:\\c_projekte\\elansim\\growthgendialog.h"











#line 1 "c:\\qt\\include\\qvariant.h"

































































































































































































































































































































#line 13 "h:\\c_projekte\\elansim\\growthgendialog.h"
#line 1 "c:\\qt\\include\\qdialog.h"






















































































































#line 14 "h:\\c_projekte\\elansim\\growthgendialog.h"
class QVBoxLayout; 
class QHBoxLayout; 
class QGridLayout; 
class QComboBox;
class QGroupBox;
class QLabel;
class QPushButton;
class QSpinBox;
class QLineEdit;

class GrowthGenDialog : public QDialog
{ 
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;

public:
    GrowthGenDialog( QWidget* parent = 0, const char* name = 0, bool modal = 1, WFlags fl = 0 );
    ~GrowthGenDialog();

    QGroupBox* grpboxGrowthGen;
	QLabel* lblFilename;
    QLabel* lblGGName;
    QLabel* lblIntervall;
	QLineEdit* txtFilename;
    QComboBox* cmbGGName;
    QSpinBox* spnIntervall;
    QPushButton* btnCancel;
    QPushButton* btnOK;

	void setValues(QStringList namelist, int minVal[], int maxVal[]);

private:
	int* minV;
	int* maxV;
	
private :
	void ok();
	void cancel();
	void selected(int id);

};

#line 56 "h:\\c_projekte\\elansim\\growthgendialog.h"
#line 7 "h:\\c_projekte\\elansim\\shellwidget.cpp"
#line 1 "h:\\c_projekte\\elansim\\koordinatendialog.h"











#line 1 "c:\\qt\\include\\qvariant.h"

































































































































































































































































































































#line 13 "h:\\c_projekte\\elansim\\koordinatendialog.h"
#line 1 "c:\\qt\\include\\qdialog.h"






















































































































#line 14 "h:\\c_projekte\\elansim\\koordinatendialog.h"
class QVBoxLayout; 
class QHBoxLayout; 
class QGridLayout; 
class QGroupBox;
class QLabel;

class CoordinateDialog : public QDialog
{ 
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;

public:
    CoordinateDialog( QWidget* parent = 0, const char* name = 0, bool modal = 0, 
		WFlags fl = WStyle_Customize|WStyle_DialogBorder|WStyle_Title );
    ~CoordinateDialog();

    QGroupBox* grbBox;
    QLabel* lblXCoord;
    QLabel* lblYCoord;
    QLabel* lblZCoord;
    QLabel* lblXInput;
    QLabel* lblYInput;
    QLabel* lblZInput;



private:
	QWidget* parent;
	void keyPressEvent(QKeyEvent* e);
	void closeEvent(QCloseEvent* e);

};

#line 47 "h:\\c_projekte\\elansim\\koordinatendialog.h"
#line 8 "h:\\c_projekte\\elansim\\shellwidget.cpp"
#line 1 "h:\\c_projekte\\elansim\\avatardialog.h"











#line 1 "c:\\qt\\include\\qvariant.h"

































































































































































































































































































































#line 13 "h:\\c_projekte\\elansim\\avatardialog.h"
#line 1 "c:\\qt\\include\\qdialog.h"






















































































































#line 14 "h:\\c_projekte\\elansim\\avatardialog.h"
class QVBoxLayout; 
class QHBoxLayout; 
class QGridLayout; 
class QComboBox;
class QGroupBox;
class QPushButton;
class SbPList;
class SoVRMLGroup;
class SoPerspectiveCamera;
class SoQtRenderArea;
class SbStringList;
class SoAction;

class AvatarDialog : public QDialog
{ 
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;

public:
    AvatarDialog( QWidget* parent = 0, const char* name = 0, bool modal = 1, WFlags fl = 0 );
    ~AvatarDialog();

    QGroupBox* avFrame;
    QComboBox* cmbAvChoice;
    QPushButton* btnCancel;
    QPushButton* btnOK;
	SbStringList* names;
	
	void setList(SbPList* l);
	int getChoice() { return cur_Index; }

private:
	void buildWidget();

static void callback(void* data, SoAction* a);

	int cur_Index;
    SoQtRenderArea* area;
	SoVRMLGroup* child;
	SbStringList* avatar;
	SoVRMLGroup* root;
	SoPerspectiveCamera* camera;


private :
	void selected(int id);
	void ok();
	void cancel();
};

#line 64 "h:\\c_projekte\\elansim\\avatardialog.h"
#line 9 "h:\\c_projekte\\elansim\\shellwidget.cpp"
#line 1 "h:\\c_projekte\\elansim\\waitdialog.h"








#pragma once
#line 11 "h:\\c_projekte\\elansim\\waitdialog.h"

#line 1 "c:\\qt\\include\\qdialog.h"






















































































































#line 13 "h:\\c_projekte\\elansim\\waitdialog.h"

class QLabel;
class QTimer;

class WaitDialog : public QDialog
{
	public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
public:
	WaitDialog(QWidget* parent);
	void setTitle(const char* title);
	void setText(const char* text);
	QString getText();

private:
	QLabel* _text;
	QTimer* _timer;
	QWidget* _parent;

};

#line 34 "h:\\c_projekte\\elansim\\waitdialog.h"
#line 10 "h:\\c_projekte\\elansim\\shellwidget.cpp"
#line 1 "h:\\c_projekte\\elansim\\shellwidget.h"











































#line 1 "c:\\qt\\include\\qmainwindow.h"














































































































































































#line 45 "h:\\c_projekte\\elansim\\shellwidget.h"


#line 1 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qapplication.h"
























































































































































































































































































































































































































#line 2 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qframe.h"







































































































































































#line 3 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qlistbox.h"



























































































































































































































































































































































































































#line 4 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qpushbutton.h"







































































































































#line 5 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qtabwidget.h"

















































































































































#line 6 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qwidget.h"




















































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 7 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qlayout.h"

































































































































































































































#line 8 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qvariant.h"

































































































































































































































































































































#line 9 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qtooltip.h"










































































































































#line 10 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qwhatsthis.h"










































































#line 11 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qlabel.h"

































































































































































#line 12 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qlineedit.h"


























































































































































































































#line 13 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qmultilineedit.h"



































































































































































































































































































































































































#line 14 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qmenubar.h"



























































































































































#line 15 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qpopupmenu.h"



















































































































































































#line 16 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qstatusbar.h"

























































































#line 17 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qcstring.h"















































































































































































































































































































































































































#line 18 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qpoint.h"























































































































































































































#line 19 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qstring.h"
























































































































































































































































































































































































































































































































































































































































































































































































































































#line 20 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qtextstream.h"































































































































































































































































































































































#line 21 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qdialog.h"






















































































































#line 22 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qnamespace.h"







































































































































































































































































































































































































































































































































































































































#line 23 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qmessagebox.h"














































































































































































#line 24 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qcursor.h"















































































































































#line 25 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qfiledialog.h"




































































































































































































































































































































#line 26 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qpoint.h"























































































































































































































#line 27 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qimage.h"







































































































































































































































































































































































































#line 28 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qsignalmapper.h"












































































#line 29 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qstringlist.h"

















































































#line 30 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qcheckbox.h"



























































































#line 31 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qmainwindow.h"














































































































































































#line 32 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qdatetime.h"























































































































































































































#line 33 "h:\\c_projekte\\elansim\\qtlib.h"
#line 48 "h:\\c_projekte\\elansim\\shellwidget.h"
#line 1 "h:\\c_projekte\\elansim\\iointerface.h"





































































































































#line 49 "h:\\c_projekte\\elansim\\shellwidget.h"
#line 1 "h:\\c_projekte\\elansim\\io_flags.h"










enum IO_Flag { 	
	
		logout				= 1, 
		login				= 2,
		loginaccepted		= 4,
		listrequest			= 8,
		lists				= 16,
		texturerequest		= 32,
		textures			= 64,
		scenerequest		= 128,
		scene				= 256,
		cur_scenerequest	= 512,
		movement			= 1024,
		io_evt				= 2048,
		chat				= 4096,
		io_master			= 8192,
		io_error			= 16384,
		new_client			= 32768,
		cur_avatar_pos		= 65536,
		growth_generator	= 131072, 
		client_gone			= 262144 
};

#line 35 "h:\\c_projekte\\elansim\\io_flags.h"
#line 50 "h:\\c_projekte\\elansim\\shellwidget.h"

class Connection;
class Viewer;
class LoginDialog;
class ListDialog;
class ChatDialog;
class AvatarDialog;
class GrowthGenDialog;
class CoordinateDialog;
class WaitDialog;
class HeadView;
class Information;

class QAction;
class QStringList;
class QPopupmenu;
class QFrame;
class QPushbutton;

class Scene;










class Shellwidget : public QMainWindow
{ 
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;

public:
	Shellwidget(  QWidget* parent = 0, const char* name = 0, WFlags fl = 0 );


	enum STATE { START = 0, CONNECTED = 1, SCENE = 2, MASTER = 4, };
	int state, old_state;

	void texturesNotFound(const char** list, int length);
	void setCoordinates(float x, float y, float z);
	void setHeadView(const SbRotation& rot, const SbVec3f& pos);

	static void setMessage(const char* text);






	QPopupMenu		*viewerPopup;


	QCString		pw;  
    QFrame			*button_frame,   
					*wheel_frame, 
					*chat_frame; 
    QFrame			*render_frame,
					*messageFrame,
					*statusbar;
	QPopupMenu		*mnu_datei, 
					*mnu_edit,
					*mnu_view,
					*mnu_hideTrees,
					*mnu_cutTrees,
					*mnu_help;
	QMenuBar		*main_menu;
	QStatusBar		*sbar;
	QLabel			*permanentMessages,
					*normalMessages;

 
	void buildWidget(QWidget*);
	void sceneReceived();


	Viewer* viewer;

	
	static Shellwidget* me;
	int screen;
	
	QString loginData;

	WaitDialog* waitD;
	
	static Shellwidget* getInstance() { return me; }
	void setState(int s);
	
	Connection* _con;

private:



	
	IOInterface* io;
	static void message(void * message, void * data=0);

	Scene* _scene;
	LoginDialog* loginD;
	ListDialog* listD;
	ChatDialog* chatD;
	GrowthGenDialog* growthGenD;
	CoordinateDialog* CoordD;
	AvatarDialog* avatarD;
	HeadView* headViewD;
	Information* infoD;
	bool master;


	QString _adress;
	int		_port;
	QString	_username;
	QString _password;
	const char** _stand_info;
	int _info_size;

	QAction* connectAction;
	QAction* openAction;
	QAction* saveAction;
	QAction* closeAction;
	QAction* ggAction;
	QAction* exitAction;
	QAction* hideAction;
	QAction* coordAction;
	QAction* chatAction;
	QAction* infoAction;
	QAction* headViewAction;
	QAction* fullscreenAction;
	QAction* aboutAction;
	QAction* helpAction;


	QStringList textureList;

	void errorHandler(unsigned char*);
	void getTextureList();
	void setMaster(bool OnOff);
	void error(int errorType, char* text);



	


	static void progressCB(const char* text);



public :

	void _onConnect();





    void _sceneReceived();

	void _onClose();
	void list();
	
	void _onChat();
	void _setChat();
	void _onOpen();
	void _onSave();
	void _onGrowthGen();
	void _onHideTrees(int id);
	void _onCutTrees(int id);
	void _onHeadView();

	void chatDisable();

	void closeEvent(QCloseEvent* e=0);
	void resizeEvent(QResizeEvent* e);

	void _onHelp();
	void _onAbout();
	void _rcv(IO_Flag flag);
	
	void seek();
	void _onInfo();

	void _onCoordinates();
	void avatarChoice();
	void _toggleFullscreen();
	void showOriginalStand();

	static void errorCB( const SoError* e, void* data);

};

#line 246 "h:\\c_projekte\\elansim\\shellwidget.h"
#line 11 "h:\\c_projekte\\elansim\\shellwidget.cpp"
#line 1 "h:\\c_projekte\\elansim\\viewer.h"



#line 1 "h:\\c_projekte\\elansim\\soqtlib.h"














































































#line 5 "h:\\c_projekte\\elansim\\viewer.h"
#line 1 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qapplication.h"
























































































































































































































































































































































































































#line 2 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qframe.h"







































































































































































#line 3 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qlistbox.h"



























































































































































































































































































































































































































#line 4 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qpushbutton.h"







































































































































#line 5 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qtabwidget.h"

















































































































































#line 6 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qwidget.h"




















































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 7 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qlayout.h"

































































































































































































































#line 8 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qvariant.h"

































































































































































































































































































































#line 9 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qtooltip.h"










































































































































#line 10 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qwhatsthis.h"










































































#line 11 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qlabel.h"

































































































































































#line 12 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qlineedit.h"


























































































































































































































#line 13 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qmultilineedit.h"



































































































































































































































































































































































































#line 14 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qmenubar.h"



























































































































































#line 15 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qpopupmenu.h"



















































































































































































#line 16 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qstatusbar.h"

























































































#line 17 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qcstring.h"















































































































































































































































































































































































































#line 18 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qpoint.h"























































































































































































































#line 19 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qstring.h"
























































































































































































































































































































































































































































































































































































































































































































































































































































#line 20 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qtextstream.h"































































































































































































































































































































































#line 21 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qdialog.h"






















































































































#line 22 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qnamespace.h"







































































































































































































































































































































































































































































































































































































































#line 23 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qmessagebox.h"














































































































































































#line 24 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qcursor.h"















































































































































#line 25 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qfiledialog.h"




































































































































































































































































































































#line 26 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qpoint.h"























































































































































































































#line 27 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qimage.h"







































































































































































































































































































































































































#line 28 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qsignalmapper.h"












































































#line 29 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qstringlist.h"

















































































#line 30 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qcheckbox.h"



























































































#line 31 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qmainwindow.h"














































































































































































#line 32 "h:\\c_projekte\\elansim\\qtlib.h"
#line 1 "c:\\qt\\include\\qdatetime.h"























































































































































































































#line 33 "h:\\c_projekte\\elansim\\qtlib.h"
#line 6 "h:\\c_projekte\\elansim\\viewer.h"
#line 1 "h:\\c_projekte\\elansim\\datamodel.h"



#line 1 "h:\\c_projekte\\elansim\\soqtlib.h"














































































#line 5 "h:\\c_projekte\\elansim\\datamodel.h"
#line 1 "h:\\c_projekte\\elansim\\iointerface.h"





































































































































#line 6 "h:\\c_projekte\\elansim\\datamodel.h"
#line 1 "c:\\qt\\include\\qwidget.h"




















































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 7 "h:\\c_projekte\\elansim\\datamodel.h"


class Viewer;
class Shellwidget;
class Avatar;
class SoPointLight;
class Proto;
class SoFile;

class DataModel
{
	friend class Viewer;

public:

	DataModel(Viewer* parent);

	enum  Interest { FIRST, LAST, ALL };

	int setScene(SoVRMLGroup* scene);
	SoGroup* getRoot() { return root; }
	SoMFString* getInfo(SoPath* path);

	int	sendScene();
	int	saveScene(const char* name);
	int	loadScene(const char* name);

	SbStringList* getWorldInfo();
	void getGGDialogData(SbStringList* GGNames, int*& min, int*& max);
	void sendSceneToGG(const char* filename, int index, int intervall);
	void setAvatarIndex(int index);
	SbPList* getAvatars(SbStringList*& names);


	void hideTrees(int withStatus, bool hideOrShow);
	void cutTrees(int withStatus);
	void deleteScene();
	void showOriginalStand(bool onOff);
	bool isCuttedTree(SoPath* path);
	bool isTree(SoPath* path);
	void shipTree(SoPath* path);

	static void recvCB(void* data, int size, IOInterface::Flag flag);

	static void camChangedCB(void* data, SoSensor* sensor);
	
private:

	static DataModel* me;
	int a;

	QWidget* messagebox;

	SbStringList* avNames;
	static float YCoordinateFromPickedPoint;
	static Shellwidget* sw;
	static DataModel* dm;
	IOInterface* io;
	Viewer*	v;
	const char**	object;
	SoPointLight* camLight; 

	int avatarListCount;

	SoMFInt32* hiddenTreeIdx;

	SbPList localAvatarList;
	SbPList avatarList;
	SbPList* treeList;
	SbStringList* localTextures;;
	SbStringList sceneTextures;
	SbStringList texturesNotFound;
	SoVRMLWorldInfo* worldInfo;
	SoNodeList GGInfo;

	int waitingForTextures;

	SoFieldSensor* camPosSensor;
	SoFieldSensor* camRotSensor;
	SoFile* protofile;

	SoProto* treeProto;





	int xDim, zDim;
	float xSpace, zSpace;

	const float* height;




	SoPathList	foundPath;

	void adjustPosition(SoPath* p);
	
	void		eventReleased(int treeNr, int partId);
	void		fixTextures(SoVRMLGroup* group);

	int compareTextures(SoVRMLGroup*);
	int analyzeScene(SoGroup*);


	static void selectionCB( void* , SoPath*);
	static SoPath* pickFilterCB(void* data, const SoPickedPoint*);
	void changeScene(SoGroup*);
	void saveTexture(void* data, int size);
	void addAvatar(int avatarId, int avatarNr);
	void removeAvatar(int avatarId);
	void changeAvatarValues(int id, float* pos, float* rot);
	void sendAvatarPosition();
	SoVRMLGroup* readBuffer(void* buffer, int size);
	SoField* getGGInfo( const char* fieldname, int index );
	void writeESInfo(const char* filename, int intervall);
	SoVRMLGroup* loadAvatar(const char* name);
	void getLocalAvatars();

	void* tmpBuffer;
	int tmpBufSize;
	SoSelection* root;
	SoVRMLGroup* _proto;
	SoVRMLGroup* tmpScene;
	SoVRMLGroup* userScene;
	int myAvatarIndex;
	SoPerspectiveCamera* camera;

	static int _size;
	static void* _buffer;

	static void* buffer_realloc(void * bufptr, size_t size);


	

	static void* loadA(void* data);
	static void* loadS(void* data);
};
	
#line 149 "h:\\c_projekte\\elansim\\datamodel.h"
#line 7 "h:\\c_projekte\\elansim\\viewer.h"

#line 1 "h:\\c_projekte\\elansim\\shellwidget.h"





















































































































































































































































#line 9 "h:\\c_projekte\\elansim\\viewer.h"

class SoQtPopupMenu;

class Scene;










class Viewer : public SoQtConstrainedViewer
{
	 public: static void initClass(void); static SoType getClassTypeId(void); virtual SoType getTypeId(void) const; static void * createInstance(void); private: typedef SoQtConstrainedViewer inherited; static SoType classTypeId;
public:

	Viewer(QWidget * parent=0, 
		const char* name = 0, 
		SbBool embed = 1,
		SoQtFullViewer::BuildFlag flag = BUILD_NONE,
		SoQtFullViewer::Type type = BROWSER);
	
	void hideTrees(int id, bool hideOrShow);
	void cutTrees(int id);
	int sendScene() { return dm->sendScene(); }
	int loadScene(const char* name);
	int saveScene(const char* name);
	void setTexturesNotFound(SbStringList& list);
	const char** getWorldInfo(int& size);
	void sendSceneToGG(const char* filename, int index, int intervall);
	int getGGDialogData(const char**& namelist, int*& minVal, int*& maxVal);
	void setSeekMode(SbBool enable);
	void deleteScene();
	void setAvatarIndex( int index );
	SbPList* getAvatars(SbStringList*& names);
	void showOriginalStand(bool onOff);

	

	QWidget* parent;
	QWidget* renderArea;
	SoPath* treePath;

	void setScene(Scene* node);

private:

	Scene* _scene;
	bool isCuttedTree;
	static Viewer* me;
	IOInterface* io;
	DataModel* dm;
	Shellwidget* shell;
	
	static int	current_x, current_y, x, y;
	SoTimerSensor *keyTimer, *mouseTimer;
	int	keyCounter;
	static bool up, down, left, right, shift;

	SoQtPopupMenu* menu;
	SoSeparator* infoSep;

	void adjustCameraPosition(SoPerspectiveCamera*);
	void key(int key, bool pressed);
	static void mouseTimerCB(void* data, SoSensor*);
	static void keyTimerCB(void* data, SoSensor*);
	static void recvCB(void* data, int size, IOInterface::Flag flag);
	int seekToPoint(const SbVec2f& screenpos);

	void shipTree();

	void buildPopupMenu();
	void openPopupMenu(const SbVec2s position);

	static void menuCB(int index, void* data);

	void removeInfo();



	enum ViewerModes
	{	
		IDLE_MODE, 
		MOVE_MODE  
	} mode;





	QWidget			*wheel;
	QWidget			*buttons;	
	bool			isInfo;

	SbStringList textures;






	SoSelection			*root;
	

	SoNode				*user_scene;
	SoPath				*user_scene_path;
	SoPerspectiveCamera *camera;
	
	SoPathList			*tree_list;
	SoTimerSensor		*key_timer, *mouse_timer;
	SoMFString*	info;
	int infoId;
	bool infoYesNo;




	QWidget* buildWidget(QWidget*);
	void processEvent(QEvent* e);
	void send(const char* msg);
	void setFullScreen(const SbBool onoff);

	void writeScene(void* scene);

	void showInfo(SoMFString* strings);

};

#line 141 "h:\\c_projekte\\elansim\\viewer.h"
#line 12 "h:\\c_projekte\\elansim\\shellwidget.cpp"
#line 1 "h:\\c_projekte\\elansim\\file.h"







#line 1 "h:\\c_projekte\\elansim\\scene.h"








#pragma once
#line 11 "h:\\c_projekte\\elansim\\scene.h"

#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\vector"



#pragma once
#line 6 "c:\\programme\\microsoft visual studio\\vc98\\include\\vector"



#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\climits"



#pragma once
#line 6 "c:\\programme\\microsoft visual studio\\vc98\\include\\climits"




#line 11 "c:\\programme\\microsoft visual studio\\vc98\\include\\climits"





#line 10 "c:\\programme\\microsoft visual studio\\vc98\\include\\vector"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\memory"



#pragma once
#line 6 "c:\\programme\\microsoft visual studio\\vc98\\include\\memory"



#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\xmemory"



#pragma once
#line 6 "c:\\programme\\microsoft visual studio\\vc98\\include\\xmemory"



#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\cstdlib"



#pragma once
#line 6 "c:\\programme\\microsoft visual studio\\vc98\\include\\cstdlib"








 
#line 16 "c:\\programme\\microsoft visual studio\\vc98\\include\\cstdlib"
#line 17 "c:\\programme\\microsoft visual studio\\vc98\\include\\cstdlib"





#line 10 "c:\\programme\\microsoft visual studio\\vc98\\include\\xmemory"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\new"



#pragma once
#line 6 "c:\\programme\\microsoft visual studio\\vc98\\include\\new"



#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\exception"
















#pragma once
#line 19 "c:\\programme\\microsoft visual studio\\vc98\\include\\exception"



#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\xstddef"



#pragma once
#line 6 "c:\\programme\\microsoft visual studio\\vc98\\include\\xstddef"




 #line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\yvals.h"



#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\use_ansi.h"















#pragma once
#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\use_ansi.h"







#pragma comment(lib,"msvcprtd")


#line 29 "c:\\programme\\microsoft visual studio\\vc98\\include\\use_ansi.h"







#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\use_ansi.h"







#line 45 "c:\\programme\\microsoft visual studio\\vc98\\include\\use_ansi.h"

#line 47 "c:\\programme\\microsoft visual studio\\vc98\\include\\use_ansi.h"
#line 5 "c:\\programme\\microsoft visual studio\\vc98\\include\\yvals.h"











#pragma pack(push,8)
#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\yvals.h"

 #pragma warning(4: 4018 4114 4146 4244 4245)
 #pragma warning(4: 4663 4664 4665)
 #pragma warning(disable: 4237 4284 4290 4514)
		
 
  
  
  
  
 



#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\yvals.h"
namespace std {
		
 
typedef bool _Bool;
 #line 38 "c:\\programme\\microsoft visual studio\\vc98\\include\\yvals.h"
		



		






		
 
  
  
 


#line 57 "c:\\programme\\microsoft visual studio\\vc98\\include\\yvals.h"

		
 
class __declspec(dllimport) _Lockit
	{	
public:
  
   
	_Lockit();
	~_Lockit();
  





#line 74 "c:\\programme\\microsoft visual studio\\vc98\\include\\yvals.h"
	};
 #line 76 "c:\\programme\\microsoft visual studio\\vc98\\include\\yvals.h"
		




};

#pragma pack(pop)
#line 85 "c:\\programme\\microsoft visual studio\\vc98\\include\\yvals.h"

#line 87 "c:\\programme\\microsoft visual studio\\vc98\\include\\yvals.h"





#line 11 "c:\\programme\\microsoft visual studio\\vc98\\include\\xstddef"
#line 12 "c:\\programme\\microsoft visual studio\\vc98\\include\\xstddef"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\cstddef"



#pragma once
#line 6 "c:\\programme\\microsoft visual studio\\vc98\\include\\cstddef"




 
 
 


#line 16 "c:\\programme\\microsoft visual studio\\vc98\\include\\cstddef"
#line 17 "c:\\programme\\microsoft visual studio\\vc98\\include\\cstddef"





#line 13 "c:\\programme\\microsoft visual studio\\vc98\\include\\xstddef"











#pragma pack(push,8)
#line 26 "c:\\programme\\microsoft visual studio\\vc98\\include\\xstddef"
namespace std {
		
 
 
 
 
 
 
 
 
 
		
		
 
 
		


 
 
 
 
 
		
enum _Uninitialized {_Noinit};
		
__declspec(dllimport) void __cdecl _Nomemory();
};

#pragma pack(pop)
#line 57 "c:\\programme\\microsoft visual studio\\vc98\\include\\xstddef"

#line 59 "c:\\programme\\microsoft visual studio\\vc98\\include\\xstddef"





#line 23 "c:\\programme\\microsoft visual studio\\vc98\\include\\exception"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\eh.h"













#pragma once
#line 16 "c:\\programme\\microsoft visual studio\\vc98\\include\\eh.h"






#line 23 "c:\\programme\\microsoft visual studio\\vc98\\include\\eh.h"





#pragma pack(push,8)
#line 30 "c:\\programme\\microsoft visual studio\\vc98\\include\\eh.h"


























typedef void (__cdecl *terminate_function)();
typedef void (__cdecl *unexpected_function)();
typedef void (__cdecl *terminate_handler)();
typedef void (__cdecl *unexpected_handler)();


struct _EXCEPTION_POINTERS;
typedef void (__cdecl *_se_translator_function)(unsigned int, struct _EXCEPTION_POINTERS*);
#line 65 "c:\\programme\\microsoft visual studio\\vc98\\include\\eh.h"


__declspec(dllimport) __declspec(noreturn) void __cdecl terminate(void);
__declspec(dllimport) __declspec(noreturn) void __cdecl unexpected(void);



#line 73 "c:\\programme\\microsoft visual studio\\vc98\\include\\eh.h"

__declspec(dllimport) terminate_function __cdecl set_terminate(terminate_function);
__declspec(dllimport) unexpected_function __cdecl set_unexpected(unexpected_function);

__declspec(dllimport) _se_translator_function __cdecl _set_se_translator(_se_translator_function);
#line 79 "c:\\programme\\microsoft visual studio\\vc98\\include\\eh.h"


#pragma pack(pop)
#line 83 "c:\\programme\\microsoft visual studio\\vc98\\include\\eh.h"

#line 85 "c:\\programme\\microsoft visual studio\\vc98\\include\\eh.h"
#line 24 "c:\\programme\\microsoft visual studio\\vc98\\include\\exception"


#pragma pack(push,8)
#line 28 "c:\\programme\\microsoft visual studio\\vc98\\include\\exception"

 

#line 32 "c:\\programme\\microsoft visual studio\\vc98\\include\\exception"















typedef const char *__exString;

class __declspec(dllimport) exception
{
public:
    exception();
    exception(const __exString&);
    exception(const exception&);
    exception& operator= (const exception&);
    virtual ~exception();
    virtual __exString what() const;
private:
    __exString _m_what;
    int _m_doFree;
};
namespace std {
using ::exception;

		
class __declspec(dllimport) bad_exception : public exception {
public:
	bad_exception(const char *_S = "bad exception") throw ()
		: exception(_S) {}
	virtual ~bad_exception() throw ()
		{}
protected:
	virtual void _Doraise() const
		{throw (*this); }
	};

__declspec(dllimport) bool __cdecl uncaught_exception();

};






#pragma pack(pop)
#line 88 "c:\\programme\\microsoft visual studio\\vc98\\include\\exception"

#line 90 "c:\\programme\\microsoft visual studio\\vc98\\include\\exception"






#line 10 "c:\\programme\\microsoft visual studio\\vc98\\include\\new"


#pragma pack(push,8)
#line 14 "c:\\programme\\microsoft visual studio\\vc98\\include\\new"
namespace std {
		
class __declspec(dllimport) bad_alloc : public exception {
public:
	bad_alloc(const char *_S = "bad allocation") throw ()
		: exception(_S) {}
	virtual ~bad_alloc() throw ()
		{}
protected:
	virtual void _Doraise() const
		{throw (*this); }
	};
		
struct nothrow_t {};
extern __declspec(dllimport) const nothrow_t nothrow;
};

typedef void (__cdecl *new_handler)();

		
void __cdecl operator delete(void *) throw ();
void *__cdecl operator new(size_t) throw (std::bad_alloc);
void *__cdecl operator new(size_t, const std::nothrow_t&)
	throw ();



inline void *__cdecl operator new(size_t, void *_P)
	{return (_P); }

inline void __cdecl operator delete(void *, void *)
	{return; }
#line 47 "c:\\programme\\microsoft visual studio\\vc98\\include\\new"
#line 48 "c:\\programme\\microsoft visual studio\\vc98\\include\\new"


__declspec(dllimport)
#line 52 "c:\\programme\\microsoft visual studio\\vc98\\include\\new"
	new_handler __cdecl set_new_handler(new_handler) throw ();


#pragma pack(pop)
#line 57 "c:\\programme\\microsoft visual studio\\vc98\\include\\new"

#line 59 "c:\\programme\\microsoft visual studio\\vc98\\include\\new"





#line 11 "c:\\programme\\microsoft visual studio\\vc98\\include\\xmemory"


#pragma pack(push,8)
#line 15 "c:\\programme\\microsoft visual studio\\vc98\\include\\xmemory"
 #line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\utility"



#pragma once
#line 6 "c:\\programme\\microsoft visual studio\\vc98\\include\\utility"



#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\iosfwd"



#pragma once
#line 6 "c:\\programme\\microsoft visual studio\\vc98\\include\\iosfwd"



#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\cstdio"



#pragma once
#line 6 "c:\\programme\\microsoft visual studio\\vc98\\include\\cstdio"




 
 
 


#line 16 "c:\\programme\\microsoft visual studio\\vc98\\include\\cstdio"
#line 17 "c:\\programme\\microsoft visual studio\\vc98\\include\\cstdio"





#line 10 "c:\\programme\\microsoft visual studio\\vc98\\include\\iosfwd"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\cstring"



#pragma once
#line 6 "c:\\programme\\microsoft visual studio\\vc98\\include\\cstring"




 
 
 


#line 16 "c:\\programme\\microsoft visual studio\\vc98\\include\\cstring"
#line 17 "c:\\programme\\microsoft visual studio\\vc98\\include\\cstring"





#line 11 "c:\\programme\\microsoft visual studio\\vc98\\include\\iosfwd"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\cwchar"



#pragma once
#line 6 "c:\\programme\\microsoft visual studio\\vc98\\include\\cwchar"




 
 #line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\wchar.h"


















#pragma once
#line 21 "c:\\programme\\microsoft visual studio\\vc98\\include\\wchar.h"









#line 31 "c:\\programme\\microsoft visual studio\\vc98\\include\\wchar.h"



#pragma pack(push,8)
#line 36 "c:\\programme\\microsoft visual studio\\vc98\\include\\wchar.h"


extern "C" {
#line 40 "c:\\programme\\microsoft visual studio\\vc98\\include\\wchar.h"

























#line 66 "c:\\programme\\microsoft visual studio\\vc98\\include\\wchar.h"











































































typedef unsigned long _fsize_t; 

#line 144 "c:\\programme\\microsoft visual studio\\vc98\\include\\wchar.h"



struct _wfinddata_t {
        unsigned attrib;
        time_t   time_create;   
        time_t   time_access;   
        time_t   time_write;
        _fsize_t size;
        wchar_t  name[260];
};



struct _wfinddatai64_t {
        unsigned attrib;
        time_t   time_create;   
        time_t   time_access;   
        time_t   time_write;
        __int64  size;
        wchar_t  name[260];
};
#line 167 "c:\\programme\\microsoft visual studio\\vc98\\include\\wchar.h"
#line 168 "c:\\programme\\microsoft visual studio\\vc98\\include\\wchar.h"


#line 171 "c:\\programme\\microsoft visual studio\\vc98\\include\\wchar.h"













__declspec(dllimport) extern unsigned short _ctype[];
__declspec(dllimport) extern unsigned short *_pctype;

__declspec(dllimport) extern wctype_t *_pwctype;
#line 189 "c:\\programme\\microsoft visual studio\\vc98\\include\\wchar.h"
#line 190 "c:\\programme\\microsoft visual studio\\vc98\\include\\wchar.h"








                                














































__declspec(dllimport) int __cdecl _wchdir(const wchar_t *);
__declspec(dllimport) wchar_t * __cdecl _wgetcwd(wchar_t *, int);
__declspec(dllimport) wchar_t * __cdecl _wgetdcwd(int, wchar_t *, int);
__declspec(dllimport) int __cdecl _wmkdir(const wchar_t *);
__declspec(dllimport) int __cdecl _wrmdir(const wchar_t *);


#line 253 "c:\\programme\\microsoft visual studio\\vc98\\include\\wchar.h"





__declspec(dllimport) int __cdecl _waccess(const wchar_t *, int);
__declspec(dllimport) int __cdecl _wchmod(const wchar_t *, int);
__declspec(dllimport) int __cdecl _wcreat(const wchar_t *, int);
__declspec(dllimport) long __cdecl _wfindfirst(wchar_t *, struct _wfinddata_t *);
__declspec(dllimport) int __cdecl _wfindnext(long, struct _wfinddata_t *);
__declspec(dllimport) int __cdecl _wunlink(const wchar_t *);
__declspec(dllimport) int __cdecl _wrename(const wchar_t *, const wchar_t *);
__declspec(dllimport) int __cdecl _wopen(const wchar_t *, int, ...);
__declspec(dllimport) int __cdecl _wsopen(const wchar_t *, int, int, ...);
__declspec(dllimport) wchar_t * __cdecl _wmktemp(wchar_t *);


__declspec(dllimport) long __cdecl _wfindfirsti64(wchar_t *, struct _wfinddatai64_t *);
__declspec(dllimport) int __cdecl _wfindnexti64(long, struct _wfinddatai64_t *);
#line 273 "c:\\programme\\microsoft visual studio\\vc98\\include\\wchar.h"


#line 276 "c:\\programme\\microsoft visual studio\\vc98\\include\\wchar.h"





__declspec(dllimport) wchar_t * __cdecl _wsetlocale(int, const wchar_t *);


#line 285 "c:\\programme\\microsoft visual studio\\vc98\\include\\wchar.h"





__declspec(dllimport) int __cdecl _wexecl(const wchar_t *, const wchar_t *, ...);
__declspec(dllimport) int __cdecl _wexecle(const wchar_t *, const wchar_t *, ...);
__declspec(dllimport) int __cdecl _wexeclp(const wchar_t *, const wchar_t *, ...);
__declspec(dllimport) int __cdecl _wexeclpe(const wchar_t *, const wchar_t *, ...);
__declspec(dllimport) int __cdecl _wexecv(const wchar_t *, const wchar_t * const *);
__declspec(dllimport) int __cdecl _wexecve(const wchar_t *, const wchar_t * const *, const wchar_t * const *);
__declspec(dllimport) int __cdecl _wexecvp(const wchar_t *, const wchar_t * const *);
__declspec(dllimport) int __cdecl _wexecvpe(const wchar_t *, const wchar_t * const *, const wchar_t * const *);
__declspec(dllimport) int __cdecl _wspawnl(int, const wchar_t *, const wchar_t *, ...);
__declspec(dllimport) int __cdecl _wspawnle(int, const wchar_t *, const wchar_t *, ...);
__declspec(dllimport) int __cdecl _wspawnlp(int, const wchar_t *, const wchar_t *, ...);
__declspec(dllimport) int __cdecl _wspawnlpe(int, const wchar_t *, const wchar_t *, ...);
__declspec(dllimport) int __cdecl _wspawnv(int, const wchar_t *, const wchar_t * const *);
__declspec(dllimport) int __cdecl _wspawnve(int, const wchar_t *, const wchar_t * const *,
        const wchar_t * const *);
__declspec(dllimport) int __cdecl _wspawnvp(int, const wchar_t *, const wchar_t * const *);
__declspec(dllimport) int __cdecl _wspawnvpe(int, const wchar_t *, const wchar_t * const *,
        const wchar_t * const *);
__declspec(dllimport) int __cdecl _wsystem(const wchar_t *);


#line 312 "c:\\programme\\microsoft visual studio\\vc98\\include\\wchar.h"














































































struct _stat {
        _dev_t st_dev;
        _ino_t st_ino;
        unsigned short st_mode;
        short st_nlink;
        short st_uid;
        short st_gid;
        _dev_t st_rdev;
        _off_t st_size;
        time_t st_atime;
        time_t st_mtime;
        time_t st_ctime;
        };



struct stat {
        _dev_t st_dev;
        _ino_t st_ino;
        unsigned short st_mode;
        short st_nlink;
        short st_uid;
        short st_gid;
        _dev_t st_rdev;
        _off_t st_size;
        time_t st_atime;
        time_t st_mtime;
        time_t st_ctime;
        };
#line 420 "c:\\programme\\microsoft visual studio\\vc98\\include\\wchar.h"


struct _stati64 {
        _dev_t st_dev;
        _ino_t st_ino;
        unsigned short st_mode;
        short st_nlink;
        short st_uid;
        short st_gid;
        _dev_t st_rdev;
        __int64 st_size;
        time_t st_atime;
        time_t st_mtime;
        time_t st_ctime;
        };
#line 436 "c:\\programme\\microsoft visual studio\\vc98\\include\\wchar.h"


#line 439 "c:\\programme\\microsoft visual studio\\vc98\\include\\wchar.h"






__declspec(dllimport) int __cdecl _wstat(const wchar_t *, struct _stat *);


__declspec(dllimport) int __cdecl _wstati64(const wchar_t *, struct _stati64 *);
#line 450 "c:\\programme\\microsoft visual studio\\vc98\\include\\wchar.h"


#line 453 "c:\\programme\\microsoft visual studio\\vc98\\include\\wchar.h"

#line 455 "c:\\programme\\microsoft visual studio\\vc98\\include\\wchar.h"








































































































#line 560 "c:\\programme\\microsoft visual studio\\vc98\\include\\wchar.h"






























































struct tm {
        int tm_sec;     
        int tm_min;     
        int tm_hour;    
        int tm_mday;    
        int tm_mon;     
        int tm_year;    
        int tm_wday;    
        int tm_yday;    
        int tm_isdst;   
        };

#line 635 "c:\\programme\\microsoft visual studio\\vc98\\include\\wchar.h"





__declspec(dllimport) wchar_t * __cdecl _wasctime(const struct tm *);
__declspec(dllimport) wchar_t * __cdecl _wctime(const time_t *);
__declspec(dllimport) size_t __cdecl wcsftime(wchar_t *, size_t, const wchar_t *,
        const struct tm *);
__declspec(dllimport) wchar_t * __cdecl _wstrdate(wchar_t *);
__declspec(dllimport) wchar_t * __cdecl _wstrtime(wchar_t *);


#line 649 "c:\\programme\\microsoft visual studio\\vc98\\include\\wchar.h"



typedef int mbstate_t;
typedef wchar_t _Wint_t;

__declspec(dllimport) wint_t __cdecl btowc(int);
__declspec(dllimport) size_t __cdecl mbrlen(const char *, size_t, mbstate_t *);
__declspec(dllimport) size_t __cdecl mbrtowc(wchar_t *, const char *, size_t, mbstate_t *);
__declspec(dllimport) size_t __cdecl mbsrtowcs(wchar_t *, const char **, size_t, mbstate_t *);

__declspec(dllimport) size_t __cdecl wcrtomb(char *, wchar_t, mbstate_t *);
__declspec(dllimport) size_t __cdecl wcsrtombs(char *, const wchar_t **, size_t, mbstate_t *);
__declspec(dllimport) int __cdecl wctob(wint_t);


inline int fwide(FILE *, int _M)
        {return (_M); }
inline int mbsinit(const mbstate_t *)
        {return (1); }
inline const wchar_t *wmemchr(const wchar_t *_S, wchar_t _C, size_t _N)
        {for (; 0 < _N; ++_S, --_N)
                if (*_S == _C)
                        return (_S);
        return (0); }
inline int wmemcmp(const wchar_t *_S1, const wchar_t *_S2, size_t _N)
        {for (; 0 < _N; ++_S1, ++_S2, --_N)
                if (*_S1 != *_S2)
                        return (*_S1 < *_S2 ? -1 : +1);
        return (0); }
inline wchar_t *wmemcpy(wchar_t *_S1, const wchar_t *_S2, size_t _N)
        {wchar_t *_Su1 = _S1;
        for (; 0 < _N; ++_Su1, ++_S2, --_N)
                *_Su1 = *_S2;
        return (_S1); }
inline wchar_t *wmemmove(wchar_t *_S1, const wchar_t *_S2, size_t _N)
        {wchar_t *_Su1 = _S1;
        if (_S2 < _Su1 && _Su1 < _S2 + _N)
                for (_Su1 += _N, _S2 += _N; 0 < _N; --_N)
                        *--_Su1 = *--_S2;
        else
                for (; 0 < _N; --_N)
                        *_Su1++ = *_S2++;
        return (_S1); }
inline wchar_t *wmemset(wchar_t *_S, wchar_t _C, size_t _N)
        {wchar_t *_Su = _S;
        for (; 0 < _N; ++_Su, --_N)
                *_Su = _C;
        return (_S); }
}       
inline wchar_t *wmemchr(wchar_t *_S, wchar_t _C, size_t _N)
        {return ((wchar_t *)wmemchr((const wchar_t *)_S, _C, _N)); }
inline wchar_t *wcschr(wchar_t *_S, wchar_t _C)
        {return ((wchar_t *)wcschr((const wchar_t *)_S, _C)); }
inline wchar_t *wcspbrk(wchar_t *_S, const wchar_t *_P)
        {return ((wchar_t *)wcspbrk((const wchar_t *)_S, _P)); }
inline wchar_t *wcsrchr(wchar_t *_S, wchar_t _C)
        {return ((wchar_t *)wcsrchr((const wchar_t *)_S, _C)); }
inline wchar_t *wcsstr(wchar_t *_S, const wchar_t *_P)
        {return ((wchar_t *)wcsstr((const wchar_t *)_S, _P)); }
#line 710 "c:\\programme\\microsoft visual studio\\vc98\\include\\wchar.h"


#pragma pack(pop)
#line 714 "c:\\programme\\microsoft visual studio\\vc98\\include\\wchar.h"

#line 716 "c:\\programme\\microsoft visual studio\\vc98\\include\\wchar.h"













#line 730 "c:\\programme\\microsoft visual studio\\vc98\\include\\wchar.h"
#line 12 "c:\\programme\\microsoft visual studio\\vc98\\include\\cwchar"
 


#line 16 "c:\\programme\\microsoft visual studio\\vc98\\include\\cwchar"
#line 17 "c:\\programme\\microsoft visual studio\\vc98\\include\\cwchar"





#line 12 "c:\\programme\\microsoft visual studio\\vc98\\include\\iosfwd"



#pragma pack(push,8)
#line 17 "c:\\programme\\microsoft visual studio\\vc98\\include\\iosfwd"
namespace std {
                
typedef long streamoff;
const streamoff _BADOFF = -1;
typedef int streamsize;
extern __declspec(dllimport) const fpos_t _Fpz;
                
template<class _St>
        class fpos {
        typedef fpos<_St> _Myt;
public:

        fpos(streamoff _O = 0)
                : _Off(_O), _Fpos(_Fpz)
                {_Lockit _Lk;
                _State = _Stz; }



#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\iosfwd"
        fpos(_St _S, fpos_t _F)
                : _Off(0), _Fpos(_F), _State(_S) {}
        _St state() const
                {return (_State); }
        void state(_St _S)
                {_State = _S; }
        fpos_t get_fpos_t() const
                {return (_Fpos); }
        operator streamoff() const
                {return (_Off + ((long)(_Fpos))); }
        streamoff operator-(const _Myt& _R) const
                {return ((streamoff)*this - (streamoff)_R); }
        _Myt& operator+=(streamoff _O)
                {_Off += _O;
                return (*this); }
        _Myt& operator-=(streamoff _O)
                {_Off -= _O;
                return (*this); }
        _Myt operator+(streamoff _O) const
                {_Myt _Tmp = *this;
                return (_Tmp += _O); }
        _Myt operator-(streamoff _O) const
                {_Myt _Tmp = *this;
                return (_Tmp -= _O); }
        bool operator==(const _Myt& _R) const
                {return ((streamoff)*this == (streamoff)_R); }
        bool operator!=(const _Myt& _R) const
                {return (!(*this == _R)); }
private:
        static _St _Stz;
        streamoff _Off;
        fpos_t _Fpos;
        _St _State;
        };
template<class _St>
        _St fpos<_St>::_Stz;
typedef fpos<mbstate_t> streampos;
typedef streampos wstreampos;
                
template<class _E>
        struct char_traits {
        typedef _E char_type;
        typedef _E int_type;
        typedef streampos pos_type;
        typedef streamoff off_type;
        typedef mbstate_t state_type;
        static void __cdecl assign(_E& _X, const _E& _Y)
                {_X = _Y; }
        static bool __cdecl eq(const _E& _X, const _E& _Y)
                {return (_X == _Y); }
        static bool __cdecl lt(const _E& _X, const _E& _Y)
                {return (_X < _Y); }
        static int __cdecl compare(const _E *_U, const _E *_V, size_t _N)
                {for (size_t _I = 0; _I < _N; ++_I, ++_U, ++_V)
                        if (!eq(*_U, *_V))
                                return (lt(*_U, *_V) ? -1 : +1);
                return (0); }
        static size_t __cdecl length(const _E *_U)
                {size_t _N;
                for (_N = 0; !eq(*_U, _E(0)); ++_U)
                        ++_N;
                return (_N); }
        static _E * __cdecl copy(_E *_U, const _E *_V, size_t _N)
                {_E *_S = _U;
                for (; 0 < _N; --_N, ++_U, ++_V)
                        assign(*_U, *_V);
                return (_S); }
        static const _E * __cdecl find(const _E *_U, size_t _N,
                const _E& _C)
                {for (; 0 < _N; --_N, ++_U)
                        if (eq(*_U, _C))
                                return (_U);
                return (0); }
        static _E * __cdecl move(_E *_U, const _E *_V, size_t _N)
                {_E *_Ans = _U;
                if (_V < _U && _U < _V + _N)
                        for (_U += _N, _V += _N; 0 < _N; --_N)
                                assign(*--_U, *--_V);
                else
                        for (; 0 < _N; --_N, ++_U, ++_V)
                                assign(*_U, *_V);
                return (_Ans); }
        static _E * __cdecl assign(_E *_U, size_t _N, const _E& _C)
                {_E *_Ans = _U;
                for (; 0 < _N; --_N, ++_U)
                        assign(*_U, _C);
                return (_Ans); }
        static _E __cdecl to_char_type(const int_type& _C)
                {return ((_E)_C); }
        static int_type __cdecl to_int_type(const _E& _C)
                {return ((int_type)_C); }
        static bool __cdecl eq_int_type(const int_type& _X,
                const int_type& _Y)
                {return (_X == _Y); }
        static int_type __cdecl eof()
                {return ((-1)); }
        static int_type __cdecl not_eof(const int_type& _C)
                {return (_C != eof() ? _C : !eof()); }
        };
                
template<> struct __declspec(dllimport) char_traits<wchar_t> {
        typedef wchar_t _E;
        typedef _E char_type;   
        typedef wint_t int_type;
        typedef streampos pos_type;
        typedef streamoff off_type;
        typedef mbstate_t state_type;
        static void __cdecl assign(_E& _X, const _E& _Y)
                {_X = _Y; }
        static bool __cdecl eq(const _E& _X, const _E& _Y)
                {return (_X == _Y); }
        static bool __cdecl lt(const _E& _X, const _E& _Y)
                {return (_X < _Y); }
        static int __cdecl compare(const _E *_U, const _E *_V, size_t _N)
                {return (wmemcmp(_U, _V, _N)); }
        static size_t __cdecl length(const _E *_U)
                {return (wcslen(_U)); }
        static _E *__cdecl copy(_E *_U, const _E *_V, size_t _N)
                {return (wmemcpy(_U, _V, _N)); }
        static const _E * __cdecl find(const _E *_U, size_t _N,
                const _E& _C)
                {return ((const _E *)wmemchr(_U, _C, _N)); }
        static _E * __cdecl move(_E *_U, const _E *_V, size_t _N)
                {return (wmemmove(_U, _V, _N)); }
        static _E * __cdecl assign(_E *_U, size_t _N, const _E& _C)
                {return (wmemset(_U, _C, _N)); }
        static _E __cdecl to_char_type(const int_type& _C)
                {return ((_E)_C); }
        static int_type __cdecl to_int_type(const _E& _C)
                {return ((int_type)_C); }
        static bool __cdecl eq_int_type(const int_type& _X,
                const int_type& _Y)
                {return (_X == _Y); }
        static int_type __cdecl eof()
                {return ((wint_t)(0xFFFF)); }
        static int_type __cdecl not_eof(const int_type& _C)
                {return (_C != eof() ? _C : !eof()); }
        };
                
template<> struct __declspec(dllimport) char_traits<char> {
        typedef char _E;
        typedef _E char_type;
        typedef int int_type;
        typedef streampos pos_type;
        typedef streamoff off_type;
        typedef mbstate_t state_type;
        static void __cdecl assign(_E& _X, const _E& _Y)
                {_X = _Y; }
        static bool __cdecl eq(const _E& _X, const _E& _Y)
                {return (_X == _Y); }
        static bool __cdecl lt(const _E& _X, const _E& _Y)
                {return (_X < _Y); }
        static int __cdecl compare(const _E *_U, const _E *_V, size_t _N)
                {return (memcmp(_U, _V, _N)); }
        static size_t __cdecl length(const _E *_U)
                {return (qstrlen(_U)); }
        static _E * __cdecl copy(_E *_U, const _E *_V, size_t _N)
                {return ((_E *)memcpy(_U, _V, _N)); }
        static const _E * __cdecl find(const _E *_U, size_t _N,
                const _E& _C)
                {return ((const _E *)memchr(_U, _C, _N)); }
        static _E * __cdecl move(_E *_U, const _E *_V, size_t _N)
                {return ((_E *)memmove(_U, _V, _N)); }
        static _E * __cdecl assign(_E *_U, size_t _N, const _E& _C)
                {return ((_E *)memset(_U, _C, _N)); }
        static _E __cdecl to_char_type(const int_type& _C)
                {return ((_E)_C); }
        static int_type __cdecl to_int_type(const _E& _C)
                {return ((int_type)((unsigned char)_C)); }
        static bool __cdecl eq_int_type(const int_type& _X,
                const int_type& _Y)
                {return (_X == _Y); }
        static int_type __cdecl eof()
                {return ((-1)); }
        static int_type __cdecl not_eof(const int_type& _C)
                {return (_C != eof() ? _C : !eof()); }
        };
                
template<class T>
        class allocator;
class ios_base;
template<class _E, class _Tr = char_traits<_E> >
        class basic_ios;
template<class _E, class _Tr = char_traits<_E> >
        class istreambuf_iterator;
template<class _E, class _Tr = char_traits<_E> >
        class ostreambuf_iterator;
template<class _E, class _Tr = char_traits<_E> >
        class basic_streambuf;
template<class _E, class _Tr = char_traits<_E> >
        class basic_istream;
template<class _E, class _Tr = char_traits<_E> >
        class basic_ostream;
template<class _E, class _Tr = char_traits<_E> >
        class basic_iostream;
template<class _E, class _Tr = char_traits<_E>,
        class _A = allocator<_E> >
        class basic_stringbuf;
template<class _E, class _Tr = char_traits<_E>,
        class _A = allocator<_E> >
        class basic_istringstream;
template<class _E, class _Tr = char_traits<_E>,
        class _A = allocator<_E> >
        class basic_ostringstream;
template<class _E, class _Tr = char_traits<_E>,
        class _A = allocator<_E> >
        class basic_stringstream;
template<class _E, class _Tr = char_traits<_E> >
        class basic_filebuf;
template<class _E, class _Tr = char_traits<_E> >
        class basic_ifstream;
template<class _E, class _Tr = char_traits<_E> >
        class basic_ofstream;
template<class _E, class _Tr = char_traits<_E> >
        class basic_fstream;

                
typedef basic_ios<char, char_traits<char> > ios;
typedef basic_streambuf<char, char_traits<char> > streambuf;
typedef basic_istream<char, char_traits<char> > istream;
typedef basic_ostream<char, char_traits<char> > ostream;
typedef basic_iostream<char, char_traits<char> > iostream;
typedef basic_stringbuf<char, char_traits<char>,
        allocator<char> > stringbuf;
typedef basic_istringstream<char, char_traits<char>,
        allocator<char> > istringstream;
typedef basic_ostringstream<char, char_traits<char>,
        allocator<char> > ostringstream;
typedef basic_stringstream<char, char_traits<char>,
        allocator<char> > stringstream;
typedef basic_filebuf<char, char_traits<char> > filebuf;
typedef basic_ifstream<char, char_traits<char> > ifstream;
typedef basic_ofstream<char, char_traits<char> > ofstream;
typedef basic_fstream<char, char_traits<char> > fstream;
                
typedef basic_ios<wchar_t, char_traits<wchar_t> > wios;
typedef basic_streambuf<wchar_t, char_traits<wchar_t> >
        wstreambuf;
typedef basic_istream<wchar_t, char_traits<wchar_t> > wistream;
typedef basic_ostream<wchar_t, char_traits<wchar_t> > wostream;
typedef basic_iostream<wchar_t, char_traits<wchar_t> > wiostream;
typedef basic_stringbuf<wchar_t, char_traits<wchar_t>,
        allocator<wchar_t> > wstringbuf;
typedef basic_istringstream<wchar_t, char_traits<wchar_t>,
        allocator<wchar_t> > wistringstream;
typedef basic_ostringstream<wchar_t, char_traits<wchar_t>,
        allocator<wchar_t> > wostringstream;
typedef basic_stringstream<wchar_t, char_traits<wchar_t>,
        allocator<wchar_t> > wstringstream;
typedef basic_filebuf<wchar_t, char_traits<wchar_t> > wfilebuf;
typedef basic_ifstream<wchar_t, char_traits<wchar_t> > wifstream;
typedef basic_ofstream<wchar_t, char_traits<wchar_t> > wofstream;
typedef basic_fstream<wchar_t, char_traits<wchar_t> > wfstream;


template<class _E, class _II >
    class num_get;
template<class _E, class _OI >
    class num_put;
template<class _E>
    class collate;

typedef num_get<char, istreambuf_iterator<char, char_traits<char> > > numget;
typedef num_get<wchar_t, istreambuf_iterator<wchar_t, char_traits<wchar_t> > >
                                                                                                                                          wnumget;
typedef num_put<char, ostreambuf_iterator<char, char_traits<char> > > numput;
typedef num_put<wchar_t, ostreambuf_iterator<wchar_t, char_traits<wchar_t> > >
                                                                                                                                          wnumput;
typedef collate<char> ncollate;
typedef collate<wchar_t> wcollate;

#line 309 "c:\\programme\\microsoft visual studio\\vc98\\include\\iosfwd"

};

#pragma pack(pop)
#line 314 "c:\\programme\\microsoft visual studio\\vc98\\include\\iosfwd"

#line 316 "c:\\programme\\microsoft visual studio\\vc98\\include\\iosfwd"





#line 10 "c:\\programme\\microsoft visual studio\\vc98\\include\\utility"


#pragma pack(push,8)
#line 14 "c:\\programme\\microsoft visual studio\\vc98\\include\\utility"
namespace std {
		
template<class _T1, class _T2> struct pair {
	typedef _T1 first_type;
	typedef _T2 second_type;
	pair()
		: first(_T1()), second(_T2()) {}
	pair(const _T1& _V1, const _T2& _V2)
		: first(_V1), second(_V2) {}
	template<class U, class V> pair(const pair<U, V> &p)
		: first(p.first), second(p.second) {}
	_T1 first;
	_T2 second;
	};
template<class _T1, class _T2> inline
	bool __cdecl operator==(const pair<_T1, _T2>& _X,
		const pair<_T1, _T2>& _Y)
	{return (_X.first == _Y.first && _X.second == _Y.second); }
template<class _T1, class _T2> inline
	bool __cdecl operator!=(const pair<_T1, _T2>& _X,
		const pair<_T1, _T2>& _Y)
	{return (!(_X == _Y)); }
template<class _T1, class _T2> inline
	bool __cdecl operator<(const pair<_T1, _T2>& _X,
		const pair<_T1, _T2>& _Y)
	{return (_X.first < _Y.first ||
		!(_Y.first < _X.first) && _X.second < _Y.second); }
template<class _T1, class _T2> inline
	bool __cdecl operator>(const pair<_T1, _T2>& _X,
		const pair<_T1, _T2>& _Y)
	{return (_Y < _X); }
template<class _T1, class _T2> inline
	bool __cdecl operator<=(const pair<_T1, _T2>& _X,
		const pair<_T1, _T2>& _Y)
	{return (!(_Y < _X)); }
template<class _T1, class _T2> inline
	bool __cdecl operator>=(const pair<_T1, _T2>& _X,
		const pair<_T1, _T2>& _Y)
	{return (!(_X < _Y)); }
template<class _T1, class _T2> inline
	pair<_T1, _T2> __cdecl make_pair(const _T1& _X, const _T2& _Y)
	{return (pair<_T1, _T2>(_X, _Y)); }
		
struct input_iterator_tag {};
struct output_iterator_tag {};
struct forward_iterator_tag
	: public input_iterator_tag {};
struct bidirectional_iterator_tag
	: public forward_iterator_tag {};
struct random_access_iterator_tag
	: public bidirectional_iterator_tag  {};
		
template<class _C, class _Ty, class _D = ptrdiff_t>
	struct iterator {
	typedef _C iterator_category;
	typedef _Ty value_type;
	typedef _D distance_type;
	};
template<class _Ty, class _D>
	struct _Bidit : public iterator<bidirectional_iterator_tag,
		_Ty, _D> {};
template<class _Ty, class _D>
	struct _Ranit : public iterator<random_access_iterator_tag,
		_Ty, _D> {};
		
template<class _It>
	struct iterator_traits {
	typedef _It::iterator_category iterator_category;
	typedef _It::value_type value_type;
	typedef _It::distance_type distance_type;
	};
		
template<class _C, class _Ty, class _D> inline
	_C __cdecl _Iter_cat(const iterator<_C, _Ty, _D>&)
	{_C _IterCatTag;
	 _C* _pIterCatTag;
	_pIterCatTag = &_IterCatTag;	
	return (_IterCatTag); }
template<class _Ty> inline
	random_access_iterator_tag __cdecl _Iter_cat(const _Ty *)
	{random_access_iterator_tag _RandIterTag;
	 random_access_iterator_tag* _pRandIterTag;
	_pRandIterTag = &_RandIterTag;	
	return (_RandIterTag); }
		
template<class _II> inline
	ptrdiff_t __cdecl distance(_II _F, _II _L)
	{ptrdiff_t _N = 0;
	_Distance(_F, _L, _N, _Iter_cat(_F));
	return (_N); }
template<class _II, class _D> inline
	void __cdecl _Distance(_II _F, _II _L, _D& _N)
	{_Distance(_F, _L, _N, _Iter_cat(_F)); }
template<class _II, class _D> inline
	void __cdecl _Distance(_II _F, _II _L, _D& _N, input_iterator_tag)
	{for (; _F != _L; ++_F)
		++_N; }
template<class _II, class _D> inline
	void __cdecl _Distance(_II _F, _II _L, _D& _N, forward_iterator_tag)
	{for (; _F != _L; ++_F)
		++_N; }
template<class _II, class _D> inline
	void __cdecl _Distance(_II _F, _II _L, _D& _N,
		bidirectional_iterator_tag)
	{for (; _F != _L; ++_F)
		++_N; }
template<class _RI, class _D> inline
	void __cdecl _Distance(_RI _F, _RI _L, _D& _N,
		random_access_iterator_tag)
	{_N += _L - _F; }
		
template<class _RI,
	class _Ty,
	class _Rt = _Ty&,
	class _Pt = _Ty *,
	class _D = ptrdiff_t>
	class reverse_iterator : public _Ranit<_Ty, _D> {
public:
	typedef reverse_iterator<_RI, _Ty, _Rt, _Pt, _D> _Myt;
	typedef _RI iter_type;
	typedef _Rt reference_type;
	typedef _Pt pointer_type;
	reverse_iterator()
		{}
	explicit reverse_iterator(_RI _X)
		: current(_X) {}
	_RI base() const
		{return (current); }
	_Rt operator*() const
		{return (*(current - 1)); }
	_Pt operator->() const
		{return (&**this); }
	_Myt& operator++()
		{--current;
		return (*this); }
	_Myt operator++(int)
		{_Myt _Tmp = *this;
		--current;
		return (_Tmp); }
	_Myt& operator--()
		{++current;
		return (*this); }
	_Myt operator--(int)
		{_Myt _Tmp = *this;
		++current;
		return (_Tmp); }
	_Myt& operator+=(_D _N)
		{current -= _N;
		return (*this); }
	_Myt operator+(_D _N) const
		{return (_Myt(current - _N)); }
	_Myt& operator-=(_D _N)
		{current += _N;
		return (*this); }
	_Myt operator-(_D _N) const
		{return (_Myt(current + _N)); }
	_Rt operator[](_D _N) const
		{return (*(*this + _N)); }
protected:
	_RI current;
	};
template<class _RI, class _Ty, class _Rt, class _Pt,
	class _D> inline
	bool __cdecl operator==(
		const reverse_iterator<_RI, _Ty, _Rt, _Pt, _D>& _X,
		const reverse_iterator<_RI, _Ty, _Rt, _Pt, _D>& _Y)
	{return (_X.base() == _Y.base()); }
template<class _RI, class _Ty, class _Rt, class _Pt,
	class _D> inline
	bool __cdecl operator!=(
		const reverse_iterator<_RI, _Ty, _Rt, _Pt, _D>& _X,
		const reverse_iterator<_RI, _Ty, _Rt, _Pt, _D>& _Y)
	{return (!(_X == _Y)); }
template<class _RI, class _Ty, class _Rt, class _Pt,
	class _D> inline
	bool __cdecl operator<(
		const reverse_iterator<_RI, _Ty, _Rt, _Pt, _D>& _X,
		const reverse_iterator<_RI, _Ty, _Rt, _Pt, _D>& _Y)
	{return (_Y.base() < _X.base()); }
template<class _RI, class _Ty, class _Rt, class _Pt,
	class _D> inline
	bool __cdecl operator>(
		const reverse_iterator<_RI, _Ty, _Rt, _Pt, _D>& _X,
		const reverse_iterator<_RI, _Ty, _Rt, _Pt, _D>& _Y)
	{return (_Y < _X); }
template<class _RI, class _Ty, class _Rt, class _Pt,
	class _D> inline
	bool __cdecl operator<=(
		const reverse_iterator<_RI, _Ty, _Rt, _Pt, _D>& _X,
		const reverse_iterator<_RI, _Ty, _Rt, _Pt, _D>& _Y)
	{return (!(_Y < _X)); }
template<class _RI, class _Ty, class _Rt, class _Pt,
	class _D> inline
	bool __cdecl operator>=(
		const reverse_iterator<_RI, _Ty, _Rt, _Pt, _D>& _X,
		const reverse_iterator<_RI, _Ty, _Rt, _Pt, _D>& _Y)
	{return (!(_X < _Y)); }
template<class _RI, class _Ty, class _Rt, class _Pt,
	class _D> inline
	_D __cdecl operator-(
		const reverse_iterator<_RI, _Ty, _Rt, _Pt, _D>& _X,
		const reverse_iterator<_RI, _Ty, _Rt, _Pt, _D>& _Y)
	{return (_Y.base() - _X.base()); }
template<class _RI, class _Ty, class _Rt, class _Pt,
	class _D> inline
	reverse_iterator<_RI, _Ty, _Rt, _Pt, _D> __cdecl operator+(_D _N,
		const reverse_iterator<_RI, _Ty, _Rt, _Pt, _D>& _Y)
	{return (reverse_iterator<_RI, _Ty, _Rt, _Pt, _D>(
		_Y.base() - _N)); }
		
template<class _E, class _Tr = char_traits<_E> >
	class istreambuf_iterator
		: public iterator<input_iterator_tag, _E, _Tr::off_type> {
public:
	typedef istreambuf_iterator<_E, _Tr> _Myt;
	typedef _E char_type;
	typedef _Tr traits_type;
	typedef _Tr::int_type int_type;
	typedef basic_streambuf<_E, _Tr> streambuf_type;
	typedef basic_istream<_E, _Tr> istream_type;
	istreambuf_iterator(streambuf_type *_Sb = 0) throw ()
		: _Sbuf(_Sb), _Got(_Sb == 0) {}
	istreambuf_iterator(istream_type& _I) throw ()
		: _Sbuf(_I.rdbuf()), _Got(_I.rdbuf() == 0) {}
	const _E& operator*() const
		{if (!_Got)
			((_Myt *)this)->_Peek();
		return (_Val); }
	const _E *operator->() const
		{return (&**this); }
	_Myt& operator++()
		{_Inc();
		return (*this); }
	_Myt operator++(int)
		{if (!_Got)
			_Peek();
		_Myt _Tmp = *this;
		_Inc();
		return (_Tmp); }
	bool equal(const _Myt& _X) const
		{if (!_Got)
			((_Myt *)this)->_Peek();
		if (!_X._Got)
			((_Myt *)&_X)->_Peek();
		return (_Sbuf == 0 && _X._Sbuf == 0
			|| _Sbuf != 0 && _X._Sbuf != 0); }
private:
	void _Inc()
		{if (_Sbuf == 0
			|| _Tr::eq_int_type(_Tr::eof(), _Sbuf->sbumpc()))
			_Sbuf = 0, _Got = true;
		else
			_Got = false; }
	_E _Peek()
		{int_type _C;
		if (_Sbuf == 0
			|| _Tr::eq_int_type(_Tr::eof(), _C = _Sbuf->sgetc()))
			_Sbuf = 0;
		else
			_Val = _Tr::to_char_type(_C);
		_Got = true;
		return (_Val); }
	streambuf_type *_Sbuf;
	bool _Got;
	_E _Val;
	};
template<class _E, class _Tr> inline
	bool __cdecl operator==(const istreambuf_iterator<_E, _Tr>& _X,
		const istreambuf_iterator<_E, _Tr>& _Y)
	{return (_X.equal(_Y)); }
template<class _E, class _Tr> inline
	bool __cdecl operator!=(const istreambuf_iterator<_E, _Tr>& _X,
		const istreambuf_iterator<_E, _Tr>& _Y)
	{return (!(_X == _Y)); }
		
template<class _E, class _Tr = char_traits<_E> >
	class ostreambuf_iterator
		: public iterator<output_iterator_tag, void, void> {
	typedef ostreambuf_iterator<_E, _Tr> _Myt;
public:
	typedef _E char_type;
	typedef _Tr traits_type;
	typedef basic_streambuf<_E, _Tr> streambuf_type;
	typedef basic_ostream<_E, _Tr> ostream_type;
	ostreambuf_iterator(streambuf_type *_Sb) throw ()
		: _Failed(false), _Sbuf(_Sb) {}
	ostreambuf_iterator(ostream_type& _O) throw ()
		: _Failed(false), _Sbuf(_O.rdbuf()) {}
	_Myt& operator=(_E _X)
		{if (_Sbuf == 0
			|| _Tr::eq_int_type(_Tr::eof(), _Sbuf->sputc(_X)))
			_Failed = true;
		return (*this); }
	_Myt& operator*()
		{return (*this); }
	_Myt& operator++()
		{return (*this); }
	_Myt& operator++(int)
		{return (*this); }
	bool failed() const throw ()
		{return (_Failed); }
private:
	bool _Failed;
	streambuf_type *_Sbuf;
	};
		
	namespace rel_ops {
template<class _Ty> inline
	bool __cdecl operator!=(const _Ty& _X, const _Ty& _Y)
	{return (!(_X == _Y)); }
template<class _Ty> inline
	bool __cdecl operator>(const _Ty& _X, const _Ty& _Y)
	{return (_Y < _X); }
template<class _Ty> inline
	bool __cdecl operator<=(const _Ty& _X, const _Ty& _Y)
	{return (!(_Y < _X)); }
template<class _Ty> inline
	bool __cdecl operator>=(const _Ty& _X, const _Ty& _Y)
	{return (!(_X < _Y)); }
	};
};

#pragma pack(pop)
#line 338 "c:\\programme\\microsoft visual studio\\vc98\\include\\utility"

#line 340 "c:\\programme\\microsoft visual studio\\vc98\\include\\utility"






















#line 16 "c:\\programme\\microsoft visual studio\\vc98\\include\\xmemory"

 
 
 
#line 21 "c:\\programme\\microsoft visual studio\\vc98\\include\\xmemory"
 
 
namespace std {
		
template<class _Ty> inline
	_Ty  *_Allocate(ptrdiff_t _N, _Ty  *)
	{if (_N < 0)
		_N = 0;
	return ((_Ty  *)operator new(
		(size_t)_N * sizeof (_Ty))); }
		
template<class _T1, class _T2> inline
	void _Construct(_T1  *_P, const _T2& _V)
	{new ((void  *)_P) _T1(_V); }
		
template<class _Ty> inline
	void _Destroy(_Ty  *_P)
	{(_P)->~_Ty(); }
inline void _Destroy(char  *_P)
	{}
inline void _Destroy(wchar_t  *_P)
	{}
		
template<class _Ty>
	class allocator {
public:
	typedef size_t size_type;
	typedef ptrdiff_t difference_type;
	typedef _Ty  *pointer;
	typedef const _Ty  *const_pointer;
	typedef _Ty & reference;
	typedef const _Ty & const_reference;
	typedef _Ty value_type;
	pointer address(reference _X) const
		{return (&_X); }
	const_pointer address(const_reference _X) const
		{return (&_X); }
	pointer allocate(size_type _N, const void *)
		{return (_Allocate((difference_type)_N, (pointer)0)); }
	char  *_Charalloc(size_type _N)
		{return (_Allocate((difference_type)_N,
			(char  *)0)); }
	void deallocate(void  *_P, size_type)
		{operator delete(_P); }
	void construct(pointer _P, const _Ty& _V)
		{_Construct(_P, _V); }
	void destroy(pointer _P)
		{_Destroy(_P); }
	size_t max_size() const
		{size_t _N = (size_t)(-1) / sizeof (_Ty);
		return (0 < _N ? _N : 1); }
	};
template<class _Ty, class _U> inline
	bool operator==(const allocator<_Ty>&, const allocator<_U>&)
	{return (true); }
template<class _Ty, class _U> inline
	bool operator!=(const allocator<_Ty>&, const allocator<_U>&)
	{return (false); }
		
template<> class __declspec(dllimport) allocator<void> {
public:
	typedef void _Ty;
	typedef _Ty  *pointer;
	typedef const _Ty  *const_pointer;
	typedef _Ty value_type;
	};
};

#pragma pack(pop)
#line 91 "c:\\programme\\microsoft visual studio\\vc98\\include\\xmemory"

#line 93 "c:\\programme\\microsoft visual studio\\vc98\\include\\xmemory"






















#line 10 "c:\\programme\\microsoft visual studio\\vc98\\include\\memory"


#pragma pack(push,8)
#line 14 "c:\\programme\\microsoft visual studio\\vc98\\include\\memory"
		
template<class _Ty>
	inline void *operator new(size_t _N, std::allocator<_Ty>& _Al)
	{return (_Al._Charalloc(_N)); }
namespace std {
		
template<class _Ty> inline
	pair<_Ty  *, ptrdiff_t>
		get_temporary_buffer(ptrdiff_t _N, _Ty  *)
	{_Ty  *_P;
	for (_P = 0; 0 < _N; _N /= 2)
		if ((_P = (_Ty  *)operator new(
			(size_t)_N * sizeof (_Ty), nothrow)) != 0)
			break;
	return (pair<_Ty  *, ptrdiff_t>(_P, _N)); }
		
template<class _Ty> inline
	void return_temporary_buffer(_Ty *_P)
	{operator delete(_P); }
		
template<class _II, class _FI> inline
	_FI uninitialized_copy(_II _F, _II _L, _FI _X)
	{for (; _F != _L; ++_X, ++_F)
		_Construct(&*_X, *_F);
	return (_X); }
		
template<class _FI, class _Ty> inline
	void uninitialized_fill(_FI _F, _FI _L, const _Ty& _X)
	{for (; _F != _L; ++_F)
		_Construct(&*_F, _X); }
		
template<class _FI, class _S, class _Ty> inline
	void uninitialized_fill_n(_FI _F, _S _N, const _Ty& _X)
	{for (; 0 < _N; --_N, ++_F)
		_Construct(&*_F, _X); }
		
template<class _OI, class _Ty>
	class raw_storage_iterator
		: public iterator<output_iterator_tag, void, void> {
public:
	typedef _OI iterator_type;
	typedef _Ty element_type;
	explicit raw_storage_iterator(_OI _X)
		: _Next(_X) {}
	raw_storage_iterator<_OI, _Ty>& operator*()
		{return (*this); }
	raw_storage_iterator<_OI, _Ty>& operator=(const _Ty& _X)
		{_Construct(&*_Next, _X);
		return (*this); }
	raw_storage_iterator<_OI, _Ty>& operator++()
		{++_Next;
		return (*this); }
	raw_storage_iterator<_OI, _Ty> operator++(int)
		{raw_storage_iterator<_OI, _Ty> _Ans = *this;
		++_Next;
		return (_Ans); }
private:
	_OI _Next;
	};
		
template<class _Ty>
	class _Temp_iterator
		: public iterator<output_iterator_tag, void, void> {
public:
	typedef _Ty  *_Pty;
	_Temp_iterator(ptrdiff_t _N = 0)
		{pair<_Pty, ptrdiff_t> _Pair =
			get_temporary_buffer(_N, (_Pty)0);
		_Buf._Begin = _Pair.first;
		_Buf._Cur = _Pair.first;
		_Buf._Hiwater = _Pair.first;
		_Buf._Len = _Pair.second;
		_Pb = &_Buf; }
	_Temp_iterator(const _Temp_iterator<_Ty>& _X)
		{_Buf._Begin = 0;
		_Buf._Cur = 0;
		_Buf._Hiwater = 0;
		_Buf._Len = 0;
		*this = _X; }
	~_Temp_iterator()
		{if (_Buf._Begin != 0)
			{for (_Pty _F = _Buf._Begin;
				_F != _Buf._Hiwater; ++_F)
				_Destroy(&*_F);
			return_temporary_buffer(_Buf._Begin); }}
	_Temp_iterator<_Ty>& operator=(const _Temp_iterator<_Ty>& _X)
		{_Pb = _X._Pb;
		return (*this); }
	_Temp_iterator<_Ty>& operator=(const _Ty& _V)
		{if (_Pb->_Cur < _Pb->_Hiwater)
			*_Pb->_Cur++ = _V;
		else
			{_Construct(&*_Pb->_Cur, _V);
			_Pb->_Hiwater = ++_Pb->_Cur; }
		return (*this); }
	_Temp_iterator<_Ty>& operator*()
		{return (*this); }
	_Temp_iterator<_Ty>& operator++()
		{return (*this); }
	_Temp_iterator<_Ty>& operator++(int)
		{return (*this); }
	_Temp_iterator<_Ty>& _Init()
		{_Pb->_Cur = _Pb->_Begin;
		return (*this); }
	_Pty _First() const
		{return (_Pb->_Begin); }
	_Pty _Last() const
		{return (_Pb->_Cur); }
	ptrdiff_t _Maxlen() const
		{return (_Pb->_Len); }
private:
	struct _Bufpar {
		_Pty _Begin;
		_Pty _Cur;
		_Pty _Hiwater;
		ptrdiff_t _Len;
		} _Buf, *_Pb;
	};
		
template<class _Ty>
	class auto_ptr {
public:
	typedef _Ty element_type;
	explicit auto_ptr(_Ty *_P = 0) throw ()
		: _Owns(_P != 0), _Ptr(_P) {}
	auto_ptr(const auto_ptr<_Ty>& _Y) throw ()
		: _Owns(_Y._Owns), _Ptr(_Y.release()) {}
	auto_ptr<_Ty>& operator=(const auto_ptr<_Ty>& _Y) throw ()
		{if (this != &_Y)
			{if (_Ptr != _Y.get())
				{if (_Owns)
					delete _Ptr;
				_Owns = _Y._Owns; }
			else if (_Y._Owns)
				_Owns = true;
			_Ptr = _Y.release(); }
		return (*this); }
	~auto_ptr()
		{if (_Owns)
			delete _Ptr; }
	_Ty& operator*() const throw ()
		{return (*get()); }
	_Ty *operator->() const throw ()
		{return (get()); }
	_Ty *get() const throw ()
		{return (_Ptr); }
	_Ty *release() const throw ()
		{((auto_ptr<_Ty> *)this)->_Owns = false;
		return (_Ptr); }
private:
	bool _Owns;
	_Ty *_Ptr;
	};
};

#pragma pack(pop)
#line 171 "c:\\programme\\microsoft visual studio\\vc98\\include\\memory"

#line 173 "c:\\programme\\microsoft visual studio\\vc98\\include\\memory"






















#line 11 "c:\\programme\\microsoft visual studio\\vc98\\include\\vector"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdexcept"



#pragma once
#line 6 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdexcept"




#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\xstring"



#pragma once
#line 6 "c:\\programme\\microsoft visual studio\\vc98\\include\\xstring"






#pragma pack(push,8)
#line 14 "c:\\programme\\microsoft visual studio\\vc98\\include\\xstring"
 #line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\xutility"



#pragma once
#line 6 "c:\\programme\\microsoft visual studio\\vc98\\include\\xutility"






#pragma pack(push,8)
#line 14 "c:\\programme\\microsoft visual studio\\vc98\\include\\xutility"
namespace std {
		
template<class _II, class _OI> inline
	_OI copy(_II _F, _II _L, _OI _X)
	{for (; _F != _L; ++_X, ++_F)
		*_X = *_F;
	return (_X); }
		
template<class _BI1, class _BI2> inline
	_BI2 copy_backward(_BI1 _F, _BI1 _L, _BI2 _X)
	{while (_F != _L)
		*--_X = *--_L;
	return (_X); }
		
template<class _II1, class _II2> inline
	bool equal(_II1 _F, _II1 _L, _II2 _X)
	{return (mismatch(_F, _L, _X).first == _L); }
		
template<class _II1, class _II2, class _Pr> inline
	bool equal(_II1 _F, _II1 _L, _II2 _X, _Pr _P)
	{return (mismatch(_F, _L, _X, _P).first == _L); }
		
template<class _FI, class _Ty> inline
	void fill(_FI _F, _FI _L, const _Ty& _X)
	{for (; _F != _L; ++_F)
		*_F = _X; }
		
template<class _OI, class _Sz, class _Ty> inline
	void fill_n(_OI _F, _Sz _N, const _Ty& _X)
	{for (; 0 < _N; --_N, ++_F)
		*_F = _X; }
		
template<class _II1, class _II2> inline
	bool lexicographical_compare(_II1 _F1, _II1 _L1,
		_II2 _F2, _II2 _L2)
	{for (; _F1 != _L1 && _F2 != _L2; ++_F1, ++_F2)
		if (*_F1 < *_F2)
			return (true);
		else if (*_F2 < *_F1)
			return (false);
	return (_F1 == _L1 && _F2 != _L2); }
		
template<class _II1, class _II2, class _Pr> inline
	bool lexicographical_compare(_II1 _F1, _II1 _L1,
		_II2 _F2, _II2 _L2, _Pr _P)
	{for (; _F1 != _L1 && _F2 != _L2; ++_F1, ++_F2)
		if (_P(*_F1, *_F2))
			return (true);
		else if (_P(*_F2, *_F1))
			return (false);
	return (_F1 == _L1 && _F2 != _L2); }
		




template<class _Ty> inline
	const _Ty& _cpp_max(const _Ty& _X, const _Ty& _Y)
	{return (_X < _Y ? _Y : _X); }
		
template<class _Ty, class _Pr> inline
	const _Ty& _cpp_max(const _Ty& _X, const _Ty& _Y, _Pr _P)
	{return (_P(_X, _Y) ? _Y : _X); }
		
template<class _Ty> inline
	const _Ty& _cpp_min(const _Ty& _X, const _Ty& _Y)
	{return (_Y < _X ? _Y : _X); }
		
template<class _Ty, class _Pr> inline
	const _Ty& _cpp_min(const _Ty& _X, const _Ty& _Y, _Pr _P)
	{return (_P(_Y, _X) ? _Y : _X); }
		
template<class _II1, class _II2> inline
	pair<_II1, _II2> mismatch(_II1 _F, _II1 _L, _II2 _X)
	{for (; _F != _L && *_F == *_X; ++_F, ++_X)
		;
	return (pair<_II1, _II2>(_F, _X)); }
		
template<class _II1, class _II2, class _Pr> inline
	pair<_II1, _II2> mismatch(_II1 _F, _II1 _L, _II2 _X, _Pr _P)
	{for (; _F != _L && _P(*_F, *_X); ++_F, ++_X)
		;
	return (pair<_II1, _II2>(_F, _X)); }
		
template<class _Ty> inline
	void swap(_Ty& _X, _Ty& _Y)
	{_Ty _Tmp = _X;
	_X = _Y, _Y = _Tmp; }
};

#pragma pack(pop)
#line 106 "c:\\programme\\microsoft visual studio\\vc98\\include\\xutility"

#line 108 "c:\\programme\\microsoft visual studio\\vc98\\include\\xutility"






















#line 15 "c:\\programme\\microsoft visual studio\\vc98\\include\\xstring"
namespace std {
__declspec(dllimport) void __cdecl _Xlen();
__declspec(dllimport) void __cdecl _Xran();
		
template<class _E,
	class _Tr = char_traits<_E>,
	class _A = allocator<_E> >
	class basic_string {
public:
	typedef basic_string<_E, _Tr, _A> _Myt;
	typedef _A::size_type size_type;
	typedef _A::difference_type difference_type;
	typedef _A::pointer pointer;
	typedef _A::const_pointer const_pointer;
	typedef _A::reference reference;
	typedef _A::const_reference const_reference;
	typedef _A::value_type value_type;
	typedef _A::pointer iterator;
	typedef _A::const_pointer const_iterator;
	typedef reverse_iterator<const_iterator, value_type,
		const_reference, const_pointer, difference_type>
			const_reverse_iterator;
	typedef reverse_iterator<iterator, value_type,
		reference, pointer, difference_type>
			reverse_iterator;
	explicit basic_string(const _A& _Al = _A())
		: allocator(_Al) {_Tidy(); }
	basic_string(const _Myt& _X)
		: allocator(_X.allocator)
		{_Tidy(), assign(_X, 0, npos); }
	basic_string(const _Myt& _X, size_type _P, size_type _M,
		const _A& _Al = _A())
		: allocator(_Al) {_Tidy(), assign(_X, _P, _M); }
	basic_string(const _E *_S, size_type _N,
		const _A& _Al = _A())
		: allocator(_Al) {_Tidy(), assign(_S, _N); }
	basic_string(const _E *_S, const _A& _Al = _A())
		: allocator(_Al) {_Tidy(), assign(_S); }
	basic_string(size_type _N, _E _C, const _A& _Al = _A())
		: allocator(_Al) {_Tidy(), assign(_N, _C); }
	typedef const_iterator _It;
	basic_string(_It _F, _It _L, const _A& _Al = _A())
		: allocator(_Al) {_Tidy(); assign(_F, _L); }
	~basic_string()
		{_Tidy(true); }
	typedef _Tr traits_type;
	typedef _A allocator_type;
	enum _Mref {_FROZEN = 255};
	static const size_type npos;
	_Myt& operator=(const _Myt& _X)
		{return (assign(_X)); }
	_Myt& operator=(const _E *_S)
		{return (assign(_S)); }
	_Myt& operator=(_E _C)
		{return (assign(1, _C)); }
	_Myt& operator+=(const _Myt& _X)
		{return (append(_X)); }
	_Myt& operator+=(const _E *_S)
		{return (append(_S)); }
	_Myt& operator+=(_E _C)
		{return (append(1, _C)); }
	_Myt& append(const _Myt& _X)
		{return (append(_X, 0, npos)); }
	_Myt& append(const _Myt& _X, size_type _P, size_type _M)
		{if (_X.size() < _P)
			_Xran();
		size_type _N = _X.size() - _P;
		if (_N < _M)
			_M = _N;
		if (npos - _Len <= _M)
			_Xlen();
		if (0 < _M && _Grow(_N = _Len + _M))
			{_Tr::copy(_Ptr + _Len, &_X.c_str()[_P], _M);
			_Eos(_N); }
		return (*this); }
	_Myt& append(const _E *_S, size_type _M)
		{if (npos - _Len <= _M)
			_Xlen();
		size_type _N;
		if (0 < _M && _Grow(_N = _Len + _M))
			{_Tr::copy(_Ptr + _Len, _S, _M);
			_Eos(_N); }
		return (*this); }
	_Myt& append(const _E *_S)
		{return (append(_S, _Tr::length(_S))); }
	_Myt& append(size_type _M, _E _C)
		{if (npos - _Len <= _M)
			_Xlen();
		size_type _N;
		if (0 < _M && _Grow(_N = _Len + _M))
			{_Tr::assign(_Ptr + _Len, _M, _C);
			_Eos(_N); }
		return (*this); }
	_Myt& append(_It _F, _It _L)
		{return (replace(end(), end(), _F, _L)); }
	_Myt& assign(const _Myt& _X)
		{return (assign(_X, 0, npos)); }
	_Myt& assign(const _Myt& _X, size_type _P, size_type _M)
		{if (_X.size() < _P)
			_Xran();
		size_type _N = _X.size() - _P;
		if (_M < _N)
			_N = _M;
		if (this == &_X)
			erase((size_type)(_P + _N)), erase(0, _P);
		else if (0 < _N && _N == _X.size()
			&& _Refcnt(_X.c_str()) < _FROZEN - 1
			&& allocator == _X.allocator)
			{_Tidy(true);
			_Ptr = (_E *)_X.c_str();
			_Len = _X.size();
			_Res = _X.capacity();
			++_Refcnt(_Ptr); }
		else if (_Grow(_N, true))
			{_Tr::copy(_Ptr, &_X.c_str()[_P], _N);
			_Eos(_N); }
		return (*this); }
	_Myt& assign(const _E *_S, size_type _N)
		{if (_Grow(_N, true))
			{_Tr::copy(_Ptr, _S, _N);
			_Eos(_N); }
		return (*this); }
	_Myt& assign(const _E *_S)
		{return (assign(_S, _Tr::length(_S))); }
	_Myt& assign(size_type _N, _E _C)
		{if (_N == npos)
			_Xlen();
		if (_Grow(_N, true))
			{_Tr::assign(_Ptr, _N, _C);
			_Eos(_N); }
		return (*this); }
	_Myt& assign(_It _F, _It _L)
		{return (replace(begin(), end(), _F, _L)); }
	_Myt& insert(size_type _P0, const _Myt& _X)
		{return (insert(_P0, _X, 0, npos)); }
	_Myt& insert(size_type _P0, const _Myt& _X, size_type _P,
		size_type _M)
		{if (_Len < _P0 || _X.size() < _P)
			_Xran();
		size_type _N = _X.size() - _P;
		if (_N < _M)
			_M = _N;
		if (npos - _Len <= _M)
			_Xlen();
		if (0 < _M && _Grow(_N = _Len + _M))
			{_Tr::move(_Ptr + _P0 + _M, _Ptr + _P0, _Len - _P0);
			_Tr::copy(_Ptr + _P0, &_X.c_str()[_P], _M);
			_Eos(_N); }
		return (*this); }
	_Myt& insert(size_type _P0, const _E *_S, size_type _M)
		{if (_Len < _P0)
			_Xran();
		if (npos - _Len <= _M)
			_Xlen();
		size_type _N;
		if (0 < _M && _Grow(_N = _Len + _M))
			{_Tr::move(_Ptr + _P0 + _M, _Ptr + _P0, _Len - _P0);
			_Tr::copy(_Ptr + _P0, _S, _M);
			_Eos(_N); }
		return (*this); }
	_Myt& insert(size_type _P0, const _E *_S)
		{return (insert(_P0, _S, _Tr::length(_S))); }
	_Myt& insert(size_type _P0, size_type _M, _E _C)
		{if (_Len < _P0)
			_Xran();
		if (npos - _Len <= _M)
			_Xlen();
		size_type _N;
		if (0 < _M && _Grow(_N = _Len + _M))
			{_Tr::move(_Ptr + _P0 + _M, _Ptr + _P0, _Len - _P0);
			_Tr::assign(_Ptr + _P0, _M, _C);
			_Eos(_N); }
		return (*this); }
	iterator insert(iterator _P, _E _C)
		{size_type _P0 = _Pdif(_P, begin());
		insert(_P0, 1, _C);
		return (begin() + _P0); }
	void insert(iterator _P, size_type _M, _E _C)
		{size_type _P0 = _Pdif(_P, begin());
		insert(_P0, _M, _C); }
	void insert(iterator _P, _It _F, _It _L)
		{replace(_P, _P, _F, _L); }
	_Myt& erase(size_type _P0 = 0, size_type _M = npos)
		{if (_Len < _P0)
			_Xran();
		_Split();
		if (_Len - _P0 < _M)
			_M = _Len - _P0;
		if (0 < _M)
			{_Tr::move(_Ptr + _P0, _Ptr + _P0 + _M,
				_Len - _P0 - _M);
			size_type _N = _Len - _M;
			if (_Grow(_N))
				_Eos(_N); }
		return (*this); }
	iterator erase(iterator _P)
		{size_t _M = _Pdif(_P, begin());
		erase(_M, 1);
		return (_Psum(_Ptr, _M)); }
	iterator erase(iterator _F, iterator _L)
		{size_t _M = _Pdif(_F, begin());
		erase(_M, _Pdif(_L, _F));
		return (_Psum(_Ptr, _M)); }
	_Myt& replace(size_type _P0, size_type _N0, const _Myt& _X)
		{return (replace(_P0, _N0, _X, 0, npos)); }
	_Myt& replace(size_type _P0, size_type _N0, const _Myt& _X,
		size_type _P, size_type _M)
		{if (_Len < _P0 || _X.size() < _P)
			_Xran();
		if (_Len - _P0 < _N0)
			_N0 = _Len - _P0;
		size_type _N = _X.size() - _P;
		if (_N < _M)
			_M = _N;
		if (npos - _M <= _Len - _N0)
			_Xlen();
		_Split();
		size_type _Nm = _Len - _N0 - _P0;
		if (_M < _N0)
			_Tr::move(_Ptr + _P0 + _M, _Ptr + _P0 + _N0, _Nm);
		if ((0 < _M || 0 < _N0) && _Grow(_N = _Len + _M - _N0))
			{if (_N0 < _M)
				_Tr::move(_Ptr + _P0 + _M, _Ptr + _P0 + _N0, _Nm);
			_Tr::copy(_Ptr + _P0, &_X.c_str()[_P], _M);
			_Eos(_N); }
		return (*this); }
	_Myt& replace(size_type _P0, size_type _N0, const _E *_S,
		size_type _M)
		{if (_Len < _P0)
			_Xran();
		if (_Len - _P0 < _N0)
			_N0 = _Len - _P0;
		if (npos - _M <= _Len - _N0)
			_Xlen();
		_Split();
		size_type _Nm = _Len - _N0 - _P0;
		if (_M < _N0)
			_Tr::move(_Ptr + _P0 + _M, _Ptr + _P0 + _N0, _Nm);
		size_type _N;
		if ((0 < _M || 0 < _N0) && _Grow(_N = _Len + _M - _N0))
			{if (_N0 < _M)
				_Tr::move(_Ptr + _P0 + _M, _Ptr + _P0 + _N0, _Nm);
			_Tr::copy(_Ptr + _P0, _S, _M);
			_Eos(_N); }
		return (*this); }
	_Myt& replace(size_type _P0, size_type _N0, const _E *_S)
		{return (replace(_P0, _N0, _S, _Tr::length(_S))); }
	_Myt& replace(size_type _P0, size_type _N0,
		size_type _M, _E _C)
		{if (_Len < _P0)
			_Xran();
		if (_Len - _P0 < _N0)
			_N0 = _Len - _P0;
		if (npos - _M <= _Len - _N0)
			_Xlen();
		_Split();
		size_type _Nm = _Len - _N0 - _P0;
		if (_M < _N0)
			_Tr::move(_Ptr + _P0 + _M, _Ptr + _P0 + _N0, _Nm);
		size_type _N;
		if ((0 < _M || 0 < _N0) && _Grow(_N = _Len + _M - _N0))
			{if (_N0 < _M)
				_Tr::move(_Ptr + _P0 + _M, _Ptr + _P0 + _N0,
					_Nm);
			_Tr::assign(_Ptr + _P0, _M, _C);
			_Eos(_N); }
		return (*this); }
	_Myt& replace(iterator _F, iterator _L, const _Myt& _X)
		{return (replace(
			_Pdif(_F, begin()), _Pdif(_L, _F), _X)); }
	_Myt& replace(iterator _F, iterator _L, const _E *_S,
		size_type _M)
		{return (replace(
			_Pdif(_F, begin()), _Pdif(_L, _F), _S, _M)); }
	_Myt& replace(iterator _F, iterator _L, const _E *_S)
		{return (replace(
			_Pdif(_F, begin()), _Pdif(_L, _F), _S)); }
	_Myt& replace(iterator _F, iterator _L,	size_type _M, _E _C)
		{return (replace(
			_Pdif(_F, begin()), _Pdif(_L, _F), _M, _C)); }
	_Myt& replace(iterator _F1, iterator _L1,
		_It _F2, _It _L2)
		{size_type _P0 = _Pdif(_F1, begin());
		size_type _M = 0;
		_Distance(_F2, _L2, _M);
		replace(_P0, _Pdif(_L1, _F1), _M, _E(0));
		for (_F1 = begin() + _P0; 0 < _M; ++_F1, ++_F2, --_M)
			*_F1 = *_F2;
		return (*this); }
	iterator begin()
		{_Freeze();
		return (_Ptr); }
	const_iterator begin() const
		{return (_Ptr); }
	iterator end()
		{_Freeze();
		return ((iterator)_Psum(_Ptr, _Len)); }
	const_iterator end() const
		{return ((const_iterator)_Psum(_Ptr, _Len)); }
	reverse_iterator rbegin()
		{return (reverse_iterator(end())); }
	const_reverse_iterator rbegin() const
		{return (const_reverse_iterator(end())); }
	reverse_iterator rend()
		{return (reverse_iterator(begin())); }
	const_reverse_iterator rend() const
		{return (const_reverse_iterator(begin())); }
	reference at(size_type _P0)
		{if (_Len <= _P0)
			_Xran();
		_Freeze();
		return (_Ptr[_P0]); }
	const_reference at(size_type _P0) const
		{if (_Len <= _P0)
			_Xran();
		return (_Ptr[_P0]); }
	reference operator[](size_type _P0)
		{if (_Len < _P0 || _Ptr == 0)
			return ((reference)*_Nullstr());
		_Freeze();
		return (_Ptr[_P0]); }
	const_reference operator[](size_type _P0) const
		{if (_Ptr == 0)
			return (*_Nullstr());
		else
			return (_Ptr[_P0]); }
	const _E *c_str() const
		{return (_Ptr == 0 ? _Nullstr() : _Ptr); }
	const _E *data() const
		{return (c_str()); }
	size_type length() const
		{return (_Len); }
	size_type size() const
		{return (_Len); }
	size_type max_size() const
		{size_type _N = allocator.max_size();
		return (_N <= 2 ? 1 : _N - 2); }
	void resize(size_type _N, _E _C)
		{_N <= _Len ? erase(_N) : append(_N - _Len, _C); }
	void resize(size_type _N)
		{_N <= _Len ? erase(_N) : append(_N - _Len, _E(0)); }
	size_type capacity() const
		{return (_Res); }
	void reserve(size_type _N = 0)
		{if (_Res < _N)
			_Grow(_N); }
	bool empty() const
		{return (_Len == 0); }
	size_type copy(_E *_S, size_type _N, size_type _P0 = 0) const
		{if (_Len < _P0)
			_Xran();
		if (_Len - _P0 < _N)
			_N = _Len - _P0;
		if (0 < _N)
			_Tr::copy(_S, _Ptr + _P0, _N);
		return (_N); }
	void swap(_Myt& _X)
		{if (allocator == _X.allocator)
			{std::swap(_Ptr, _X._Ptr);
			std::swap(_Len, _X._Len);
			std::swap(_Res, _X._Res); }
		else
			{_Myt _Ts = *this; *this = _X, _X = _Ts; }}
	friend void swap(_Myt& _X, _Myt& _Y)
		{_X.swap(_Y); }
	size_type find(const _Myt& _X, size_type _P = 0) const
		{return (find(_X.c_str(), _P, _X.size())); }
	size_type find(const _E *_S, size_type _P,
		size_type _N) const
		{if (_N == 0 && _P <= _Len)
			return (_P);
		size_type _Nm;
		if (_P < _Len && _N <= (_Nm = _Len - _P))
			{const _E *_U, *_V;
			for (_Nm -= _N - 1, _V = _Ptr + _P;
				(_U = _Tr::find(_V, _Nm, *_S)) != 0;
				_Nm -= _U - _V + 1, _V = _U + 1)
				if (_Tr::compare(_U, _S, _N) == 0)
					return (_U - _Ptr); }
		return (npos); }
	size_type find(const _E *_S, size_type _P = 0) const
		{return (find(_S, _P, _Tr::length(_S))); }
	size_type find(_E _C, size_type _P = 0) const
		{return (find((const _E *)&_C, _P, 1)); }
	size_type rfind(const _Myt& _X, size_type _P = npos) const
		{return (rfind(_X.c_str(), _P, _X.size())); }
	size_type rfind(const _E *_S, size_type _P,
		size_type _N) const
		{if (_N == 0)
			return (_P < _Len ? _P : _Len);
		if (_N <= _Len)
			for (const _E *_U = _Ptr +
				+ (_P < _Len - _N ? _P : _Len - _N); ; --_U)
				if (_Tr::eq(*_U, *_S)
					&& _Tr::compare(_U, _S, _N) == 0)
					return (_U - _Ptr);
				else if (_U == _Ptr)
					break;
		return (npos); }
	size_type rfind(const _E *_S, size_type _P = npos) const
		{return (rfind(_S, _P, _Tr::length(_S))); }
	size_type rfind(_E _C, size_type _P = npos) const
		{return (rfind((const _E *)&_C, _P, 1)); }
	size_type find_first_of(const _Myt& _X,
		size_type _P = 0) const
		{return (find_first_of(_X.c_str(), _P, _X.size())); }
	size_type find_first_of(const _E *_S, size_type _P,
		size_type _N) const
		{if (0 < _N && _P < _Len)
			{const _E *const _V = _Ptr + _Len;
			for (const _E *_U = _Ptr + _P; _U < _V; ++_U)
				if (_Tr::find(_S, _N, *_U) != 0)
					return (_U - _Ptr); }
		return (npos); }
	size_type find_first_of(const _E *_S, size_type _P = 0) const
		{return (find_first_of(_S, _P, _Tr::length(_S))); }
	size_type find_first_of(_E _C, size_type _P = 0) const
		{return (find((const _E *)&_C, _P, 1)); }
	size_type find_last_of(const _Myt& _X,
		size_type _P = npos) const
		{return (find_last_of(_X.c_str(), _P, _X.size())); }
	size_type find_last_of(const _E *_S, size_type _P,
		size_type _N) const
		{if (0 < _N && 0 < _Len)
			for (const _E *_U = _Ptr
				+ (_P < _Len ? _P : _Len - 1); ; --_U)
				if (_Tr::find(_S, _N, *_U) != 0)
					return (_U - _Ptr);
				else if (_U == _Ptr)
					break;
		return (npos); }
	size_type find_last_of(const _E *_S,
		size_type _P = npos) const
		{return (find_last_of(_S, _P, _Tr::length(_S))); }
	size_type find_last_of(_E _C, size_type _P = npos) const
		{return (rfind((const _E *)&_C, _P, 1)); }
	size_type find_first_not_of(const _Myt& _X,
		size_type _P = 0) const
		{return (find_first_not_of(_X.c_str(), _P,
			_X.size())); }
	size_type find_first_not_of(const _E *_S, size_type _P,
		size_type _N) const
		{if (_P < _Len)
			{const _E *const _V = _Ptr + _Len;
			for (const _E *_U = _Ptr + _P; _U < _V; ++_U)
				if (_Tr::find(_S, _N, *_U) == 0)
					return (_U - _Ptr); }
		return (npos); }
	size_type find_first_not_of(const _E *_S,
		size_type _P = 0) const
		{return (find_first_not_of(_S, _P, _Tr::length(_S))); }
	size_type find_first_not_of(_E _C, size_type _P = 0) const
		{return (find_first_not_of((const _E *)&_C, _P, 1)); }
	size_type find_last_not_of(const _Myt& _X,
		size_type _P = npos) const
		{return (find_last_not_of(_X.c_str(), _P, _X.size())); }
	size_type find_last_not_of(const _E *_S, size_type _P,
		 size_type _N) const
		{if (0 < _Len)
			for (const _E *_U = _Ptr
				+ (_P < _Len ? _P : _Len - 1); ; --_U)
				if (_Tr::find(_S, _N, *_U) == 0)
					return (_U - _Ptr);
				else if (_U == _Ptr)
					break;
		return (npos); }
	size_type find_last_not_of(const _E *_S,
		size_type _P = npos) const
		{return (find_last_not_of(_S, _P, _Tr::length(_S))); }
	size_type find_last_not_of(_E _C, size_type _P = npos) const
		{return (find_last_not_of((const _E *)&_C, _P, 1)); }
	_Myt substr(size_type _P = 0, size_type _M = npos) const
		{return (_Myt(*this, _P, _M)); }
	int compare(const _Myt& _X) const
		{return (compare(0, _Len, _X.c_str(), _X.size())); }
	int compare(size_type _P0, size_type _N0,
		const _Myt& _X) const
		{return (compare(_P0, _N0, _X, 0, npos)); }
	int compare(size_type _P0, size_type _N0, const _Myt& _X,
		size_type _P, size_type _M) const
		{if (_X.size() < _P)
			_Xran();
		if (_X._Len - _P < _M)
			_M = _X._Len - _P;
		return (compare(_P0, _N0, _X.c_str() + _P, _M)); }
	int compare(const _E *_S) const
		{return (compare(0, _Len, _S, _Tr::length(_S))); }
	int compare(size_type _P0, size_type _N0, const _E *_S) const
		{return (compare(_P0, _N0, _S, _Tr::length(_S))); }
	int compare(size_type _P0, size_type _N0, const _E *_S,
		size_type _M) const
		{if (_Len < _P0)
			_Xran();
		if (_Len - _P0 < _N0)
			_N0 = _Len - _P0;
		size_type _Ans = _Tr::compare(_Psum(_Ptr, _P0), _S,
			_N0 < _M ? _N0 : _M);
		return (_Ans != 0 ? _Ans : _N0 < _M ? -1
			: _N0 == _M ? 0 : +1); }
	_A get_allocator() const
		{return (allocator); }
protected:
	_A allocator;
private:
	enum {_MIN_SIZE = sizeof (_E) <= 32 ? 31 : 7};
	void _Copy(size_type _N)
		{size_type _Ns = _N | _MIN_SIZE;
		if (max_size() < _Ns)
			_Ns = _N;
		_E *_S;
		try {
			_S = allocator.allocate(_Ns + 2, (void *)0);
		} catch (...) {
			_Ns = _N;
			_S = allocator.allocate(_Ns + 2, (void *)0);
		}
		if (0 < _Len)
			_Tr::copy(_S + 1, _Ptr,_Len>_Ns?_Ns:_Len);
		size_type _Olen = _Len;
		_Tidy(true);
		_Ptr = _S + 1;
		_Refcnt(_Ptr) = 0;
		_Res = _Ns;
		_Eos(_Olen>_Ns?_Ns:_Olen); }
	void _Eos(size_type _N)
		{_Tr::assign(_Ptr[_Len = _N], _E(0)); }
	void _Freeze()
		{if (_Ptr != 0
			&& _Refcnt(_Ptr) != 0 && _Refcnt(_Ptr) != _FROZEN)
			_Grow(_Len);
		if (_Ptr != 0)
			_Refcnt(_Ptr) = _FROZEN; }
	bool _Grow(size_type _N, bool _Trim = false)
		{if (max_size() < _N)
			_Xlen();
		if (_Ptr != 0
			&& _Refcnt(_Ptr) != 0 && _Refcnt(_Ptr) != _FROZEN)
			if (_N == 0)
				{--_Refcnt(_Ptr), _Tidy();
				return (false); }
			else
				{_Copy(_N);
				return (true); }
		if (_N == 0)
			{if (_Trim)
				_Tidy(true);
			else if (_Ptr != 0)
				_Eos(0);
			return (false); }
		else
			{if (_Trim && (_MIN_SIZE < _Res || _Res < _N))
				{_Tidy(true);
				_Copy(_N); }
			else if (!_Trim && _Res < _N)
				_Copy(_N);
			return (true); }}
	static const _E * __cdecl _Nullstr()
		{static const _E _C = _E(0);
		return (&_C); }
	static size_type _Pdif(const_pointer _P2, const_pointer _P1)
		{return (_P2 == 0 ? 0 : _P2 - _P1); }
	static const_pointer _Psum(const_pointer _P, size_type _N)
		{return (_P == 0 ? 0 : _P + _N); }
	static pointer _Psum(pointer _P, size_type _N)
		{return (_P == 0 ? 0 : _P + _N); }
	unsigned char& _Refcnt(const _E *_U)
		{return (((unsigned char *)_U)[-1]); }
	void _Split()
		{if (_Ptr != 0 && _Refcnt(_Ptr) != 0 && _Refcnt(_Ptr) != _FROZEN)
			{_E *_Temp = _Ptr;
			_Tidy(true);
			assign(_Temp); }}
	void _Tidy(bool _Built = false)
		{if (!_Built || _Ptr == 0)
			;
		else if (_Refcnt(_Ptr) == 0 || _Refcnt(_Ptr) == _FROZEN)
			allocator.deallocate(_Ptr - 1, _Res + 2);
		else
			--_Refcnt(_Ptr);
		_Ptr = 0, _Len = 0, _Res = 0; }
	_E *_Ptr;
	size_type _Len, _Res;
	};
template<class _E, class _Tr, class _A>
	const basic_string<_E, _Tr, _A>::size_type
		basic_string<_E, _Tr, _A>::npos = -1;


#pragma warning(disable:4231) 

extern template class __declspec(dllimport) basic_string<char, char_traits<char>, allocator<char> >;
extern template class __declspec(dllimport) basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >;

#pragma warning(default:4231) 
#line 610 "c:\\programme\\microsoft visual studio\\vc98\\include\\xstring"

typedef basic_string<char, char_traits<char>, allocator<char> >
	string;

typedef basic_string<wchar_t, char_traits<wchar_t>,
	allocator<wchar_t> > wstring;

};

#pragma pack(pop)
#line 621 "c:\\programme\\microsoft visual studio\\vc98\\include\\xstring"

#line 623 "c:\\programme\\microsoft visual studio\\vc98\\include\\xstring"





#line 11 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdexcept"


#pragma pack(push,8)
#line 15 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdexcept"
namespace std {
		
class __declspec(dllimport) logic_error : public exception {
public:
	explicit logic_error(const string& _S)
		: exception(""), _Str(_S) {}
	virtual ~logic_error()
		{}
	virtual const char *what() const
		{return (_Str.c_str()); }
protected:
	virtual void _Doraise() const
		{throw (*this); }
private:
	string _Str;
	};
		
class __declspec(dllimport) domain_error : public logic_error {
public:
	explicit domain_error(const string& _S)
		: logic_error(_S) {}
	virtual ~domain_error()
		{}
protected:
	virtual void _Doraise() const
		{throw (*this); }
	};
		
class invalid_argument : public logic_error {
public:
	explicit invalid_argument(const string& _S)
		: logic_error(_S) {}
	virtual ~invalid_argument()
		{}
protected:
	virtual void _Doraise() const
		{throw (*this); }
	};
		
class __declspec(dllimport) length_error : public logic_error {
public:
	explicit length_error(const string& _S)
		: logic_error(_S) {}
	virtual ~length_error()
		{}
protected:
	virtual void _Doraise() const
		{throw (*this); }
	};
		
class __declspec(dllimport) out_of_range : public logic_error {
public:
	explicit out_of_range(const string& _S)
		: logic_error(_S) {}
	virtual ~out_of_range()
		{}
protected:
	virtual void _Doraise() const
		{throw (*this); }
	};
		
class __declspec(dllimport) runtime_error : public exception {
public:
	explicit runtime_error(const string& _S)
		: exception(""), _Str(_S) {}
	virtual ~runtime_error()
		{}
	virtual const char *what() const
		{return (_Str.c_str()); }
protected:
	virtual void _Doraise() const
		{throw (*this); }
private:
	string _Str;
	};
		
class __declspec(dllimport) overflow_error : public runtime_error {
public:
	explicit overflow_error(const string& _S)
		: runtime_error(_S) {}
	virtual ~overflow_error()
		{}
protected:
	virtual void _Doraise() const
		{throw (*this); }
	};
		
class __declspec(dllimport) underflow_error : public runtime_error {
public:
	explicit underflow_error(const string& _S)
		: runtime_error(_S) {}
	virtual ~underflow_error()
		{}
protected:
	virtual void _Doraise() const
		{throw (*this); }
	};
		
class __declspec(dllimport) range_error : public runtime_error {
public:
	explicit range_error(const string& _S)
		: runtime_error(_S) {}
	virtual ~range_error()
		{}
protected:
	virtual void _Doraise() const
		{throw (*this); }
	};
};

#pragma pack(pop)
#line 127 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdexcept"

#line 129 "c:\\programme\\microsoft visual studio\\vc98\\include\\stdexcept"





#line 12 "c:\\programme\\microsoft visual studio\\vc98\\include\\vector"



#pragma pack(push,8)
#line 17 "c:\\programme\\microsoft visual studio\\vc98\\include\\vector"
namespace std {
		
template<class _Ty, class _A = allocator<_Ty> >
	class vector {
public:
	typedef vector<_Ty, _A> _Myt;
	typedef _A allocator_type;
	typedef _A::size_type size_type;
	typedef _A::difference_type difference_type;
	typedef _A::pointer _Tptr;
	typedef _A::const_pointer _Ctptr;
	typedef _A::reference reference;
	typedef _A::const_reference const_reference;
	typedef _A::value_type value_type;
	typedef _Tptr iterator;
	typedef _Ctptr const_iterator;
	typedef reverse_iterator<const_iterator, value_type,
		const_reference, _Ctptr, difference_type>
			const_reverse_iterator;
	typedef reverse_iterator<iterator, value_type,
		reference, _Tptr, difference_type>
			reverse_iterator;
	explicit vector(const _A& _Al = _A())
		: allocator(_Al), _First(0), _Last(0), _End(0) {}
	explicit vector(size_type _N, const _Ty& _V = _Ty(),
		const _A& _Al = _A())
		: allocator(_Al)
		{_First = allocator.allocate(_N, (void *)0);
		_Ufill(_First, _N, _V);
		_Last = _First + _N;
		_End = _Last; }
	vector(const _Myt& _X)
		: allocator(_X.allocator)
		{_First = allocator.allocate(_X.size(), (void *)0);
		_Last = _Ucopy(_X.begin(), _X.end(), _First);
		_End = _Last; }
	typedef const_iterator _It;
	vector(_It _F, _It _L, const _A& _Al = _A())
		: allocator(_Al), _First(0), _Last(0), _End(0)
		{insert(begin(), _F, _L); }
	~vector()
		{_Destroy(_First, _Last);
		allocator.deallocate(_First, _End - _First);
		_First = 0, _Last = 0, _End = 0; }
	_Myt& operator=(const _Myt& _X)
		{if (this == &_X)
			;
		else if (_X.size() <= size())
			{iterator _S = copy(_X.begin(), _X.end(), _First);
			_Destroy(_S, _Last);
			_Last = _First + _X.size(); }
		else if (_X.size() <= capacity())
			{const_iterator _S = _X.begin() + size();
			copy(_X.begin(), _S, _First);
			_Ucopy(_S, _X.end(), _Last);
			_Last = _First + _X.size(); }
		else
			{_Destroy(_First, _Last);
			allocator.deallocate(_First, _End - _First);
			_First = allocator.allocate(_X.size(), (void *)0);
			_Last = _Ucopy(_X.begin(), _X.end(),
				_First);
			_End = _Last; }
		return (*this); }
	void reserve(size_type _N)
		{if (capacity() < _N)
			{iterator _S = allocator.allocate(_N, (void *)0);
			_Ucopy(_First, _Last, _S);
			_Destroy(_First, _Last);
			allocator.deallocate(_First, _End - _First);
			_End = _S + _N;
			_Last = _S + size();
			_First = _S; }}
	size_type capacity() const
		{return (_First == 0 ? 0 : _End - _First); }
	iterator begin()
		{return (_First); }
	const_iterator begin() const
		{return ((const_iterator)_First); }
	iterator end()
		{return (_Last); }
	const_iterator end() const
		{return ((const_iterator)_Last); }
	reverse_iterator rbegin()
		{return (reverse_iterator(end())); }
	const_reverse_iterator rbegin() const
		{return (const_reverse_iterator(end())); }
	reverse_iterator rend()
		{return (reverse_iterator(begin())); }
	const_reverse_iterator rend() const
		{return (const_reverse_iterator(begin())); }
	void resize(size_type _N, const _Ty& _X = _Ty())
		{if (size() < _N)
			insert(end(), _N - size(), _X);
		else if (_N < size())
			erase(begin() + _N, end()); }
	size_type size() const
		{return (_First == 0 ? 0 : _Last - _First); }
	size_type max_size() const
		{return (allocator.max_size()); }
	bool empty() const
		{return (size() == 0); }
	_A get_allocator() const
		{return (allocator); }
	const_reference at(size_type _P) const
		{if (size() <= _P)
			_Xran();
		return (*(begin() + _P)); }
	reference at(size_type _P)
		{if (size() <= _P)
			_Xran();
		return (*(begin() + _P)); }
	const_reference operator[](size_type _P) const
		{return (*(begin() + _P)); }
	reference operator[](size_type _P)
		{return (*(begin() + _P)); }
	reference front()
		{return (*begin()); }
	const_reference front() const
		{return (*begin()); }
	reference back()
		{return (*(end() - 1)); }
	const_reference back() const
		{return (*(end() - 1)); }
	void push_back(const _Ty& _X)
		{insert(end(), _X); }
	void pop_back()
		{erase(end() - 1); }
	void assign(_It _F, _It _L)
		{erase(begin(), end());
		insert(begin(), _F, _L); }
	void assign(size_type _N, const _Ty& _X = _Ty())
		{erase(begin(), end());
		insert(begin(), _N, _X); }
	iterator insert(iterator _P, const _Ty& _X = _Ty())
		{size_type _O = _P - begin();
		insert(_P, 1, _X);
		return (begin() + _O); }
	void insert(iterator _P, size_type _M, const _Ty& _X)
		{if (_End - _Last < _M)
			{size_type _N = size() + (_M < size() ? size() : _M);
			iterator _S = allocator.allocate(_N, (void *)0);
			iterator _Q = _Ucopy(_First, _P, _S);
			_Ufill(_Q, _M, _X);
			_Ucopy(_P, _Last, _Q + _M);
			_Destroy(_First, _Last);
			allocator.deallocate(_First, _End - _First);
			_End = _S + _N;
			_Last = _S + size() + _M;
			_First = _S; }
		else if (_Last - _P < _M)
			{_Ucopy(_P, _Last, _P + _M);
			_Ufill(_Last, _M - (_Last - _P), _X);
			fill(_P, _Last, _X);
			_Last += _M; }
		else if (0 < _M)
			{_Ucopy(_Last - _M, _Last, _Last);
			copy_backward(_P, _Last - _M, _Last);
			fill(_P, _P + _M, _X);
			_Last += _M; }}
	void insert(iterator _P, _It _F, _It _L)
		{size_type _M = 0;
		_Distance(_F, _L, _M);
		if (_End - _Last < _M)
			{size_type _N = size() + (_M < size() ? size() : _M);
			iterator _S = allocator.allocate(_N, (void *)0);
			iterator _Q = _Ucopy(_First, _P, _S);
			_Q = _Ucopy(_F, _L, _Q);
			_Ucopy(_P, _Last, _Q);
			_Destroy(_First, _Last);
			allocator.deallocate(_First, _End - _First);
			_End = _S + _N;
			_Last = _S + size() + _M;
			_First = _S; }
		else if (_Last - _P < _M)
			{_Ucopy(_P, _Last, _P + _M);
			_Ucopy(_F + (_Last - _P), _L, _Last);
			copy(_F, _F + (_Last - _P), _P);
			_Last += _M; }
		else if (0 < _M)
			{_Ucopy(_Last - _M, _Last, _Last);
			copy_backward(_P, _Last - _M, _Last);
			copy(_F, _L, _P);
			_Last += _M; }}
	iterator erase(iterator _P)
		{copy(_P + 1, end(), _P);
		_Destroy(_Last - 1, _Last);
		--_Last;
		return (_P); }
	iterator erase(iterator _F, iterator _L)
		{iterator _S = copy(_L, end(), _F);
		_Destroy(_S, end());
		_Last = _S;
		return (_F); }
	void clear()
		{erase(begin(), end()); }
	bool _Eq(const _Myt& _X) const
		{return (size() == _X.size()
			&& equal(begin(), end(), _X.begin())); }
	bool _Lt(const _Myt& _X) const
		{return (lexicographical_compare(begin(), end(),
			_X.begin(), _X.end())); }
	void swap(_Myt& _X)
		{if (allocator == _X.allocator)
			{std::swap(_First, _X._First);
			std::swap(_Last, _X._Last);
			std::swap(_End, _X._End); }
		else
			{_Myt _Ts = *this; *this = _X, _X = _Ts; }}
	friend void swap(_Myt& _X, _Myt& _Y)
		{_X.swap(_Y); }
protected:
	void _Destroy(iterator _F, iterator _L)
		{for (; _F != _L; ++_F)
			allocator.destroy(_F); }
	iterator _Ucopy(const_iterator _F, const_iterator _L,
		iterator _P)
		{for (; _F != _L; ++_P, ++_F)
			allocator.construct(_P, *_F);
		return (_P); }
	void _Ufill(iterator _F, size_type _N, const _Ty &_X)
		{for (; 0 < _N; --_N, ++_F)
			allocator.construct(_F, _X); }
	void _Xran() const
		{throw out_of_range("invalid vector<T> subscript"); }
	_A allocator;
	iterator _First, _Last, _End;
	};
		
typedef unsigned int _Vbase;
const int _VBITS = 8 * sizeof (_Vbase);
typedef allocator<_Vbase> _Bool_allocator;
class vector<_Bool, _Bool_allocator> {
public:
	typedef _Bool_allocator _A;
	typedef _Bool _Ty;
	typedef vector<_Ty, _A> _Myt;
	typedef vector<_Vbase, _A> _Vbtype;
	typedef _A allocator_type;
	typedef _A::size_type size_type;
	typedef _A::difference_type difference_type;

		
	class reference {
	public:
		reference()
			: _Mask(0), _Ptr(0) {}
		reference(size_t _O, _Vbase *_P)
			: _Mask((_Vbase)1 << _O), _Ptr(_P) {}
		reference& operator=(const reference& _X)
			{return (*this = bool(_X)); }
		reference& operator=(bool _V)
			{if (_V)
				*_Ptr |= _Mask;
			else
				*_Ptr &= ~_Mask;
			return (*this); }
		void flip()
			{*_Ptr ^= _Mask; }
		bool operator~() const
			{return (!bool(*this)); }
		operator bool() const
			{return ((*_Ptr & _Mask) != 0); }
	protected:
		_Vbase _Mask, *_Ptr;
		};

	typedef const reference const_reference;
	typedef bool value_type;
		
	class iterator;
	class const_iterator : public _Ranit<_Bool, difference_type> {
	public:
		const_iterator()
			: _Off(0), _Ptr(0) {}
		const_iterator(size_t _O, const _Vbase *_P)
			: _Off(_O), _Ptr((_Vbase*)_P) {}
		const_iterator(const iterator& _X)
			: _Off(_X._Off), _Ptr(_X._Ptr) {}
		const_reference operator*() const
			{return (const_reference(_Off, _Ptr)); }
		const_iterator& operator++()
			{_Inc();
			return (*this); }
		const_iterator operator++(int)
			{const_iterator _Tmp = *this;
			_Inc();
			return (_Tmp); }
		const_iterator& operator--()
			{_Dec();
			return (*this); }
		const_iterator operator--(int)
			{const_iterator _Tmp = *this;
			_Dec();
			return (_Tmp); }
		const_iterator& operator+=(difference_type _N)
			{_Off += _N;
			_Ptr += _Off / _VBITS;
			_Off %= _VBITS;
			return (*this); }
		const_iterator& operator-=(difference_type _N)
			{return (*this += -_N); }
		const_iterator operator+(difference_type _N) const
			{const_iterator _Tmp = *this;
			return (_Tmp += _N); }
		const_iterator operator-(difference_type _N) const
			{const_iterator _Tmp = *this;
			return (_Tmp -= _N); }
		difference_type operator-(const const_iterator _X) const
			{return (_VBITS * (_Ptr - _X._Ptr)
				+ (difference_type)_Off
				- (difference_type)_X._Off); }
		const_reference operator[](difference_type _N) const
			{return (*(*this + _N)); }
		bool operator==(const const_iterator& _X) const
			{return (_Ptr == _X._Ptr && _Off == _X._Off); }
		bool operator!=(const const_iterator& _X) const
			{return (!(*this == _X)); }
		bool operator<(const const_iterator& _X) const
			{return (_Ptr < _X._Ptr
				|| _Ptr == _X._Ptr && _Off < _X._Off); }
		bool operator>(const const_iterator& _X) const
			{return (_X < *this); }
		bool operator<=(const const_iterator& _X) const
			{return (!(_X < *this)); }
		bool operator>=(const const_iterator& _X) const
			{return (!(*this < _X)); }
	protected:
		void _Dec()
			{if (_Off != 0)
				--_Off;
			else
				_Off = _VBITS - 1, --_Ptr; }
		void _Inc()
			{if (_Off < _VBITS - 1)
				++_Off;
			else
				_Off = 0, ++_Ptr; }
		size_t _Off;
		_Vbase *_Ptr;
		};
		
	class iterator : public const_iterator {
	public:
		iterator()
			: const_iterator() {}
		iterator(size_t _O, _Vbase *_P)
			: const_iterator(_O, _P) {}
		reference operator*() const
			{return (reference(_Off, _Ptr)); }
		iterator& operator++()
			{_Inc();
			return (*this); }
		iterator operator++(int)
			{iterator _Tmp = *this;
			_Inc();
			return (_Tmp); }
		iterator& operator--()
			{_Dec();
			return (*this); }
		iterator operator--(int)
			{iterator _Tmp = *this;
			_Dec();
			return (_Tmp); }
		iterator& operator+=(difference_type _N)
			{_Off += _N;
			_Ptr += _Off / _VBITS;
			_Off %= _VBITS;
			return (*this); }
		iterator& operator-=(difference_type _N)
			{return (*this += -_N); }
		iterator operator+(difference_type _N) const
			{iterator _Tmp = *this;
			return (_Tmp += _N); }
		iterator operator-(difference_type _N) const
			{iterator _Tmp = *this;
			return (_Tmp -= _N); }
		difference_type operator-(const iterator _X) const
			{return (_VBITS * (_Ptr - _X._Ptr)
				+ (difference_type)_Off
				- (difference_type)_X._Off); }
		reference operator[](difference_type _N) const
			{return (*(*this + _N)); }
		bool operator==(const iterator& _X) const
			{return (_Ptr == _X._Ptr && _Off == _X._Off); }
		bool operator!=(const iterator& _X) const
			{return (!(*this == _X)); }
		bool operator<(const iterator& _X) const
			{return (_Ptr < _X._Ptr
				|| _Ptr == _X._Ptr && _Off < _X._Off); }
		bool operator>(const iterator& _X) const
			{return (_X < *this); }
		bool operator<=(const iterator& _X) const
			{return (!(_X < *this)); }
		bool operator>=(const iterator& _X) const
			{return (!(*this < _X)); }
		};
	typedef reverse_iterator<const_iterator, value_type,
		const_reference, const_reference *, difference_type>
			const_reverse_iterator;
	typedef reverse_iterator<iterator, value_type,
		reference, reference *, difference_type>
			reverse_iterator;
	explicit vector(const _A& _Al = _A())
		: _Size(0), _Vec(_Al) {}
	explicit vector(size_type _N, const bool _V = false,
		const _A& _Al = _A())
		: _Vec(_Nw(_N), _V ? -1 : 0, _Al) {_Trim(_N); }
	typedef const_iterator _It;
	vector(_It _F, _It _L, const _A& _Al = _A())
		: _Size(0), _Vec(_Al)
		{insert(begin(), _F, _L); }
	~vector()
		{_Size = 0; }
	void reserve(size_type _N)
		{_Vec.reserve(_Nw(_N)); }
	size_type capacity() const
		{return (_Vec.capacity() * _VBITS); }
	iterator begin()
		{return (iterator(0, _Vec.begin())); }
	const_iterator begin() const
		{return (const_iterator(0, _Vec.begin())); }
	iterator end()
		{iterator _Tmp = begin();
		if (0 < _Size)
			_Tmp += _Size;
		return (_Tmp); }
	const_iterator end() const
		{const_iterator _Tmp = begin();
		if (0 < _Size)
			_Tmp += _Size;
		return (_Tmp); }
	reverse_iterator rbegin()
		{return (reverse_iterator(end())); }
	const_reverse_iterator rbegin() const
		{return (const_reverse_iterator(end())); }
	reverse_iterator rend()
		{return (reverse_iterator(begin())); }
	const_reverse_iterator rend() const
		{return (const_reverse_iterator(begin())); }
	void resize(size_type _N, bool _X = false)
		{if (size() < _N)
			insert(end(), _N - size(), _X);
		else if (_N < size())
			erase(begin() + _N, end()); }
	size_type size() const
		{return (_Size); }
	size_type max_size() const
		{return (_Vec.max_size() * _VBITS); }
	bool empty() const
		{return (size() == 0); }
	_A get_allocator() const
		{return (_Vec.get_allocator()); }
	const_reference at(size_type _P) const
		{if (size() <= _P)
			_Xran();
		return (*(begin() + _P)); }
	reference at(size_type _P)
		{if (size() <= _P)
			_Xran();
		return (*(begin() + _P)); }
	const_reference operator[](size_type _P) const
		{return (*(begin() + _P)); }
	reference operator[](size_type _P)
		{return (*(begin() + _P)); }
	reference front()
		{return (*begin()); }
	const_reference front() const
		{return (*begin()); }
	reference back()
		{return (*(end() - 1)); }
	const_reference back() const
		{return (*(end() - 1)); }
	void push_back(const bool _X)
		{insert(end(), _X); }
	void pop_back()
		{erase(end() - 1); }
	void assign(_It _F, _It _L)
		{erase(begin(), end());
		insert(begin(), _F, _L); }
	void assign(size_type _N, const bool _X = false)
		{erase(begin(), end());
		insert(begin(), _N, _X); }
	iterator insert(iterator _P, const bool _X = false)
		{size_type _O = _P - begin();
		insert(_P, 1, _X);
		return (begin() + _O); }
	void insert(iterator _P, size_type _M, const bool _X)
		{if (0 < _M)
			{if (capacity() - size() < _M)
				{size_type _O = _P - begin();
				_Vec.resize(_Nw(size() + _M), 0);
				_P = begin() + _O; }
			copy_backward(_P, end(), end() + _M);
			fill(_P, _P + _M, _X);
			_Size += _M; }}
	void insert(iterator _P, _It _F, _It _L)
		{size_type _M = 0;
		_Distance(_F, _L, _M);
		if (0 < _M)
			{if (capacity() - size() < _M)
				{size_type _O = _P - begin();
				_Vec.resize(_Nw(size() + _M), 0);
				_P = begin() + _O; }
			copy_backward(_P, end(), end() + _M);
			copy(_F, _L, _P);
			_Size += _M; }}
	iterator erase(iterator _P)
		{copy(_P + 1, end(), _P);
		_Trim(_Size - 1);
		return (_P); }
	iterator erase(iterator _F, iterator _L)
		{iterator _S = copy(_L, end(), _F);
		_Trim(_S - begin());
		return (_F); }
	void clear()
		{erase(begin(), end()); }
	void flip()
		{for (_Vbtype::iterator _S = _Vec.begin();
			_S != _Vec.end(); ++_S)
			*_S = ~*_S;
		_Trim(_Size); }
	bool _Eq(const _Myt& _X) const
		{return (_Size == _X._Size && _Vec._Eq(_X._Vec)); }
	bool _Lt(const _Myt& _X) const
		{return (_Size < _X._Size
			|| _Size == _X._Size && _Vec._Lt(_X._Vec)); }
	void swap(_Myt& _X)
		{std::swap(_Size, _X._Size);
		_Vec.swap(_X._Vec); }
	friend void swap(_Myt& _X, _Myt& _Y)
		{_X.swap(_Y); }
	static void swap(reference _X, reference _Y)
		{bool _V = _X;
		_X = _Y;
		_Y = _V; }
protected:
	static size_type _Nw(size_type _N)
		{return ((_N + _VBITS - 1) / _VBITS); }
	void _Trim(size_type _N)
		{size_type _M = _Nw(_N);
		if (_M < _Vec.size())
			_Vec.erase(_Vec.begin() + _M, _Vec.end());
		_Size = _N;
		_N %= _VBITS;
		if (0 < _N)
			_Vec[_M - 1] &= ((_Vbase)1 << _N) - 1; }
	void _Xran() const
		{throw out_of_range("invalid vector<bool> subscript"); }
	size_type _Size;
	_Vbtype _Vec;
	};
typedef vector<_Bool, _Bool_allocator> _Bvector;
		
template<class _Ty, class _A> inline
	bool operator==(const vector<_Ty, _A>& _X,
		const vector<_Ty, _A>& _Y)
	{return (_X._Eq(_Y)); }
template<class _Ty, class _A> inline
	bool operator!=(const vector<_Ty, _A>& _X,
		const vector<_Ty, _A>& _Y)
	{return (!(_X == _Y)); }
template<class _Ty, class _A> inline
	bool operator<(const vector<_Ty, _A>& _X,
		const vector<_Ty, _A>& _Y)
	{return (_X._Lt(_Y)); }
template<class _Ty, class _A> inline
	bool operator>(const vector<_Ty, _A>& _X,
		const vector<_Ty, _A>& _Y)
	{return (_Y < _X); }
template<class _Ty, class _A> inline
	bool operator<=(const vector<_Ty, _A>& _X,
		const vector<_Ty, _A>& _Y)
	{return (!(_Y < _X)); }
template<class _Ty, class _A> inline
	bool operator>=(const vector<_Ty, _A>& _X,
		const vector<_Ty, _A>& _Y)
	{return (!(_X < _Y)); }
};

#pragma pack(pop)
#line 599 "c:\\programme\\microsoft visual studio\\vc98\\include\\vector"

#line 601 "c:\\programme\\microsoft visual studio\\vc98\\include\\vector"






















#line 13 "h:\\c_projekte\\elansim\\scene.h"
#line 1 "h:\\c_projekte\\elansim\\source.h"








#pragma once
#line 11 "h:\\c_projekte\\elansim\\source.h"

class Source  
{
public:

	enum ID { Connection, File } _id;

	Source(ID id) : _id(id) {};
	~Source();



	virtual ID operator()() { return _id; }
};

#line 27 "h:\\c_projekte\\elansim\\source.h"
#line 14 "h:\\c_projekte\\elansim\\scene.h"

class SoVRMLGroup;
class SoNode;
class Tree;
class SoPath;
class ServerConnection;
class SoVRMLScript;
class SoVRMLElevationGrid;

class SoPerspectiveCamera;

class Scene  
{
public:
	Scene(SoVRMLGroup* root);
	Scene();
	virtual ~Scene();

	typedef std::vector<Tree*> treeList;
	typedef std::vector<SoVRMLScript*> GGInfo;

	int convert(const char* buffer, size_t size);
	char* toVRML(size_t& size);
	static void* buffer_realloc(void* bufptr, size_t size);
	SoVRMLGroup* getRoot() { return _root; }
	void hideTrees(int withStatus, bool hideOrShow);
	void cutTrees(int withStatus);
	int getGGDialogData(const char**& namelist, int*& minVal, int*& maxVal);
	void showOriginalStand(bool onOff);
	int getWorldInfo(const char**& info);
	Tree* getTree(SoPath* path);
	SoVRMLElevationGrid* getGround();
	

	void event(const char* data);
	void eventReleased(int treeNr, int partId);

	static void _selectionCB(void* data, SoPath* path);
	SoVRMLElevationGrid* _ground;
	treeList _tree;
	
private:


	
	
	static Scene* me;

	GGInfo	_GGInfo;
	SoVRMLGroup* _root;

	
	void _analyseScene();
	void _fixTextures();
	bool _isUsingShaftSystem(SoNode* node);
	bool _isUsingAdjust(SoNode* node);
	void _getDefaultSystem();
	void _adjustPosition(SoNode* node);
	void _writeToBuffer();

	static void* _buffer_realloc(void* bufptr, size_t size);

};

#line 79 "h:\\c_projekte\\elansim\\scene.h"
#line 9 "h:\\c_projekte\\elansim\\file.h"


#line 1 "c:\\coin3d\\include\\inventor\\soinput.h"
























































































































































































#line 12 "h:\\c_projekte\\elansim\\file.h"

#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\fstream"



#pragma once
#line 6 "c:\\programme\\microsoft visual studio\\vc98\\include\\fstream"



#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\istream"



#pragma once
#line 6 "c:\\programme\\microsoft visual studio\\vc98\\include\\istream"



#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\ostream"



#pragma once
#line 6 "c:\\programme\\microsoft visual studio\\vc98\\include\\ostream"



#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\ios"



#pragma once
#line 6 "c:\\programme\\microsoft visual studio\\vc98\\include\\ios"



#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\streambuf"



#pragma once
#line 6 "c:\\programme\\microsoft visual studio\\vc98\\include\\streambuf"



#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\xlocnum"



#pragma once
#line 6 "c:\\programme\\microsoft visual studio\\vc98\\include\\xlocnum"



#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\cerrno"



#pragma once
#line 6 "c:\\programme\\microsoft visual studio\\vc98\\include\\cerrno"




 
 #line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\errno.h"
















#pragma once
#line 19 "c:\\programme\\microsoft visual studio\\vc98\\include\\errno.h"






#line 26 "c:\\programme\\microsoft visual studio\\vc98\\include\\errno.h"



extern "C" {
#line 31 "c:\\programme\\microsoft visual studio\\vc98\\include\\errno.h"


















#line 50 "c:\\programme\\microsoft visual studio\\vc98\\include\\errno.h"















__declspec(dllimport) extern int * __cdecl _errno(void);



#line 70 "c:\\programme\\microsoft visual studio\\vc98\\include\\errno.h"
















































}
#line 120 "c:\\programme\\microsoft visual studio\\vc98\\include\\errno.h"

#line 122 "c:\\programme\\microsoft visual studio\\vc98\\include\\errno.h"
#line 12 "c:\\programme\\microsoft visual studio\\vc98\\include\\cerrno"
 


#line 16 "c:\\programme\\microsoft visual studio\\vc98\\include\\cerrno"
#line 17 "c:\\programme\\microsoft visual studio\\vc98\\include\\cerrno"





#line 10 "c:\\programme\\microsoft visual studio\\vc98\\include\\xlocnum"



#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\xiosbase"



#pragma once
#line 6 "c:\\programme\\microsoft visual studio\\vc98\\include\\xiosbase"



#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\xlocale"



#pragma once
#line 6 "c:\\programme\\microsoft visual studio\\vc98\\include\\xlocale"






#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\typeinfo"
















#pragma once
#line 19 "c:\\programme\\microsoft visual studio\\vc98\\include\\typeinfo"








 

#line 30 "c:\\programme\\microsoft visual studio\\vc98\\include\\typeinfo"





















#pragma pack(push,8)
#line 53 "c:\\programme\\microsoft visual studio\\vc98\\include\\typeinfo"

class type_info {
public:
    __declspec(dllimport) virtual ~type_info();
    __declspec(dllimport) int operator==(const type_info& rhs) const;
    __declspec(dllimport) int operator!=(const type_info& rhs) const;
    __declspec(dllimport) int before(const type_info& rhs) const;
    __declspec(dllimport) const char* name() const;
    __declspec(dllimport) const char* raw_name() const;
private:
    void *_m_data;
    char _m_d_name[1];
    type_info(const type_info& rhs);
    type_info& operator=(const type_info& rhs);
};



 

 namespace std {
		
class __declspec(dllimport) bad_cast : public exception {
public:
	bad_cast(const char *_S = "bad cast") throw ()
		: exception(_S) {}
	virtual ~bad_cast() throw ()
		{}
protected:
	virtual void _Doraise() const
		{throw (*this); }
	};
		
class __declspec(dllimport) bad_typeid : public exception {
public:
	bad_typeid(const char *_S = "bad typeid") throw ()
		: exception(_S) {}
	virtual ~bad_typeid() throw ()
		{}
protected:
	virtual void _Doraise() const
		{throw (*this); }
	};

class __declspec(dllimport) __non_rtti_object : public bad_typeid {
public:
    __non_rtti_object(const char * what_arg) : bad_typeid(what_arg) {}
};
using ::type_info;
 };
using std::__non_rtti_object;









#pragma pack(pop)
#line 115 "c:\\programme\\microsoft visual studio\\vc98\\include\\typeinfo"

#line 117 "c:\\programme\\microsoft visual studio\\vc98\\include\\typeinfo"






#line 13 "c:\\programme\\microsoft visual studio\\vc98\\include\\xlocale"
#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\xlocinfo"



#pragma once
#line 6 "c:\\programme\\microsoft visual studio\\vc98\\include\\xlocinfo"



#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\xlocinfo.h"



#pragma once
#line 6 "c:\\programme\\microsoft visual studio\\vc98\\include\\xlocinfo.h"




#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\locale.h"














#pragma once
#line 17 "c:\\programme\\microsoft visual studio\\vc98\\include\\locale.h"






#line 24 "c:\\programme\\microsoft visual studio\\vc98\\include\\locale.h"







#pragma pack(push,8)
#line 33 "c:\\programme\\microsoft visual studio\\vc98\\include\\locale.h"


extern "C" {
#line 37 "c:\\programme\\microsoft visual studio\\vc98\\include\\locale.h"


















#line 56 "c:\\programme\\microsoft visual studio\\vc98\\include\\locale.h"

















#line 74 "c:\\programme\\microsoft visual studio\\vc98\\include\\locale.h"



























struct lconv {
        char *decimal_point;
        char *thousands_sep;
        char *grouping;
        char *int_curr_symbol;
        char *currency_symbol;
        char *mon_decimal_point;
        char *mon_thousands_sep;
        char *mon_grouping;
        char *positive_sign;
        char *negative_sign;
        char int_frac_digits;
        char frac_digits;
        char p_cs_precedes;
        char p_sep_by_space;
        char n_cs_precedes;
        char n_sep_by_space;
        char p_sign_posn;
        char n_sign_posn;
        };

#line 123 "c:\\programme\\microsoft visual studio\\vc98\\include\\locale.h"












__declspec(dllimport) char * __cdecl setlocale(int, const char *);
__declspec(dllimport) struct lconv * __cdecl localeconv(void);










#line 148 "c:\\programme\\microsoft visual studio\\vc98\\include\\locale.h"


}
#line 152 "c:\\programme\\microsoft visual studio\\vc98\\include\\locale.h"


#pragma pack(pop)
#line 156 "c:\\programme\\microsoft visual studio\\vc98\\include\\locale.h"

#line 158 "c:\\programme\\microsoft visual studio\\vc98\\include\\locale.h"
#line 11 "c:\\programme\\microsoft visual studio\\vc98\\include\\xlocinfo.h"






		











		



















typedef struct _Collvec {
	unsigned long _Hand;	
	unsigned int _Page;		
	} _Collvec;

typedef struct _Ctypevec {
	unsigned long _Hand;	
	unsigned int _Page;		
	const short *_Table;
	int _Delfl;
	} _Ctypevec;

typedef struct _Cvtvec {
	unsigned long _Hand;	
	unsigned int _Page;		
	} _Cvtvec;

		
extern "C" {
__declspec(dllimport) _Collvec __cdecl _Getcoll();
__declspec(dllimport) _Ctypevec __cdecl _Getctype();
__declspec(dllimport) _Cvtvec __cdecl _Getcvt();
char *__cdecl _Getdays();
char *__cdecl _Getmonths();
void *__cdecl _Gettnames();
__declspec(dllimport) int __cdecl _Mbrtowc(wchar_t *, const char *, size_t,
	mbstate_t *, const _Cvtvec *);
extern float __cdecl _Stof(const char *, char **, long);
extern double __cdecl _Stod(const char *, char **, long);
extern long double __cdecl _Stold(const char *, char **, long);
__declspec(dllimport) int __cdecl _Strcoll(const char *, const char *,
	const char *, const char *, const _Collvec *);
size_t __cdecl _Strftime(char *, size_t, const char *,
	const struct tm *, void *);
__declspec(dllimport) size_t __cdecl _Strxfrm(char *, char *,
	const char *, const char *, const _Collvec *);
__declspec(dllimport) int __cdecl _Tolower(int, const _Ctypevec *);
__declspec(dllimport) int __cdecl _Toupper(int, const _Ctypevec *);
__declspec(dllimport) int __cdecl _Wcrtomb(char *, wchar_t, mbstate_t *,
	const _Cvtvec *);
__declspec(dllimport) int __cdecl _Wcscoll(const wchar_t *, const wchar_t *,
	const wchar_t *, const wchar_t *, const _Collvec *);
__declspec(dllimport) size_t __cdecl _Wcsxfrm(wchar_t *, wchar_t *,
	const wchar_t *, const wchar_t *, const _Collvec *);
}
#line 95 "c:\\programme\\microsoft visual studio\\vc98\\include\\xlocinfo.h"





#line 10 "c:\\programme\\microsoft visual studio\\vc98\\include\\xlocinfo"




#pragma pack(push,8)
#line 16 "c:\\programme\\microsoft visual studio\\vc98\\include\\xlocinfo"
namespace std {

		
class __declspec(dllimport) _Timevec {
public:
	_Timevec(void *_P = 0)
		: _Ptr(_P) {}
	_Timevec(const _Timevec& _Rhs)
		{*this = _Rhs; }
	~_Timevec()
		{free(_Ptr); }
	_Timevec& operator=(const _Timevec& _Rhs)
		{_Ptr = _Rhs._Ptr;
		((_Timevec *)&_Rhs)->_Ptr = 0;
		return (*this); }
	void *_Getptr() const
		{return (_Ptr); }
private:
	void *_Ptr;
	};
		
class __declspec(dllimport) _Locinfo {
public:
	typedef ::_Collvec _Collvec;
	typedef ::_Ctypevec _Ctypevec;
	typedef ::_Cvtvec _Cvtvec;
	typedef std::_Timevec _Timevec;
	_Locinfo(const char * = "C");
	_Locinfo(int, const char *);
	~_Locinfo();
	_Locinfo& _Addcats(int, const char *);
	string _Getname() const
		{return (_Nname); }
	_Collvec _Getcoll() const
		{return (::_Getcoll()); }
	_Ctypevec _Getctype() const
		{return (::_Getctype()); }
	_Cvtvec _Getcvt() const
		{return (::_Getcvt()); }
	const lconv *_Getlconv() const
		{return (localeconv()); }
	_Timevec _Gettnames() const
		{return (_Timevec(::_Gettnames())); }
	const char *_Getdays() const
		{char *_S = ::_Getdays();
		if (_S != 0)
			{((_Locinfo *)this)->_Days = _S, free(_S); }
		return (_Days.size() != 0 ? _Days.c_str()
				: ":Sun:Sunday:Mon:Monday:Tue:Tuesday"
				":Wed:Wednesday:Thu:Thursday:Fri:Friday"
				":Sat:Saturday"); }
	const char *_Getmonths() const
		{char *_S = ::_Getmonths();
		if (_S != 0)
			{((_Locinfo *)this)->_Months = _S, free(_S); }
		return (_Months.size() != 0 ? _Months.c_str()
				: ":Jan:January:Feb:February:Mar:March"
				":Apr:April:May:May:Jun:June"
				":Jul:July:Aug:August:Sep:September"
				":Oct:October:Nov:November:Dec:December"); }
	const char *_Getfalse() const
		{return ("false"); }
	const char *_Gettrue() const
		{return ("true"); }
	const char *_Getno() const
		{return ("no"); }
	const char *_Getyes() const
		{return ("yes"); }
private:
	string _Days, _Months, _Oname, _Nname;
	};
		
template<class _E> inline
	int __cdecl _Strcoll(const _E *_F1, const _E *_L1,
		const _E *_F2, const _E *_L2, const _Locinfo::_Collvec *)
	{for (; _F1 != _L1 && _F2 != _L2; ++_F1, ++_F2)
		if (*_F1 < *_F2)
			return (-1);
		else if (*_F2 < *_F1)
			return (+1);
	return (_F2 != _L2 ? -1 : _F1 != _L1 ? +1 : 0); }
template<class _E> inline
	size_t __cdecl _Strxfrm(_E *_F1, _E *_L1,
		const _E *_F2, const _E *_L2, const _Locinfo::_Collvec *)
	{size_t _N = _L2 - _F2;
	if (_N <= _L1 - _F1)
		memcpy(_F1, _F2, _N * sizeof (_E));
	return (_N); }
};

#pragma pack(pop)
#line 108 "c:\\programme\\microsoft visual studio\\vc98\\include\\xlocinfo"

#line 110 "c:\\programme\\microsoft visual studio\\vc98\\include\\xlocinfo"





#line 14 "c:\\programme\\microsoft visual studio\\vc98\\include\\xlocale"


#pragma pack(push,8)
#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\xlocale"
namespace std {
                
class __declspec(dllimport) locale {
public:
        enum _Category {collate = ((1 << (1)) >> 1), ctype = ((1 << (2)) >> 1),
                monetary = ((1 << (3)) >> 1), numeric = ((1 << (4)) >> 1),
                time = ((1 << (5)) >> 1), messages = ((1 << (6)) >> 1),
                all = (((1 << (7)) >> 1) - 1), none = 0};
        typedef int category;
                        
        class __declspec(dllimport) id {
        public:
                operator size_t()
                        {_Lockit _Lk;
                        if (_Id == 0)
                                _Id = ++_Id_cnt;
                        return (_Id); }
        private:
                size_t _Id;
                static int _Id_cnt;
                };
        class _Locimp;
                        
        class __declspec(dllimport) facet {
                friend class locale;
                friend class _Locimp;
        public:
                static size_t __cdecl _Getcat()
                        {return ((size_t)(-1)); }
                void _Incref()
                        {_Lockit _Lk;
                        if (_Refs < (size_t)(-1))
                                ++_Refs; }
                facet *_Decref()
                        {_Lockit _Lk;
                        if (0 < _Refs && _Refs < (size_t)(-1))
                                --_Refs;
                        return (_Refs == 0 ? this : 0); }
        public:
                virtual ~facet()
                        {}
        protected:
                explicit facet(size_t _R = 0)
                        : _Refs(_R) {}
        private:
                facet(const facet&);    
                const facet& operator=(const facet&);   
                size_t _Refs;
                };
                        
        class _Locimp : public facet {
        public:
                ~_Locimp();
        private:
                friend class locale;
                _Locimp(bool _Xp = false);
                _Locimp(const _Locimp&);
                void _Addfac(facet *, size_t);
                static _Locimp *__cdecl _Makeloc(const _Locinfo&,
                        category, _Locimp *, const locale *);
                static void __cdecl _Makewloc(const _Locinfo&,
                        category, _Locimp *, const locale *);
                static void __cdecl _Makexloc(const _Locinfo&,
                        category, _Locimp *, const locale *);
                facet **_Fv;
                size_t _Nfv;
                category _Cat;
                bool _Xpar;
                string _Name;
                static __declspec(dllimport) _Locimp *_Clocptr, *_Global;
                };
        locale& _Addfac(facet *, size_t, size_t);
        bool operator()(const string&, const string&) const;
        locale() throw ()
                : _Ptr(_Init())
                {_Lockit _lk;
                _Locimp::_Global->_Incref(); }
        locale(_Uninitialized)
                {}
        locale(const locale& _X) throw ()
                : _Ptr(_X._Ptr)
                {_Ptr->_Incref(); }
        locale(const locale&, const locale&, category);
        explicit locale(const char *, category = all);
        locale(const locale&, const char *, category);
        ~locale() throw ()
                {if (_Ptr != 0)
                        delete _Ptr->_Decref(); }
        locale& operator=(const locale& _X) throw ()
                {if (_Ptr != _X._Ptr)
                        {delete _Ptr->_Decref();
                        _Ptr = _X._Ptr;
                        _Ptr->_Incref(); }
                return (*this); }
        string name() const
                {return (_Ptr->_Name); }
        const facet *_Getfacet(size_t _Id, bool _Xp = false) const;
        bool _Iscloc() const;
        bool operator==(const locale& _X) const;
        bool operator!=(const locale& _X) const
                {return (!(*this == _X)); }
        static const locale& __cdecl classic();
        static locale __cdecl global(const locale&);
        static locale __cdecl empty();
private:
        locale(_Locimp *_P)
                : _Ptr(_P) {}
        static _Locimp *__cdecl _Init();
        static void __cdecl _Tidy();
        _Locimp *_Ptr;
        };
;
                
template<class _F>
        class _Tidyfac {
public:
        static _F *__cdecl _Save(_F *_Fac)
                {_Lockit _Lk;
                _Facsav = _Fac;
                _Facsav->_Incref();
                atexit(_Tidy);
                return (_Fac); }
        static void __cdecl _Tidy()
                {_Lockit _Lk;
                delete _Facsav->_Decref();
                _Facsav = 0; }
private:
        static _F *_Facsav;
        };
template<class _F>
        _F *_Tidyfac<_F>::_Facsav = 0;
 
 
 
template<class _F> inline
        locale _Addfac(locale _X, _F *_Fac)
                {_Lockit _Lk;
                return (_X._Addfac(_Fac, _F::id, _F::_Getcat())); }
template<class _F> inline
        const _F& __cdecl use_facet(const locale& _L, const _F *,
                bool _Cfacet)
        {static const locale::facet *_Psave = 0;
        _Lockit _Lk;
        size_t _Id = _F::id;
        const locale::facet *_Pf = _L._Getfacet(_Id, true);
        if (_Pf != 0)
                ;
        else if (!_Cfacet || !_L._Iscloc())
                throw bad_cast("missing locale facet");
        else if (_Psave == 0)
                _Pf = _Psave = _Tidyfac<_F>::_Save(new _F);
        else
                _Pf = _Psave;
        return (*(const _F *)_Pf); }
                

template<class _E> inline
        int _Narrow(_E _C)      
        {return ((unsigned char)(char)_C); }
inline int _Narrow(wchar_t _C)
        {return (wctob(_C)); }
                

template<class _E> inline
        _E _Widen(char _Ch, _E *)       
        {return (_Ch); }
inline wchar_t _Widen(char _Ch, wchar_t *)
        {return (btowc(_Ch)); }
                
template<class _E, class _II> inline
        int __cdecl _Getloctxt(_II& _F, _II& _L, size_t _N,
                const _E *_S)
        {for (size_t _I = 0; _S[_I] != (_E)0; ++_I)
                if (_S[_I] == _S[0])
                        ++_N;
        string _Str(_N, '\0');
        int _Ans = -2;
        for (size_t _J = 1; ; ++_J, ++_F, _Ans = -1)
                {bool  _Pfx;
                size_t _I, _K;
                for (_I = 0, _K = 0, _Pfx = false; _K < _N; ++_K)
                        {for (; _S[_I] != (_E)0 && _S[_I] != _S[0]; ++_I)
                                ;
                        if (_Str[_K] != '\0')
                                _I += _Str[_K];
                        else if (_S[_I += _J] == _S[0] || _S[_I] == (_E)0)
                                {_Str[_K] = _J < 127 ? _J : 127;
                                _Ans = _K; }
                        else if (_F == _L || _S[_I] != *_F)
                                _Str[_K] = _J < 127 ? _J : 127;
                        else
                                _Pfx = true; }
                if (!_Pfx || _F == _L)
                        break; }
        return (_Ans); }
                

template<class _E> inline
        _E *__cdecl _Maklocstr(const char *_S, _E *)
        {size_t _L = qstrlen(_S) + 1;
        _E *_X = new _E[_L];
        for (_E *_P = _X; 0 < _L; --_L, ++_P, ++_S)
                *_P = _Widen(*_S, (_E *)0);
        return (_X); }
                
class __declspec(dllimport) codecvt_base : public locale::facet {
public:
        enum _Result {ok, partial, error, noconv};
        typedef int result;
        codecvt_base(size_t _R = 0)
                : locale::facet(_R) {}
        bool always_noconv() const throw ()
                {return (do_always_noconv()); }
        int max_length() const throw ()
                {return (do_max_length()); }
        int encoding() const throw ()
                {return (do_encoding()); }
protected:
        virtual bool do_always_noconv() const throw ()
                {return (true); }
        virtual int do_max_length() const throw ()
                {return (1); }
        virtual int do_encoding() const throw ()
                {return (1); }
        };
;
                
template<class _E, class _To, class _St>
        class codecvt : public codecvt_base {
public:
        typedef _E from_type;
        typedef _To to_type;
        typedef _St state_type;
        result in(_St& _State,
                const _To *_F1, const _To *_L1, const _To *& _Mid1,
                _E *_F2, _E *_L2, _E *& _Mid2) const
                {return (do_in(_State,
                        _F1, _L1, _Mid1, _F2, _L2, _Mid2)); }
        result out(_St& _State,
                const _E *_F1, const _E *_L1, const _E *& _Mid1,
                _To *_F2, _To *_L2, _To *& _Mid2) const
                {return (do_out(_State,
                        _F1, _L1, _Mid1, _F2, _L2, _Mid2)); }
        int length(_St& _State, const _E *_F1,
                const _E *_L1, size_t _N2) const throw ()
                {return (do_length(_State, _F1, _L1, _N2)); }
        static locale::id id;
        explicit codecvt(size_t _R = 0)
                : codecvt_base(_R) {_Init(_Locinfo()); }
        codecvt(const _Locinfo& _Lobj, size_t _R = 0)
                : codecvt_base(_R) {_Init(_Lobj); }
        static size_t __cdecl _Getcat()
                {return (2); }
public:
        virtual ~codecvt()
                {};
protected:
        void _Init(const _Locinfo& _Lobj)
                {_Cvt = _Lobj._Getcvt(); }
        virtual result do_in(_St& _State,
                const _To *_F1, const _To *, const _To *& _Mid1,
                _E *_F2, _E *, _E *& _Mid2) const
                {_Mid1 = _F1, _Mid2 = _F2;
                return (noconv); }
        virtual result do_out(_St& _State,
                const _E *_F1, const _E *, const _E *& _Mid1,
                _To *_F2, _To *, _To *& _Mid2) const
                {_Mid1 = _F1, _Mid2 = _F2;
                return (noconv); }
        virtual int do_length(_St& _State, const _E *_F1,
                const _E *_L1, size_t _N2) const throw ()
                {return (_N2 < _L1 - _F1 ? _N2 : _L1 - _F1); }
private:
        _Locinfo::_Cvtvec _Cvt;
        };
template<class _E, class _To, class _St>
        locale::id codecvt<_E, _To, _St>::id;
                
class __declspec(dllimport) codecvt<wchar_t, char, mbstate_t> : public codecvt_base {
public:
        typedef wchar_t _E;
        typedef char _To;
        typedef mbstate_t _St;
        typedef _E from_type;
        typedef _To to_type;
        typedef _St state_type;
        result in(_St& _State,
                const _To *_F1, const _To *_L1, const _To *& _Mid1,
                _E *_F2, _E *_L2, _E *& _Mid2) const
                {return (do_in(_State,
                        _F1, _L1, _Mid1, _F2, _L2, _Mid2)); }
        result out(_St& _State,
                const _E *_F1, const _E *_L1, const _E *& _Mid1,
                _To *_F2, _To *_L2, _To *& _Mid2) const
                {return (do_out(_State,
                        _F1, _L1, _Mid1, _F2, _L2, _Mid2)); }
        int length(_St& _State, const _E *_F1,
                const _E *_L1, size_t _N2) const throw ()
                {return (do_length(_State, _F1, _L1, _N2)); }
        static locale::id id;
        explicit codecvt(size_t _R = 0)
                : codecvt_base(_R) {_Init(_Locinfo()); }
        codecvt(const _Locinfo& _Lobj, size_t _R = 0)
                : codecvt_base(_R) {_Init(_Lobj); }
        static size_t __cdecl _Getcat()
                {return (2); }
public:
        virtual ~codecvt()
                {};
protected:
        void _Init(const _Locinfo& _Lobj)
                {_Cvt = _Lobj._Getcvt(); }
        virtual result do_in(_St& _State,
                const _To *_F1, const _To *_L1, const _To *& _Mid1,
                _E *_F2, _E *_L2, _E *& _Mid2) const
                {_Mid1 = _F1, _Mid2 = _F2;
                result _Ans = _Mid1 == _L1 ? ok : partial;
                int _N;
                while (_Mid1 != _L1 && _Mid2 != _L2)
                        switch (_N =
                                _Mbrtowc(_Mid2, _Mid1, _L1 - _Mid1,
                                        &_State, &_Cvt))
                        {case -2:
                                _Mid1 = _L1;
                                return (_Ans);
                        case -1:
                                return (error);
                        case 0:
                                _N = qstrlen(_Mid1) + 1;
                        default:        
                                _Mid1 += _N, ++_Mid2, _Ans = ok; }
                return (_Ans); }
        virtual result do_out(_St& _State,
                const _E *_F1, const _E *_L1, const _E *& _Mid1,
                _To *_F2, _To *_L2, _To *& _Mid2) const
                {_Mid1 = _F1, _Mid2 = _F2;
                result _Ans = _Mid1 == _L1 ? ok : partial;
                int _N;
                while (_Mid1 != _L1 && _Mid2 != _L2)
                        if (__mb_cur_max <= _L2 - _Mid2)
                                if ((_N =
                                        _Wcrtomb(_Mid2, *_Mid1, &_State,
                                                &_Cvt)) <= 0)
                                        return (error);
                                else
                                        ++_Mid1, _Mid2 += _N, _Ans = ok;
                        else
                                {_To _Buf[2];
                                _St _Stsave = _State;
                                if ((_N =
                                        _Wcrtomb(_Buf, *_Mid1, &_State,
                                                &_Cvt)) <= 0)
                                        return (error);
                                else if (_L2 - _Mid2 < _N)
                                        {_State = _Stsave;
                                        return (_Ans); }
                                else
                                        {memcpy(_Mid2, _Buf, _N);
                                        ++_Mid1, _Mid2 += _N, _Ans = ok; }}
                return (_Ans); }
        virtual int do_length(_St& _State, const _E *_F1,
                const _E *_L1, size_t _N2) const throw ()
                {const _E *_Mid1;
                _To _Buf[2];
                int _N;
                for (_Mid1 = _F1; _Mid1 != _L1 && 0 < _N2;
                        ++_Mid1, _N2 -= _N)
                        if ((_N =
                                _Wcrtomb(_Buf, *_Mid1, &_State, &_Cvt)) <= 0
                                        || _N2 < _N)
                                break;
                return (_Mid1 - _F1); }
        virtual bool do_always_noconv() const throw ()
                {return (false); }
        virtual int do_max_length() const throw ()
                {return (2); }
        virtual int do_encoding() const throw ()
                {return (0); }
private:
        _Locinfo::_Cvtvec _Cvt;
        };
                
template<class _E, class _To, class _St>
        class codecvt_byname : public codecvt<_E, _To, _St> {
public:
        explicit codecvt_byname(const char *_S, size_t _R = 0)
                : codecvt<_E, _To, _St>(_Locinfo(_S), _R) {}
public:
        virtual ~codecvt_byname()
                {}
        };
                
struct __declspec(dllimport) ctype_base : public locale::facet {
        enum _Mask {alnum = 0x4|0x2|0x1|0x100, alpha = 0x2|0x1|0x100,
                cntrl = 0x20, digit = 0x4, graph = 0x4|0x2|0x10|0x1|0x100,
                lower = 0x2, print = 0x4|0x2|0x10|0x40|0x1|0x100|0x80,
                punct = 0x10, space = 0x8|0x40|0x000, upper = 0x1,
                xdigit = 0x80};

        typedef short mask;     
        ctype_base(size_t _R = 0)
                : locale::facet(_R) {}
        };
                
template<class _E>
        class ctype : public ctype_base {
public:
        typedef _E char_type;
        bool is(mask _M, _E _C) const
                {return (do_is(_M, _C)); }
        const _E *is(const _E *_F, const _E *_L, mask *_V) const
                {return (do_is(_F, _L, _V)); }
        const _E *scan_is(mask _M, const _E *_F,
                const _E *_L) const
                {return (do_scan_is(_M, _F, _L)); }
        const _E *scan_not(mask _M, const _E *_F,
                const _E *_L) const
                {return (do_scan_not(_M, _F, _L)); }
        _E tolower(_E _C) const
                {return (do_tolower(_C)); }
        const _E *tolower(_E *_F, const _E *_L) const
                {return (do_tolower(_F, _L)); }
        _E toupper(_E _C) const
                {return (do_toupper(_C)); }
        const _E *toupper(_E *_F, const _E *_L) const
                {return (do_toupper(_F, _L)); }
        _E widen(char _X) const
                {return (do_widen(_X)); }
        const char *widen(const char *_F, const char *_L,
                _E *_V) const
                {return (do_widen(_F, _L, _V)); }
        char narrow(_E _C, char _D = '\0') const
                {return (do_narrow(_C, _D)); }
        const _E *narrow(const _E *_F, const _E *_L, char _D,
                char *_V) const
                {return (do_narrow(_F, _L, _D, _V)); }
        static locale::id id;
        explicit ctype(size_t _R = 0)
                : ctype_base(_R) {_Init(_Locinfo()); }
        ctype(const _Locinfo& _Lobj, size_t _R = 0)
                : ctype_base(_R) {_Init(_Lobj); }
        static size_t __cdecl _Getcat()
                {return (2); }
public:
        virtual ~ctype()
                {if (_Ctype._Delfl)
                        free((void *)_Ctype._Table); }
protected:
        void _Init(const _Locinfo& _Lobj)
                {_Ctype = _Lobj._Getctype(); }
        virtual bool do_is(mask _M, _E _C) const
                {return ((_Ctype._Table[narrow(_C)] & _M) != 0); }
        virtual const _E *do_is(const _E *_F, const _E *_L,
                mask *_V) const
                {for (; _F != _L; ++_F, ++_V)
                        *_V = _Ctype._Table[narrow(*_F)];
                return (_F); }
        virtual const _E *do_scan_is(mask _M, const _E *_F,
                const _E *_L) const
                {for (; _F != _L && !is(_M, *_F); ++_F)
                        ;
                return (_F); }
        virtual const _E *do_scan_not(mask _M, const _E *_F,
                const _E *_L) const
                {for (; _F != _L && is(_M, *_F); ++_F)
                        ;
                return (_F); }
        virtual _E do_tolower(_E _C) const
                {return ((_E)widen((char)_Tolower(narrow(_C), &_Ctype))); }
        virtual const _E *do_tolower(_E *_F, const _E *_L) const
                {for (; _F != _L; ++_F)
                        *_F = (_E)_Tolower(*_F, &_Ctype);
                return ((const _E *)_F); }
        virtual _E do_toupper(_E _C) const
                {return ((_E)widen((char)_Toupper(narrow(_C), &_Ctype))); }
        virtual const _E *do_toupper(_E *_F, const _E *_L) const
                {for (; _F != _L; ++_F)
                        *_F = (_E)_Toupper(*_F, &_Ctype);
                return ((const _E *)_F); }
        virtual _E do_widen(char _X) const
                {return (_Widen(_X, (_E *)0)); }
        virtual const char *do_widen(const char *_F, const char *_L,
                _E *_V) const
                {for (; _F != _L; ++_F, ++_V)
                        *_V = _Widen(*_F, (_E *)0);
                return (_F); }
        virtual char do_narrow(_E _C, char) const
                {return ((char)_Narrow((_E)(_C))); }
        virtual const _E *do_narrow(const _E *_F, const _E *_L,
                char, char *_V) const
                {for (; _F != _L; ++_F, ++_V)
                        *_V = (char)_Narrow((_E)(*_F));
                return (_F); }
private:
        _Locinfo::_Ctypevec _Ctype;
        };

template<class _E>
        locale::id ctype<_E>::id;

                
class __declspec(dllimport) ctype<char> : public ctype_base {
public:
        typedef char _E;
        typedef _E char_type;
        bool is(mask _M, _E _C) const
                {return ((_Ctype._Table[(unsigned char)_C] & _M) != 0); }
        const _E *is(const _E *_F, const _E *_L, mask *_V) const
                {for (; _F != _L; ++_F, ++_V)
                        *_V = _Ctype._Table[(unsigned char)*_F];
                return (_F); }
        const _E *scan_is(mask _M, const _E *_F,
                const _E *_L) const
                {for (; _F != _L && !is(_M, *_F); ++_F)
                        ;
                return (_F); }
        const _E *scan_not(mask _M, const _E *_F,
                const _E *_L) const
                {for (; _F != _L && is(_M, *_F); ++_F)
                        ;
                return (_F); }
        _E tolower(_E _C) const
                {return (do_tolower(_C)); }
        const _E *tolower(_E *_F, const _E *_L) const
                {return (do_tolower(_F, _L)); }
        _E toupper(_E _C) const
                {return (do_toupper(_C)); }
        const _E *toupper(_E *_F, const _E *_L) const
                {return (do_toupper(_F, _L)); }
        _E widen(char _X) const
                {return (_X); }
        const _E *widen(const char *_F, const char *_L, _E *_V) const
                {memcpy(_V, _F, _L - _F);
                return (_L); }
        _E narrow(_E _C, char _D = '\0') const
                {return (_C); }
        const _E *narrow(const _E *_F, const _E *_L, char _D,
                char *_V) const
                {memcpy(_V, _F, _L - _F);
                return (_L); }
        static locale::id id;
        explicit ctype(const mask *_Tab = 0, bool _Df = false,
                size_t _R = 0)
                : ctype_base(_R)
                {_Lockit Lk;
                _Init(_Locinfo());
                if (_Ctype._Delfl)
                        free((void *)_Ctype._Table), _Ctype._Delfl = false;
                if (_Tab == 0)
                        _Ctype._Table = _Cltab;
                else
                        _Ctype._Table = _Tab, _Ctype._Delfl = _Df; }
        ctype(const _Locinfo& _Lobj, size_t _R = 0)
                : ctype_base(_R) {_Init(_Lobj); }
        static size_t __cdecl _Getcat()
                {return (2); }
        static const size_t table_size;
public:
        virtual ~ctype()
                {if (_Ctype._Delfl)
                        free((void *)_Ctype._Table); }
protected:
        static void __cdecl _Term(void)
                {free((void *)_Cltab); }
        void _Init(const _Locinfo& _Lobj)
                {_Lockit Lk;
                _Ctype = _Lobj._Getctype();
                if (_Cltab == 0)
                        {_Cltab = _Ctype._Table;
                        atexit(_Term);
                        _Ctype._Delfl = false; }}
        virtual _E do_tolower(_E _C) const
                {return (_E)(_Tolower((unsigned char)_C, &_Ctype)); }
        virtual const _E *do_tolower(_E *_F, const _E *_L) const
                {for (; _F != _L; ++_F)
                        *_F = (_E)_Tolower(*_F, &_Ctype);
                return ((const _E *)_F); }
        virtual _E do_toupper(_E _C) const
                {return ((_E)_Toupper((unsigned char)_C, &_Ctype)); }
        virtual const _E *do_toupper(_E *_F, const _E *_L) const
                {for (; _F != _L; ++_F)
                        *_F = (_E)_Toupper(*_F, &_Ctype);
                return ((const _E *)_F); }
        const mask *table() const throw ()
                {return (_Ctype._Table); }
        static const mask * __cdecl classic_table() throw ()
                {_Lockit Lk;
                if (_Cltab == 0)
                        locale::classic();      
                return (_Cltab); }
private:
        _Locinfo::_Ctypevec _Ctype;
        static const mask *_Cltab;
        };


                
template<class _E>
        class ctype_byname : public ctype<_E> {
public:
        explicit ctype_byname(const char *_S, size_t _R = 0)
                : ctype<_E>(_Locinfo(_S), _R) {}
public:
        virtual ~ctype_byname()
                {}
        };


#pragma warning(disable:4231) 
extern template class __declspec(dllimport) ctype<wchar_t>;
extern template class __declspec(dllimport) codecvt<char, char, int>;
#pragma warning(default:4231) 
#line 631 "c:\\programme\\microsoft visual studio\\vc98\\include\\xlocale"

};

#pragma pack(pop)
#line 636 "c:\\programme\\microsoft visual studio\\vc98\\include\\xlocale"

#line 638 "c:\\programme\\microsoft visual studio\\vc98\\include\\xlocale"





#line 10 "c:\\programme\\microsoft visual studio\\vc98\\include\\xiosbase"


#pragma pack(push,8)
#line 14 "c:\\programme\\microsoft visual studio\\vc98\\include\\xiosbase"
namespace std {
                
class __declspec(dllimport) ios_base {
public:
                        
        class failure : public runtime_error {
        public:
                explicit failure(const string &_S)
                        : runtime_error(_S) {}
                virtual ~failure()
                        {}
        protected:
                virtual void _Doraise() const
                        {throw (*this); }
        };
        enum _Fmtflags {skipws = 0x0001, unitbuf = 0x0002,
                uppercase = 0x0004, showbase = 0x0008,
                showpoint = 0x0010, showpos = 0x0020,
                left = 0x0040, right = 0x0080, internal = 0x0100,
                dec = 0x0200, oct = 0x0400, hex = 0x0800,
                scientific = 0x1000, fixed = 0x2000, boolalpha = 0x4000,
                adjustfield = 0x01c0, basefield = 0x0e00,
                floatfield = 0x3000, _Fmtmask = 0x7fff, _Fmtzero = 0};
        enum _Iostate {goodbit = 0x0, eofbit = 0x1,
                failbit = 0x2, badbit = 0x4, _Statmask = 0x7};
        enum _Openmode {in = 0x01, out = 0x02, ate = 0x04,
                app = 0x08, trunc = 0x10, binary = 0x20};
        enum seekdir {beg = 0, cur = 1, end = 2};
        enum event {erase_event, imbue_event, copyfmt_event};
        typedef void (__cdecl *event_callback)(event, ios_base&, int);
        typedef int fmtflags;
        typedef int iostate;
        typedef int openmode;
        typedef short io_state, open_mode, seek_dir;
                        
        class __declspec(dllimport) Init {
        public:
                Init();
                ~Init();
        private:
                static int _Init_cnt;
                };
        ios_base& operator=(const ios_base& _R)
                {if (this != &_R)
                        {_State = _R._State;
                        copyfmt(_R); }
                return (*this); }
        operator void *() const
                {return (fail() ? 0 : (void *)this); }
        bool operator!() const
                {return (fail()); }
        void clear(iostate = goodbit, bool = false);
        void clear(io_state _St)
                {clear((iostate)_St); }
        iostate rdstate() const
                {return (_State); }
        void setstate(iostate _St, bool _Ex = false)
                {if (_St != goodbit)
                        clear((iostate)((int)rdstate() | (int)_St), _Ex); }
        void setstate(io_state _St)
                {setstate((iostate)_St); }
        bool good() const
                {return (rdstate() == goodbit); }
        bool eof() const
                {return ((int)rdstate() & (int)eofbit); }
        bool fail() const
                {return (((int)rdstate() & ((int)badbit | (int)failbit)) != 0); }
        bool bad() const
                {return (((int)rdstate() & (int)badbit) != 0); }
        iostate exceptions() const
                {return (_Except); }
        void exceptions(iostate _Ne)
                {_Except = _Ne & _Statmask;
                clear(_State); }
        void exceptions(io_state _St)
                {exceptions((iostate)_St); }
        fmtflags flags() const
                {return (_Fmtfl); }
        fmtflags flags(fmtflags _Nf)
                {fmtflags _Of = _Fmtfl;
                _Fmtfl = _Nf & _Fmtmask;
                return (_Of); }
        fmtflags setf(fmtflags _Nf)
                {ios_base::fmtflags _Of = _Fmtfl;
                _Fmtfl |= _Nf & _Fmtmask;
                return (_Of); }
        fmtflags setf(fmtflags _Nf, fmtflags _M)
                {ios_base::fmtflags _Of = _Fmtfl;
                _Fmtfl = (_Fmtfl & ~_M) | (_Nf & _M & _Fmtmask);
                return (_Of); }
        void unsetf(fmtflags _M)
                {_Fmtfl &= ~_M; }
        streamsize precision() const
                {return (_Prec); }
        streamsize precision(int _Np)
                {streamsize _Op = _Prec;
                _Prec = _Np;
                return (_Op); }
        streamsize width() const
                {return (_Wide); }
        streamsize width(streamsize _Nw)
                {streamsize _Ow = _Wide;
                _Wide = _Nw;
                return (_Ow); }
        locale getloc() const
                {return (_Loc); }
        locale imbue(const locale&);
        static int __cdecl xalloc()
                {_Lockit _Lk;
                return (_Index++); }
        long& iword(int _Idx)
                {return (_Findarr(_Idx)._Lo); }
        void *& pword(int _Idx)
                {return (_Findarr(_Idx)._Vp); }
        void register_callback(event_callback, int);
        ios_base& copyfmt(const ios_base&);
        virtual ~ios_base();
        static bool __cdecl sync_with_stdio(bool _Sfl = true)
                {_Lockit _Lk;
                const bool _Osfl = _Sync;
                _Sync = _Sfl;
                return (_Osfl); }
protected:
        ios_base()
                : _Loc(_Noinit), _Stdstr(0) {}
        void _Addstd();
        void _Init();
private:
                        
        struct _Iosarray {
        public:
                _Iosarray(int _Idx, _Iosarray *_Link)
                        : _Next(_Link), _Index(_Idx), _Lo(0), _Vp(0) {}
                _Iosarray *_Next;
                int _Index;
                long _Lo;
                void *_Vp;
                };
                        
        struct _Fnarray {
                _Fnarray(int _Idx, event_callback _P, _Fnarray *_Link)
                        : _Next(_Link), _Index(_Idx), _Pfn(_P) {}
                _Fnarray *_Next;
                int _Index;
                event_callback _Pfn;
                };
        void _Callfns(event);
        _Iosarray& _Findarr(int);
        void _Tidy();
        iostate _State, _Except;
        fmtflags _Fmtfl;
        int _Prec, _Wide;
        _Iosarray *_Arr;
        _Fnarray *_Calls;
        locale _Loc;
        size_t _Stdstr;
        static int _Index;
        static bool _Sync;
        };



};

#pragma pack(pop)
#line 180 "c:\\programme\\microsoft visual studio\\vc98\\include\\xiosbase"

#line 182 "c:\\programme\\microsoft visual studio\\vc98\\include\\xiosbase"





#line 14 "c:\\programme\\microsoft visual studio\\vc98\\include\\xlocnum"


#pragma pack(push,8)
#line 18 "c:\\programme\\microsoft visual studio\\vc98\\include\\xlocnum"
namespace std {
		
template<class _E>
	class numpunct : public locale::facet {
public:
	typedef basic_string<_E, char_traits<_E>, allocator<_E> >
		string_type;
	typedef _E char_type;
	static locale::id id;
	_E decimal_point() const
		{return (do_decimal_point()); }
	_E thousands_sep() const
		{return (do_thousands_sep()); }
	string grouping() const
		{return (do_grouping()); }
	string_type falsename() const
		{return (do_falsename()); }
	string_type truename() const
		{return (do_truename()); }
	explicit numpunct(size_t _R = 0)
		: locale::facet(_R) {_Init(_Locinfo()); }
	numpunct(const _Locinfo& _Lobj, size_t _R = 0)
		: locale::facet(_R) {_Init(_Lobj); }
	static size_t __cdecl _Getcat()
		{return (4); }
public:
	virtual ~numpunct()
		{delete[] _Gr;
		delete[] _Nf;
		delete[] _Nt; }
protected:
	void _Init(const _Locinfo& _Lobj)
		{const lconv *_P = _Lobj._Getlconv();
		_Dp = _Widen(_P->decimal_point[0], (_E *)0);
		_Ks = _Widen(_P->thousands_sep[0], (_E *)0);
		_Gr = _Maklocstr(_P->grouping, (char *)0);
		_Nf = _Maklocstr(_Lobj._Getfalse(), (_E *)0);
		_Nt = _Maklocstr(_Lobj._Gettrue(), (_E *)0); }
	virtual _E do_decimal_point() const
		{return (_Dp); }
	virtual _E do_thousands_sep() const
		{return (_Ks); }
	virtual string do_grouping() const
		{return (string(_Gr)); }
	virtual string_type do_falsename() const
		{return (string_type(_Nf)); }
	virtual string_type do_truename() const
		{return (string_type(_Nt)); }
private:
	char *_Gr;
	_E _Dp, _Ks, *_Nf, *_Nt;
	};
typedef numpunct<char> _Npc;
typedef numpunct<wchar_t> _Npwc;
		
template<class _E>
	class numpunct_byname : public numpunct<_E> {
public:
	explicit numpunct_byname(const char *_S, size_t _R = 0)
		: numpunct<_E>(_Locinfo(_S), _R) {}
public:
	virtual ~numpunct_byname()
		{}
	};
template<class _E>
	locale::id numpunct<_E>::id;
 

template<class _E> inline
	bool (isdigit)(_E _C, const locale& _L)
	{return (use_facet(_L, (ctype<_E> *)0, true).is(ctype_base::digit, _C)); }

		
template<class _E,
	class _II = istreambuf_iterator<_E, char_traits<_E> > >
	class num_get : public locale::facet {
public:
	typedef numpunct<_E> _Mypunct;
	typedef basic_string<_E, char_traits<_E>, allocator<_E> >
		_Mystr;
	static size_t __cdecl _Getcat()
		{return (4); }
	static locale::id id;
public:
	virtual ~num_get()
		{}
protected:
	void _Init(const _Locinfo& _Lobj)
		{}
public:
	explicit num_get(size_t _R = 0)
		: locale::facet(_R) {_Init(_Locinfo()); }
	num_get(const _Locinfo& _Lobj, size_t _R = 0)
		: locale::facet(_R) {_Init(_Lobj); }
	typedef _E char_type;
	typedef _II iter_type;
	_II get(_II _F, _II _L, ios_base& _X, ios_base::iostate& _St,
		_Bool& _V) const
		{return (do_get(_F, _L, _X, _St, _V)); }
	_II get(_II _F, _II _L, ios_base& _X, ios_base::iostate& _St,
		unsigned short& _V) const
		{return (do_get(_F, _L, _X, _St, _V)); }
	_II get(_II _F, _II _L, ios_base& _X, ios_base::iostate& _St,
		unsigned int& _V) const
		{return (do_get(_F, _L, _X, _St, _V)); }
	_II get(_II _F, _II _L, ios_base& _X, ios_base::iostate& _St,
		long& _V) const
		{return (do_get(_F, _L, _X, _St, _V)); }
	_II get(_II _F, _II _L, ios_base& _X, ios_base::iostate& _St,
		unsigned long& _V) const
		{return (do_get(_F, _L, _X, _St, _V)); }
	_II get(_II _F, _II _L, ios_base& _X, ios_base::iostate& _St,
		float& _V) const
		{return (do_get(_F, _L, _X, _St, _V)); }
	_II get(_II _F, _II _L, ios_base& _X, ios_base::iostate& _St,
		double& _V) const
		{return (do_get(_F, _L, _X, _St, _V)); }
	_II get(_II _F, _II _L, ios_base& _X, ios_base::iostate& _St,
		long double& _V) const
		{return (do_get(_F, _L, _X, _St, _V)); }
	_II get(_II _F, _II _L, ios_base& _X, ios_base::iostate& _St,
		void *& _V) const
		{return (do_get(_F, _L, _X, _St, _V)); }
protected:
	virtual _II do_get(_II _F, _II _L, ios_base& _X,
		ios_base::iostate& _St, _Bool& _V) const
		{int _Ans = -1;
		if (_X.flags() & ios_base::boolalpha)
			{const _Mypunct& _Fac = use_facet(_X.getloc(), (_Mypunct *)0, true);
			_Mystr _Str(1, (_E)0);
			_Str += _Fac.falsename();
			_Str += (_E)0;
			_Str += _Fac.truename();
			_Ans = _Getloctxt(_F, _L, (size_t)2, _Str.c_str()); }
		else
			{char _Ac[32], *_Ep;
			(*_errno()) = 0;
			const unsigned long _Ulo = strtoul(_Ac, &_Ep,
				_Getifld(_Ac, _F, _L, _X.flags(), _X.getloc()));
			if (_Ep != _Ac && (*_errno()) == 0 && _Ulo <= 1)
				_Ans = _Ulo; }
		if (_F == _L)
			_St |= ios_base::eofbit;
		if (_Ans < 0)
			_St |= ios_base::failbit;
		else
			_V = _Ans != 0;
		return (_F); }
	virtual _II do_get(_II _F, _II _L, ios_base& _X,
		ios_base::iostate& _St, unsigned short& _V) const
		{char _Ac[32], *_Ep;
		(*_errno()) = 0;
		int _Base =
			_Getifld(_Ac, _F, _L, _X.flags(), _X.getloc());
		char *_S = _Ac[0] == '-' ? _Ac + 1 : _Ac;
		const unsigned long _Ans = strtoul(_S, &_Ep, _Base);
		if (_F == _L)
			_St |= ios_base::eofbit;
		if (_Ep == _S || (*_errno()) != 0 || 0xffff < _Ans)
			_St |= ios_base::failbit;
		else
			_V = (unsigned short)(_Ac[0] == '-' ? -_Ans : _Ans);
		return (_F); }
	virtual _II do_get(_II _F, _II _L, ios_base& _X,
		ios_base::iostate& _St, unsigned int& _V) const
		{char _Ac[32], *_Ep;
		(*_errno()) = 0;
		int _Base =
			_Getifld(_Ac, _F, _L, _X.flags(), _X.getloc());
		char *_S = _Ac[0] == '-' ? _Ac + 1 : _Ac;
		const unsigned long _Ans = strtoul(_S, &_Ep, _Base);
		if (_F == _L)
			_St |= ios_base::eofbit;
		if (_Ep == _S || (*_errno()) != 0 || 0xffffffff < _Ans)
			_St |= ios_base::failbit;
		else
			_V = _Ac[0] == '-' ? -_Ans : _Ans;
		return (_F); }
	virtual _II do_get(_II _F, _II _L, ios_base& _X,
		ios_base::iostate& _St, long& _V) const
		{char _Ac[32], *_Ep;
		(*_errno()) = 0;
		const long _Ans = strtol(_Ac, &_Ep,
			_Getifld(_Ac, _F, _L, _X.flags(), _X.getloc()));
		if (_F == _L)
			_St |= ios_base::eofbit;
		if (_Ep == _Ac || (*_errno()) != 0)
			_St |= ios_base::failbit;
		else
			_V = _Ans;
		return (_F); }
	virtual _II do_get(_II _F, _II _L, ios_base& _X,
		ios_base::iostate& _St, unsigned long& _V) const
		{char _Ac[32], *_Ep;
		(*_errno()) = 0;
		const unsigned long _Ans = strtoul(_Ac, &_Ep,
			_Getifld(_Ac, _F, _L, _X.flags(), _X.getloc()));
		if (_F == _L)
			_St |= ios_base::eofbit;
		if (_Ep == _Ac || (*_errno()) != 0)
			_St |= ios_base::failbit;
		else
			_V = _Ans;
		return (_F); }
	virtual _II do_get(_II _F, _II _L, ios_base& _X,
		ios_base::iostate& _St, float& _V) const
		{char _Ac[8 + 36 + 32], *_Ep;
		(*_errno()) = 0;
		const float _Ans = _Stof(_Ac, &_Ep,
			_Getffld(_Ac, _F, _L, _X.getloc()));
		if (_F == _L)
			_St |= ios_base::eofbit;
		if (_Ep == _Ac || (*_errno()) != 0)
			_St |= ios_base::failbit;
		else
			_V = _Ans;
		return (_F); }
	virtual _II do_get(_II _F, _II _L, ios_base& _X,
		ios_base::iostate& _St, double& _V) const
		{char _Ac[8 + 36 + 32], *_Ep;
		(*_errno()) = 0;
		const double _Ans = _Stod(_Ac, &_Ep,
			_Getffld(_Ac, _F, _L, _X.getloc()));
		if (_F == _L)
			_St |= ios_base::eofbit;
		if (_Ep == _Ac || (*_errno()) != 0)
			_St |= ios_base::failbit;
		else
			_V = _Ans;
		return (_F); }
	virtual _II do_get(_II _F, _II _L, ios_base& _X,
		ios_base::iostate& _St, long double& _V) const
		{char _Ac[8 + 36 + 32], *_Ep;
		(*_errno()) = 0;
		const long double _Ans = _Stold(_Ac, &_Ep,
			_Getffld(_Ac, _F, _L, _X.getloc()));
		if (_F == _L)
			_St |= ios_base::eofbit;
		if (_Ep == _Ac || (*_errno()) != 0)
			_St |= ios_base::failbit;
		else
			_V = _Ans;
		return (_F); }
	virtual _II do_get(_II _F, _II _L, ios_base& _X,
		ios_base::iostate& _St, void *& _V) const
		{union _Pvlo {
			void *_Pv;
			unsigned long _Lo[1 +
				(sizeof (void *) - 1) / sizeof (unsigned long)];
			} _U;
		const int _NL = sizeof (_U._Lo) / sizeof (unsigned long);
		for (int _I = 0; ; ++_F)
			{char _Ac[32], *_Ep;
			(*_errno()) = 0;
			_U._Lo[_I] = strtoul(_Ac, &_Ep,
				_Getifld(_Ac, _F, _L,
					ios_base::hex, _X.getloc()));
			if (_F == _L)
				_St |= ios_base::eofbit;
			if (_Ep == _Ac || (*_errno()) != 0)
				{_St |= ios_base::failbit;
				break; }
			if (_NL <= ++_I)
				break;
			if (_F == _L || *_F != _Widen(':', (_E *)0))
				{_St |= ios_base::failbit;
				break; }}
		if (!(_St & ios_base::failbit))
			_V = _U._Pv;
		return (_F); }
private:
	static int __cdecl _Getifld(char *_Ac, _II& _F, _II& _L,
		ios_base::fmtflags _Bfl, const locale& _Loc)
		{const _E _E0 = _Widen('0', (_E *)0);
		const _Mypunct& _Fac = use_facet(_Loc, (_Mypunct *)0, true);
		const string _Gr = _Fac.grouping();
		const _E _Ks = _Fac.thousands_sep();
		char *_P = _Ac;
		if (_F == _L)
			;
		else if (*_F == _Widen('+', (_E *)0))
			*_P++ = '+', ++_F;
		else if (*_F == _Widen('-', (_E *)0))
			*_P++ = '-', ++_F;
		_Bfl &= ios_base::basefield;
		int _Base = _Bfl == ios_base::oct ? 8
			: _Bfl == ios_base::hex ? 16
			: _Bfl == ios_base::_Fmtzero ? 0 : 10;
		bool _Sd = false, _Snz = false;
		if (_F != _L && *_F == _E0)
			{_Sd = true, ++_F;
			if (_F != _L && (*_F == _Widen('x', (_E *)0)
					|| *_F == _Widen('X', (_E *)0))
				&& (_Base == 0 || _Base == 16))
				_Base = 16, _Sd = false, ++_F;
			else if (_Base == 0)
				_Base = 8; }
		int _Dlen = _Base == 0 || _Base == 10 ? 10
			: _Base == 8 ? 8 : 16 + 6;
		string _Grin(1, _Sd ? '\1' : '\0');
		size_t _I = 0;
		for (char *const _Pe = &_Ac[32 - 1];
			_F != _L; ++_F)
			if (memchr("0123456789abcdefABCDEF",
				*_P = (char)_Narrow((_E)(*_F)), _Dlen) != 0)
				{if ((_Snz || *_P != '0') && _P < _Pe)
					++_P, _Snz = true;
				_Sd = true;
				if (_Grin[_I] != 127)
					++_Grin[_I]; }
			else if (_Grin[_I] == '\0' || _Ks == (_E)0
				|| *_F != _Ks)
				break;
			else
				_Grin.append(1, '\0'), ++_I;
		if (_I == 0)
			;
		else if ('\0' < _Grin[_I])
			++_I;
		else
			_Sd = false;
		for (const char *_Pg = _Gr.c_str(); _Sd && 0 < _I; --_I)
			if (*_Pg == 127)
				break;
			else if (0 < --_I && *_Pg != _Grin[_I]
				|| 0 == _I && *_Pg < _Grin[_I])
				_Sd = false;
			else if ('\0' < _Pg[1])
				++_Pg;
		if (_Sd && !_Snz)
			*_P++ = '0';
		else if (!_Sd)
			_P = _Ac;
		*_P = '\0';
		return (_Base);
		}
	static int __cdecl _Getffld(char *_Ac, _II& _F, _II &_L,
		const locale& _Loc)
		{const _E _E0 = _Widen('0', (_E *)0);
		const _Mypunct& _Fac = use_facet(_Loc, (_Mypunct *)0, true);
		char *_P = _Ac;
		if (_F == _L)
			;
		else if (*_F == _Widen('+', (_E *)0))
			*_P++ = '+', ++_F;
		else if (*_F == _Widen('-', (_E *)0))
			*_P++ = '-', ++_F;
		bool _Sd = false;
		for (; _F != _L && *_F == _E0; _Sd = true, ++_F)
			;
		if (_Sd)
			*_P++ = '0';
		int _Ns = 0;
		int _Pten = 0;
		for (; _F != _L && isdigit(*_P = (char)_Narrow((_E)(*_F)), _Loc);
			_Sd = true, ++_F)
			if (_Ns < 36)
				++_P, ++_Ns;
			else
				++_Pten;
		if (_F != _L && *_F == _Fac.decimal_point())
			*_P++ = localeconv()->decimal_point[0], ++_F;
		if (_Ns == 0)
			{for (; _F != _L && *_F == _E0; _Sd = true, ++_F)
				--_Pten;
			if (_Pten < 0)
				*_P++ = '0', ++_Pten; }
		for (; _F != _L && isdigit(*_P = (char)_Narrow((_E)(*_F)), _Loc);
			_Sd = true, ++_F)
			if (_Ns < 36)
				++_P, ++_Ns;
		if (_Sd && _F != 
_L
&& (*_F == _Widen('e', (_E *)0) || *_F == _Widen('E', (_E *)0)))
			{*_P++ = 'e', ++_F;
			_Sd = false, _Ns = 0;
			if (_F == _L)
				;
			else if (*_F == _Widen('+', (_E *)0))
				*_P++ = '+', ++_F;
			else if (*_F == _Widen('-', (_E *)0))
				*_P++ = '-', ++_F;
			for (; _F != _L && *_F == _E0; _Sd = true, ++_F)
				;
			if (_Sd)
				*_P++ = '0';
			for (; _F != _L && isdigit(*_P = (char)_Narrow((_E)(*_F)), _Loc);
				_Sd = true, ++_F)
				if (_Ns < 8)
					++_P, ++_Ns; }
		if (!_Sd)
			_P = _Ac;
		*_P = '\0';
		return (_Pten);
		};
	};
template<class _E, class _II>
	locale::id num_get<_E, _II>::id;
		
template<class _E,
	class _OI = ostreambuf_iterator<_E, char_traits<_E> > >
	class num_put : public locale::facet {
public:
	typedef numpunct<_E> _Mypunct;
	typedef basic_string<_E, char_traits<_E>, allocator<_E> >
		_Mystr;
	static size_t __cdecl _Getcat()
		{return (4); }
	static locale::id id;
public:
	virtual ~num_put()
		{}
protected:
	void _Init(const _Locinfo& _Lobj)
		{}
public:
	explicit num_put(size_t _R = 0)
		: locale::facet(_R) {_Init(_Locinfo()); }
	num_put(const _Locinfo& _Lobj, size_t _R = 0)
		: locale::facet(_R) {_Init(_Lobj); }
	typedef _E char_type;
	typedef _OI iter_type;
	_OI put(_OI _F, ios_base& _X, _E _Fill,
		_Bool _V) const
		{return (do_put(_F, _X, _Fill, _V)); }
	_OI put(_OI _F, ios_base& _X, _E _Fill,
		long _V) const
		{return (do_put(_F, _X, _Fill, _V)); }
	_OI put(_OI _F, ios_base& _X, _E _Fill,
		unsigned long _V) const
		{return (do_put(_F, _X, _Fill, _V)); }
	_OI put(_OI _F, ios_base& _X, _E _Fill,
		double _V) const
		{return (do_put(_F, _X, _Fill, _V)); }
	_OI put(_OI _F, ios_base& _X, _E _Fill,
		long double _V) const
		{return (do_put(_F, _X, _Fill, _V)); }
	_OI put(_OI _F, ios_base& _X, _E _Fill,
		const void *_V) const
		{return (do_put(_F, _X, _Fill, _V)); }
protected:
	virtual _OI do_put(_OI _F, ios_base& _X, _E _Fill,
		_Bool _V) const
		{const _Mypunct& _Fac = use_facet(_X.getloc(), (_Mypunct *)0, true);
		_Mystr _Str;
		if (!(_X.flags() & ios_base::boolalpha))
			_Str.append(1, _Widen(_V ? '1' : '0', (_E *)0));
		else if (_V)
			_Str = _Fac.truename();
		else
			_Str = _Fac.falsename();
		size_t _M = _X.width() <= 0 || _X.width() <= _Str.size()
			? 0 : _X.width() - _Str.size();
		ios_base::fmtflags _Afl =
			_X.flags() & ios_base::adjustfield;
		if (_Afl != ios_base::left)
			_F = _Rep(_F, _Fill, _M), _M = 0;
		_F = _Put(_F, _Str.c_str(), _Str.size());
		_X.width(0);
		return (_Rep(_F, _Fill, _M)); }
	virtual _OI do_put(_OI _F, ios_base& _X, _E _Fill,
		long _V) const
		{char _Buf[2 * 32], _Fmt[6];
		return (_Iput(_F, _X, _Fill, _Buf,
			sprintf(_Buf, _Ifmt(_Fmt, 'd', _X.flags()), _V))); }
	virtual _OI do_put(_OI _F, ios_base& _X, _E _Fill,
		unsigned long _V) const
		{char _Buf[2 * 32], _Fmt[6];
		return (_Iput(_F, _X, _Fill, _Buf,
			sprintf(_Buf, _Ifmt(_Fmt, 'u', _X.flags()), _V))); }
	virtual _OI do_put(_OI _F, ios_base& _X, _E _Fill,
		double _V) const
		{char _Buf[8 + 36 + 32], _Fmt[8];
		streamsize _Prec = _X.precision() <= 0
			&& !(_X.flags() & ios_base::fixed) ? 6
			: _X.precision();
		int _Mpr = 36 < _Prec ? 36 : _Prec;
		return (_Fput(_F, _X, _Fill, _Buf, _Prec - _Mpr,
			sprintf(_Buf, _Ffmt(_Fmt, 0, _X.flags()),
				_Mpr, _V))); }
	virtual _OI do_put(_OI _F, ios_base& _X, _E _Fill,
		long double _V) const
		{char _Buf[8 + 36 + 32], _Fmt[8];
		streamsize _Prec = _X.precision() <= 0
			&& !(_X.flags() & ios_base::fixed) ? 6
			: _X.precision();
		int _Mpr = 36 < _Prec ? 36 : _Prec;
		return (_Fput(_F, _X, _Fill, _Buf, _Prec - _Mpr,
			sprintf(_Buf, _Ffmt(_Fmt, 'L', _X.flags()),
				_Mpr, _V))); }
	virtual _OI do_put(_OI _F, ios_base& _X, _E _Fill,
		const void *_V) const
		{
		const int _NL = 1
			+ (sizeof (void *) - 1) / sizeof (unsigned long);
		char _Buf[(_NL + 1) * (32 + 1)];
		int _N = sprintf(_Buf, "%p", _V);
		size_t _M = _X.width() <= 0 || _X.width() <= _N
			? 0 : _X.width() - _N;
		ios_base::fmtflags _Afl =
			_X.flags() & ios_base::adjustfield;
		if (_Afl != ios_base::left)
			_F = _Rep(_F, _Fill, _M), _M = 0;
		_F = _Putc(_F, _Buf, _N);
		_X.width(0);
		return (_Rep(_F, _Fill, _M)); }
	static char *_Ffmt(char *_Fmt, char _Spec,
		ios_base::fmtflags _Fl)
		{char *_S = _Fmt;
		*_S++ = '%';
		if (_Fl & ios_base::showpos)
			*_S++ = '+';
		if (_Fl & ios_base::showpoint)
			*_S++ = '#';
		*_S++ = '.';
		*_S++ = '*';
		if (_Spec != 0)
			*_S++ = _Spec;	
		ios_base::fmtflags _Ffl = _Fl & ios_base::floatfield;
		*_S++ = _Ffl == ios_base::fixed ? 'f'
			: _Ffl == ios_base::scientific ? 'e' : 'g';
		*_S = '\0';
		return (_Fmt); }
	static _OI __cdecl _Fput(_OI _F, ios_base& _X, _E _Fill,
		const char *_S, size_t _Nz, size_t _N)
		{size_t _M = _X.width() <= 0 || _X.width() <= _N  + _Nz
			? 0 : _X.width() - _N - _Nz;
		ios_base::fmtflags _Afl =
			_X.flags() & ios_base::adjustfield;
		if (_Afl != ios_base::left && _Afl != ios_base::internal)
			_F = _Rep(_F, _Fill, _M), _M = 0;
		else if (_Afl == ios_base::internal)
			{if (0 < _N && (*_S == '+' || *_S == '-'))
				_F = _Putc(_F, _S, 1), ++_S, --_N;
			_F = _Rep(_F, _Fill, _M), _M = 0; }
		const char *_P = (const char *)memchr(_S,
			localeconv()->decimal_point[0], _N);
		if (_P != 0)
			{const _Mypunct& _Fac = use_facet(_X.getloc(), (_Mypunct *)0, true);
			size_t _Nf = _P - _S + 1;
			_F = _Putc(_F, _S, _Nf - 1);
			_F = _Rep(_F, _Fac.decimal_point(), 1);
			_S += _Nf, _N -= _Nf; }
		if ((_P = (const char *)memchr(_S, 'e', _N)) != 0)
			{size_t _Nm = _P - _S + 1;
			_F = _Putc(_F, _S, _Nm - 1);
			_F = _Rep(_F, _Widen('0', (_E *)0), _Nz), _Nz = 0;
			_F = _Putc(_F, _X.flags() & ios_base::uppercase
				? "E" : "e", 1);
			_S += _Nm, _N -= _Nm; }
		_F = _Putc(_F, _S, _N);
		_F = _Rep(_F, _Widen('0', (_E *)0), _Nz);
		_X.width(0);
		return (_Rep(_F, _Fill, _M)); }
	static char *__cdecl _Ifmt(char *_Fmt, char _Spec,
		ios_base::fmtflags _Fl)
		{char *_S = _Fmt;
		*_S++ = '%';
		if (_Fl & ios_base::showpos)
			*_S++ = '+';
		if (_Fl & ios_base::showbase)
			*_S++ = '#';
		*_S++ = 'l';
		ios_base::fmtflags _Bfl = _Fl & ios_base::basefield;
		*_S++ = _Bfl == ios_base::oct ? 'o'
			: _Bfl != ios_base::hex ? _Spec	
			: _Fl & ios_base::uppercase ? 'X' : 'x';
		*_S = '\0';
		return (_Fmt); }
	static _OI __cdecl _Iput(_OI _F, ios_base& _X, _E _Fill,
		char *_S, size_t _N)
		{const size_t _Np = *_S == '+' || *_S == '-' ? 1
			: *_S == '0' && (_S[1] == 'x' || _S[1] == 'X') ? 2
			: 0;
		const _Mypunct& _Fac = use_facet(_X.getloc(), (_Mypunct *)0, true);
		const string _Gr = _Fac.grouping();
		const _E _Ks = _Fac.thousands_sep();
		bool _Grp = '\0' < *_Gr.c_str();
		if (_Grp)
			{const char *_Pg = _Gr.c_str();
			size_t _I = _N;
			for (_Grp = false; *_Pg != 127 && '\0' < *_Pg
				&& *_Pg < _I - _Np; _Grp = true)
				{_I -= *_Pg;
				memmove(&_S[_I + 1], &_S[_I], _N + 1 - _I);
				_S[_I] = ',', ++_N;
				if ('\0' < _Pg[1])
					++_Pg; }}
		size_t _M = _X.width() <= 0 || _X.width() <= _N
			? 0 : _X.width() - _N;
		ios_base::fmtflags _Afl =
			_X.flags() & ios_base::adjustfield;
		if (_Afl != ios_base::left && _Afl != ios_base::internal)
			_F = _Rep(_F, _Fill, _M), _M = 0;
		else if (_Afl == ios_base::internal)
			{_F = _Putc(_F, _S, _Np), _S += _Np, _N -= _Np;
			_F = _Rep(_F, _Fill, _M), _M = 0; }
		if (!_Grp)
			_F = _Putc(_F, _S, _N);
		else
			for (; ; ++_S, --_N)
				{size_t _Nd = strcspn(_S, ",");
				_F = _Putc(_F, _S, _Nd);
				_S += _Nd, _N -= _Nd;
				if (_N == 0)
					break;
				if (_Ks != (_E)0)
					_F = _Rep(_F, _Ks, 1); }
		_X.width(0);
		return (_Rep(_F, _Fill, _M)); }
	static _OI _Put(_OI _F, const _E *_S, size_t _N)
		{for (; 0 < _N; --_N, ++_F, ++_S)
			*_F = *_S;
		return (_F); }
	static _OI _Putc(_OI _F, const char *_S, size_t _N)
		{for (; 0 < _N; --_N, ++_F, ++_S)
			*_F = _Widen(*_S, (_E *)0);
		return (_F); }
	static _OI _Rep(_OI _F, _E _C, size_t _N)
		{for (; 0 < _N; --_N, ++_F)
			*_F = _C;
		return (_F); }
	};
template<class _E, class _OI>
	locale::id num_put<_E, _OI>::id;


#pragma warning(disable:4231) 

extern template class __declspec(dllimport) numpunct<char>;
extern template class __declspec(dllimport) numpunct<wchar_t>;
extern template class __declspec(dllimport) num_get<char,
                      istreambuf_iterator<char, char_traits<char> > >;
extern template class __declspec(dllimport) num_get<wchar_t,
                      istreambuf_iterator<wchar_t, char_traits<wchar_t> > >;
extern template class __declspec(dllimport) num_put<char,
                      ostreambuf_iterator<char, char_traits<char> > >;
extern template class __declspec(dllimport) num_put<wchar_t,
                      ostreambuf_iterator<wchar_t, char_traits<wchar_t> > >;

#pragma warning(default:4231) 
#line 659 "c:\\programme\\microsoft visual studio\\vc98\\include\\xlocnum"

};

#pragma pack(pop)
#line 664 "c:\\programme\\microsoft visual studio\\vc98\\include\\xlocnum"

#line 666 "c:\\programme\\microsoft visual studio\\vc98\\include\\xlocnum"





#line 10 "c:\\programme\\microsoft visual studio\\vc98\\include\\streambuf"


#pragma pack(push,8)
#line 14 "c:\\programme\\microsoft visual studio\\vc98\\include\\streambuf"
namespace std {
		
template<class _E, class _Tr = char_traits<_E> >
	class basic_streambuf {
protected:
	basic_streambuf()
		: _Loc() {_Init(); }
	basic_streambuf(_Uninitialized)
		: _Loc(_Noinit) {}
public:
	typedef basic_streambuf<_E, _Tr> _Myt;
	typedef _E char_type;
	typedef _Tr traits_type;
	virtual ~basic_streambuf()
		{}
	typedef _Tr::int_type int_type;
	typedef _Tr::pos_type pos_type;
	typedef _Tr::off_type off_type;
	pos_type pubseekoff(off_type _O, ios_base::seekdir _W,
		ios_base::openmode _M = ios_base::in | ios_base::out)
		{return (seekoff(_O, _W, _M)); }
	pos_type pubseekoff(off_type _O, ios_base::seek_dir _W,
		ios_base::open_mode _M)
		{return (pubseekoff(_O, (ios_base::seekdir)_W,
			(ios_base::openmode)_M)); }
	pos_type pubseekpos(pos_type _P,
		ios_base::openmode _M = ios_base::in | ios_base::out)
		{return (seekpos(_P, _M)); }
	pos_type pubseekpos(pos_type _P, ios_base::open_mode _M)
		{return (seekpos(_P, (ios_base::openmode)_M)); }
	_Myt *pubsetbuf(_E *_S, streamsize _N)
		{return (setbuf(_S, _N)); }
	locale pubimbue(const locale &_Ln)
		{locale _Lo = _Loc;
		imbue(_Ln);
		_Loc = _Ln;
		return (_Lo); }
	locale getloc()
		{return (_Loc); }
	streamsize in_avail()
		{return (gptr() != 0 && gptr() < egptr()
			? egptr() - gptr() : showmanyc()); }
	int pubsync()
		{return (sync()); }
	int_type sbumpc()
		{return (gptr() != 0 && gptr() < egptr()
			? _Tr::to_int_type(*_Gninc()) : uflow()); }
	int_type sgetc()
		{return (gptr() != 0 && gptr() < egptr()
			? _Tr::to_int_type(*gptr()) : underflow()); }
	streamsize sgetn(_E *_S, streamsize _N)
		{return (xsgetn(_S, _N)); }
	int_type snextc()
		{return (_Tr::eq_int_type(_Tr::eof(), sbumpc())
			? _Tr::eof() : sgetc()); }
	int_type sputbackc(_E _C)
		{return (gptr() != 0 && eback() < gptr()
			&& _Tr::eq(_C, gptr()[-1])
			? _Tr::to_int_type(*_Gndec())
			: pbackfail(_Tr::to_int_type(_C))); }
	void stossc()
		{if (gptr() != 0 && gptr() < egptr())
			_Gninc();
		else
			uflow(); }
	int_type sungetc()
		{return (gptr() != 0 && eback() < gptr()
			? _Tr::to_int_type(*_Gndec()) : pbackfail()); }
	int_type sputc(_E _C)
		{return (pptr() != 0 && pptr() < epptr()
			? _Tr::to_int_type(*_Pninc() = _C)
			: overflow(_Tr::to_int_type(_C))); }
	streamsize sputn(const _E *_S, streamsize _N)
		{return (xsputn(_S, _N)); }
protected:
	_E *eback() const
		{return (*_IGbeg); }
	_E *gptr() const
		{return (*_IGnext); }
	_E *pbase() const
		{return (*_IPbeg); }
	_E *pptr() const
		{return (*_IPnext); }
	_E *egptr() const
		{return (*_IGnext + *_IGcnt); }
	void gbump(int _N)
		{*_IGcnt -= _N;
		*_IGnext += _N; }
	void setg(_E *_B, _E *_N, _E *_L)
		{*_IGbeg = _B, *_IGnext = _N, *_IGcnt = _L - _N; }
	_E *epptr() const
		{return (*_IPnext + *_IPcnt); }
	_E *_Gndec()
		{++*_IGcnt;
		return (--*_IGnext); }
	_E *_Gninc()
		{--*_IGcnt;
		return ((*_IGnext)++); }
	void pbump(int _N)
		{*_IPcnt -= _N;
		*_IPnext += _N; }
	void setp(_E *_B, _E *_L)
		{*_IPbeg = _B, *_IPnext = _B, *_IPcnt = _L - _B; }
	void setp(_E *_B, _E *_N, _E *_L)
		{*_IPbeg = _B, *_IPnext = _N, *_IPcnt = _L - _N; }
	_E *_Pninc()
		{--*_IPcnt;
		return ((*_IPnext)++); }
	void _Init()
		{_IGbeg = &_Gbeg, _IPbeg = &_Pbeg;
		_IGnext = &_Gnext, _IPnext = &_Pnext;
		_IGcnt = &_Gcnt, _IPcnt = &_Pcnt;
		setp(0, 0), setg(0, 0, 0); }
	void _Init(_E **_Gb, _E **_Gn, int *_Gc,
		_E **_Pb, _E **_Pn, int *_Pc)
		{_IGbeg = _Gb, _IPbeg = _Pb;
		_IGnext = _Gn, _IPnext = _Pn;
		_IGcnt = _Gc, _IPcnt = _Pc; }
	virtual int_type overflow(int_type = _Tr::eof())
		{return (_Tr::eof()); }
	virtual int_type pbackfail(int_type = _Tr::eof())
		{return (_Tr::eof()); }
	virtual int showmanyc()
		{return (0); }
	virtual int_type underflow()
		{return (_Tr::eof()); }
	virtual int_type uflow()
		{return (_Tr::eq_int_type(_Tr::eof(), underflow())
			? _Tr::eof() : _Tr::to_int_type(*_Gninc())); }
	virtual streamsize xsgetn(_E * _S, streamsize _N)
		{int_type _C;
		streamsize _M, _Ns;
		for (_Ns = 0; 0 < _N; )
			if (gptr() != 0 && 0 < (_M = egptr() - gptr()))
				{if (_N < _M)
					_M = _N;
				_Tr::copy(_S, gptr(), _M);
				_S += _M, _Ns += _M, _N -= _M, gbump(_M); }
			else if (_Tr::eq_int_type(_Tr::eof(), _C = uflow()))
				break;
			else
				*_S++ = _Tr::to_char_type(_C), ++_Ns, --_N;
		return (_Ns); }
	virtual streamsize xsputn(const _E *_S, streamsize _N)
		{streamsize _M, _Ns;
		for (_Ns = 0; 0 < _N; )
			if (pptr() != 0 && 0 < (_M = epptr() - pptr()))
				{if (_N < _M)
					_M = _N;
				_Tr::copy(pptr(), _S, _M);
				_S += _M, _Ns += _M, _N -= _M, pbump(_M); }
			else if (_Tr::eq_int_type(_Tr::eof(),
				overflow(_Tr::to_int_type(*_S))))
				break;
			else
				++_S, ++_Ns, --_N;
		return (_Ns); }
	virtual pos_type seekoff(off_type, ios_base::seekdir,
		ios_base::openmode = ios_base::in | ios_base::out)
		{return (streampos(_BADOFF)); }
	virtual pos_type seekpos(pos_type,
		ios_base::openmode = ios_base::in | ios_base::out)
		{return (streampos(_BADOFF)); }
	virtual _Myt *setbuf(_E *, streamsize)
		{return (this); }
	virtual int sync()
		{return (0); }
	virtual void imbue(const locale& _Loc)
		{}
private:
	_E *_Gbeg, *_Pbeg;
	_E **_IGbeg, **_IPbeg;
	_E *_Gnext, *_Pnext;
	_E **_IGnext, **_IPnext;
	int _Gcnt, _Pcnt;
	int *_IGcnt, *_IPcnt;
	locale _Loc;
	};


#pragma warning(disable:4231) 
extern template class __declspec(dllimport) basic_streambuf<char, char_traits<char> >;
extern template class __declspec(dllimport) basic_streambuf<wchar_t, char_traits<wchar_t> >;
#pragma warning(default:4231) 
#line 199 "c:\\programme\\microsoft visual studio\\vc98\\include\\streambuf"

};

#pragma pack(pop)
#line 204 "c:\\programme\\microsoft visual studio\\vc98\\include\\streambuf"

#line 206 "c:\\programme\\microsoft visual studio\\vc98\\include\\streambuf"





#line 10 "c:\\programme\\microsoft visual studio\\vc98\\include\\ios"


#pragma pack(push,8)
#line 14 "c:\\programme\\microsoft visual studio\\vc98\\include\\ios"
namespace std {
		
template<class _E, class _Tr = char_traits<_E> >
	class basic_ios : public ios_base {
public:
	typedef basic_ios<_E, _Tr> _Myt;
	typedef basic_ostream<_E, _Tr> _Myos;
	typedef basic_streambuf<_E, _Tr> _Mysb;
	typedef ctype<_E> _Ctype;
	explicit basic_ios(_Mysb *_S)
		{init(_S); }
	basic_ios(const _Myt& _R)
		{init(0), *this = _R; }
	virtual ~basic_ios()
		{}
	typedef _E char_type;
	typedef _Tr traits_type;
	typedef _Tr::int_type int_type;
	typedef _Tr::pos_type pos_type;
	typedef _Tr::off_type off_type;
	void clear(iostate _St = goodbit, bool _Ex = false)
		{ios_base::clear(_Sb == 0 ? (int)_St | (int)badbit
			: (int)_St, _Ex); }
	void clear(io_state _St)
		{clear((iostate)_St); }
	void setstate(iostate _St, bool _Ex = false)
		{if (_St != goodbit)
			clear((iostate)((int)rdstate() | (int)_St), _Ex); }
	void setstate(io_state _St)
		{setstate((iostate)_St); }
	_Myt& copyfmt(const _Myt& _R)
		{_Tiestr = _R.tie();
		_Fillch = _R.fill();
		ios_base::copyfmt(_R);
		return (*this); }
	_Myos *tie() const
		{return (_Tiestr); }
	_Myos *tie(_Myos *_N)
		{_Myos *_O = _Tiestr;
		_Tiestr = _N;
		return (_O); }
	_Mysb *rdbuf() const
		{return (_Sb); }
	_Mysb *rdbuf(_Mysb *_N)
		{_Mysb *_O = _Sb;
		_Sb = _N;
		clear();
		return (_O); }
	locale imbue(const locale& _Ln)
		{if (rdbuf() != 0)
			rdbuf()->pubimbue(_Ln);
		return (ios_base::imbue(_Ln)); }
	_E fill() const
		{return (_Fillch); }
	_E fill(_E _Nf)
		{_E _Of = _Fillch;
		_Fillch = _Nf;
		return (_Of); }
	char narrow(_E _C, char _D = '\0') const
		{const _Ctype& _Fac = use_facet(getloc(), (_Ctype *)0, true);
		return (_Fac.narrow(_C, _D)); }
	_E widen(char _C) const
		{const _Ctype& _Fac = use_facet(getloc(), (_Ctype *)0, true);
		return (_Fac.widen(_C)); }
protected:
	void init(_Mysb *_S = 0,
		bool _Isstd = false)
		{_Sb = _S;
		_Tiestr = 0;
		_Fillch = _Widen(' ', (_E *)0);
		_Init();
		if (_Sb == 0)
			setstate(badbit);
		if (_Isstd)
			_Addstd(); }
	basic_ios()
		{}
private:
	_Mysb *_Sb;
	_Myos *_Tiestr;
	_E _Fillch;
	};


#pragma warning(disable:4231) 
extern template class __declspec(dllimport) basic_ios<char, char_traits<char> >;
extern template class __declspec(dllimport) basic_ios<wchar_t, char_traits<wchar_t> >;
#pragma warning(default:4231) 
#line 103 "c:\\programme\\microsoft visual studio\\vc98\\include\\ios"

		
inline ios_base& __cdecl boolalpha(ios_base& _I)
	{_I.setf(ios_base::boolalpha);
	return (_I); }
inline ios_base& __cdecl dec(ios_base& _I)
	{_I.setf(ios_base::dec, ios_base::basefield);
	return (_I); }
inline ios_base& __cdecl fixed(ios_base& _I)
	{_I.setf(ios_base::fixed, ios_base::floatfield);
	return (_I); }
inline ios_base& __cdecl hex(ios_base& _I)
	{_I.setf(ios_base::hex, ios_base::basefield);
	return (_I); }
inline ios_base& __cdecl internal(ios_base& _I)
	{_I.setf(ios_base::internal, ios_base::adjustfield);
	return (_I); }
inline ios_base& __cdecl left(ios_base& _I)
	{_I.setf(ios_base::left, ios_base::adjustfield);
	return (_I); }
inline ios_base& __cdecl noboolalpha(ios_base& _I)
	{_I.unsetf(ios_base::boolalpha);
	return (_I); }
inline ios_base& __cdecl noshowbase(ios_base& _I)
	{_I.unsetf(ios_base::showbase);
	return (_I); }
inline ios_base& __cdecl noshowpoint(ios_base& _I)
	{_I.unsetf(ios_base::showpoint);
	return (_I); }
inline ios_base& __cdecl noshowpos(ios_base& _I)
	{_I.unsetf(ios_base::showpos);
	return (_I); }
inline ios_base& __cdecl noskipws(ios_base& _I)
	{_I.unsetf(ios_base::skipws);
	return (_I); }
inline ios_base& __cdecl nounitbuf(ios_base& _I)
	{_I.unsetf(ios_base::unitbuf);
	return (_I); }
inline ios_base& __cdecl nouppercase(ios_base& _I)
	{_I.unsetf(ios_base::uppercase);
	return (_I); }
inline ios_base& __cdecl oct(ios_base& _I)
	{_I.setf(ios_base::oct, ios_base::basefield);
	return (_I); }
inline ios_base& __cdecl right(ios_base& _I)
	{_I.setf(ios_base::right, ios_base::adjustfield);
	return (_I); }
inline ios_base& __cdecl scientific(ios_base& _I)
	{_I.setf(ios_base::scientific, ios_base::floatfield);
	return (_I); }
inline ios_base& __cdecl showbase(ios_base& _I)
	{_I.setf(ios_base::showbase);
	return (_I); }
inline ios_base& __cdecl showpoint(ios_base& _I)
	{_I.setf(ios_base::showpoint);
	return (_I); }
inline ios_base& __cdecl showpos(ios_base& _I)
	{_I.setf(ios_base::showpos);
	return (_I); }
inline ios_base& __cdecl skipws(ios_base& _I)
	{_I.setf(ios_base::skipws);
	return (_I); }
inline ios_base& __cdecl unitbuf(ios_base& _I)
	{_I.setf(ios_base::unitbuf);
	return (_I); }
inline ios_base& __cdecl uppercase(ios_base& _I)
	{_I.setf(ios_base::uppercase);
	return (_I); }
};

#pragma pack(pop)
#line 175 "c:\\programme\\microsoft visual studio\\vc98\\include\\ios"

#line 177 "c:\\programme\\microsoft visual studio\\vc98\\include\\ios"





#line 10 "c:\\programme\\microsoft visual studio\\vc98\\include\\ostream"


#pragma pack(push,8)
#line 14 "c:\\programme\\microsoft visual studio\\vc98\\include\\ostream"
		
 
 

 

namespace std {
		
template<class _E, class _Tr = char_traits<_E> >
	class basic_ostream : virtual public basic_ios<_E, _Tr> {
public:
	typedef basic_ostream<_E, _Tr> _Myt;
	typedef basic_ios<_E, _Tr> _Myios;
	typedef basic_streambuf<_E, _Tr> _Mysb;
	typedef ostreambuf_iterator<_E, _Tr> _Iter;
	typedef num_put<_E, _Iter> _Nput;
	explicit basic_ostream(basic_streambuf<_E, _Tr> *_S,
		bool _Isstd = false, bool _Doinit = true)
		{if (_Doinit)
		    init(_S, _Isstd); }
	basic_ostream(_Uninitialized)
		{_Addstd(); }
	virtual ~basic_ostream()
		{}
	class sentry {
	public:
		explicit sentry(_Myt& _Os)
			: _Ok(_Os.opfx()), _Ostr(_Os) {}
		~sentry()
			{if (!uncaught_exception())
				_Ostr.osfx(); }
		operator bool() const
			{return (_Ok); }
	private:
		bool _Ok;
		_Myt& _Ostr;
		};
	bool opfx()
		{if (good() && tie() != 0)
			tie()->flush();
		return (good()); }
	void osfx()
		{if (flags() & unitbuf)
			flush(); }
	_Myt& operator<<(_Myt& (__cdecl *_F)(_Myt&))
		{return ((*_F)(*this)); }
	_Myt& operator<<(_Myios& (__cdecl *_F)(_Myios&))
		{(*_F)(*(_Myios *)this);
		return (*this); }
	_Myt& operator<<(ios_base& (__cdecl *_F)(ios_base&))
		{(*_F)(*(ios_base *)this);
		return (*this); }
	_Myt& operator<<(_Bool _X)
		{iostate _St = goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{const _Nput& _Fac = use_facet(getloc(), (_Nput *)0, true);
			try {
			if (_Fac.put(_Iter(rdbuf()), *this,
				fill(), _X).failed())
				_St |= badbit;
			} catch (...) { setstate(ios_base::badbit, true); } }
		setstate(_St);
		return (*this); }
	_Myt& operator<<(short _X)
		{iostate _St = goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{const _Nput& _Fac = use_facet(getloc(), (_Nput *)0, true);
			fmtflags _Bfl = flags() & basefield;
			long _Y = (_Bfl == oct || _Bfl == hex)
				? (long)(unsigned short)_X : (long)_X;
			try {
			if (_Fac.put(_Iter(rdbuf()), *this,
				fill(), _Y).failed())
				_St |= badbit;
			} catch (...) { setstate(ios_base::badbit, true); } }
		setstate(_St);
		return (*this); }
	_Myt& operator<<(unsigned short _X)
		{iostate _St = goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{const _Nput& _Fac = use_facet(getloc(), (_Nput *)0, true);
			try {
			if (_Fac.put(_Iter(rdbuf()), *this,
				fill(), (unsigned long)_X).failed())
				_St |= badbit;
			} catch (...) { setstate(ios_base::badbit, true); } }
		setstate(_St);
		return (*this); }
	_Myt& operator<<(int _X)
		{iostate _St = goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{const _Nput& _Fac = use_facet(getloc(), (_Nput *)0, true);
			fmtflags _Bfl = flags() & basefield;
			long _Y = (_Bfl == oct || _Bfl == hex)
				? (long)(unsigned int)_X : (long)_X;
			try {
			if (_Fac.put(_Iter(rdbuf()), *this,
				fill(), _Y).failed())
				_St |= badbit;
			} catch (...) { setstate(ios_base::badbit, true); } }
		setstate(_St);
		return (*this); }
	_Myt& operator<<(unsigned int _X)
		{iostate _St = goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{const _Nput& _Fac = use_facet(getloc(), (_Nput *)0, true);
			try {
			if (_Fac.put(_Iter(rdbuf()), *this,
				fill(), (unsigned long)_X).failed())
				_St |= badbit;
			} catch (...) { setstate(ios_base::badbit, true); } }
		setstate(_St);
		return (*this); }
	_Myt& operator<<(long _X)
		{iostate _St = goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{const _Nput& _Fac = use_facet(getloc(), (_Nput *)0, true);
			try {
			if (_Fac.put(_Iter(rdbuf()), *this,
				fill(), _X).failed())
				_St |= badbit;
			} catch (...) { setstate(ios_base::badbit, true); } }
		setstate(_St);
		return (*this); }
	_Myt& operator<<(unsigned long _X)
		{iostate _St = goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{const _Nput& _Fac = use_facet(getloc(), (_Nput *)0, true);
			try {
			if (_Fac.put(_Iter(rdbuf()), *this,
				fill(), _X).failed())
				_St |= badbit;
			} catch (...) { setstate(ios_base::badbit, true); } }
		setstate(_St);
		return (*this); }
	_Myt& operator<<(float _X)
		{iostate _St = goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{const _Nput& _Fac = use_facet(getloc(), (_Nput *)0, true);
			try {
			if (_Fac.put(_Iter(rdbuf()), *this,
				fill(), (double)_X).failed())
				_St |= badbit;
			} catch (...) { setstate(ios_base::badbit, true); } }
		setstate(_St);
		return (*this); }
	_Myt& operator<<(double _X)
		{iostate _St = goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{const _Nput& _Fac = use_facet(getloc(), (_Nput *)0, true);
			try {
			if (_Fac.put(_Iter(rdbuf()), *this,
				fill(), _X).failed())
				_St |= badbit;
			} catch (...) { setstate(ios_base::badbit, true); } }
		setstate(_St);
		return (*this); }
	_Myt& operator<<(long double _X)
		{iostate _St = goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{const _Nput& _Fac = use_facet(getloc(), (_Nput *)0, true);
			try {
			if (_Fac.put(_Iter(rdbuf()), *this,
				fill(), _X).failed())
				_St |= badbit;
			} catch (...) { setstate(ios_base::badbit, true); } }
		setstate(_St);
		return (*this); }
	_Myt& operator<<(const void *_X)
		{iostate _St = goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{const _Nput& _Fac = use_facet(getloc(), (_Nput *)0, true);
			try {
			if (_Fac.put(_Iter(rdbuf()), *this,
				fill(), _X).failed())
				_St |= badbit;
			} catch (...) { setstate(ios_base::badbit, true); } }
		setstate(_St);
		return (*this); }
	_Myt& operator<<(_Mysb *_Pb)
		{iostate _St = goodbit;
		bool _Copied = false;
		const sentry _Ok(*this);
		if (_Ok && _Pb != 0)
			for (int_type _C = _Tr::eof(); ; _Copied = true)
				{try {
				_C = _Tr::eq_int_type(_Tr::eof(), _C)
					? _Pb->sgetc() : _Pb->snextc();
				} catch (...) {
					setstate(failbit);
					throw;
				}
				if (_Tr::eq_int_type(_Tr::eof(),_C))
					break;
				try {
					if (_Tr::eq_int_type(_Tr::eof(),
						rdbuf()->sputc(_Tr::to_char_type(_C))))
						{_St |= badbit;
						break; }
				} catch (...) { setstate(ios_base::badbit, true); } }
		width(0);
		setstate(!_Copied ? _St | failbit : _St);
		return (*this); }
	_Myt& put(_E _X)
		{iostate _St = goodbit;
		const sentry _Ok(*this);
		if (!_Ok)
			_St |= badbit;
		else
			{try {
			 if (_Tr::eq_int_type(_Tr::eof(),
				rdbuf()->sputc(_X)))
				_St |= badbit;
			} catch (...) { setstate(ios_base::badbit, true); } }
		setstate(_St);
		return (*this); }
	_Myt& write(const _E *_S, streamsize _N)
		{iostate _St = goodbit;
		const sentry _Ok(*this);
		if (!_Ok)
			_St |= badbit;
		else
			{try {
			if (rdbuf()->sputn(_S, _N) != _N)
				_St |= badbit;
			} catch (...) { setstate(ios_base::badbit, true); } }
		setstate(_St);
		return (*this); }
	_Myt& flush()
		{iostate _St = goodbit;
		if (!fail() && rdbuf()->pubsync() == -1)
			_St |= badbit;
		setstate(_St);
		return (*this); }
	_Myt& seekp(pos_type _P)
		{if (!fail())
			rdbuf()->pubseekpos(_P, out);
		return (*this); }
	_Myt& seekp(off_type _O, ios_base::seekdir _W)
		{if (!fail())
			rdbuf()->pubseekoff(_O, _W, out);
		return (*this); }
	pos_type tellp()
		{if (!fail())
			return (rdbuf()->pubseekoff(0, cur, out));
		else
			return (streampos(_BADOFF)); }
	};



#pragma warning(disable:4231) 
extern template class __declspec(dllimport) basic_ostream<char, char_traits<char> >;
extern template class __declspec(dllimport) basic_ostream<wchar_t, char_traits<wchar_t> >;
#pragma warning(default:4231) 
#line 281 "c:\\programme\\microsoft visual studio\\vc98\\include\\ostream"


		
template<class _E, class _Tr> inline
	basic_ostream<_E, _Tr>& __cdecl operator<<(
		basic_ostream<_E, _Tr>& _O, const _E *_X)
	{typedef basic_ostream<_E, _Tr> _Myos;
	ios_base::iostate _St = ios_base::goodbit;
	size_t _N = _Tr::length(_X);
	size_t _M = _O.width() <= 0 || _O.width() <= _N
		? 0 : _O.width() - _N;
	const _Myos::sentry _Ok(_O);
	if (!_Ok)
		_St |= ios_base::badbit;
	else
		{try {
		if ((_O.flags() & ios_base::adjustfield)
			!= ios_base::left)
			for (; 0 < _M; --_M)
				if (_Tr::eq_int_type(_Tr::eof(),
					_O.rdbuf()->sputc(_O.fill())))
					{_St |= ios_base::badbit;
					break; }
		if (_St == ios_base::goodbit
			&& _O.rdbuf()->sputn(_X, _N) != _N)
			_St |= ios_base::badbit;
		if (_St == ios_base::goodbit)
			for (; 0 < _M; --_M)
				if (_Tr::eq_int_type(_Tr::eof(),
					_O.rdbuf()->sputc(_O.fill())))
					{_St |= ios_base::badbit;
					break; }
		_O.width(0);
		} catch (...) { (_O).setstate(ios_base::badbit, true); } }
	_O.setstate(_St);
	return (_O); }
template<class _E, class _Tr> inline
	basic_ostream<_E, _Tr>& __cdecl operator<<(
		basic_ostream<_E, _Tr>& _O, _E _C)
	{typedef basic_ostream<_E, _Tr> _Myos;
	ios_base::iostate _St = ios_base::goodbit;
	const _Myos::sentry _Ok(_O);
	if (_Ok)
		{size_t _M = _O.width() <= 1 ? 0 : _O.width() - 1;
		try {
		if ((_O.flags() & ios_base::adjustfield)
			!= ios_base::left)
			for (; _St == ios_base::goodbit && 0 < _M; --_M)
				if (_Tr::eq_int_type(_Tr::eof(),
					_O.rdbuf()->sputc(_O.fill())))
					_St |= ios_base::badbit;
		if (_St == ios_base::goodbit
			&& _Tr::eq_int_type(_Tr::eof(),
				_O.rdbuf()->sputc(_C)))
			_St |= ios_base::badbit;
		for (; _St == ios_base::goodbit && 0 < _M; --_M)
			if (_Tr::eq_int_type(_Tr::eof(),
				_O.rdbuf()->sputc(_O.fill())))
				_St |= ios_base::badbit;
		} catch (...) { (_O).setstate(ios_base::badbit, true); } }
	_O.width(0);
	_O.setstate(_St);
	return (_O); }
template<class _E, class _Tr> inline
	basic_ostream<_E, _Tr>& __cdecl operator<<(
		basic_ostream<_E, _Tr>& _O, const signed char *_X)
	{return (_O << (const char *)_X); }
template<class _E, class _Tr> inline
	basic_ostream<_E, _Tr>& __cdecl operator<<(
		basic_ostream<_E, _Tr>& _O, const signed char _C)
	{return (_O << (char)_C); }
template<class _E, class _Tr> inline
	basic_ostream<_E, _Tr>& __cdecl operator<<(
		basic_ostream<_E, _Tr>& _O, const unsigned char *_X)
	{return (_O << (const char *)_X); }
template<class _E, class _Tr> inline
	basic_ostream<_E, _Tr>& __cdecl operator<<(
		basic_ostream<_E, _Tr>& _O, const unsigned char _C)
	{return (_O << (char)_C); }
template<class _E, class _Tr> inline
	basic_ostream<_E, _Tr>& __cdecl operator<<(
		basic_ostream<_E, _Tr>& _O, const signed short *_X)
	{return (_O << (const wchar_t *)_X); }
		
template<class _E, class _Tr> inline
	basic_ostream<_E, _Tr>&
		__cdecl endl(basic_ostream<_E, _Tr>& _O)
	{_O.put(_O.widen('\n'));
	_O.flush();
	return (_O); }
__declspec(dllimport) inline basic_ostream<char, char_traits<char> >&
	__cdecl endl(basic_ostream<char, char_traits<char> >& _O)
	{_O.put('\n');
	_O.flush();
	return (_O); }
__declspec(dllimport) inline basic_ostream<wchar_t, char_traits<wchar_t> >&
	__cdecl endl(basic_ostream<wchar_t,
		char_traits<wchar_t> >& _O)
	{_O.put('\n');
	_O.flush();
	return (_O); }
template<class _E, class _Tr> inline
	basic_ostream<_E, _Tr>&
		__cdecl ends(basic_ostream<_E, _Tr>& _O)
	{_O.put(_E('\0'));
	return (_O); }
__declspec(dllimport) inline basic_ostream<char, char_traits<char> >&
	__cdecl ends(basic_ostream<char, char_traits<char> >& _O)
	{_O.put('\0');
	return (_O); }
__declspec(dllimport) inline basic_ostream<wchar_t, char_traits<wchar_t> >&
	__cdecl ends(basic_ostream<wchar_t,
		char_traits<wchar_t> >& _O)
	{_O.put('\0');
	return (_O); }
template<class _E, class _Tr> inline
	basic_ostream<_E, _Tr>&
		__cdecl flush(basic_ostream<_E, _Tr>& _O)
	{_O.flush();
	return (_O); }
__declspec(dllimport) inline basic_ostream<char, char_traits<char> >&
	__cdecl flush(basic_ostream<char, char_traits<char> >& _O)
	{_O.flush();
	return (_O); }
__declspec(dllimport) inline basic_ostream<wchar_t, char_traits<wchar_t> >&
	__cdecl flush(basic_ostream<wchar_t,
		char_traits<wchar_t> >& _O)
	{_O.flush();
	return (_O); }


#pragma warning(disable:4231) 

extern template __declspec(dllimport) basic_ostream<char, char_traits<char> >& __cdecl operator<<(
       basic_ostream<char, char_traits<char> >&, const char *);
extern template __declspec(dllimport) basic_ostream<char, char_traits<char> >& __cdecl operator<<(
       basic_ostream<char, char_traits<char> >&, char);
extern template __declspec(dllimport) basic_ostream<char, char_traits<char> >& __cdecl operator<<(
       basic_ostream<char, char_traits<char> >&, const signed char *);
extern template __declspec(dllimport) basic_ostream<char, char_traits<char> >& __cdecl operator<<(
       basic_ostream<char, char_traits<char> >&, const signed char);
extern template __declspec(dllimport) basic_ostream<char, char_traits<char> >& __cdecl operator<<(
       basic_ostream<char, char_traits<char> >&, const unsigned char *);
extern template __declspec(dllimport) basic_ostream<char, char_traits<char> >& __cdecl operator<<(
       basic_ostream<char, char_traits<char> >&, const unsigned char);
extern template __declspec(dllimport) basic_ostream<wchar_t, char_traits<wchar_t> >& __cdecl operator<<(
       basic_ostream<wchar_t, char_traits<wchar_t> >&, const wchar_t *);
extern template __declspec(dllimport) basic_ostream<wchar_t, char_traits<wchar_t> >& __cdecl operator<<(
       basic_ostream<wchar_t, char_traits<wchar_t> >&, wchar_t);
extern template __declspec(dllimport) basic_ostream<wchar_t, char_traits<wchar_t> >& __cdecl operator<<(
       basic_ostream<wchar_t, char_traits<wchar_t> >&, const signed short *);

#pragma warning(default:4231) 
#line 435 "c:\\programme\\microsoft visual studio\\vc98\\include\\ostream"

};

#pragma pack(pop)
#line 440 "c:\\programme\\microsoft visual studio\\vc98\\include\\ostream"

#line 442 "c:\\programme\\microsoft visual studio\\vc98\\include\\ostream"





#line 10 "c:\\programme\\microsoft visual studio\\vc98\\include\\istream"


#pragma pack(push,8)
#line 14 "c:\\programme\\microsoft visual studio\\vc98\\include\\istream"
namespace std {
		
template<class _E, class _Tr = char_traits<_E> >
	class basic_istream : virtual public basic_ios<_E, _Tr> {
public:
	typedef basic_istream<_E, _Tr> _Myt;
	typedef basic_ios<_E, _Tr> _Myios;
	typedef basic_streambuf<_E, _Tr> _Mysb;
	typedef istreambuf_iterator<_E, _Tr> _Iter;
	typedef ctype<_E> _Ctype;
	typedef num_get<_E, _Iter> _Nget;
	explicit basic_istream(_Mysb *_S, bool _Isstd = false)
		: _Chcount(0) {init(_S, _Isstd); }
	basic_istream(_Uninitialized)
		{_Addstd(); }
	virtual ~basic_istream()
		{}
	class sentry {
	public:
		explicit sentry(_Myt& _Is, bool _Noskip = false)
			: _Ok(_Is.ipfx(_Noskip)) {}
		operator bool() const
			{return (_Ok); }
	private:
		bool _Ok;
		};
	bool ipfx(bool _Noskip = false)
		{if (good())
			{if (tie() != 0)
				tie()->flush();
			if (!_Noskip && flags() & skipws)
				{const _Ctype& _Fac = use_facet(getloc(), (_Ctype *)0, true);
				try {
				int_type _C = rdbuf()->sgetc();
				while (!_Tr::eq_int_type(_Tr::eof(), _C)
					&& _Fac.is(_Ctype::space,
						_Tr::to_char_type(_C)))
					_C = rdbuf()->snextc();
				} catch (...) { setstate(ios_base::badbit, true); } }
			if (good())
				return (true); }
		setstate(failbit);
		return (false); }
	void isfx()
		{}
	_Myt& operator>>(_Myt& (__cdecl *_F)(_Myt&))
		{return ((*_F)(*this)); }
	_Myt& operator>>(_Myios& (__cdecl *_F)(_Myios&))
		{(*_F)(*(_Myios *)this);
		return (*this); }
	_Myt& operator>>(ios_base& (__cdecl *_F)(ios_base&))
		{(*_F)(*(ios_base *)this);
		return (*this); }
	_Myt& operator>>(_Bool& _X)
		{iostate _St = goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{const _Nget& _Fac = use_facet(getloc(), (_Nget *)0, true);
			try {
			_Fac.get(_Iter(rdbuf()), _Iter(0), *this, _St, _X);
			} catch (...) { setstate(ios_base::badbit, true); } }
		setstate(_St);
		return (*this); }
	_Myt& operator>>(short& _X)
		{iostate _St = goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{long _Y;
			const _Nget& _Fac = use_facet(getloc(), (_Nget *)0, true);
			try {
			_Fac.get(_Iter(rdbuf()), _Iter(0), *this, _St, _Y);
			} catch (...) { setstate(ios_base::badbit, true); }
			if (_St & failbit || _Y < (-32768) || 32767 < _Y)
				_St |= failbit;
			else
				_X = (short)_Y; }
		setstate(_St);
		return (*this); }
	_Myt& operator>>(unsigned short& _X)
		{iostate _St = goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{const _Nget& _Fac = use_facet(getloc(), (_Nget *)0, true);
			try {
			_Fac.get(_Iter(rdbuf()), _Iter(0), *this, _St, _X);
			} catch (...) { setstate(ios_base::badbit, true); } }
		setstate(_St);
		return (*this); }
	_Myt& operator>>(int& _X)
		{iostate _St = goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{long _Y;
			const _Nget& _Fac = use_facet(getloc(), (_Nget *)0, true);
			try {
			_Fac.get(_Iter(rdbuf()), _Iter(0), *this, _St, _Y);
			} catch (...) { setstate(ios_base::badbit, true); }
			if (_St & failbit || _Y < (-2147483647 - 1) || 2147483647 < _Y)
				_St |= failbit;
			else
				_X = _Y; }
		setstate(_St);
		return (*this); }
	_Myt& operator>>(unsigned int& _X)
		{iostate _St = goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{const _Nget& _Fac = use_facet(getloc(), (_Nget *)0, true);
			try {
			_Fac.get(_Iter(rdbuf()), _Iter(0), *this, _St, _X);
			} catch (...) { setstate(ios_base::badbit, true); } }
		setstate(_St);
		return (*this); }
	_Myt& operator>>(long& _X)
		{iostate _St = goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{const _Nget& _Fac = use_facet(getloc(), (_Nget *)0, true);
			try {
			_Fac.get(_Iter(rdbuf()), _Iter(0), *this, _St, _X);
			} catch (...) { setstate(ios_base::badbit, true); } }
		setstate(_St);
		return (*this); }
	_Myt& operator>>(unsigned long& _X)
		{iostate _St = goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{const _Nget& _Fac = use_facet(getloc(), (_Nget *)0, true);
			try {
			_Fac.get(_Iter(rdbuf()), _Iter(0), *this, _St, _X);
			} catch (...) { setstate(ios_base::badbit, true); } }
		setstate(_St);
		return (*this); }
	_Myt& operator>>(float& _X)
		{iostate _St = goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{const _Nget& _Fac = use_facet(getloc(), (_Nget *)0, true);
			try {
			_Fac.get(_Iter(rdbuf()), _Iter(0), *this, _St, _X);
			} catch (...) { setstate(ios_base::badbit, true); } }
		setstate(_St);
		return (*this); }
	_Myt& operator>>(double& _X)
		{iostate _St = goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{const _Nget& _Fac = use_facet(getloc(), (_Nget *)0, true);
			try {
			_Fac.get(_Iter(rdbuf()), _Iter(0), *this, _St, _X);
			} catch (...) { setstate(ios_base::badbit, true); } }
		setstate(_St);
		return (*this); }
	_Myt& operator>>(long double& _X)
		{iostate _St = goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{const _Nget& _Fac = use_facet(getloc(), (_Nget *)0, true);
			try {
			_Fac.get(_Iter(rdbuf()), _Iter(0), *this, _St, _X);
			} catch (...) { setstate(ios_base::badbit, true); } }
		setstate(_St);
		return (*this); }
	_Myt& operator>>(void *& _X)
		{iostate _St = goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{const _Nget& _Fac = use_facet(getloc(), (_Nget *)0, true);
			try {
			_Fac.get(_Iter(rdbuf()), _Iter(0), *this, _St, _X);
			} catch (...) { setstate(ios_base::badbit, true); } }
		setstate(_St);
		return (*this); }
	_Myt& operator>>(_Mysb *_Pb)
		{iostate _St = goodbit;
		bool _Copied = false;
		const sentry _Ok(*this);
		if (_Ok && _Pb != 0)
			{try {
			int_type _C = rdbuf()->sgetc();
			for (; ; _C = rdbuf()->snextc())
				if (_Tr::eq_int_type(_Tr::eof(), _C))
					{_St |= eofbit;
					break; }
				else
					{try {
						if (_Tr::eq_int_type(_Tr::eof(),
							_Pb->sputc(_Tr::to_char_type(_C))))
							break;
					} catch (...) {
						break;
					}
					_Copied = true; }
			} catch (...) { setstate(ios_base::badbit, true); } }
		setstate(!_Copied ? _St | failbit : _St);
		return (*this); }
	int_type get()
		{int_type _C;
		iostate _St = goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);
		if (!_Ok)
			_C = _Tr::eof();
		else
			{try {
			_C = rdbuf()->sbumpc();
			if (_Tr::eq_int_type(_Tr::eof(), _C))
				_St |= eofbit | failbit;
			else
				++_Chcount;
			} catch (...) { setstate(ios_base::badbit, true); } }
		setstate(_St);
		return (_C); }
	_Myt& get(_E *_S, streamsize _N)
		{return (get(_S, _N, widen('\n'))); }
	_Myt& get(_E *_S, streamsize _N, _E _D)
		{iostate _St = goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);
		if (_Ok && 0 < _N)
			{try {
			int_type _C = rdbuf()->sgetc();
			for (; 0 < --_N; _C = rdbuf()->snextc())
				if (_Tr::eq_int_type(_Tr::eof(), _C))
					{_St |= eofbit;
					break; }
				else if (_Tr::to_char_type(_C) == _D)
					break;
				else
					*_S++ = _Tr::to_char_type(_C), ++_Chcount;
			} catch (...) { setstate(ios_base::badbit, true); } }
		setstate(_Chcount == 0 ? _St | failbit : _St);
		*_S = _E(0);
		return (*this); }
	_Myt& get(_E& _X)
		{int_type _C = get();
		if (!_Tr::eq_int_type(_Tr::eof(), _C))
			_X = _Tr::to_char_type(_C);
		return (*this); }
	_Myt& get(_Mysb& _Sb)
		{return (get(_Sb, widen('\n'))); }
	_Myt& get(_Mysb& _Sb, _E _D)
		{iostate _St = goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);
		if (_Ok)
			{try {
			int_type _C = rdbuf()->sgetc();
			for (; ; _C = rdbuf()->snextc())
				if (_Tr::eq_int_type(_Tr::eof(), _C))
					{_St |= eofbit;
					break; }
				else
					{try {
						_E _Ch = _Tr::to_char_type(_C);
						if (_Ch == _D
							|| _Tr::eq_int_type(_Tr::eof(),
								_Sb.sputc(_Ch)))
							break;
					} catch (...) {
						break;
					}
					++_Chcount; }
			} catch (...) { setstate(ios_base::badbit, true); } }
		if (_Chcount == 0)
			_St |= failbit;
		setstate(_St);
		return (*this); }
	_Myt& getline(_E *_S, streamsize _N)
		{return (getline(_S, _N, widen('\n'))); }
	_Myt& getline(_E *_S, streamsize _N, _E _D)
		{iostate _St = goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);
		if (_Ok && 0 < _N)
			{int_type _Di = _Tr::to_int_type(_D);
			try {
			int_type _C = rdbuf()->sgetc();
			for (; ; _C = rdbuf()->snextc())
				if (_Tr::eq_int_type(_Tr::eof(), _C))
					{_St |= eofbit;
					break; }
				else if (_C == _Di)
					{++_Chcount;
					rdbuf()->stossc();
					break; }
				else if (--_N <= 0)
					{_St |= failbit;
					break; }
				else
					{++_Chcount;
					*_S++ = _Tr::to_char_type(_C); }
			} catch (...) { setstate(ios_base::badbit, true); } }
		*_S = _E(0);
		setstate(_Chcount == 0 ? _St | failbit : _St);
		return (*this); }
	_Myt& ignore(streamsize _N = 1, int_type _Di = _Tr::eof())
		{iostate _St = goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);
		if (_Ok && 0 < _N)
			{try {
			for (; ; )
				{int_type _C;
				if (_N != 2147483647 && --_N < 0)
					break;
				else if (_Tr::eq_int_type(_Tr::eof(),
					_C = rdbuf()->sbumpc()))
					{_St |= eofbit;
					break; }
				else
					{++_Chcount;
					if (_C == _Di)
						break; }}
			} catch (...) { setstate(ios_base::badbit, true); } }
		setstate(_St);
		return (*this); }
	_Myt& read(_E *_S, streamsize _N)
		{iostate _St = goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);
		if (_Ok)
			{try {
			const streamsize _M = rdbuf()->sgetn(_S, _N);
			_Chcount += _M;
			if (_M != _N)
				_St |= eofbit | failbit;
			} catch (...) { setstate(ios_base::badbit, true); } }
		setstate(_St);
		return (*this); }
	streamsize readsome(_E *_S, streamsize _N)
		{iostate _St = goodbit;
		_Chcount = 0;
		int _M;
		if (rdbuf() == 0)
			_St |= failbit;
		else if ((_M = rdbuf()->in_avail()) < 0)
			_St |= eofbit;
		else if (0 < _M)
			read(_S, _M < _N ? _M : _N);
		setstate(_St);
		return (gcount()); }
	int_type peek()
		{iostate _St = goodbit;
		_Chcount = 0;
		int_type _C;
		const sentry _Ok(*this, true);
		if (!_Ok)
			_C = _Tr::eof();
		else
			{try {
			if (_Tr::eq_int_type(_Tr::eof(),
				_C = rdbuf()->sgetc()))
				_St |= eofbit;
			} catch (...) { setstate(ios_base::badbit, true); } }
		setstate(_St);
		return (_C); }
	_Myt& putback(_E _X)
		{iostate _St = goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);
		if (_Ok)
			{try {
			if (_Tr::eq_int_type(_Tr::eof(),
				rdbuf()->sputbackc(_X)))
				_St |= badbit;
			} catch (...) { setstate(ios_base::badbit, true); } }
		setstate(_St);
		return (*this); }
	_Myt& unget()
		{iostate _St = goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);
		if (_Ok)
			{try {
			if (_Tr::eq_int_type(_Tr::eof(),
				rdbuf()->sungetc()))
				_St |= badbit;
			} catch (...) { setstate(ios_base::badbit, true); } }
		setstate(_St);
		return (*this); }
	streamsize gcount() const
		{return (_Chcount); }
	int sync()
		{iostate _St = goodbit;
		int _Ans;
		if (rdbuf() == 0)
			_Ans = -1;
		else if (rdbuf()->pubsync() == -1)
			_St |= badbit, _Ans = -1;
		else
			_Ans = 0;
		setstate(_St);
		return (_Ans); }
	_Myt& seekg(pos_type _P)
		{if (!fail())
			rdbuf()->pubseekpos(_P, in);
		return (*this); }
	_Myt& seekg(off_type _O, ios_base::seekdir _W)
		{if (!fail())
			rdbuf()->pubseekoff(_O, _W, in);
		return (*this); }
	pos_type tellg()
		{if (!fail())
			return (rdbuf()->pubseekoff(0, cur, in));
		else
			return (streampos(_BADOFF)); }
private:
	streamsize _Chcount;
	};


#pragma warning(disable:4231) 
extern template class __declspec(dllimport) basic_istream<char, char_traits<char> >;
extern template class __declspec(dllimport) basic_istream<wchar_t, char_traits<wchar_t> >;
#pragma warning(default:4231) 
#line 431 "c:\\programme\\microsoft visual studio\\vc98\\include\\istream"

		
template<class _E, class _Tr = char_traits<_E> >
	class basic_iostream : public basic_istream<_E, _Tr>,
		public basic_ostream<_E, _Tr> {
public:
	explicit basic_iostream(basic_streambuf<_E, _Tr> *_S)
		: basic_istream<_E, _Tr>(_S), basic_ostream<_E, _Tr>(_S, false, false)
		{}
	virtual ~basic_iostream()
		{}
	};


#pragma warning(disable:4231) 
extern template class __declspec(dllimport) basic_iostream<char, char_traits<char> >;
extern template class __declspec(dllimport) basic_iostream<wchar_t, char_traits<wchar_t> >;
#pragma warning(default:4231) 
#line 450 "c:\\programme\\microsoft visual studio\\vc98\\include\\istream"



		
template<class _E, class _Tr> inline
	basic_istream<_E, _Tr>& __cdecl operator>>(
		basic_istream<_E, _Tr>& _I, _E *_X)
	{typedef basic_istream<_E, _Tr> _Myis;
	typedef ctype<_E> _Ctype;
	ios_base::iostate _St = ios_base::goodbit;
	_E *_S = _X;
	const _Myis::sentry _Ok(_I);
	if (_Ok)
		{const _Ctype& _Fac = use_facet(_I.getloc(), (_Ctype *)0, true);
		try {
		int _N = 0 < _I.width() ? _I.width() : 2147483647;
		_Myis::int_type _C = _I.rdbuf()->sgetc();
		for (; 0 < --_N; _C = _I.rdbuf()->snextc())
			if (_Tr::eq_int_type(_Tr::eof(), _C))
				{_St |= ios_base::eofbit;
				break; }
			else if (_Fac.is(_Ctype::space,
				_Tr::to_char_type(_C)))
				break;
			else
				*_S++ = _Tr::to_char_type(_C);
		} catch (...) { (_I).setstate(ios_base::badbit, true); } }
	*_S = _E(0);
	_I.width(0);
	_I.setstate(_S == _X ? _St | ios_base::failbit : _St);
	return (_I); }
template<class _E, class _Tr> inline
	basic_istream<_E, _Tr>& __cdecl operator>>(
		basic_istream<_E, _Tr>& _I, _E& _X)
	{typedef basic_istream<_E, _Tr> _Myis;
	_Myis::int_type _C;
	ios_base::iostate _St = ios_base::goodbit;
	const _Myis::sentry _Ok(_I);
	if (_Ok)
		{try {
		_C = _I.rdbuf()->sbumpc();
		if (_Tr::eq_int_type(_Tr::eof(), _C))
			_St |= ios_base::eofbit | ios_base::failbit;
		else
			_X = _Tr::to_char_type(_C);
		} catch (...) { (_I).setstate(ios_base::badbit, true); } }
	_I.setstate(_St);
	return (_I); }
template<class _E, class _Tr> inline
	basic_istream<_E, _Tr>& __cdecl operator>>(
		basic_istream<_E, _Tr>& _I, signed char *_X)
	{return (_I >> (char *)_X); }
template<class _E, class _Tr> inline
	basic_istream<_E, _Tr>& __cdecl operator>>(
		basic_istream<_E, _Tr>& _I, signed char& _C)
	{return (_I >> (char&)_C); }
template<class _E, class _Tr> inline
	basic_istream<_E, _Tr>& __cdecl operator>>(
		basic_istream<_E, _Tr>& _I, unsigned char *_X)
	{return (_I >> (char *)_X); }
template<class _E, class _Tr> inline
	basic_istream<_E, _Tr>& __cdecl operator>>(
		basic_istream<_E, _Tr>& _I, unsigned char& _C)
	{return (_I >> (char&)_C); }
template<class _E, class _Tr> inline
	basic_istream<_E, _Tr>& __cdecl operator>>(
		basic_istream<_E, _Tr>& _I, signed short * _X)
	{return (_I >> (wchar_t *)_X); }
		
template<class _E, class _Tr> inline
	basic_istream<_E, _Tr>& __cdecl ws(basic_istream<_E, _Tr>& _I)
	{typedef basic_istream<_E, _Tr> _Myis;
	typedef ctype<_E> _Ctype;
	ios_base::iostate _St = ios_base::goodbit;
	const _Myis::sentry _Ok(_I, true);
	if (_Ok)
		{const _Ctype& _Fac = use_facet(_I.getloc(), (_Ctype *)0, true);
		try {
		for (_Tr::int_type _C = _I.rdbuf()->sgetc(); ;
			_C = _I.rdbuf()->snextc())
			if (_Tr::eq_int_type(_Tr::eof(), _C))
				{_St |= ios_base::eofbit;
				break; }
			else if (!_Fac.is(_Ctype::space,
				_Tr::to_char_type(_C)))
				break;
		} catch (...) { (_I).setstate(ios_base::badbit, true); } }
	_I.setstate(_St);
	return (_I); }
__declspec(dllimport) inline basic_istream<char, char_traits<char> >&
	__cdecl ws(basic_istream<char, char_traits<char> >& _I)
	{typedef char _E;
	typedef char_traits<_E> _Tr;
	ios_base::iostate _St = ios_base::goodbit;
	const basic_istream<_E, _Tr>::sentry _Ok(_I, true);
	if (_Ok)
		{const ctype<_E>& _Fac = use_facet(_I.getloc(), (ctype<_E> *)0, true);
		try {
		for (_Tr::int_type _C = _I.rdbuf()->sgetc(); ;
			_C = _I.rdbuf()->snextc())
			if (_Tr::eq_int_type(_Tr::eof(), _C))
				{_St |= ios_base::eofbit;
				break; }
			else if (!_Fac.is(ctype<_E>::space,
				_Tr::to_char_type(_C)))
				break;
		} catch (...) { (_I).setstate(ios_base::badbit, true); } }
	_I.setstate(_St);
	return (_I); }
__declspec(dllimport) inline basic_istream<wchar_t, char_traits<wchar_t> >&
	__cdecl ws(basic_istream<wchar_t, char_traits<wchar_t> >& _I)
	{typedef wchar_t _E;
	typedef char_traits<_E> _Tr;
	ios_base::iostate _St = ios_base::goodbit;
	const basic_istream<_E, _Tr>::sentry _Ok(_I, true);
	if (_Ok)
		{const ctype<_E>& _Fac = use_facet(_I.getloc(), (ctype<_E> *)0, true);
		try {
		for (_Tr::int_type _C = _I.rdbuf()->sgetc(); ;
			_C = _I.rdbuf()->snextc())
			if (_Tr::eq_int_type(_Tr::eof(), _C))
				{_St |= ios_base::eofbit;
				break; }
			else if (_Fac.is(ctype<_E>::space,
				_Tr::to_char_type(_C)))
				break;
		} catch (...) { (_I).setstate(ios_base::badbit, true); } }
	_I.setstate(_St);
	return (_I); }



#pragma warning(disable:4231) 

extern template __declspec(dllimport) basic_istream<char, char_traits<char> >& __cdecl operator>>(
       basic_istream<char, char_traits<char> >&, char *);
extern template __declspec(dllimport) basic_istream<char, char_traits<char> >& __cdecl operator>>(
       basic_istream<char, char_traits<char> >&, char&);
extern template __declspec(dllimport) basic_istream<char, char_traits<char> >& __cdecl operator>>(
       basic_istream<char, char_traits<char> >&, signed char *);
extern template __declspec(dllimport) basic_istream<char, char_traits<char> >& __cdecl operator>>(
       basic_istream<char, char_traits<char> >&, signed char&);
extern template __declspec(dllimport) basic_istream<char, char_traits<char> >& __cdecl operator>>(
       basic_istream<char, char_traits<char> >&, unsigned char *);
extern template __declspec(dllimport) basic_istream<char, char_traits<char> >& __cdecl operator>>(
       basic_istream<char, char_traits<char> >&, unsigned char&);
extern template __declspec(dllimport) basic_istream<wchar_t, char_traits<wchar_t> >& __cdecl operator>>(
       basic_istream<wchar_t, char_traits<wchar_t> >&, wchar_t *);
extern template __declspec(dllimport) basic_istream<wchar_t, char_traits<wchar_t> >& __cdecl operator>>(
       basic_istream<wchar_t, char_traits<wchar_t> >&, wchar_t&);
extern template __declspec(dllimport) basic_istream<wchar_t, char_traits<wchar_t> >& __cdecl operator>>(
       basic_istream<wchar_t, char_traits<wchar_t> >&, signed short *);

#pragma warning(default:4231) 
#line 605 "c:\\programme\\microsoft visual studio\\vc98\\include\\istream"


};

#pragma pack(pop)
#line 611 "c:\\programme\\microsoft visual studio\\vc98\\include\\istream"

#line 613 "c:\\programme\\microsoft visual studio\\vc98\\include\\istream"





#line 10 "c:\\programme\\microsoft visual studio\\vc98\\include\\fstream"



#pragma pack(push,8)
#line 15 "c:\\programme\\microsoft visual studio\\vc98\\include\\fstream"
namespace std {

extern __declspec(dllimport) FILE *__cdecl __Fiopen(const char *,ios_base::openmode);

		
template<class _E> inline
	bool _Fgetc(_E& _C, _iobuf *_Fi)
	{return (fread(&_C, sizeof (_E), 1, _Fi) == 1); }
inline bool _Fgetc(char& _C, _iobuf *_Fi)
	{int _Ch;
	if ((_Ch = fgetc(_Fi)) == (-1))
		return (false);
	else
		{_C = (char)_Ch;
		return (true); }} 
inline bool _Fgetc(wchar_t& _C, _iobuf *_Fi)
	{_Wint_t _Ch;
	if ((_Ch = fgetwc(_Fi)) == (wint_t)(0xFFFF))
		return (false);
	else
		{_C = _Ch;
		return (true); }}
		
template<class _E> inline
	bool _Fputc(_E _C, _iobuf *_Fi)
	{return (fwrite(&_C, sizeof (_E), 1, _Fi) == 1); }
inline bool _Fputc(char _C, _iobuf *_Fi)
	{return (fputc(_C, _Fi) != (-1)); }
inline bool _Fputc(wchar_t _C, _iobuf *_Fi)
	{return (fputwc(_C, _Fi) != (wint_t)(0xFFFF)); }
		
template<class _E> inline
	bool _Ungetc(const _E& _C, _iobuf *_Fi, size_t _N)
	{const unsigned char *_P = (const unsigned char *)&_C;
	for (_P += _N; 0 < _N && ungetc(*--_P, _Fi) != (-1); --_N)
		;
	if (_N == 0)
		return (true);
	else
		{for (; _N < sizeof (_E); ++_N)
			fgetc(_Fi);
		return (false); }}
template<class _E> inline
	bool _Ungetc(const _E& _C, _iobuf *_Fi)
	{return (_Ungetc(_C, _Fi, sizeof (_E))); }
inline bool _Ungetc(char _C, _iobuf *_Fi)
	{return (ungetc((unsigned char)_C, _Fi) != (-1)); }
inline bool _Ungetc(wchar_t _C, _iobuf *_Fi)
	{return (ungetwc(_C, _Fi) != (wint_t)(0xFFFF)); }
		
template<class _E, class _Tr = char_traits<_E> >
	class basic_filebuf : public basic_streambuf<_E, _Tr> {
public:
	typedef basic_filebuf<_E, _Tr> _Myt;
	typedef basic_streambuf<_E, _Tr> _Mysb;
	typedef codecvt<_E, char, _Tr::state_type> _Cvt;
	basic_filebuf(_iobuf *_F = 0)
		: _Loc(), _Mysb() {_Init(_F, _Newfl); }
	basic_filebuf(_Uninitialized)
		: _Loc(_Noinit), _Mysb(_Noinit) {}
	virtual ~basic_filebuf()
		{if (_Closef)
			close();
		delete _Str; }
	enum _Initfl {_Newfl, _Openfl, _Closefl};
	bool is_open() const
		{return (_File != 0); }
	_Myt *open(const char *_S, ios_base::openmode _M)
		{_iobuf *_Fp;
		if (_File != 0 || (_Fp = __Fiopen(_S, _M)) == 0)
			return (0);
		_Init(_Fp, _Openfl);
		_Initcvt();
		return (this); }
	_Myt *open(const char *_N, ios::open_mode _M)
		{return (open(_N, (ios::openmode)_M)); }
	_Myt *close()
		{if (_File != 0 && fclose(_File) == 0)
			{_Init(0, _Closefl);
			return (this); }
		else
			return (0); }
protected:
	virtual int_type overflow(int_type _C = _Tr::eof())
		{if (_Tr::eq_int_type(_Tr::eof(), _C))
			return (_Tr::not_eof(_C));
		else if (pptr() != 0 && pptr() < epptr())
			{*_Pninc() = _Tr::to_char_type(_C);
			return (_C); }
		else if (_File == 0)
			return (_Tr::eof());
		else if (_Pcvt == 0)
			return (_Fputc(_Tr::to_char_type(_C), _File)
				? _C : _Tr::eof());
		else
			{const int _NC = 8;
			const _E _X = _Tr::to_char_type(_C);
			const _E *_S;
			char *_D;
			_Str->erase();
			for (size_t _I = _NC; ; _I += _NC)
				{_Str->append(_NC, '\0');
				switch (_Pcvt->out(_State,
					&_X, &_X + 1, _S,
					_Str->begin(), _Str->end(), _D))
				{case codecvt_base::partial:
					if (_S == &_X)
						return (_Tr::eof());
				case codecvt_base::ok:	
					{size_t _N = _D - _Str->begin();
					return (fwrite(_Str->begin(), _N, 1, _File)
						== _N ? _C : _Tr::eof()); } 
				case codecvt_base::noconv:
					return (_Fputc(_X, _File) ? _C : _Tr::eof());
				default:
					return (_Tr::eof()); }}}}
	virtual int_type pbackfail(int_type _C = _Tr::eof())
		{if (gptr() != 0 && eback() < gptr()
			&& (_Tr::eq_int_type(_Tr::eof(), _C)
			 || _Tr::eq_int_type(_Tr::to_int_type(gptr()[-1]),
				_C)))
			{_Gndec();
			return (_Tr::not_eof(_C)); }
		else if (_File == 0 || _Tr::eq_int_type(_Tr::eof(), _C))
			return (_Tr::eof());
		else if (_Pcvt == 0)
			return (_Ungetc(_Tr::to_char_type(_C), _File)
				? _C : _Tr::eof());
		else if (0 < _Str->size()
			&& _Ungetc(*_Str->begin(), _File, _Str->size()))
			{_Str->erase();
			_State = _State0;
			return (_C); }
		else
			return (_Tr::eof()); }
	virtual int_type underflow()
		{if (gptr() != 0 && gptr() < egptr())
			return (_Tr::to_int_type(*gptr()));
		else
			return (pbackfail(uflow())); }
	virtual int_type uflow()
		{if (gptr() != 0 && gptr() < egptr())
			return (_Tr::to_int_type(*_Gninc()));
		else if (_File == 0)
			return (_Tr::eof());
		else if (_Pcvt == 0)
			{_E _C;
			return (_Fgetc(_C, _File) ? _Tr::to_int_type(_C)
				: _Tr::eof()); }
		else
			for (_State0 = _State, _Str->erase(); ; )
				{_E _X, *_D;
				const char *_S;
				int _C = fgetc(_File);
				if (_C == (-1))
					return (_Tr::eof());	
				_Str->append(1, (char)_C);
				_State = _State0;
				switch (_Pcvt->in(_State,
					_Str->begin(), _Str->end(), _S,
					&_X, &_X + 1, _D))
				{case codecvt_base::partial:
					break;
				case codecvt_base::noconv:
					if (_Str->size() < sizeof (_E))
						break;
					memcpy(&_X, _Str->begin(), sizeof (_E));
				case codecvt_base::ok:	
					return (_Tr::to_int_type(_X)); 
				default:
					return (_Tr::eof()); }}}
	virtual pos_type seekoff(off_type _O, ios_base::seekdir _Way,
		ios_base::openmode =
			(ios_base::openmode)(ios_base::in | ios_base::out))
		{fpos_t _Fp;
		if (_File == 0 || fseek(_File, _O, _Way) != 0
			|| fgetpos(_File, &_Fp) != 0)
			return (pos_type(_BADOFF));
		return (pos_type(_State, _Fp)); } 
	virtual pos_type seekpos(pos_type _P,
		ios_base::openmode =
			(ios_base::openmode)(ios_base::in | ios_base::out))
		{fpos_t _Fp = _P.get_fpos_t();
		off_type _Off = (off_type)_P - ((long)(_Fp));
		if (_File == 0
			|| fsetpos(_File, &_Fp) != 0
			|| _Off != 0 && fseek(_File, _Off, 1) != 0
			|| fgetpos(_File, &_Fp) != 0)
			return (pos_type(_BADOFF));
		if (_Str != 0)
			_State = _P.state(), _Str->erase();
		return (pos_type(_State, _Fp)); }
	virtual _Mysb *setbuf(_E *_S, streamsize _N)
		{return (_File == 0 || setvbuf(_File, (char *)_S,
			0x0000, _N * sizeof (_E)) != 0 ? 0 : this); }
	virtual int sync()
		{return (_File == 0 || 0 <= fflush(_File) ? 0 : -1); }
	void _Init(_iobuf *_Fp, _Initfl _Which)
		{static _Tr::state_type _Stinit;
		_Closef = _Which == _Openfl;
		if (_Which == _Newfl)
			{_Loc.locale::~locale();
			new (&_Loc) locale;
			_Str = 0; }
		_Mysb::_Init();
		if (_Fp != 0 && !_Closef && sizeof (_E) == 1)
			{_Mysb::_Init((_E **)&_Fp->_base,
				(_E **)&_Fp->_ptr, &_Fp->_cnt,
				(_E **)&_Fp->_base, (_E **)&_Fp->_ptr,
				&_Fp->_cnt); }
		_File = _Fp;
		_State = _Stinit;
		_State0 = _Stinit;
		_Pcvt = 0; }
	void _Initcvt()
		{_Pcvt = (_Cvt *)&use_facet(getloc(), (_Cvt *)0, true);
		_Loc = _Addfac(_Loc, _Pcvt);
		if (_Pcvt->always_noconv())
			_Pcvt = 0;
		if (_Str == 0)
			_Str = new string; }
private:
	_Cvt *_Pcvt;
	_Tr::state_type _State0;
	_Tr::state_type _State;
	string *_Str;
	bool _Closef;
	locale _Loc;
	_iobuf *_File;
	};


#pragma warning(disable:4231) 
extern template class __declspec(dllimport) basic_filebuf<char, char_traits<char> >;
extern template class __declspec(dllimport) basic_filebuf<wchar_t, char_traits<wchar_t> >;
#pragma warning(default:4231) 
#line 252 "c:\\programme\\microsoft visual studio\\vc98\\include\\fstream"

		
template<class _E, class _Tr = char_traits<_E> >
	class basic_ifstream : public basic_istream<_E, _Tr> {
public:
	typedef basic_ifstream<_E, _Tr> _Myt;
	typedef basic_filebuf<_E, _Tr> _Myfb;
	basic_ifstream()
		: basic_istream<_E, _Tr>(&_Fb) {}
	explicit basic_ifstream(const char *_S,
		ios_base::openmode _M = in)
		: basic_istream<_E, _Tr>(&_Fb)
		{if (_Fb.open(_S, _M | in) == 0)
			setstate(failbit); }
	virtual ~basic_ifstream()
		{}
	_Myfb *rdbuf() const
		{return ((_Myfb *)&_Fb); }
	bool is_open() const
		{return (_Fb.is_open()); }
	void open(const char *_S, ios_base::openmode _M = in)
		{if (_Fb.open(_S, _M | in) == 0)
		 	setstate(failbit); }
	void open(const char *_S, ios_base::open_mode _M)
		{open(_S, (openmode)_M); }
	void close()
		{if (_Fb.close() == 0)
		 	setstate(failbit); }
private:
	_Myfb _Fb;
	};


#pragma warning(disable:4231) 
extern template class __declspec(dllimport) basic_ifstream<char, char_traits<char> >;
extern template class __declspec(dllimport) basic_ifstream<wchar_t, char_traits<wchar_t> >;
#pragma warning(default:4231) 
#line 290 "c:\\programme\\microsoft visual studio\\vc98\\include\\fstream"

		
template<class _E, class _Tr = char_traits<_E> >
	class basic_ofstream : public basic_ostream<_E, _Tr> {
public:
	typedef basic_ofstream<_E, _Tr> _Myt;
	typedef basic_filebuf<_E, _Tr> _Myfb;
	basic_ofstream()
		: basic_ostream<_E, _Tr>(&_Fb) {}
	explicit basic_ofstream(const char *_S,
		ios_base::openmode _M = out | trunc)
		: basic_ostream<_E, _Tr>(&_Fb)
		{if (_Fb.open(_S, _M | out) == 0)
			setstate(failbit); }
	virtual ~basic_ofstream()
		{}
	_Myfb *rdbuf() const
		{return ((_Myfb *)&_Fb); }
	bool is_open() const
		{return (_Fb.is_open()); }
	void open(const char *_S, ios_base::openmode _M = out | trunc)
		{if (_Fb.open(_S, _M | out) == 0)
		 	setstate(failbit); }
	void open(const char *_S, ios_base::open_mode _M)
		{open(_S, (openmode)_M); }
	void close()
		{if (_Fb.close() == 0)
		 	setstate(failbit); }
private:
	_Myfb _Fb;
	};


#pragma warning(disable:4231) 
extern template class __declspec(dllimport) basic_ofstream<char, char_traits<char> >;
extern template class __declspec(dllimport) basic_ofstream<wchar_t, char_traits<wchar_t> >;
#pragma warning(default:4231) 
#line 328 "c:\\programme\\microsoft visual studio\\vc98\\include\\fstream"


		
template<class _E, class _Tr = char_traits<_E> >
	class basic_fstream : public basic_iostream<_E, _Tr> {
public:
	basic_fstream()
		: basic_iostream<_E, _Tr>(&_Fb) {}
	explicit basic_fstream(const char *_S,
		ios_base::openmode _M = in | out)
		: basic_iostream<_E, _Tr>(&_Fb)
		{if (_Fb.open(_S, _M) == 0)
			setstate(failbit); }
	virtual ~basic_fstream()
		{}
	basic_filebuf<_E, _Tr> *rdbuf() const
		{return ((basic_filebuf<_E, _Tr> *)&_Fb); }
	bool is_open() const
		{return (_Fb.is_open()); }
	void open(const char *_S, ios_base::openmode _M = in | out)
		{if (_Fb.open(_S, _M) == 0)
		 	setstate(failbit); }
	void open(const char *_S, ios_base::open_mode _M)
		{open(_S, (openmode)_M); }
	void close()
		{if (_Fb.close() == 0)
		 	setstate(failbit); }
private:
	basic_filebuf<_E, _Tr> _Fb;
	};


#pragma warning(disable:4231) 
extern template class __declspec(dllimport) basic_fstream<char, char_traits<char> >;
extern template class __declspec(dllimport) basic_fstream<wchar_t, char_traits<wchar_t> >;
#pragma warning(default:4231) 
#line 365 "c:\\programme\\microsoft visual studio\\vc98\\include\\fstream"




};

#pragma pack(pop)
#line 373 "c:\\programme\\microsoft visual studio\\vc98\\include\\fstream"

#line 375 "c:\\programme\\microsoft visual studio\\vc98\\include\\fstream"





#line 14 "h:\\c_projekte\\elansim\\file.h"

class SoVRMLGroup;

class File
{
public:

	typedef void (*funcPtr)(const char* text);
	
	class file_exception {
	public:
		const char* msg;
		file_exception(const char* text) : msg(text) {}
	};

	File();
	~File();

	Scene* loadScene(const char* name) throw(file_exception, const char*);
	int saveScene(Scene& scene, const char* name);
	int getSize();
	int getCurrentLoaded();
	void setProgressCB(funcPtr);


private:

	SoInput _in; 
	std::fstream* _file;
	int _size, _loaded;
	const char* _name;
	char* _buffer;
	funcPtr _progressCB;

	static void* _load(void* data);
	static void* _save(void* data);
	SoVRMLGroup* _readScene();

};

#line 55 "h:\\c_projekte\\elansim\\file.h"
#line 13 "h:\\c_projekte\\elansim\\shellwidget.cpp"

#line 1 "h:\\c_projekte\\elansim\\serverconnection.h"








#pragma once
#line 11 "h:\\c_projekte\\elansim\\serverconnection.h"

#line 1 "c:\\programme\\microsoft visual studio\\vc98\\include\\winsock.h"































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 13 "h:\\c_projekte\\elansim\\serverconnection.h"



#line 1 "c:\\qt\\include\\qobject.h"























































































































































































































































#line 17 "h:\\c_projekte\\elansim\\serverconnection.h"







class SoTimerSensor;
class SoSensor;
class Scene;

class ServerConnection : public QObject
{
	public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;

public:




	ServerConnection(const char* adress, int port);
	~ServerConnection();





	class server_exception 
	{
	public:
		const char* msg;
		server_exception(const char* text) : msg(text) {};
	};



	
	enum Flag { 
		
		logout				= 1, 
		login				= 2,
		loginaccepted		= 4,
		listrequest			= 8,
		lists				= 16,

		texturerequest		= 32,
		textures			= 64,
		scenerequest		= 128,
		scene				= 256,
		cur_scenerequest	= 512,
		movement			= 1024,
		event				= 2048,
		chat				= 4096,
		master				= 8192,
		error				= 16384,
		new_client			= 32768,
		cur_avatar_pos		= 65536,
		growth_generator	= 131072, 
		client_gone			= 262144 };

	typedef void (*funcPtr)(Flag flag);





	
	void open();

	
	void setCallback(funcPtr receiveCB);
	
	
	int send(void* msg,int size, Flag flag);

	
	int getData(Scene*& scene);
	int getData(void*& data);

	
	int close();

	
private:




	const char* _adress;
	int _port;

	int _size;


	funcPtr _rcvCB;





	SoTimerSensor* _dataReceiveTimer;
	int client_socket, bytes_recv, bytes_sent, _bytes_to_receive, msg_size;
	sockaddr_in server_addr;
	hostent *server_info;
	WSADATA wsaData;
	char disconnect_command[5], *_buffer, *_offset;




	int _rcv();
	bool _isIP();
	int _establishConnectionByIP(const char* srv_ip, unsigned short int srv_port);
	int _establishConnectionByName(const char* srv_name, unsigned short int srv_port);
	char* _getServerByName(const char* srv_name);
	int _getMsgSize(char* b);
	Flag _getFlag();
	unsigned int _getSize();
	void _setBuffer(void* buf, int& size, Flag flag);

	static void _dataReceiveLoop(void* data, SoSensor*);

protected:
	void newData(Flag flag);


};

#line 146 "h:\\c_projekte\\elansim\\serverconnection.h"
#line 15 "h:\\c_projekte\\elansim\\shellwidget.cpp"
#line 1 "h:\\c_projekte\\elansim\\headview.h"











#line 1 "c:\\qt\\include\\qvariant.h"

































































































































































































































































































































#line 13 "h:\\c_projekte\\elansim\\headview.h"
#line 1 "c:\\qt\\include\\qdialog.h"






















































































































#line 14 "h:\\c_projekte\\elansim\\headview.h"
class QVBoxLayout; 
class QHBoxLayout; 
class QGridLayout; 
class QFrame;
class QSlider;

class Scene;

class SoPerspectiveCamera;
class SoCamera;
class SoVRMLGroup;
class SbVec3f;
class SbRotation;

class HeadView : public QDialog
{ 
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;

public:
    HeadView( QWidget* parent = 0, const char* name = 0, bool modal = 0, 
		WFlags fl = WStyle_Customize|WStyle_DialogBorder|WStyle_Title );
    ~HeadView();

    QFrame* Frame5;
    QSlider* slider;

	void set(const SbRotation& rot, const SbVec3f& pos);
	void setScene(Scene* sc);

private:
	SoPerspectiveCamera* headCam;
	SoVRMLGroup* _root;
	SoPerspectiveCamera* _cam;



private :
	void _onSlider(int value);
};

#line 55 "h:\\c_projekte\\elansim\\headview.h"
#line 16 "h:\\c_projekte\\elansim\\shellwidget.cpp"
#line 1 "h:\\c_projekte\\elansim\\information.h"











#line 1 "c:\\qt\\include\\qvariant.h"

































































































































































































































































































































#line 13 "h:\\c_projekte\\elansim\\information.h"
#line 1 "c:\\qt\\include\\qdialog.h"






















































































































#line 14 "h:\\c_projekte\\elansim\\information.h"
class QVBoxLayout; 
class QHBoxLayout; 
class QGridLayout; 
class QMultiLineEdit;

class Information : public QDialog
{ 
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;

public:
    Information( QWidget* parent = 0, const char* name = 0, bool modal = 0, 
		WFlags fl = WStyle_Customize|WStyle_DialogBorder|WStyle_Title );
    ~Information();

    QMultiLineEdit* info;

};

#line 33 "h:\\c_projekte\\elansim\\information.h"
#line 17 "h:\\c_projekte\\elansim\\shellwidget.cpp"
#line 1 "h:\\c_projekte\\elansim\\actionfactory.h"







#line 1 "c:\\qt\\include\\qnamespace.h"







































































































































































































































































































































































































































































































































































































































#line 9 "h:\\c_projekte\\elansim\\actionfactory.h"
#line 1 "c:\\qt\\include\\qstringlist.h"

















































































#line 10 "h:\\c_projekte\\elansim\\actionfactory.h"
#line 1 "c:\\qt\\include\\qwidget.h"




















































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 11 "h:\\c_projekte\\elansim\\actionfactory.h"

class QAction;

class ActionFactory  
{
private:
	ActionFactory();
	static QWidget* _parent;

public:	

	static enum Action {
		CONNECTION,
		OPEN,
		SAVE,
		CLOSE,
		SCENELIST,
		GROWTHGENERATOR,
		EXIT,

		HIDE,

		INFORMATION,
		COORDINATES,
		CHAT,
		HEADVIEW,
		FULLSCREEN,

		HELP,
		FORESTER_ABOUT,
	};
	
	static QAction* getAction(Action id);
	static void setParent(QWidget* parent);

};

#line 49 "h:\\c_projekte\\elansim\\actionfactory.h"
#line 18 "h:\\c_projekte\\elansim\\shellwidget.cpp"
#line 1 "h:\\c_projekte\\elansim\\wizard.h"











#line 1 "c:\\qt\\include\\qvariant.h"

































































































































































































































































































































#line 13 "h:\\c_projekte\\elansim\\wizard.h"
#line 1 "c:\\qt\\include\\qdialog.h"






















































































































#line 14 "h:\\c_projekte\\elansim\\wizard.h"
class QVBoxLayout; 
class QHBoxLayout; 
class QGridLayout; 
class QFrame;
class QGroupBox;
class QLabel;
class QPushButton;
class QComboBox;
class QLineEdit;
class QMultiLineEdit;
class QPixmap;
class QSpinBox;
class QListView;

class SoVRMLSwitch;
class SoAction;
class SoQtRenderArea;
class SoPerspectiveCamera;

class WaitDialog;
class QListViewItem;


#line 1 "c:\\qt\\include\\qstringlist.h"

















































































#line 38 "h:\\c_projekte\\elansim\\wizard.h"
#line 1 "c:\\qt\\include\\qvaluelist.h"

































































































































































































































































































































































































































































#line 39 "h:\\c_projekte\\elansim\\wizard.h"

#line 1 "h:\\c_projekte\\elansim\\connection.h"







class ReceiveThread;
class QEvent;

#line 1 "c:\\qt\\include\\qobject.h"























































































































































































































































#line 12 "h:\\c_projekte\\elansim\\connection.h"
#line 1 "c:\\coin3d\\include\\inventor\\sensors\\sotimersensor.h"






















































#line 13 "h:\\c_projekte\\elansim\\connection.h"

#line 1 "h:\\c_projekte\\elansim\\io_flags.h"


































#line 15 "h:\\c_projekte\\elansim\\connection.h"



struct Con_Exception
{
	char* msg;
	Con_Exception(char* message) : msg(message) {}
};






class Connection : public QObject
{
	public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;

public:

	Connection( const char* addr, int port );
	virtual ~Connection();

	void send(IO_Flag flag, const char* data = 0, int size = 0);

	
	const char* getData();
	int getSize();

	void _rcv();

	int _sockfd;		
	char*  _buf;		
	char* _rcv_buf;		
	int _rcv_size;      
	IO_Flag _rcv_flag;	
	
private:




	

	SoTimerSensor* timer;
	void init();
	const char* _getServerByName(const char* srv_name);
	bool _isIP(const char* addr);
	int _sendAll(char* b, int size);





protected:

	void dataReceived(IO_Flag);
	

};


#line 78 "h:\\c_projekte\\elansim\\connection.h"
#line 41 "h:\\c_projekte\\elansim\\wizard.h"

class ConnectionWizard : public QDialog
{ 
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;

public:
    ConnectionWizard( QWidget* parent = 0, const char* name = 0, bool modal = 1, 
		WFlags fl = WStyle_Customize|WStyle_DialogBorder|WStyle_Title);

    QGroupBox* frmServer, *frmSceneList;
    QPushButton* btnCancel;
    QPushButton* btnBack;
    QPushButton* btnOK;
    QFrame* frmTop;
    QLabel* lblTopGraphic;
	QLabel* txtInfo;

    QLabel* lblServer;
    QSpinBox* spnPort;
    QLabel* lblPort;
    QGroupBox* boxLogin;
    QLineEdit* txtUser;
    QLabel* lblUser;
    QLabel* lblPasswd;
    QLineEdit* txtPasswd;
    QComboBox* cmbServer;
    QGroupBox* grpAvatars;
    QComboBox* cmbAvatars;
    QListView* lsvScenes;

	Connection* _c;
	char* _buffer;
	size_t _length;

private:
	
	QFrame* currentPage;
	QFrame* page1;
	QFrame* page2;
	QFrame* page3;
	int dCount;


	QStringList serverlist;
	QStringList	userlist;
	QStringList passwdlist;
	QValueList<int> portlist;
	QValueList<int> idlist;


	QString _title;
	int _sceneId;
	int _sessionId;


	QStringList avatarlist;
	QStringList	pathlist;

	int _avatar;

	WaitDialog* _wait;
	SoVRMLSwitch* _switch;
	SoQtRenderArea* area;
	SoPerspectiveCamera* camera;

	struct Item {
		int id;
		int SceneId;
		int SessionId;
		QListViewItem* object;
	} item[ 200 ];
	
	int itemCount; 

	void buildPage1();
	void buildPage2();
	void buildPage3();
	
	void setCurrentPage(QFrame* f);
	void buildWidget();
	void _getListEntries();
	void _getServerEntries();
	void _getAvatarEntries();

	void _page1();
	void _page2();
	void _page3();

	int _connect();
	int _login();
	void _accepted();
	void _setList();
	void _setBuffer();

	static void callback(void* data, SoAction* a);

private :

	void onCancel();
	void onOK();
	void onCmbServer(int);
	void onCmbAvatar(int);
	void onSelect(QListViewItem* selectedItem);

	void onReceive(IO_Flag);

};

#line 150 "h:\\c_projekte\\elansim\\wizard.h"
#line 19 "h:\\c_projekte\\elansim\\shellwidget.cpp"
#line 1 "h:\\c_projekte\\elansim\\preferences.h"







#line 1 "c:\\qt\\include\\qstring.h"
























































































































































































































































































































































































































































































































































































































































































































































































































































#line 9 "h:\\c_projekte\\elansim\\preferences.h"
#line 1 "c:\\qt\\include\\qstringlist.h"

















































































#line 10 "h:\\c_projekte\\elansim\\preferences.h"
#line 1 "c:\\qt\\include\\qmap.h"






























































































































































































































































































































































































































































































































































































































#line 11 "h:\\c_projekte\\elansim\\preferences.h"

class Preferences  
{
private:
	Preferences();
	~Preferences();

	struct Entrie {
		int id;
		QString key;
		QString val;
		Entrie* next;
	};

	struct Section {
		int id;
		bool touched;
		QString name;
		Section* next;
		Entrie* entrie_top;
	};

	static Section* top;
	static Entrie* c_e;
	static Section* c_s;
	static int entrie_count;
	static int found;

public:

	typedef QMap<QString, QString> Values;

	static int setFile(QString& name);

	static bool isKey(const char* name);
	static int getSection(const char* name);
	static int nextSection();
	static int nextEntrie();
	static const char* getKey();
	static const char* getValue();




};

#line 58 "h:\\c_projekte\\elansim\\preferences.h"
#line 20 "h:\\c_projekte\\elansim\\shellwidget.cpp"
#line 1 "h:\\c_projekte\\elansim\\connection.h"













































































#line 21 "h:\\c_projekte\\elansim\\shellwidget.cpp"
#line 1 "h:\\c_projekte\\elansim\\io_flags.h"


































#line 22 "h:\\c_projekte\\elansim\\shellwidget.cpp"

#line 1 "c:\\coin3d\\include\\inventor\\threads\\sbthread.h"


























#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 28 "c:\\coin3d\\include\\inventor\\threads\\sbthread.h"
#line 1 "c:\\coin3d\\include\\inventor\\c\\threads\\thread.h"


























#line 1 "c:\\coin3d\\include\\inventor\\c\\basic.h"























































































































































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\c\\threads\\thread.h"
#line 1 "c:\\coin3d\\include\\inventor\\c\\threads\\common.h"


























#line 1 "c:\\coin3d\\include\\inventor\\c\\basic.h"























































































































































































































































































































#line 28 "c:\\coin3d\\include\\inventor\\c\\threads\\common.h"


extern "C" {
#line 32 "c:\\coin3d\\include\\inventor\\c\\threads\\common.h"



  typedef struct cc_sched cc_sched;
  typedef struct cc_wpool cc_wpool;
  typedef struct cc_worker cc_worker;
  typedef struct cc_thread cc_thread;
  typedef struct cc_mutex cc_mutex;
  typedef struct cc_rwmutex cc_rwmutex;
  typedef struct cc_condvar cc_condvar;
  typedef struct cc_storage cc_storage;
  typedef struct cc_fifo cc_fifo;
  typedef struct cc_barrier cc_barrier;
  typedef struct cc_recmutex cc_recmutex;

  
  enum cc_precedence {
    CC_READ_PRECEDENCE,
    CC_WRITE_PRECEDENCE
  };

  enum cc_threads_implementation {
    CC_NO_THREADS = -1,
    CC_PTHREAD    = 0,
    CC_W32THREAD
  };

  enum cc_retval {
    CC_ERROR = 0,
    CC_OK = 1,
    CC_TIMEOUT,
    CC_BUSY
  };

  typedef enum cc_precedence cc_precedence;
  typedef enum cc_threads_implementation cc_threads_implementation;
  typedef enum cc_retval cc_retval;

  

  __declspec(dllimport) int cc_thread_implementation(void);

  


} 
#line 79 "c:\\coin3d\\include\\inventor\\c\\threads\\common.h"

#line 81 "c:\\coin3d\\include\\inventor\\c\\threads\\common.h"
#line 29 "c:\\coin3d\\include\\inventor\\c\\threads\\thread.h"


extern "C" {
#line 33 "c:\\coin3d\\include\\inventor\\c\\threads\\thread.h"



typedef void * cc_thread_f(void *);

__declspec(dllimport) cc_thread * cc_thread_construct(cc_thread_f * func, void * closure);
__declspec(dllimport) void cc_thread_destruct(cc_thread * thread);

__declspec(dllimport) int cc_thread_join(cc_thread * thread, void ** retvalptr);

__declspec(dllimport) unsigned long cc_thread_id(void);
__declspec(dllimport) void cc_sleep(float seconds);










} 
#line 57 "c:\\coin3d\\include\\inventor\\c\\threads\\thread.h"

#line 59 "c:\\coin3d\\include\\inventor\\c\\threads\\thread.h"
#line 29 "c:\\coin3d\\include\\inventor\\threads\\sbthread.h"

class SbThread {
public:
  static SbThread * create(void *(*func)(void *), void * closure) {
    return new SbThread(cc_thread_construct(func, closure));
  }
  static void destroy(SbThread * thread) {
    cc_thread_destruct(thread->thread);
    delete thread;
  }

  SbBool join(void ** retval = 0L) {
    return cc_thread_join(this->thread, retval) == CC_OK;
  }
  static SbBool join(SbThread * thread, void ** retval = 0L) {
    return cc_thread_join(thread->thread, retval) == CC_OK;
  }

protected:
  SbThread(cc_thread * thrd) { this->thread = thrd; }
  ~SbThread(void) {}

private:
  cc_thread * thread;
};

#line 56 "c:\\coin3d\\include\\inventor\\threads\\sbthread.h"
#line 24 "h:\\c_projekte\\elansim\\shellwidget.cpp"
#line 1 "c:\\coin3d\\include\\inventor\\nodes\\soperspectivecamera.h"


















































#line 25 "h:\\c_projekte\\elansim\\shellwidget.cpp"

#line 1 "c:\\qt\\include\\qspinbox.h"









































#line 1 "c:\\qt\\include\\qframe.h"







































































































































































#line 43 "c:\\qt\\include\\qspinbox.h"
#line 1 "c:\\qt\\include\\qrangecontrol.h"

























































































































#line 44 "c:\\qt\\include\\qspinbox.h"
#line 45 "c:\\qt\\include\\qspinbox.h"




class QPushButton;
class QLineEdit;
class QValidator;

struct QSpinBoxPrivate;

class __declspec(dllimport) QSpinBox: public QFrame, public QRangeControl
{
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
    
    
    
    
    
    
    
    
    
    
    
    
	
public:
    QSpinBox( QWidget* parent = 0, const char *name = 0 );
    QSpinBox( int minValue, int maxValue, int step = 1,
	      QWidget* parent = 0, const char* name = 0 );
    ~QSpinBox();

    QString 		text() const;

    virtual QString 	prefix() const;
    virtual QString 	suffix() const;
    virtual QString 	cleanText() const;

    virtual void	setSpecialValueText( const QString &text );
    QString 		specialValueText() const;

    virtual void 	setWrapping( bool on );
    bool 		wrapping() const;

    enum ButtonSymbols { UpDownArrows, PlusMinus };
    void		setButtonSymbols( ButtonSymbols ); 
    ButtonSymbols	buttonSymbols() const;

    virtual void	setValidator( const QValidator* v );
    const QValidator * validator() const;

    QSize 		sizeHint() const;
    QSizePolicy 	sizePolicy() const;

    int	 minValue() const;
    int	 maxValue() const;
    void setMinValue( int );
    void setMaxValue( int );
    int	 lineStep() const;
    void setLineStep( int );
    int  value() const;

public :
    virtual void	setValue( int value );
    virtual void	setPrefix( const QString &text );
    virtual void	setSuffix( const QString &text );
    virtual void	stepUp();
    virtual void	stepDown();
    virtual void	setEnabled( bool );

protected:
    void		valueChanged( int value );
    void		valueChanged( const QString &valueText );

protected:
    virtual QString	mapValueToText( int value );
    virtual int		mapTextToValue( bool* ok );
    QString		currentValueText();

    virtual void	updateDisplay();
    virtual void	interpretText();

    QPushButton*	upButton() const;
    QPushButton*	downButton() const;
    QLineEdit*		editor() const;

    virtual void	valueChange();
    virtual void	rangeChange();

    bool		eventFilter( QObject* obj, QEvent* ev );
    void		resizeEvent( QResizeEvent* ev );
    void		wheelEvent( QWheelEvent * );
    void		leaveEvent( QEvent* );

    void		styleChange( QStyle& );

protected :
    void		textChanged();

private:
    void initSpinBox();
    struct QSpinBoxPrivate* d;
    QPushButton* up;
    QPushButton* down;
    QLineEdit* vi;
    QValidator* validate;
    QString pfix;
    QString sfix;
    QString specText;
    bool wrap;
    bool edited;

    void arrangeWidgets();
    void updateButtonSymbols();

private:	



#line 165 "c:\\qt\\include\\qspinbox.h"

};

#line 169 "c:\\qt\\include\\qspinbox.h"

#line 171 "c:\\qt\\include\\qspinbox.h"
#line 27 "h:\\c_projekte\\elansim\\shellwidget.cpp"
#line 1 "c:\\qt\\include\\qcombobox.h"









































#line 1 "c:\\qt\\include\\qwidget.h"




















































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 43 "c:\\qt\\include\\qcombobox.h"
#line 44 "c:\\qt\\include\\qcombobox.h"




struct QComboData;
class QStrList;
class QStringList;
class QLineEdit;
class QValidator;
class QListBox;


class __declspec(dllimport) QComboBox : public QWidget
{
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
    
    
    
    
    
    
    
    
    
    
    

public:
    QComboBox( QWidget *parent=0, const char *name=0 );
    QComboBox( bool rw, QWidget *parent=0, const char *name=0 );
   ~QComboBox();

    int		count() const;

    void	insertStringList( const QStringList &, int index=-1 );
    void	insertStrList( const QStrList &, int index=-1 );
    void	insertStrList( const QStrList *, int index=-1 );
    void	insertStrList( const char **, int numStrings=-1, int index=-1);

    void	insertItem( const QString &text, int index=-1 );
    void	insertItem( const QPixmap &pixmap, int index=-1 );
    void	insertItem( const QPixmap &pixmap, const QString &text, int index=-1 );

    void	removeItem( int index );
    void	clear();

    QString currentText() const;
    QString text( int index ) const;
    const QPixmap *pixmap( int index ) const;

    void	changeItem( const QString &text, int index );
    void	changeItem( const QPixmap &pixmap, int index );
    void	changeItem( const QPixmap &pixmap, const QString &text, int index );

    int		currentItem() const;
    virtual void	setCurrentItem( int index );

    bool	autoResize()	const;
    virtual void	setAutoResize( bool );
    QSize	sizeHint() const;
    virtual QSizePolicy sizePolicy() const;

    virtual void	setBackgroundColor( const QColor & );
    virtual void	setPalette( const QPalette & );
    virtual void	setFont( const QFont & );
    virtual void	setEnabled( bool );

    virtual void	setSizeLimit( int );
    int		sizeLimit() const;

    virtual void	setMaxCount( int );
    int		maxCount() const;

    enum Policy { NoInsertion, AtTop, AtCurrent, AtBottom,
		  AfterCurrent, BeforeCurrent };

    virtual void	setInsertionPolicy( Policy policy );
    Policy 	insertionPolicy() const;

    virtual void	setValidator( const QValidator * );
    const QValidator * validator() const;

    virtual void	setListBox( QListBox * );
    QListBox * 	listBox() const;

    QLineEdit*	lineEdit() const;

    virtual void	setAutoCompletion( bool );
    bool	autoCompletion() const;

    bool	eventFilter( QObject *object, QEvent *event );

    void 	setDuplicatesEnabled( bool enable );
    bool 	duplicatesEnabled() const;
    
    bool 	editable() const;
    void 	setEditable( bool );

public :
    void	clearValidator();
    void	clearEdit();
    virtual void	setEditText( const QString &);

protected:
    void	activated( int index );
    void	highlighted( int index );
    void	activated( const QString &);
    void	highlighted( const QString &);
    void	textChanged( const QString &);

private :
    void	internalActivate( int );
    void	internalHighlight( int );
    void	internalClickTimeout();
    void	returnPressed();

protected:
    void	paintEvent( QPaintEvent * );
    void	resizeEvent( QResizeEvent * );
    void	mousePressEvent( QMouseEvent * );
    void	mouseMoveEvent( QMouseEvent * );
    void	mouseReleaseEvent( QMouseEvent * );
    void	mouseDoubleClickEvent( QMouseEvent * );
    void	keyPressEvent( QKeyEvent *e );
    void	focusInEvent( QFocusEvent *e );
    void	styleChange( QStyle& );

    void	popup(); 
    void	updateMask();

private:
    void	setUpListBox();
    void	setUpLineEdit();
    void	popDownListBox();
    void	reIndex();
    void	currentChanged();
    QRect	arrowRect() const;
    bool	getMetrics( int *dist, int *buttonW, int *buttonH ) const;

    QComboData	*d;

private:	



#line 190 "c:\\qt\\include\\qcombobox.h"
};


#line 194 "c:\\qt\\include\\qcombobox.h"

#line 196 "c:\\qt\\include\\qcombobox.h"
#line 28 "h:\\c_projekte\\elansim\\shellwidget.cpp"
#line 1 "c:\\qt\\include\\qaction.h"









































#line 1 "c:\\qt\\include\\qobject.h"























































































































































































































































#line 43 "c:\\qt\\include\\qaction.h"
#line 1 "c:\\qt\\include\\qiconset.h"


















































































#line 44 "c:\\qt\\include\\qaction.h"
#line 1 "c:\\qt\\include\\qstring.h"
























































































































































































































































































































































































































































































































































































































































































































































































































































#line 45 "c:\\qt\\include\\qaction.h"
#line 46 "c:\\qt\\include\\qaction.h"



class QActionPrivate;
class QActionGroupPrivate;
class QStatusBar;

class __declspec(dllimport) QAction : public QObject
{
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
    
    
    
    
    
    
    
    
    
    

public:
    QAction( QObject* parent = 0, const char* name = 0, bool toggle = 0  );
    QAction( const QString& text, const QIconSet& icon, const QString& menuText, int accel,
	     QObject* parent, const char* name = 0, bool toggle = 0 );
    QAction( const QString& text, const QString& menuText, int accel, QObject* parent,
	     const char* name = 0, bool toggle = 0 );
    ~QAction();

    virtual void setIconSet( const QIconSet& );
    QIconSet iconSet() const;
    virtual void setText( const QString& );
    QString text() const;
    virtual void setMenuText( const QString& );
    QString menuText() const;
    virtual void setToolTip( const QString& );
    QString toolTip() const;
    virtual void setStatusTip( const QString& );
    QString statusTip() const;
    virtual void setWhatsThis( const QString& );
    QString whatsThis() const;
    virtual void setAccel( int key );
    int accel() const;
    virtual void setToggleAction( bool );
    bool isToggleAction() const;
    virtual void setOn( bool );
    bool isOn() const;
    bool isEnabled() const;
    virtual bool addTo( QWidget* );
    virtual bool removeFrom( QWidget* );

public :
    virtual void setEnabled( bool );

protected:
    void activated();
    void toggled( bool );

private :
    void internalActivation();
    void toolButtonToggled( bool );
    void objectDestroyed();
    void menuStatusText( int id );
    void showStatusText( const QString& );
    void clearStatusText();

private:
    void init();

    QActionPrivate* d;

};

class __declspec(dllimport) QActionGroup : public QAction
{
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
    

public:
    QActionGroup( QWidget* parent, const char* name = 0, bool exclusive = 1 );
    ~QActionGroup();
    void setExclusive( bool );
    bool isExclusive() const;
    void insert( QAction* );
    bool addTo( QWidget* );
    bool removeFrom( QWidget* );
    void setEnabled( bool );

protected:
    void selected( QAction* );

private :
    void childToggled( bool );
    void childDestroyed();

private:
    QActionGroupPrivate* d;

};

#line 147 "c:\\qt\\include\\qaction.h"

#line 149 "c:\\qt\\include\\qaction.h"
#line 29 "h:\\c_projekte\\elansim\\shellwidget.cpp"
#line 1 "c:\\qt\\include\\qpixmap.h"



































































































































































































































































































#line 30 "h:\\c_projekte\\elansim\\shellwidget.cpp"
#line 1 "c:\\qt\\include\\qtoolbar.h"









































#line 1 "c:\\qt\\include\\qwidget.h"




















































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 43 "c:\\qt\\include\\qtoolbar.h"
#line 1 "c:\\qt\\include\\qmainwindow.h"














































































































































































#line 44 "c:\\qt\\include\\qtoolbar.h"
#line 45 "c:\\qt\\include\\qtoolbar.h"



class QButton;
class QBoxLayout;
class QToolBarPrivate;

class __declspec(dllimport) QToolBar: public QWidget
{
    public: QMetaObject *metaObject() const { return staticMetaObject(); } const char *className() const; static QMetaObject* staticMetaObject(); static QString tr(const char*); static QString tr(const char*, const char*); protected: void initMetaObject(); private: static QMetaObject *metaObj;
    
    
    
    

public:
    QToolBar( const QString &label,
	      QMainWindow *, QMainWindow::ToolBarDock = QMainWindow::Top,
	      bool newLine = 0, const char * name = 0 );
    QToolBar( const QString &label, QMainWindow *, QWidget *,
	      bool newLine = 0, const char * name = 0, WFlags f = 0 );
    QToolBar( QMainWindow * parent = 0, const char * name = 0 );
    ~QToolBar();

    void addSeparator();

    virtual void setOrientation( Orientation );
    Orientation orientation() const { return o; }

    void show();
    void hide();

    QMainWindow * mainWindow();

    virtual void setStretchableWidget( QWidget * );
    void setHorizontalStretchable( bool b );
    void setVerticalStretchable( bool b );
    bool isHorizontalStretchable() const;
    bool isVerticalStretchable() const;

    bool event( QEvent * e );
    bool eventFilter( QObject *, QEvent * );

    virtual void setLabel( const QString & );
    QString label() const;

    void clear();

    QSize minimumSize() const;
    QSize minimumSizeHint() const;

protected:
    void paintEvent( QPaintEvent * );
    void resizeEvent( QResizeEvent * );
    void styleChange( QStyle & );

protected:
    void orientationChanged( Orientation );

private :
    void startMoving( QToolBar *tb );
    void endMoving( QToolBar *tb );
    void popupSelected( int );
    void emulateButtonClicked();
    void updateArrowStuff();
    void setupArrowMenu();

private:
    void init();
    virtual void setUpGM();
    void paintToolBar();
    QBoxLayout *boxLayout();
    
    QBoxLayout * bl;
    QToolBarPrivate * d;
    Orientation o;
    QMainWindow * mw;
    QWidget * sw;
    QString l;

    friend class QMainWindow;

private:	



#line 132 "c:\\qt\\include\\qtoolbar.h"
};

#line 135 "c:\\qt\\include\\qtoolbar.h"

#line 137 "c:\\qt\\include\\qtoolbar.h"
#line 31 "h:\\c_projekte\\elansim\\shellwidget.cpp"
#line 1 "c:\\qt\\include\\qthread.h"









































#line 1 "c:\\qt\\include\\qwindowdefs.h"














































































































































































#line 43 "c:\\qt\\include\\qthread.h"
#line 44 "c:\\qt\\include\\qthread.h"



class QMutexPrivate;

const int Q_MUTEX_NORMAL = 0;
const int Q_MUTEX_RECURSIVE = 1;


class __declspec(dllimport) QMutex : public Qt
{
    friend class QWaitCondition;
    friend class QWaitConditionPrivate;

public:
    QMutex(bool recursive = 0);
    virtual ~QMutex();

    void lock();
    void unlock();
    bool locked();

private:
    QMutexPrivate * d;




#line 73 "c:\\qt\\include\\qthread.h"
};

class QThreadPrivate;

class __declspec(dllimport) QThread : public Qt
{
    friend class QThreadPrivate;
public:
    static HANDLE currentThread();
    static void postEvent( QObject *,QEvent * );

    static void exit();

    QThread();
    virtual ~QThread();

    
    bool wait( unsigned long time = 0xffffffffUL );

    void start();

    bool finished() const;
    bool running() const;


protected:
    virtual void run() = 0;

    static void sleep( unsigned long );
    static void msleep( unsigned long );
    static void usleep( unsigned long );

private:
    QThreadPrivate * d;




#line 112 "c:\\qt\\include\\qthread.h"
};

class QWaitConditionPrivate;

class __declspec(dllimport) QWaitCondition : public Qt
{
public:
    QWaitCondition();
    virtual ~QWaitCondition();

    
    bool wait( unsigned long time = 0xffffffffUL );
    bool wait( QMutex *mutex, unsigned long time = 0xffffffffUL );

    void wakeOne();
    void wakeAll();

private:
    QWaitConditionPrivate * d;




#line 136 "c:\\qt\\include\\qthread.h"
};

class QSemaphorePrivate;

class __declspec(dllimport) QSemaphore : public Qt
{
public:
    QSemaphore( int );
    virtual ~QSemaphore();

    int available() const;
    int total() const;

    
    int operator++(int);
    int operator--(int);

    int operator+=(int);
    int operator-=(int);


private:
    QSemaphorePrivate *d;




#line 164 "c:\\qt\\include\\qthread.h"
};

#line 167 "c:\\qt\\include\\qthread.h"

#line 169 "c:\\qt\\include\\qthread.h"
#line 32 "h:\\c_projekte\\elansim\\shellwidget.cpp"
#line 1 "h:\\c_projekte\\elansim\\load.h"








#line 1 "c:\\qt\\include\\qthread.h"








































































































































































#line 10 "h:\\c_projekte\\elansim\\load.h"

class QLabel;
class Scene;

class Load : public QThread
{
public:
	Load(const char* file=0);
	Scene* getScene();

private:
	const char* _file;
	Scene* _scene;
	void run();

};

#line 28 "h:\\c_projekte\\elansim\\load.h"
#line 33 "h:\\c_projekte\\elansim\\shellwidget.cpp"

#line 1 "c:\\coin3d\\include\\inventor\\sbplist.h"




























#line 1 "c:\\coin3d\\include\\inventor\\sbbasic.h"


























































































#line 30 "c:\\coin3d\\include\\inventor\\sbplist.h"
#line 1 "c:\\coin3d\\include\\inventor\\sblinear.h"



























































#line 31 "c:\\coin3d\\include\\inventor\\sbplist.h"

#line 1 "c:\\coin3d\\include\\inventor\\lists\\sbintlist.h"
















































#line 33 "c:\\coin3d\\include\\inventor\\sbplist.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\sbstringlist.h"





















































#line 34 "c:\\coin3d\\include\\inventor\\sbplist.h"
#line 1 "c:\\coin3d\\include\\inventor\\lists\\sbvec3flist.h"


























#line 1 "c:\\coin3d\\include\\inventor\\lists\\sbplist.h"
































































































































































#line 28 "c:\\coin3d\\include\\inventor\\lists\\sbvec3flist.h"
#line 1 "c:\\coin3d\\include\\inventor\\sbvec3f.h"






































































































#line 29 "c:\\coin3d\\include\\inventor\\lists\\sbvec3flist.h"

class __declspec(dllimport) SbVec3fList : public SbPList {
public:
  SbVec3fList(void) { }
  ~SbVec3fList();

  void append(const SbVec3f * item) {
    SbVec3f * vec = new SbVec3f(*item);
    
    ((SbPList*)this)->append((void*)vec);
  }

  void insert(const SbVec3f * item, const int insertbefore) {
    SbVec3f * vec = new SbVec3f(*item);
    ((SbPList*)this)->insert((void*)vec, insertbefore);
  }

  SbVec3f * operator[](const int idx) const {
    return (SbVec3f*) ((*(const SbPList*)this)[idx]);
  }
};

#line 52 "c:\\coin3d\\include\\inventor\\lists\\sbvec3flist.h"
#line 35 "c:\\coin3d\\include\\inventor\\sbplist.h"

#line 1 "c:\\coin3d\\include\\inventor\\lists\\sbplist.h"
































































































































































#line 37 "c:\\coin3d\\include\\inventor\\sbplist.h"


#line 40 "c:\\coin3d\\include\\inventor\\sbplist.h"

#line 42 "c:\\coin3d\\include\\inventor\\sbplist.h"
#line 35 "h:\\c_projekte\\elansim\\shellwidget.cpp"


Shellwidget *Shellwidget::me;


	QFile debugfile("C:/Dokumente und Einstellungen/Marc Eilhard/Projekte/C_Projekte/ElanSim/debug.txt");
	void
	Shellwidget::errorCB(const SoError *e, void *data) {
		if (debugfile.open(0x0002 | 0x0004)) {
			QString string  = QTime::currentTime().toString();
			string += " - "; 
			string += e->getDebugString().getString();
			string += "\n";
			const char      *msg    = string.ascii();
			debugfile.writeBlock(msg, qstrlen(msg));
			debugfile.close();
		}
	}
#line 54 "h:\\c_projekte\\elansim\\shellwidget.cpp"











Shellwidget::Shellwidget(QWidget *parent, const char *name, WFlags fl) :
    QMainWindow(parent, name, fl)
{
    me = this;
	master = false;

    setCaption("Qt - Forester");
    setGeometry(100, 100, 800, 600);   
    screen = 0; 

	Preferences::setFile(QString("forester.pref"));

 
 
    chatD = new ChatDialog(this);

    CoordD = new CoordinateDialog(this);

    waitD = new WaitDialog(this);
	headViewD = new HeadView(this); 
	infoD = new Information(this);

    buildWidget(this);

	setState(START);

	

























}






void Shellwidget::resizeEvent(QResizeEvent *e) 
{
  if (viewer)  viewer->renderArea->resize(render_frame->width() - 3, render_frame->height() - 3);
}






void Shellwidget::buildWidget(QWidget *parent) 
{



	
	ActionFactory::setParent(this);
	

	  connectAction = ActionFactory::getAction(ActionFactory::CONNECTION);
	  openAction	= ActionFactory::getAction(ActionFactory::OPEN);
	  saveAction = ActionFactory::getAction(ActionFactory::SAVE);
	  closeAction = ActionFactory::getAction(ActionFactory::CLOSE);
	  ggAction = ActionFactory::getAction(ActionFactory::GROWTHGENERATOR);
	  exitAction = ActionFactory::getAction(ActionFactory::EXIT);
	  hideAction = ActionFactory::getAction(ActionFactory::HIDE);
	  coordAction = ActionFactory::getAction(ActionFactory::COORDINATES);
	  chatAction = ActionFactory::getAction(ActionFactory::CHAT);
	  infoAction = ActionFactory::getAction(ActionFactory::INFORMATION);
	  headViewAction = ActionFactory::getAction(ActionFactory::HEADVIEW);
	  fullscreenAction = ActionFactory::getAction(ActionFactory::FULLSCREEN);
	  aboutAction = ActionFactory::getAction(ActionFactory::FORESTER_ABOUT);
	  helpAction = ActionFactory::getAction(ActionFactory::HELP);

	  
	  headViewAction->setToggleAction(true);
	  infoAction->setToggleAction(true);
	  chatAction->setToggleAction(true);
	  coordAction->setToggleAction(true);
	  fullscreenAction->setToggleAction(true);





	connect(connectAction, "2""activated()", this, "1""_onConnect()");
	connect(openAction, "2""activated()", this, "1""_onOpen()");
	connect(saveAction, "2""activated()", this, "1""_onSave()");
	connect(closeAction, "2""activated()", this, "1""_onClose()");
	connect(ggAction, "2""activated()", this, "1""_onGrowthGen()");
	connect(exitAction, "2""activated()", this, "1""close()");




	connect(coordAction, "2""activated()", this, "1""_onCoordinates()");
	connect(chatAction, "2""activated()", this, "1""_onChat()");
	connect(infoAction, "2""activated()", this, "1""_onInfo()");
	connect(headViewAction, "2""activated()", this, "1""_onHeadView()");
	connect(fullscreenAction, "2""activated()", this, "1""_toggleFullscreen()");
	connect(aboutAction, "2""activated()", this, "1""_onAbout()");
	connect(helpAction, "2""activated()", this, "1""_onHelp()");




	
    mnu_datei = new QPopupMenu;

		connectAction->addTo(mnu_datei);
		mnu_datei->insertSeparator();
		openAction->addTo(mnu_datei);
		saveAction->addTo(mnu_datei);
		closeAction->addTo(mnu_datei);
		mnu_datei->insertSeparator();
		ggAction->addTo(mnu_datei);
		mnu_datei->insertSeparator();
		exitAction->addTo(mnu_datei);





    mnu_edit = new QPopupMenu;

		hideAction->addTo(mnu_edit);
		mnu_edit->insertSeparator();




	
    mnu_view = new QPopupMenu;
    mnu_view->setCheckable(true);

		infoAction->addTo(mnu_view);
		coordAction->addTo(mnu_view);
		headViewAction->addTo(mnu_view);
		mnu_view->insertSeparator();
		chatAction->addTo(mnu_view);
		mnu_view->insertSeparator();
		fullscreenAction->addTo(mnu_view);





    mnu_help = new QPopupMenu;

		helpAction->addTo(mnu_help);
		mnu_help->insertSeparator();
		aboutAction->addTo(mnu_help);





    main_menu = new QMenuBar(this);

    main_menu->insertItem("&File", mnu_datei);
    main_menu->insertItem("&Edit", mnu_edit);
    main_menu->insertItem("&View", mnu_view);
    main_menu->insertItem("&Help", mnu_help);





	QToolBar* file_toolbar = new QToolBar(this);
	QToolBar* view_toolbar = new QToolBar(this);

	connectAction->addTo(file_toolbar);
	file_toolbar->addSeparator();
	openAction->addTo(file_toolbar);
	saveAction->addTo(file_toolbar);
	closeAction->addTo(file_toolbar);
	infoAction->addTo(view_toolbar);
	coordAction->addTo(view_toolbar);
	headViewAction->addTo(view_toolbar);
	chatAction->addTo(view_toolbar);
	view_toolbar->addSeparator();
	fullscreenAction->addTo(view_toolbar);
	helpAction->addTo(view_toolbar);
	view_toolbar->addSeparator();
	exitAction->addTo(view_toolbar);
	





    render_frame = new QFrame(this, "render_frame");
    render_frame->setMouseTracking(0);
    render_frame->setFrameShape(QFrame::Box);
    render_frame->setFrameShadow(QFrame::Sunken);
	render_frame->setBackgroundColor(QColor(0,0,70));
    setCentralWidget(render_frame); 






    sbar = statusBar();
	permanentMessages = new QLabel(sbar);

	sbar->addWidget(permanentMessages, 2, false);




    permanentMessages = new QLabel(sbar);
    normalMessages = new QLabel(sbar);

    sbar->addWidget(normalMessages, 4);
    sbar->addWidget(permanentMessages, 1, true);

	viewer = new Viewer(render_frame);
	viewer->renderArea->hide();
}

void Shellwidget::_onHideTrees(int id) 
{
    if (mnu_hideTrees->isItemChecked(id)) {
        mnu_hideTrees->setItemChecked(id, false);
        _scene->hideTrees(id, false);
    } else {
        mnu_hideTrees->setItemChecked(id, true);
        _scene->hideTrees(id, true);
    }
}

void Shellwidget::_onCutTrees(int id) 
{
    _scene->cutTrees(id);
}

void Shellwidget::_onInfo() 
{
	QString title;
	QString text;
	
	if (infoAction->isOn()) {
		if (!_stand_info) {
			infoD->info->setText("No stand information available!");
		} else {
			int i = 0;
			title = _stand_info[i++];

			while (i < _info_size) {
				text += _stand_info[i++];
				text += "\n";
			}
			infoD->setCaption(title);
			infoD->info->setText(text);
			infoD->show();
		}
	} else {
		infoD->hide();
	}
}

void Shellwidget::_toggleFullscreen() 
{
    if (this->screen) {
        this->screen = 0;
        mnu_view->setItemChecked(5, false);

        showNormal();
    } else {
        this->screen = 1;
        mnu_view->setItemChecked(5, true); 
        showFullScreen();
    }
}

void Shellwidget::_onOpen()
{

    
    QDir oldDir  = QDir::current();
    if (!QDir::setCurrent("Scenes")) {
		QDir::setCurrent(".");
    }

    QString name = QFileDialog::getOpenFileName("Stand.wrl", "*.wrl", 0, "Filedialog", "load File ...");
    const char *file = name.ascii();

    QDir::setCurrent(oldDir.absPath());

    if (file) {

        setCursor(WaitCursor);









		

		try {
			Load l(file);
			l.start();
			QString msg = "loading scene .";		
			waitD->setText(msg);
			waitD->show();
			int i=0;
			while (! l.finished()) {
				qApp->processEvents();
				if (!(i%150000)) {
					waitD->setText(waitD->getText() + ".");
					i=0;
				}
				i++;
			}
			waitD->hide();
			_scene = l.getScene();




			viewer->setScene(_scene);
			
			_info_size = _scene->getWorldInfo(_stand_info);
			setState(SCENE);
		} catch (File::file_exception& e) {
			QMessageBox::critical(this, "Error", e.msg);
			waitD->hide();
		}


        setCursor(ArrowCursor);
    }
}

void Shellwidget::progressCB(const char* text)
{
	setMessage(text);
}



void Shellwidget::_onSave()
 {
    QCString input = QFileDialog::getSaveFileName(QString::null, "*.wrl", this);
    if (input.isEmpty()) return;

    if (input.find(".wrl", 0) < 0) input += ".wrl";
	
    const char *file = (const char *) input;

    if (viewer->saveScene(file))
        QMessageBox::warning(this, "Error!", "unable to save scene!");
}

void Shellwidget::_onConnect() 
{


	ConnectionWizard* wiz = new ConnectionWizard(this);

	if (wiz->exec() == QDialog::Accepted) {
		waitD->setText("requesting Scene ...");
		waitD->show();
		_con = wiz->_c;
		char* data = wiz->_buffer;
		size_t length = wiz->_length;
		_con->send(scenerequest, data, length);
		connect(_con, "2""dataReceived(IO_Flag)",this, "1""_rcv(IO_Flag)" );
	}
























}

void Shellwidget::list() 
{
    listD->show();
}

void Shellwidget::_onChat() 
{
    chatD->show();
}

void Shellwidget::chatDisable() 
{
    if (mnu_view->isItemChecked(4))
        mnu_view->setItemChecked(4, false);
    else
        mnu_view->setItemChecked(4, true);
}

void Shellwidget::_onHelp() 
{
}

void Shellwidget::_onAbout() 
{
    AboutDialog about(this, "About");
    about.exec();
}

void Shellwidget::closeEvent(QCloseEvent *e) 
{
    exit(0);
}





















































void Shellwidget::_rcv(IO_Flag flag) 
{






















	char* errorstring = 0;
	char errortype = -1;
	const char* data;
	size_t size;
	switch(flag) {
		case scene:
				waitD->setText("converting Scene ...");
				_sceneReceived();
			break;
		case scenerequest:
			break;
		case io_master:
				setMaster(true);
			break;
		case io_error:
				size = _con->getSize();
				data = _con->getData();

				memcpy((void *) &errortype, data, 1); 
				errorstring = &((char *) data)[1];
				error((int) errortype, errorstring);
			break;
		case textures:
			break;
		case cur_scenerequest:
				data = _scene->toVRML(size);
				_con->send(scene, data, size);
			break;
		case cur_avatar_pos:
			break;
		case movement:
			break;
		case io_evt:
				data = _con->getData();
				_scene->event(data);
			break;
		case new_client:
			size = 0;
			break;
		case client_gone:
			break;
		case chat:
			_setChat();
	}
}


void Shellwidget::texturesNotFound(const char **list, int length) 
{
    QString             text;
    QString             tmp;
    QStringList         dataToSend;

    text.sprintf("following textures could not be found:\n\n");

    for (int i = 0; i < length ; i++) {
        tmp.sprintf("%s \n", list[i]);
        text += tmp;
        dataToSend += list[i];
    }

    tmp.sprintf("\n");
    text += tmp;
    text += "should i get them from the server?";

    int         button  = QMessageBox::warning(this, "textures are missing!", text,
                                               "Cancel", "OK", 0, 1);
    if (button > 0)
        for (QStringList::Iterator it = dataToSend.begin();
             it != dataToSend.end();
             ++it)
            io->sendData((void *) (*it).ascii(), (*it).length() + 1,
                         IOInterface::texturerequest);
}

void Shellwidget::setMessage(const char *text) 
{
    me->normalMessages->setText(text);
}

void Shellwidget::_onClose() 
{
	viewer->deleteScene();
	viewer->renderArea->hide();
	setState(START);
	


















































}

void Shellwidget::seek() 
{
    viewer->setSeekMode(true);
}

void Shellwidget::_onGrowthGen() 
{
	GrowthGenDialog ggD(this); 
	char* buffer = 0;
	int bufSize = 1;
	QTime time = QTime::currentTime();
	QDate date = QDate::currentDate();
	QString tmp;
	
	int nameSize = 0;
	int maxSize = 0;
	int minSize = 0;

	QStringList namelist;

	const char **names = 0;
	int *minVal = 0;
	int *maxVal = 0;

	int length = _scene->getGGDialogData(names, minVal, maxVal);

	int i = 0;
	while (i < length)
        namelist.append(QString(names[i++]));

    ggD.setValues(namelist, minVal, maxVal);

    if (ggD.exec() == QDialog::Accepted) {
        QString f = ggD.txtFilename->text();
        f += "_";
        f += date.dayName(date.day());
        f += "-";
        f += tmp.setNum(time.hour());
        f += "-";
        f += tmp.setNum(time.minute());
        f += "-";
        f += tmp.setNum(time.second());
        const char *filename = f.ascii();
        int index = growthGenD->cmbGGName->currentItem();
        int intervall = growthGenD->spnIntervall->text().toInt();




        viewer->sendSceneToGG(filename, index, intervall);
    }
}

void Shellwidget::setMaster(bool OnOff) 
{

    if (OnOff) {
		master = true;
        setCaption(caption() + " - Master");
        setState(state | MASTER);
    } else {
		master = false;
        setCaption("Qt Forester");
        setState(state ^ MASTER);
    }
}

void Shellwidget::sceneReceived() 
{
    listD->wd->close();
	setState((STATE) (CONNECTED & SCENE));
}

void Shellwidget::_onCoordinates() 
{
    if (coordAction->isOn()) {
        CoordD->show();
    } else {
        CoordD->hide();
    }
}

void Shellwidget::setCoordinates(float x, float y, float z) 
{
    QString     X;
    QString     Y;
    QString     Z;

    X.setNum(x, 'g', 3);
    Y.setNum(y-1.8f, 'g', 3);
    Z.setNum(z, 'g', 3);

    CoordD->lblXInput->setText(X);
    CoordD->lblYInput->setText(Y);
    CoordD->lblZInput->setText(Z);


}

void Shellwidget::setHeadView(const SbRotation& rot, const SbVec3f& pos)
{
	if (headViewD) {
		headViewD->set(rot, pos);
	}
}


void Shellwidget::error(int errorType, char *text) 
{
    switch (errorType) {
      case 0:
         waitD->hide();
		 QMessageBox::warning(me, "Error", text);

        break;
      case 1:
		  waitD->hide();
        QMessageBox::warning(me, "Error", text);
        _con->send(logout);
		
		setState(START);











		viewer->deleteScene();
        permanentMessages->setText("");
        break;
    }
}

void Shellwidget::avatarChoice() 
{	
	avatarD = new AvatarDialog(this);





	
	SbStringList* avList = new SbStringList;
	QString oldDir = QDir::currentDirPath();
	QStringList t;
	if( QDir::setCurrent("Avatars") || QDir::setCurrent("../Avatars") )
	{
		QDir dir;
		t = dir.entryList("*",QDir::Files);
		int a = t.count();
		
		for (unsigned int i=0; i<t.count() ; i++) {
			avList->append(new SbString(t[i].ascii()) );
		}
	}
	QDir::setCurrent(oldDir);
	
	

	
	
    if (avatarD->exec() == QDialog::Accepted) {
		
        viewer->setAvatarIndex(avatarD->getChoice());
        listD->setAvatarNr(me->avatarD->getChoice());
        list();
    }
}

void Shellwidget::showOriginalStand() 
{









}












































void Shellwidget::_sceneReceived()
{
	
	const char* data = _con->getData();
	size_t size = _con->getSize();

	_scene = new Scene;
	
	if (!(_scene->convert(data, size))) {
		QMessageBox::critical(this,"Error","unable to show the scene!");
		return;
	}

	if (_scene == 0) {
		QMessageBox::critical(this,"Error","unable to show the scene!");
		return;
	}
	waitD->hide();



	viewer->setScene(_scene);
	viewer->renderArea->show();

	setState(CONNECTED|SCENE);
	


}

void Shellwidget::_setChat()
{
	int size = _con->getSize();
	const char* data = _con->getData();






	chatD->setText(data);
}

void Shellwidget::_onHeadView()
{
	if (headViewAction->isOn()) {
		headViewD->setScene(_scene);
		headViewD->show();
	} else {
		headViewD->hide();
	}
}


void Shellwidget::setState(int s)
{
	old_state = state;
	state = s;

	int t;

	
	openAction->setEnabled( t = s ^ SCENE );	
	saveAction->setEnabled( t = s & SCENE );
	closeAction->setEnabled( t = s & SCENE );
	ggAction->setEnabled( t = s & MASTER );
	hideAction->setEnabled( t = s & SCENE );
	coordAction->setEnabled( t = s & SCENE );
	chatAction->setEnabled( t = s & CONNECTED | SCENE );
	infoAction->setEnabled( t = s & SCENE );
	headViewAction->setEnabled( t = s & SCENE );
}







